
RTLS_UWB_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b724  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800b838  0800b838  0001b838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde4  0800bde4  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bde4  0800bde4  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bde4  0800bde4  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde8  0800bde8  0001bde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800bdec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000260  0800c048  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800c048  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e041  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258b  00000000  00000000  0002e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000315a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001961e  00000000  00000000  000321f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebec  00000000  00000000  0004b80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008830a  00000000  00000000  0005a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d48  00000000  00000000  000e2754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b81c 	.word	0x0800b81c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800b81c 	.word	0x0800b81c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4605      	mov	r5, r0
 800118c:	460c      	mov	r4, r1
 800118e:	2200      	movs	r2, #0
 8001190:	2300      	movs	r3, #0
 8001192:	4628      	mov	r0, r5
 8001194:	4621      	mov	r1, r4
 8001196:	f7ff fc11 	bl	80009bc <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f908 	bl	80003e4 <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f97e 	bl	80004d8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7fe ffc0 	bl	8000168 <__aeabi_dsub>
 80011e8:	f7ff fc4e 	bl	8000a88 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WAKEUP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2112      	movs	r1, #18
 8001258:	4820      	ldr	r0, [pc, #128]	; (80012dc <MX_GPIO_Init+0xe4>)
 800125a:	f003 fbf7 	bl	8004a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|LED_ACT_Pin|LED_ERR_Pin|LED_SYS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	213a      	movs	r1, #58	; 0x3a
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <MX_GPIO_Init+0xe8>)
 8001264:	f003 fbf2 	bl	8004a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTON_Pin;
 8001268:	2301      	movs	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXTON_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_GPIO_Init+0xe4>)
 800127c:	f003 fa62 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin|SPI1_CS_Pin;
 8001280:	2312      	movs	r3, #18
 8001282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2302      	movs	r3, #2
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <MX_GPIO_Init+0xe4>)
 8001298:	f003 fa54 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_GPIO_Init+0xe8>)
 80012b0:	f003 fa48 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_ACT_Pin|LED_ERR_Pin|LED_SYS_Pin;
 80012b4:	233a      	movs	r3, #58	; 0x3a
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_GPIO_Init+0xe8>)
 80012cc:	f003 fa3a 	bl	8004744 <HAL_GPIO_Init>

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <dwInteruptHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dwInteruptHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  dwReadSystemEventStatusRegister(&device);
 80012e8:	481e      	ldr	r0, [pc, #120]	; (8001364 <dwInteruptHandler+0x80>)
 80012ea:	f000 ffd4 	bl	8002296 <dwReadSystemEventStatusRegister>
  if (dwIsTransmitDone(&device))
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <dwInteruptHandler+0x80>)
 80012f0:	f001 feac 	bl	800304c <dwIsTransmitDone>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <dwInteruptHandler+0x22>
  {
    dwClearTransmitStatus(&device);
 80012fa:	481a      	ldr	r0, [pc, #104]	; (8001364 <dwInteruptHandler+0x80>)
 80012fc:	f001 ff78 	bl	80031f0 <dwClearTransmitStatus>
    sentAck = true;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <dwInteruptHandler+0x84>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
  }
  if (dwIsReceiveDone(&device))
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <dwInteruptHandler+0x80>)
 8001308:	f001 fec0 	bl	800308c <dwIsReceiveDone>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <dwInteruptHandler+0x3a>
  {
    dwClearReceiveStatus(&device);
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <dwInteruptHandler+0x80>)
 8001314:	f001 ff5a 	bl	80031cc <dwClearReceiveStatus>
    recievedAck = true;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <dwInteruptHandler+0x88>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
  }
  if (dwIsReceiveTimestampAvailable(&device))
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <dwInteruptHandler+0x80>)
 8001320:	f001 fea4 	bl	800306c <dwIsReceiveTimestampAvailable>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <dwInteruptHandler+0x4c>
  {
    dwClearReceiveTimestampAvailableStatus(&device);
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <dwInteruptHandler+0x80>)
 800132c:	f001 ff32 	bl	8003194 <dwClearReceiveTimestampAvailableStatus>
  }
  if (dwIsReceiveFailed(&device))
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <dwInteruptHandler+0x80>)
 8001332:	f001 fec9 	bl	80030c8 <dwIsReceiveFailed>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <dwInteruptHandler+0x64>
  {
    dwClearReceiveStatus(&device);
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <dwInteruptHandler+0x80>)
 800133e:	f001 ff45 	bl	80031cc <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <dwInteruptHandler+0x80>)
 8001344:	f000 ff58 	bl	80021f8 <dwRxSoftReset>
  }
  if (dwIsReceiveTimeout(&device))
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <dwInteruptHandler+0x80>)
 800134a:	f001 ff13 	bl	8003174 <dwIsReceiveTimeout>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <dwInteruptHandler+0x7c>
  {
    dwClearReceiveStatus(&device);
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <dwInteruptHandler+0x80>)
 8001356:	f001 ff39 	bl	80031cc <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 800135a:	4802      	ldr	r0, [pc, #8]	; (8001364 <dwInteruptHandler+0x80>)
 800135c:	f000 ff4c 	bl	80021f8 <dwRxSoftReset>
  }
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	200003ad 	.word	0x200003ad
 800136c:	200003ae 	.word	0x200003ae

08001370 <clearAllFlag>:

void clearAllFlag(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  dwClearTransmitStatus(&device);
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <clearAllFlag+0x14>)
 8001376:	f001 ff3b 	bl	80031f0 <dwClearTransmitStatus>
  dwClearReceiveStatus(&device);
 800137a:	4802      	ldr	r0, [pc, #8]	; (8001384 <clearAllFlag+0x14>)
 800137c:	f001 ff26 	bl	80031cc <dwClearReceiveStatus>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000

08001388 <log_data>:

void log_data(char *string)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7fe fedd 	bl	8000150 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	b29a      	uxth	r2, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <log_data+0x28>)
 80013a2:	f004 fe57 	bl	8006054 <HAL_UART_Transmit>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000040c 	.word	0x2000040c

080013b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013bc:	f002 ff7c 	bl	80042b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c0:	f000 fa04 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c4:	f7ff ff18 	bl	80011f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013c8:	f000 fa4a 	bl	8001860 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013cc:	f000 fc04 	bl	8001bd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  log_data("[ANCHOR START]\r\n");
 80013d0:	4896      	ldr	r0, [pc, #600]	; (800162c <main+0x278>)
 80013d2:	f7ff ffd9 	bl	8001388 <log_data>
  MAC80215_PACKET_INIT(txPacket, MAC802154_TYPE_DATA);
 80013d6:	4a96      	ldr	r2, [pc, #600]	; (8001630 <main+0x27c>)
 80013d8:	7813      	ldrb	r3, [r2, #0]
 80013da:	2101      	movs	r1, #1
 80013dc:	f361 0302 	bfi	r3, r1, #0, #3
 80013e0:	7013      	strb	r3, [r2, #0]
 80013e2:	4a93      	ldr	r2, [pc, #588]	; (8001630 <main+0x27c>)
 80013e4:	7813      	ldrb	r3, [r2, #0]
 80013e6:	f36f 03c3 	bfc	r3, #3, #1
 80013ea:	7013      	strb	r3, [r2, #0]
 80013ec:	4a90      	ldr	r2, [pc, #576]	; (8001630 <main+0x27c>)
 80013ee:	7813      	ldrb	r3, [r2, #0]
 80013f0:	f36f 1304 	bfc	r3, #4, #1
 80013f4:	7013      	strb	r3, [r2, #0]
 80013f6:	4a8e      	ldr	r2, [pc, #568]	; (8001630 <main+0x27c>)
 80013f8:	7813      	ldrb	r3, [r2, #0]
 80013fa:	f36f 1345 	bfc	r3, #5, #1
 80013fe:	7013      	strb	r3, [r2, #0]
 8001400:	4a8b      	ldr	r2, [pc, #556]	; (8001630 <main+0x27c>)
 8001402:	7813      	ldrb	r3, [r2, #0]
 8001404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001408:	7013      	strb	r3, [r2, #0]
 800140a:	4a89      	ldr	r2, [pc, #548]	; (8001630 <main+0x27c>)
 800140c:	7853      	ldrb	r3, [r2, #1]
 800140e:	2102      	movs	r1, #2
 8001410:	f361 0383 	bfi	r3, r1, #2, #2
 8001414:	7053      	strb	r3, [r2, #1]
 8001416:	4a86      	ldr	r2, [pc, #536]	; (8001630 <main+0x27c>)
 8001418:	7853      	ldrb	r3, [r2, #1]
 800141a:	2101      	movs	r1, #1
 800141c:	f361 1305 	bfi	r3, r1, #4, #2
 8001420:	7053      	strb	r3, [r2, #1]
 8001422:	4a83      	ldr	r2, [pc, #524]	; (8001630 <main+0x27c>)
 8001424:	7853      	ldrb	r3, [r2, #1]
 8001426:	2102      	movs	r1, #2
 8001428:	f361 1387 	bfi	r3, r1, #6, #2
 800142c:	7053      	strb	r3, [r2, #1]
 800142e:	4b80      	ldr	r3, [pc, #512]	; (8001630 <main+0x27c>)
 8001430:	2200      	movs	r2, #0
 8001432:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8001436:	70da      	strb	r2, [r3, #3]
 8001438:	2200      	movs	r2, #0
 800143a:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800143e:	711a      	strb	r2, [r3, #4]
  MAC80215_PACKET_INIT(rxPacket, MAC802154_TYPE_DATA);
 8001440:	4a7c      	ldr	r2, [pc, #496]	; (8001634 <main+0x280>)
 8001442:	7813      	ldrb	r3, [r2, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	f361 0302 	bfi	r3, r1, #0, #3
 800144a:	7013      	strb	r3, [r2, #0]
 800144c:	4a79      	ldr	r2, [pc, #484]	; (8001634 <main+0x280>)
 800144e:	7813      	ldrb	r3, [r2, #0]
 8001450:	f36f 03c3 	bfc	r3, #3, #1
 8001454:	7013      	strb	r3, [r2, #0]
 8001456:	4a77      	ldr	r2, [pc, #476]	; (8001634 <main+0x280>)
 8001458:	7813      	ldrb	r3, [r2, #0]
 800145a:	f36f 1304 	bfc	r3, #4, #1
 800145e:	7013      	strb	r3, [r2, #0]
 8001460:	4a74      	ldr	r2, [pc, #464]	; (8001634 <main+0x280>)
 8001462:	7813      	ldrb	r3, [r2, #0]
 8001464:	f36f 1345 	bfc	r3, #5, #1
 8001468:	7013      	strb	r3, [r2, #0]
 800146a:	4a72      	ldr	r2, [pc, #456]	; (8001634 <main+0x280>)
 800146c:	7813      	ldrb	r3, [r2, #0]
 800146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001472:	7013      	strb	r3, [r2, #0]
 8001474:	4a6f      	ldr	r2, [pc, #444]	; (8001634 <main+0x280>)
 8001476:	7853      	ldrb	r3, [r2, #1]
 8001478:	2102      	movs	r1, #2
 800147a:	f361 0383 	bfi	r3, r1, #2, #2
 800147e:	7053      	strb	r3, [r2, #1]
 8001480:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <main+0x280>)
 8001482:	7853      	ldrb	r3, [r2, #1]
 8001484:	2101      	movs	r1, #1
 8001486:	f361 1305 	bfi	r3, r1, #4, #2
 800148a:	7053      	strb	r3, [r2, #1]
 800148c:	4a69      	ldr	r2, [pc, #420]	; (8001634 <main+0x280>)
 800148e:	7853      	ldrb	r3, [r2, #1]
 8001490:	2102      	movs	r1, #2
 8001492:	f361 1387 	bfi	r3, r1, #6, #2
 8001496:	7053      	strb	r3, [r2, #1]
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <main+0x280>)
 800149a:	2200      	movs	r2, #0
 800149c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80014a0:	70da      	strb	r2, [r3, #3]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80014a8:	711a      	strb	r2, [r3, #4]
  // init DW1000
  dwInit(&device);
 80014aa:	4863      	ldr	r0, [pc, #396]	; (8001638 <main+0x284>)
 80014ac:	f000 fcfa 	bl	8001ea4 <dwInit>
  if (dwConfigure(&device) == DW_ERROR_OK)
 80014b0:	4861      	ldr	r0, [pc, #388]	; (8001638 <main+0x284>)
 80014b2:	f000 fd19 	bl	8001ee8 <dwConfigure>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10e      	bne.n	80014da <main+0x126>
  {
    dwEnableAllLeds(&device);
 80014bc:	485e      	ldr	r0, [pc, #376]	; (8001638 <main+0x284>)
 80014be:	f000 fde6 	bl	800208e <dwEnableAllLeds>
  {
    log_data("[Configure failed]");
    while (1)
      ;
  }
  dwNewConfiguration(&device);
 80014c2:	485d      	ldr	r0, [pc, #372]	; (8001638 <main+0x284>)
 80014c4:	f001 f976 	bl	80027b4 <dwNewConfiguration>
  dwSetDefaults(&device);
 80014c8:	485b      	ldr	r0, [pc, #364]	; (8001638 <main+0x284>)
 80014ca:	f001 fb6c 	bl	8002ba6 <dwSetDefaults>
  dwCommitConfiguration(&device);
 80014ce:	485a      	ldr	r0, [pc, #360]	; (8001638 <main+0x284>)
 80014d0:	f001 f98a 	bl	80027e8 <dwCommitConfiguration>
  clearAllFlag();
 80014d4:	f7ff ff4c 	bl	8001370 <clearAllFlag>
 80014d8:	e003      	b.n	80014e2 <main+0x12e>
    log_data("[Configure failed]");
 80014da:	4858      	ldr	r0, [pc, #352]	; (800163c <main+0x288>)
 80014dc:	f7ff ff54 	bl	8001388 <log_data>
    while (1)
 80014e0:	e7fe      	b.n	80014e0 <main+0x12c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    dwInteruptHandler();
 80014e2:	f7ff feff 	bl	80012e4 <dwInteruptHandler>
    // init receive range
    if (initAck)
 80014e6:	4b56      	ldr	r3, [pc, #344]	; (8001640 <main+0x28c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d015      	beq.n	800151c <main+0x168>
    {
      initAck = false;
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <main+0x28c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
      memset(&txPacket, 0, sizeof(txPacket));
 80014f6:	2289      	movs	r2, #137	; 0x89
 80014f8:	2100      	movs	r1, #0
 80014fa:	484d      	ldr	r0, [pc, #308]	; (8001630 <main+0x27c>)
 80014fc:	f005 fbc6 	bl	8006c8c <memset>
      memset(&rxPacket, 0, sizeof(rxPacket));
 8001500:	2289      	movs	r2, #137	; 0x89
 8001502:	2100      	movs	r1, #0
 8001504:	484b      	ldr	r0, [pc, #300]	; (8001634 <main+0x280>)
 8001506:	f005 fbc1 	bl	8006c8c <memset>
      dwNewReceive(&device);
 800150a:	484b      	ldr	r0, [pc, #300]	; (8001638 <main+0x284>)
 800150c:	f001 f8a8 	bl	8002660 <dwNewReceive>
      dwSetDefaults(&device);
 8001510:	4849      	ldr	r0, [pc, #292]	; (8001638 <main+0x284>)
 8001512:	f001 fb48 	bl	8002ba6 <dwSetDefaults>
      dwStartReceive(&device);
 8001516:	4848      	ldr	r0, [pc, #288]	; (8001638 <main+0x284>)
 8001518:	f001 f8ba 	bl	8002690 <dwStartReceive>
    }

    if (recievedAck)
 800151c:	4b49      	ldr	r3, [pc, #292]	; (8001644 <main+0x290>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80f3 	beq.w	800170e <main+0x35a>
    {
      recievedAck = false;
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <main+0x290>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
      log_data("RxCallback\r\n");
 800152e:	4846      	ldr	r0, [pc, #280]	; (8001648 <main+0x294>)
 8001530:	f7ff ff2a 	bl	8001388 <log_data>
      dwTimestamp_t arival;
      // check data length
      int datalength = dwGetDataLength(&device);
 8001534:	4840      	ldr	r0, [pc, #256]	; (8001638 <main+0x284>)
 8001536:	f001 fbc3 	bl	8002cc0 <dwGetDataLength>
 800153a:	4603      	mov	r3, r0
 800153c:	617b      	str	r3, [r7, #20]
      if (datalength == 0)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <main+0x194>
      {
        return 0;
 8001544:	2300      	movs	r3, #0
 8001546:	e120      	b.n	800178a <main+0x3d6>
      }
      memset(&rxPacket, 0, sizeof(rxPacket));
 8001548:	2289      	movs	r2, #137	; 0x89
 800154a:	2100      	movs	r1, #0
 800154c:	4839      	ldr	r0, [pc, #228]	; (8001634 <main+0x280>)
 800154e:	f005 fb9d 	bl	8006c8c <memset>

      // get data from tag and out in rxPacket
      dwGetData(&device, (uint8_t *)&rxPacket, datalength);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	461a      	mov	r2, r3
 8001556:	4937      	ldr	r1, [pc, #220]	; (8001634 <main+0x280>)
 8001558:	4837      	ldr	r0, [pc, #220]	; (8001638 <main+0x284>)
 800155a:	f001 fbe9 	bl	8002d30 <dwGetData>
      // check address of anchor due to tag send
      // correct return 0
      if (memcmp(rxPacket.destAddress, anchorAddress, 2))
 800155e:	2202      	movs	r2, #2
 8001560:	493a      	ldr	r1, [pc, #232]	; (800164c <main+0x298>)
 8001562:	483b      	ldr	r0, [pc, #236]	; (8001650 <main+0x29c>)
 8001564:	f005 fb74 	bl	8006c50 <memcmp>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <main+0x1d0>
      {
        // wrong address and repeat receive
        dwNewReceive(&device);
 800156e:	4832      	ldr	r0, [pc, #200]	; (8001638 <main+0x284>)
 8001570:	f001 f876 	bl	8002660 <dwNewReceive>
        dwSetDefaults(&device);
 8001574:	4830      	ldr	r0, [pc, #192]	; (8001638 <main+0x284>)
 8001576:	f001 fb16 	bl	8002ba6 <dwSetDefaults>
        dwStartReceive(&device);
 800157a:	482f      	ldr	r0, [pc, #188]	; (8001638 <main+0x284>)
 800157c:	f001 f888 	bl	8002690 <dwStartReceive>
        return 0;
 8001580:	2300      	movs	r3, #0
 8001582:	e102      	b.n	800178a <main+0x3d6>
      }
      else
      {
        // oke address
        switch (rxPacket.payload[TYPE])
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <main+0x280>)
 8001586:	7a5b      	ldrb	r3, [r3, #9]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d002      	beq.n	8001592 <main+0x1de>
 800158c:	2b03      	cmp	r3, #3
 800158e:	d041      	beq.n	8001614 <main+0x260>
 8001590:	e0bd      	b.n	800170e <main+0x35a>
        {
        case POLL:
          log_data("POLL\r\n");
 8001592:	4830      	ldr	r0, [pc, #192]	; (8001654 <main+0x2a0>)
 8001594:	f7ff fef8 	bl	8001388 <log_data>
          if (rxPacket.payload[SEQ] != 1) // 1
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <main+0x280>)
 800159a:	7a9b      	ldrb	r3, [r3, #10]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d004      	beq.n	80015aa <main+0x1f6>
          {
            log_data("wrong sequence number\r\n");
 80015a0:	482d      	ldr	r0, [pc, #180]	; (8001658 <main+0x2a4>)
 80015a2:	f7ff fef1 	bl	8001388 <log_data>
            return 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e0ef      	b.n	800178a <main+0x3d6>
          }
          dwGetReceiveTimestamp(&device, &arival);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4619      	mov	r1, r3
 80015b0:	4821      	ldr	r0, [pc, #132]	; (8001638 <main+0x284>)
 80015b2:	f001 fbe4 	bl	8002d7e <dwGetReceiveTimestamp>
          arival.timeFull -= ANTENNA_DELAY;
 80015b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015ba:	4928      	ldr	r1, [pc, #160]	; (800165c <main+0x2a8>)
 80015bc:	1854      	adds	r4, r2, r1
 80015be:	f143 35ff 	adc.w	r5, r3, #4294967295
 80015c2:	e9c7 4502 	strd	r4, r5, [r7, #8]
          poll_rx = arival;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <main+0x2ac>)
 80015c8:	461a      	mov	r2, r3
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015d2:	e882 0003 	stmia.w	r2, {r0, r1}

          txPacket.payload[TYPE] = ANSWER;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <main+0x27c>)
 80015d8:	2202      	movs	r2, #2
 80015da:	725a      	strb	r2, [r3, #9]
          txPacket.payload[SEQ] = 2; // rxPacket.payload[SEQ] + 1; // 2
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <main+0x27c>)
 80015de:	2202      	movs	r2, #2
 80015e0:	729a      	strb	r2, [r3, #10]
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <main+0x2b0>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
          memcpy(txPacket.destAddress, tagBaseAddr, 2);
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <main+0x27c>)
 80015e8:	f8a2 3005 	strh.w	r3, [r2, #5]
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <main+0x298>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
          memcpy(txPacket.sourceAddress, anchorAddress, 2);
 80015f0:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <main+0x27c>)
 80015f2:	f8a2 3007 	strh.w	r3, [r2, #7]
          dwNewTransmit(&device);
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <main+0x284>)
 80015f8:	f001 f876 	bl	80026e8 <dwNewTransmit>
          dwSetDefaults(&device);
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <main+0x284>)
 80015fe:	f001 fad2 	bl	8002ba6 <dwSetDefaults>
          dwSetData(&device, (uint8_t *)&txPacket, MAC802154_HEADER_LENGTH + 2);
 8001602:	220b      	movs	r2, #11
 8001604:	490a      	ldr	r1, [pc, #40]	; (8001630 <main+0x27c>)
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <main+0x284>)
 8001608:	f001 fb18 	bl	8002c3c <dwSetData>
          dwStartTransmit(&device);
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <main+0x284>)
 800160e:	f001 f883 	bl	8002718 <dwStartTransmit>
          break;
 8001612:	e07c      	b.n	800170e <main+0x35a>

        case FINAL:
          log_data("FINAL\r\n");
 8001614:	4814      	ldr	r0, [pc, #80]	; (8001668 <main+0x2b4>)
 8001616:	f7ff feb7 	bl	8001388 <log_data>
          if (rxPacket.payload[SEQ] != 3) // 3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <main+0x280>)
 800161c:	7a9b      	ldrb	r3, [r3, #10]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d024      	beq.n	800166c <main+0x2b8>
          {
            log_data("wrong sequence number\r\n");
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <main+0x2a4>)
 8001624:	f7ff feb0 	bl	8001388 <log_data>
            return 0;
 8001628:	2300      	movs	r3, #0
 800162a:	e0ae      	b.n	800178a <main+0x3d6>
 800162c:	0800b838 	.word	0x0800b838
 8001630:	20000324 	.word	0x20000324
 8001634:	20000298 	.word	0x20000298
 8001638:	20000000 	.word	0x20000000
 800163c:	0800b84c 	.word	0x0800b84c
 8001640:	20000064 	.word	0x20000064
 8001644:	200003ae 	.word	0x200003ae
 8001648:	0800b860 	.word	0x0800b860
 800164c:	2000005c 	.word	0x2000005c
 8001650:	2000029d 	.word	0x2000029d
 8001654:	0800b870 	.word	0x0800b870
 8001658:	0800b878 	.word	0x0800b878
 800165c:	ffffbfa5 	.word	0xffffbfa5
 8001660:	20000280 	.word	0x20000280
 8001664:	20000058 	.word	0x20000058
 8001668:	0800b890 	.word	0x0800b890
          }

          dwGetReceiveTimestamp(&device, &arival);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	4848      	ldr	r0, [pc, #288]	; (8001794 <main+0x3e0>)
 8001674:	f001 fb83 	bl	8002d7e <dwGetReceiveTimestamp>
          arival.timeFull -= ANTENNA_DELAY;
 8001678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800167c:	4946      	ldr	r1, [pc, #280]	; (8001798 <main+0x3e4>)
 800167e:	eb12 0801 	adds.w	r8, r2, r1
 8001682:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001686:	e9c7 8902 	strd	r8, r9, [r7, #8]
          final_rx = arival;
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <main+0x3e8>)
 800168c:	461a      	mov	r2, r3
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001696:	e882 0003 	stmia.w	r2, {r0, r1}

          memset(&txPacket, 0, sizeof(txPacket));
 800169a:	2289      	movs	r2, #137	; 0x89
 800169c:	2100      	movs	r1, #0
 800169e:	4840      	ldr	r0, [pc, #256]	; (80017a0 <main+0x3ec>)
 80016a0:	f005 faf4 	bl	8006c8c <memset>

          reportPayload_t *reportmess = (reportPayload_t *)(txPacket.payload + 2);
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <main+0x3f0>)
 80016a6:	613b      	str	r3, [r7, #16]

          txPacket.payload[TYPE] = REPORT;
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <main+0x3ec>)
 80016aa:	2204      	movs	r2, #4
 80016ac:	725a      	strb	r2, [r3, #9]
          txPacket.payload[SEQ] = 4; // rxPacket.payload[SEQ] + 1; // 4
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <main+0x3ec>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	729a      	strb	r2, [r3, #10]
 80016b4:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <main+0x3f4>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
          memcpy(txPacket.destAddress, tagBaseAddr, 2);
 80016b8:	4a39      	ldr	r2, [pc, #228]	; (80017a0 <main+0x3ec>)
 80016ba:	f8a2 3005 	strh.w	r3, [r2, #5]
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <main+0x3f8>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
          memcpy(txPacket.sourceAddress, anchorAddress, 2);
 80016c2:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <main+0x3ec>)
 80016c4:	f8a2 3007 	strh.w	r3, [r2, #7]
          memcpy(&reportmess->pollRx, &poll_rx, 5);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2205      	movs	r2, #5
 80016cc:	4938      	ldr	r1, [pc, #224]	; (80017b0 <main+0x3fc>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 face 	bl	8006c70 <memcpy>
          memcpy(&reportmess->answerTx, &answer_tx, 5);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	3305      	adds	r3, #5
 80016d8:	2205      	movs	r2, #5
 80016da:	4936      	ldr	r1, [pc, #216]	; (80017b4 <main+0x400>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 fac7 	bl	8006c70 <memcpy>
          memcpy(&reportmess->finalRx, &final_rx, 5);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	330a      	adds	r3, #10
 80016e6:	2205      	movs	r2, #5
 80016e8:	492c      	ldr	r1, [pc, #176]	; (800179c <main+0x3e8>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 fac0 	bl	8006c70 <memcpy>
          dwNewTransmit(&device);
 80016f0:	4828      	ldr	r0, [pc, #160]	; (8001794 <main+0x3e0>)
 80016f2:	f000 fff9 	bl	80026e8 <dwNewTransmit>
          dwSetDefaults(&device);
 80016f6:	4827      	ldr	r0, [pc, #156]	; (8001794 <main+0x3e0>)
 80016f8:	f001 fa55 	bl	8002ba6 <dwSetDefaults>
          dwSetData(&device, (uint8_t *)&txPacket, MAC802154_HEADER_LENGTH + 2 + sizeof(reportPayload_t));
 80016fc:	221a      	movs	r2, #26
 80016fe:	4928      	ldr	r1, [pc, #160]	; (80017a0 <main+0x3ec>)
 8001700:	4824      	ldr	r0, [pc, #144]	; (8001794 <main+0x3e0>)
 8001702:	f001 fa9b 	bl	8002c3c <dwSetData>
          dwStartTransmit(&device);
 8001706:	4823      	ldr	r0, [pc, #140]	; (8001794 <main+0x3e0>)
 8001708:	f001 f806 	bl	8002718 <dwStartTransmit>
          break;
 800170c:	bf00      	nop
        }
      }
    }

    if (sentAck)
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <main+0x404>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	f43f aee4 	beq.w	80014e2 <main+0x12e>
    {
      sentAck = false;
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <main+0x404>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
      dwTimestamp_t departure;
      dwGetTransmitTimestamp(&device, &departure);
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	481b      	ldr	r0, [pc, #108]	; (8001794 <main+0x3e0>)
 8001726:	f001 fb19 	bl	8002d5c <dwGetTransmitTimestamp>
      departure.timeFull += ANTENNA_DELAY;
 800172a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800172e:	f244 015b 	movw	r1, #16475	; 0x405b
 8001732:	eb12 0a01 	adds.w	sl, r2, r1
 8001736:	f143 0b00 	adc.w	fp, r3, #0
 800173a:	e9c7 ab00 	strd	sl, fp, [r7]
      log_data("TxCallback\r\n");
 800173e:	481f      	ldr	r0, [pc, #124]	; (80017bc <main+0x408>)
 8001740:	f7ff fe22 	bl	8001388 <log_data>
      switch (txPacket.payload[TYPE])
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <main+0x3ec>)
 8001746:	7a5b      	ldrb	r3, [r3, #9]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d002      	beq.n	8001752 <main+0x39e>
 800174c:	2b04      	cmp	r3, #4
 800174e:	d014      	beq.n	800177a <main+0x3c6>
 8001750:	e01a      	b.n	8001788 <main+0x3d4>
      {
      case ANSWER:
        log_data("ANSWER\r\n");
 8001752:	481b      	ldr	r0, [pc, #108]	; (80017c0 <main+0x40c>)
 8001754:	f7ff fe18 	bl	8001388 <log_data>
        answer_tx = departure;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <main+0x400>)
 800175a:	461a      	mov	r2, r3
 800175c:	463b      	mov	r3, r7
 800175e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001762:	e882 0003 	stmia.w	r2, {r0, r1}
        dwNewReceive(&device);
 8001766:	480b      	ldr	r0, [pc, #44]	; (8001794 <main+0x3e0>)
 8001768:	f000 ff7a 	bl	8002660 <dwNewReceive>
        dwSetDefaults(&device);
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <main+0x3e0>)
 800176e:	f001 fa1a 	bl	8002ba6 <dwSetDefaults>
        dwStartReceive(&device);
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <main+0x3e0>)
 8001774:	f000 ff8c 	bl	8002690 <dwStartReceive>
        break;
 8001778:	e006      	b.n	8001788 <main+0x3d4>
      case REPORT:
        log_data("REPORT\r\n");
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <main+0x410>)
 800177c:	f7ff fe04 	bl	8001388 <log_data>
        //curr_seq = 1;
        initAck = true;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <main+0x414>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
        break;
 8001786:	bf00      	nop
    dwInteruptHandler();
 8001788:	e6ab      	b.n	80014e2 <main+0x12e>
      //       dwSetReceiveWaitTimeout(&device, RX_TIMEOUT);
      // dwWriteSystemConfigurationRegister(&device);
    }
  }
  /* USER CODE END 3 */
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001794:	20000000 	.word	0x20000000
 8001798:	ffffbfa5 	.word	0xffffbfa5
 800179c:	20000290 	.word	0x20000290
 80017a0:	20000324 	.word	0x20000324
 80017a4:	2000032f 	.word	0x2000032f
 80017a8:	20000058 	.word	0x20000058
 80017ac:	2000005c 	.word	0x2000005c
 80017b0:	20000280 	.word	0x20000280
 80017b4:	20000288 	.word	0x20000288
 80017b8:	200003ad 	.word	0x200003ad
 80017bc:	0800b898 	.word	0x0800b898
 80017c0:	0800b8a8 	.word	0x0800b8a8
 80017c4:	0800b8b4 	.word	0x0800b8b4
 80017c8:	20000064 	.word	0x20000064

080017cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b090      	sub	sp, #64	; 0x40
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	2228      	movs	r2, #40	; 0x28
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 fa56 	bl	8006c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001800:	2302      	movs	r3, #2
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800180a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f931 	bl	8004a7c <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001820:	f000 f819 	bl	8001856 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001824:	230f      	movs	r3, #15
 8001826:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2302      	movs	r3, #2
 800182a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2102      	movs	r1, #2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fb9e 	bl	8004f80 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800184a:	f000 f804 	bl	8001856 <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3740      	adds	r7, #64	; 0x40
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185a:	b672      	cpsid	i
}
 800185c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185e:	e7fe      	b.n	800185e <Error_Handler+0x8>

08001860 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <MX_SPI1_Init+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI1_Init+0x64>)
 800186c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI1_Init+0x64>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001894:	2208      	movs	r2, #8
 8001896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018b2:	f003 fcf3 	bl	800529c <HAL_SPI_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018bc:	f7ff ffcb 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200003b0 	.word	0x200003b0
 80018c8:	40013000 	.word	0x40013000

080018cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <HAL_SPI_MspInit+0x98>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d137      	bne.n	800195c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_SPI_MspInit+0x9c>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_SPI_MspInit+0x9c>)
 80018f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_SPI_MspInit+0x9c>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_SPI_MspInit+0x9c>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_SPI_MspInit+0x9c>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_SPI_MspInit+0x9c>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800191c:	23a0      	movs	r3, #160	; 0xa0
 800191e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	4619      	mov	r1, r3
 800192e:	480f      	ldr	r0, [pc, #60]	; (800196c <HAL_SPI_MspInit+0xa0>)
 8001930:	f002 ff08 	bl	8004744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001934:	2340      	movs	r3, #64	; 0x40
 8001936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <HAL_SPI_MspInit+0xa0>)
 8001948:	f002 fefc 	bl	8004744 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2023      	movs	r0, #35	; 0x23
 8001952:	f002 fe0e 	bl	8004572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001956:	2023      	movs	r0, #35	; 0x23
 8001958:	f002 fe27 	bl	80045aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013000 	.word	0x40013000
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_MspInit+0x5c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_MspInit+0x5c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_MspInit+0x60>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_MspInit+0x60>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1a:	f002 fc93 	bl	8004344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <SPI1_IRQHandler+0x10>)
 8001a2a:	f004 f8c7 	bl	8005bbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200003b0 	.word	0x200003b0

08001a38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <USART1_IRQHandler+0x10>)
 8001a3e:	f004 fb8d 	bl	800615c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000040c 	.word	0x2000040c

08001a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <_kill>:

int _kill(int pid, int sig)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a64:	f005 f8ca 	bl	8006bfc <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2216      	movs	r2, #22
 8001a6c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_exit>:

void _exit (int status)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a82:	f04f 31ff 	mov.w	r1, #4294967295
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffe7 	bl	8001a5a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a8c:	e7fe      	b.n	8001a8c <_exit+0x12>

08001a8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e00a      	b.n	8001ab6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa0:	f3af 8000 	nop.w
 8001aa4:	4601      	mov	r1, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	60ba      	str	r2, [r7, #8]
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dbf0      	blt.n	8001aa0 <_read+0x12>
  }

  return len;
 8001abe:	687b      	ldr	r3, [r7, #4]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e009      	b.n	8001aee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	dbf1      	blt.n	8001ada <_write+0x12>
  }
  return len;
 8001af6:	687b      	ldr	r3, [r7, #4]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_close>:

int _close(int file)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b26:	605a      	str	r2, [r3, #4]
  return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <_isatty>:

int _isatty(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f005 f834 	bl	8006bfc <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20005000 	.word	0x20005000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	20000408 	.word	0x20000408
 8001bc8:	200004e8 	.word	0x200004e8

08001bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <MX_USART1_UART_Init+0x50>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001c10:	f004 f9d0 	bl	8005fb4 <HAL_UART_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c1a:	f7ff fe1c 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000040c 	.word	0x2000040c
 8001c28:	40013800 	.word	0x40013800

08001c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_UART_MspInit+0x9c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d139      	bne.n	8001cc0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_UART_MspInit+0xa0>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_UART_MspInit+0xa0>)
 8001c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_UART_MspInit+0xa0>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0xa0>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_UART_MspInit+0xa0>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0xa0>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <HAL_UART_MspInit+0xa4>)
 8001c92:	f002 fd57 	bl	8004744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <HAL_UART_MspInit+0xa4>)
 8001cac:	f002 fd4a 	bl	8004744 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2025      	movs	r0, #37	; 0x25
 8001cb6:	f002 fc5c 	bl	8004572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cba:	2025      	movs	r0, #37	; 0x25
 8001cbc:	f002 fc75 	bl	80045aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010800 	.word	0x40010800

08001cd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd4:	f7ff ff7a 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd8:	480b      	ldr	r0, [pc, #44]	; (8001d08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cda:	490c      	ldr	r1, [pc, #48]	; (8001d0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cf0:	4c09      	ldr	r4, [pc, #36]	; (8001d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfe:	f004 ff83 	bl	8006c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d02:	f7ff fb57 	bl	80013b4 <main>
  bx lr
 8001d06:	4770      	bx	lr
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8001d10:	0800bdec 	.word	0x0800bdec
  ldr r2, =_sbss
 8001d14:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8001d18:	200004e8 	.word	0x200004e8

08001d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC1_2_IRQHandler>

08001d1e <setBit>:
static const uint8_t BIAS_900_16[] = {137, 122, 105, 88, 69, 47, 25, 0, 21, 48, 79, 105, 127, 147, 160, 169, 178, 197};
static const uint8_t BIAS_900_64[] = {147, 133, 117, 99, 75, 50, 29, 0, 24, 45, 63, 76, 87, 98, 116, 122, 132, 142};

// Utility functions
static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b089      	sub	sp, #36	; 0x24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	70fb      	strb	r3, [r7, #3]
    unsigned int idx;
    unsigned int shift;
    idx = bit / 8;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	08db      	lsrs	r3, r3, #3
 8001d30:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d228      	bcs.n	8001d8c <setBit+0x6e>
        return; // TODO proper error handling: out of bounds
    uint8_t *targetByte = &data[idx];
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
    shift = bit % 8;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	617b      	str	r3, [r7, #20]
    if (val)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <setBit+0x4e>
        *targetByte |= (1 << shift);
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	2101      	movs	r1, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	e010      	b.n	8001d8e <setBit+0x70>
    else
        *targetByte &= ~(1 << shift);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b25a      	sxtb	r2, r3
 8001d72:	2101      	movs	r1, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e000      	b.n	8001d8e <setBit+0x70>
        return; // TODO proper error handling: out of bounds
 8001d8c:	bf00      	nop
}
 8001d8e:	3724      	adds	r7, #36	; 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b089      	sub	sp, #36	; 0x24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
    unsigned int idx;
    unsigned int shift;

    idx = bit / 8;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d301      	bcc.n	8001db4 <getBit+0x1e>
        return false; // TODO proper error handling: out of bounds
 8001db0:	2300      	movs	r3, #0
 8001db2:	e013      	b.n	8001ddc <getBit+0x46>
    uint8_t targetByte = data[idx];
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	76fb      	strb	r3, [r7, #27]
    shift = bit % 8;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	617b      	str	r3, [r7, #20]
    return (targetByte >> shift) & 0x01;
 8001dc6:	7efa      	ldrb	r2, [r7, #27]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa42 f303 	asr.w	r3, r2, r3
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3724      	adds	r7, #36	; 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
    unsigned int i;
    for (i = 0; i < n; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e00c      	b.n	8001e12 <writeValueToBytes+0x2c>
    {
        data[i] = ((val >> (i * 8)) & 0xFF);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	fa42 f103 	asr.w	r1, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4413      	add	r3, r2
 8001e08:	b2ca      	uxtb	r2, r1
 8001e0a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3ee      	bcc.n	8001df8 <writeValueToBytes+0x12>
    }
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <readBytesOTP>:

static void readBytesOTP(dwDeviceTypes_t *dev, uint16_t address, uint8_t data[])
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b088      	sub	sp, #32
 8001e2a:	af02      	add	r7, sp, #8
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	817b      	strh	r3, [r7, #10]
    uint8_t addressBytes[LEN_OTP_ADDR];
    addressBytes[0] = (address & 0xFF);
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	753b      	strb	r3, [r7, #20]
    addressBytes[1] = ((address >> 8) & 0xFF);
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	757b      	strb	r3, [r7, #21]
    // set address
    dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2202      	movs	r2, #2
 8001e4a:	9200      	str	r2, [sp, #0]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	212d      	movs	r1, #45	; 0x2d
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f002 f9c3 	bl	80041dc <dwSpiWrite>
    // switch into read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 8001e56:	2303      	movs	r3, #3
 8001e58:	2206      	movs	r2, #6
 8001e5a:	212d      	movs	r1, #45	; 0x2d
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f002 fa00 	bl	8004262 <dwSpiWrite8>
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 8001e62:	2301      	movs	r3, #1
 8001e64:	2206      	movs	r2, #6
 8001e66:	212d      	movs	r1, #45	; 0x2d
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f002 f9fa 	bl	8004262 <dwSpiWrite8>
    // read value/block - 4 bytes
    dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8001e6e:	2304      	movs	r3, #4
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	220a      	movs	r2, #10
 8001e76:	212d      	movs	r1, #45	; 0x2d
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f002 f947 	bl	800410c <dwSpiRead>
    // end read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2206      	movs	r2, #6
 8001e82:	212d      	movs	r1, #45	; 0x2d
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f002 f9ec 	bl	8004262 <dwSpiWrite8>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <dummyHandler>:

void dummyHandler(dwDeviceTypes_t *dev)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
    ;
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <dwInit>:

void dwInit(dwDeviceTypes_t *dev)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
    dev->func = &dwFunc;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <dwInit+0x3c>)
 8001eb0:	601a      	str	r2, [r3, #0]
    dev->handleSent = dummyHandler;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <dwInit+0x40>)
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
	dev->handleError = dummyHandler;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <dwInit+0x40>)
 8001ebc:	63da      	str	r2, [r3, #60]	; 0x3c
	dev->handleReceived = dummyHandler;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <dwInit+0x40>)
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
	dev->handleReceiveTimeout = dummyHandler;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <dwInit+0x40>)
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
	dev->handleReceiveFailed = dummyHandler;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <dwInit+0x40>)
 8001ece:	649a      	str	r2, [r3, #72]	; 0x48
	dev->handleReceiveTimestampAvailable = dummyHandler;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <dwInit+0x40>)
 8001ed4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	2000006c 	.word	0x2000006c
 8001ee4:	08001e93 	.word	0x08001e93

08001ee8 <dwConfigure>:

int dwConfigure(dwDeviceTypes_t *dev)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	6078      	str	r0, [r7, #4]
    dwEnableClock(dev, dwClockAuto);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f91c 	bl	8002130 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2105      	movs	r1, #5
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
	dev->func->reset(dev);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
    dev->func->delayms(dev, 5);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2105      	movs	r1, #5
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
    uint32_t deviceID = dwGetDeviceId(dev);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8a9 	bl	8002072 <dwGetDeviceId>
 8001f20:	60f8      	str	r0, [r7, #12]
    if (deviceID != 0xdeca0130) //0xdeca0130
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <dwConfigure+0xdc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d001      	beq.n	8001f2e <dwConfigure+0x46>
    {
        return DW_ERROR_WRONG_ID;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e045      	b.n	8001fba <dwConfigure+0xd2>
    }

    memset(dev->networkAndAddress, 0x38, LEN_PANADR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3309      	adds	r3, #9
 8001f32:	2204      	movs	r2, #4
 8001f34:	2138      	movs	r1, #56	; 0x38
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fea8 	bl	8006c8c <memset>
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3309      	adds	r3, #9
 8001f40:	2204      	movs	r2, #4
 8001f42:	9200      	str	r2, [sp, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2103      	movs	r1, #3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f002 f947 	bl	80041dc <dwSpiWrite>

    memset(dev->syscfg, 0, LEN_SYS_CFG);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	330d      	adds	r3, #13
 8001f52:	2204      	movs	r2, #4
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fe98 	bl	8006c8c <memset>
    dwSetDoubleBuffering(dev, false);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fa68 	bl	8002434 <dwSetDoubleBuffering>
    dwSetInterruptPolarity(dev, true);
 8001f64:	2101      	movs	r1, #1
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa81 	bl	800246e <dwSetInterruptPolarity>
    dwWriteSystemConfigurationRegister(dev);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f981 	bl	8002274 <dwWriteSystemConfigurationRegister>

    dwClearInterrupts(dev);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fb43 	bl	80025fe <dwClearInterrupts>
    dwWriteSystemEventMaskRegister(dev);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f9d0 	bl	800231e <dwWriteSystemEventMaskRegister>

    dwEnableClock(dev, dwClockXti);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8d5 	bl	8002130 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
    dwManageLDE(dev);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f818 	bl	8001fc8 <dwManageLDE>
    dev->func->delayms(dev, 5);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2105      	movs	r1, #5
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
    dwEnableClock(dev, dwClockPll);
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8c2 	bl	8002130 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2105      	movs	r1, #5
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
//    dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
//    dev->func->delayms(dev, 5);
    return DW_ERROR_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	deca0130 	.word	0xdeca0130

08001fc8 <dwManageLDE>:

void dwManageLDE(dwDeviceTypes_t *dev)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    uint8_t otpctrl[LEN_OTP_CTRL];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 fe57 	bl	8006c8c <memset>
    memset(otpctrl, 0, LEN_OTP_CTRL);
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fe50 	bl	8006c8c <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	9200      	str	r2, [sp, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2136      	movs	r1, #54	; 0x36
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f002 f887 	bl	800410c <dwSpiRead>
    dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	2202      	movs	r2, #2
 8002004:	9200      	str	r2, [sp, #0]
 8002006:	2206      	movs	r2, #6
 8002008:	212d      	movs	r1, #45	; 0x2d
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f002 f87e 	bl	800410c <dwSpiRead>
    pmscctrl0[0] = 0x01;
 8002010:	2301      	movs	r3, #1
 8002012:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x03;
 8002014:	2303      	movs	r3, #3
 8002016:	737b      	strb	r3, [r7, #13]
    otpctrl[0] = 0x00;
 8002018:	2300      	movs	r3, #0
 800201a:	723b      	strb	r3, [r7, #8]
    otpctrl[1] = 0x80;
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	727b      	strb	r3, [r7, #9]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	2204      	movs	r2, #4
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	2136      	movs	r1, #54	; 0x36
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f002 f8d5 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	2202      	movs	r2, #2
 8002038:	9200      	str	r2, [sp, #0]
 800203a:	2206      	movs	r2, #6
 800203c:	212d      	movs	r1, #45	; 0x2d
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f002 f8cc 	bl	80041dc <dwSpiWrite>
    dev->func->delayms(dev, 5);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2105      	movs	r1, #5
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
    pmscctrl0[0] = 0x00;
 8002050:	2300      	movs	r3, #0
 8002052:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x02;
 8002054:	2302      	movs	r3, #2
 8002056:	737b      	strb	r3, [r7, #13]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	2204      	movs	r2, #4
 800205e:	9200      	str	r2, [sp, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	2136      	movs	r1, #54	; 0x36
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f002 f8b9 	bl	80041dc <dwSpiWrite>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <dwGetDeviceId>:

uint32_t dwGetDeviceId(dwDeviceTypes_t *dev)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
    return dwSpiRead32(dev, DEV_ID, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f002 f897 	bl	80041b2 <dwSpiRead32>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <dwEnableAllLeds>:

void dwEnableAllLeds(dwDeviceTypes_t *dev)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
    uint32_t reg;
    // Set all 4 GPIO in LED mode
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 8002096:	2200      	movs	r2, #0
 8002098:	2126      	movs	r1, #38	; 0x26
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f002 f889 	bl	80041b2 <dwSpiRead32>
 80020a0:	60f8      	str	r0, [r7, #12]
    reg &= ~0x00003FC0ul;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020a8:	60fb      	str	r3, [r7, #12]
    reg |= 0x00001540ul;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 80020b0:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2126      	movs	r1, #38	; 0x26
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f002 f8e9 	bl	8004290 <dwSpiWrite32>
    reg = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2126      	movs	r1, #38	; 0x26
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f002 f873 	bl	80041b2 <dwSpiRead32>
 80020cc:	60f8      	str	r0, [r7, #12]
    // Enable debounce clock (used to clock the LED blinking)
    reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2136      	movs	r1, #54	; 0x36
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f002 f86d 	bl	80041b2 <dwSpiRead32>
 80020d8:	60f8      	str	r0, [r7, #12]
    reg |= 0x00840000ul;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 80020e0:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2136      	movs	r1, #54	; 0x36
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f002 f8d1 	bl	8004290 <dwSpiWrite32>

    // Enable LED blinking and set the rate
    reg = 0x00000110ul;
 80020ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80020f2:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2228      	movs	r2, #40	; 0x28
 80020f8:	2136      	movs	r1, #54	; 0x36
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f002 f8c8 	bl	8004290 <dwSpiWrite32>

    // Trigger a manual blink of the LEDs for test
    reg |= 0x000f0000ul;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002106:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2228      	movs	r2, #40	; 0x28
 800210c:	2136      	movs	r1, #54	; 0x36
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f002 f8be 	bl	8004290 <dwSpiWrite32>
    reg &= ~0x000f0000ul;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800211a:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2228      	movs	r2, #40	; 0x28
 8002120:	2136      	movs	r1, #54	; 0x36
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f002 f8b4 	bl	8004290 <dwSpiWrite32>
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <dwEnableClock>:

void dwEnableClock(dwDeviceTypes_t *dev, dwClock_t clock)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2204      	movs	r2, #4
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f004 fda1 	bl	8006c8c <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	2204      	movs	r2, #4
 8002150:	9200      	str	r2, [sp, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	2136      	movs	r1, #54	; 0x36
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 ffd8 	bl	800410c <dwSpiRead>
    if (clock == dwClockAuto)
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <dwEnableClock+0x4e>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2100      	movs	r1, #0
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        pmscctrl0[0] = dwClockAuto;
 800216e:	2300      	movs	r3, #0
 8002170:	733b      	strb	r3, [r7, #12]
        pmscctrl0[1] &= 0xFE;
 8002172:	7b7b      	ldrb	r3, [r7, #13]
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	737b      	strb	r3, [r7, #13]
 800217c:	e026      	b.n	80021cc <dwEnableClock+0x9c>
    }
    else if (clock == dwClockXti)
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d110      	bne.n	80021a6 <dwEnableClock+0x76>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2100      	movs	r1, #0
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 8002190:	7b3b      	ldrb	r3, [r7, #12]
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockXti;
 800219a:	7b3b      	ldrb	r3, [r7, #12]
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	733b      	strb	r3, [r7, #12]
 80021a4:	e012      	b.n	80021cc <dwEnableClock+0x9c>
    }
    else if (clock == dwClockPll)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d10f      	bne.n	80021cc <dwEnableClock+0x9c>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2101      	movs	r1, #1
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 80021b8:	7b3b      	ldrb	r3, [r7, #12]
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockPll;
 80021c2:	7b3b      	ldrb	r3, [r7, #12]
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	733b      	strb	r3, [r7, #12]
    }
    else
    {
        // TODO deliver proper warning
    }
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2201      	movs	r2, #1
 80021d2:	9200      	str	r2, [sp, #0]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2136      	movs	r1, #54	; 0x36
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f001 ffff 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	2204      	movs	r2, #4
 80021e4:	9200      	str	r2, [sp, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2136      	movs	r1, #54	; 0x36
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f001 fff6 	bl	80041dc <dwSpiWrite>
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <dwRxSoftReset>:
/**
    Reset the receiver. Needed after errors or timeouts.
    From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDeviceTypes_t *dev)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2204      	movs	r2, #4
 8002206:	9200      	str	r2, [sp, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	2136      	movs	r1, #54	; 0x36
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f001 ff7d 	bl	800410c <dwSpiRead>
    pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	f023 0310 	bic.w	r3, r3, #16
 8002218:	b2db      	uxtb	r3, r3
 800221a:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2204      	movs	r2, #4
 8002222:	9200      	str	r2, [sp, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	2136      	movs	r1, #54	; 0x36
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 ffd7 	bl	80041dc <dwSpiWrite>
    pmscctrl0[3] = pmscctrl0[3] | 0x10;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	b2db      	uxtb	r3, r3
 8002236:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2204      	movs	r2, #4
 800223e:	9200      	str	r2, [sp, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	2136      	movs	r1, #54	; 0x36
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f001 ffc9 	bl	80041dc <dwSpiWrite>
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */
void dwReadSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af02      	add	r7, sp, #8
 8002258:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	330d      	adds	r3, #13
 800225e:	2204      	movs	r2, #4
 8002260:	9200      	str	r2, [sp, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f001 ff50 	bl	800410c <dwSpiRead>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af02      	add	r7, sp, #8
 800227a:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	330d      	adds	r3, #13
 8002280:	2204      	movs	r2, #4
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	2104      	movs	r1, #4
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 ffa7 	bl	80041dc <dwSpiWrite>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDeviceTypes_t *dev)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af02      	add	r7, sp, #8
 800229c:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3319      	adds	r3, #25
 80022a2:	2205      	movs	r2, #5
 80022a4:	9200      	str	r2, [sp, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	210f      	movs	r1, #15
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f001 ff2e 	bl	800410c <dwSpiRead>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af02      	add	r7, sp, #8
 80022be:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3309      	adds	r3, #9
 80022c4:	2204      	movs	r2, #4
 80022c6:	9200      	str	r2, [sp, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2103      	movs	r1, #3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f001 ff1d 	bl	800410c <dwSpiRead>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af02      	add	r7, sp, #8
 80022e0:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3309      	adds	r3, #9
 80022e6:	2204      	movs	r2, #4
 80022e8:	9200      	str	r2, [sp, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2103      	movs	r1, #3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f001 ff74 	bl	80041dc <dwSpiWrite>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af02      	add	r7, sp, #8
 8002302:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3311      	adds	r3, #17
 8002308:	2204      	movs	r2, #4
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	210e      	movs	r1, #14
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f001 fefb 	bl	800410c <dwSpiRead>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af02      	add	r7, sp, #8
 8002324:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3311      	adds	r3, #17
 800232a:	2204      	movs	r2, #4
 800232c:	9200      	str	r2, [sp, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	210e      	movs	r1, #14
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f001 ff52 	bl	80041dc <dwSpiWrite>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDeviceTypes_t *dev)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af02      	add	r7, sp, #8
 8002346:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3315      	adds	r3, #21
 800234c:	2204      	movs	r2, #4
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	211f      	movs	r1, #31
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f001 fed9 	bl	800410c <dwSpiRead>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDeviceTypes_t *dev)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af02      	add	r7, sp, #8
 8002368:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3315      	adds	r3, #21
 800236e:	2204      	movs	r2, #4
 8002370:	9200      	str	r2, [sp, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	211f      	movs	r1, #31
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f001 ff30 	bl	80041dc <dwSpiWrite>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	331e      	adds	r3, #30
 8002390:	2205      	movs	r2, #5
 8002392:	9200      	str	r2, [sp, #0]
 8002394:	2200      	movs	r2, #0
 8002396:	2108      	movs	r1, #8
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f001 feb7 	bl	800410c <dwSpiRead>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	331e      	adds	r3, #30
 80023b2:	2205      	movs	r2, #5
 80023b4:	9200      	str	r2, [sp, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2108      	movs	r1, #8
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f001 ff0e 	bl	80041dc <dwSpiWrite>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <dwSetFrameFilter>:
    dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
    setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout != 0);
}

void dwSetFrameFilter(dwDeviceTypes_t *dev, bool val)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f103 000d 	add.w	r0, r3, #13
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	2200      	movs	r2, #0
 80023de:	2104      	movs	r1, #4
 80023e0:	f7ff fc9d 	bl	8001d1e <setBit>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <dwSetFrameFilterAllowData>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDeviceTypes_t *dev, bool val)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f103 000d 	add.w	r0, r3, #13
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	2203      	movs	r2, #3
 8002402:	2104      	movs	r1, #4
 8002404:	f7ff fc8b 	bl	8001d1e <setBit>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <dwSetFrameFilterAllowReserved>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDeviceTypes_t *dev, bool val)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 000d 	add.w	r0, r3, #13
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	2206      	movs	r2, #6
 8002426:	2104      	movs	r1, #4
 8002428:	f7ff fc79 	bl	8001d1e <setBit>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDeviceTypes_t *dev, bool val)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f103 000d 	add.w	r0, r3, #13
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	220c      	movs	r2, #12
 8002460:	2104      	movs	r1, #4
 8002462:	f7ff fc5c 	bl	8001d1e <setBit>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDeviceTypes_t *dev, bool val)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f103 000d 	add.w	r0, r3, #13
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	2209      	movs	r2, #9
 8002484:	2104      	movs	r1, #4
 8002486:	f7ff fc4a 	bl	8001d1e <setBit>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDeviceTypes_t *dev, bool val)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 000d 	add.w	r0, r3, #13
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	221d      	movs	r2, #29
 80024a8:	2104      	movs	r1, #4
 80024aa:	f7ff fc38 	bl	8001d1e <setBit>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <dwInterruptOnSent>:

void dwInterruptOnSent(dwDeviceTypes_t *dev, bool val)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f103 0011 	add.w	r0, r3, #17
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	2207      	movs	r2, #7
 80024cc:	2104      	movs	r1, #4
 80024ce:	f7ff fc26 	bl	8001d1e <setBit>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDeviceTypes_t *dev, bool val)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f103 0011 	add.w	r0, r3, #17
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	220d      	movs	r2, #13
 80024f0:	2104      	movs	r1, #4
 80024f2:	f7ff fc14 	bl	8001d1e <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 0011 	add.w	r0, r3, #17
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	220e      	movs	r2, #14
 8002500:	2104      	movs	r1, #4
 8002502:	f7ff fc0c 	bl	8001d1e <setBit>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDeviceTypes_t *dev, bool val)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f103 0011 	add.w	r0, r3, #17
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2212      	movs	r2, #18
 8002524:	2105      	movs	r1, #5
 8002526:	f7ff fbfa 	bl	8001d1e <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f103 0011 	add.w	r0, r3, #17
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	220f      	movs	r2, #15
 8002534:	2105      	movs	r1, #5
 8002536:	f7ff fbf2 	bl	8001d1e <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f103 0011 	add.w	r0, r3, #17
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	220c      	movs	r2, #12
 8002544:	2105      	movs	r1, #5
 8002546:	f7ff fbea 	bl	8001d1e <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0011 	add.w	r0, r3, #17
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	2210      	movs	r2, #16
 8002554:	2105      	movs	r1, #5
 8002556:	f7ff fbe2 	bl	8001d1e <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 0011 	add.w	r0, r3, #17
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	221a      	movs	r2, #26
 8002564:	2104      	movs	r1, #4
 8002566:	f7ff fbda 	bl	8001d1e <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f103 0011 	add.w	r0, r3, #17
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	221d      	movs	r2, #29
 8002574:	2104      	movs	r1, #4
 8002576:	f7ff fbd2 	bl	8001d1e <setBit>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDeviceTypes_t *dev, bool val)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f103 0011 	add.w	r0, r3, #17
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	2211      	movs	r2, #17
 8002598:	2104      	movs	r1, #4
 800259a:	f7ff fbc0 	bl	8001d1e <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0011 	add.w	r0, r3, #17
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	2215      	movs	r2, #21
 80025a8:	2104      	movs	r1, #4
 80025aa:	f7ff fbb8 	bl	8001d1e <setBit>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDeviceTypes_t *dev, bool val)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f103 0011 	add.w	r0, r3, #17
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	220a      	movs	r2, #10
 80025cc:	2104      	movs	r1, #4
 80025ce:	f7ff fba6 	bl	8001d1e <setBit>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDeviceTypes_t *dev, bool val)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f103 0011 	add.w	r0, r3, #17
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2203      	movs	r2, #3
 80025f0:	2104      	movs	r1, #4
 80025f2:	f7ff fb94 	bl	8001d1e <setBit>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <dwClearInterrupts>:

void dwClearInterrupts(dwDeviceTypes_t *dev)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
    memset(dev->sysmask, 0, LEN_SYS_MASK);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3311      	adds	r3, #17
 800260a:	2204      	movs	r2, #4
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f004 fb3c 	bl	8006c8c <memset>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <dwIdle>:

void dwIdle(dwDeviceTypes_t *dev)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af02      	add	r7, sp, #8
 8002622:	6078      	str	r0, [r7, #4]
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	2204      	movs	r2, #4
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f004 fb2d 	bl	8006c8c <memset>
    dev->sysctrl[0] |= 1 << TRXOFF_BIT;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	791b      	ldrb	r3, [r3, #4]
 8002636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263a:	b2da      	uxtb	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	711a      	strb	r2, [r3, #4]
    dev->deviceMode = IDLE_MODE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	721a      	strb	r2, [r3, #8]
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2204      	movs	r2, #4
 800264c:	9200      	str	r2, [sp, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	210d      	movs	r1, #13
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f001 fdc2 	bl	80041dc <dwSpiWrite>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <dwNewReceive>:
    else regval &= DRX_CARRIER_INT_MASK ;                               // make sure upper bits are clear if not sign extending
    return (int32_t) regval ; // cast unsigned value to signed quantity.
}

void dwNewReceive(dwDeviceTypes_t *dev)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ffd7 	bl	800261c <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	2204      	movs	r2, #4
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fb08 	bl	8006c8c <memset>
    dwClearReceiveStatus(dev);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fda5 	bl	80031cc <dwClearReceiveStatus>
    dev->deviceMode = RX_MODE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	721a      	strb	r2, [r3, #8]
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <dwStartReceive>:

void dwStartReceive(dwDeviceTypes_t *dev)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af02      	add	r7, sp, #8
 8002696:	6078      	str	r0, [r7, #4]
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	1d18      	adds	r0, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f083 0301 	eor.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2200      	movs	r2, #0
 80026ba:	2104      	movs	r1, #4
 80026bc:	f7ff fb2f 	bl	8001d1e <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1d18      	adds	r0, r3, #4
 80026c4:	2301      	movs	r3, #1
 80026c6:	2208      	movs	r2, #8
 80026c8:	2104      	movs	r1, #4
 80026ca:	f7ff fb28 	bl	8001d1e <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2204      	movs	r2, #4
 80026d4:	9200      	str	r2, [sp, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	210d      	movs	r1, #13
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f001 fd7e 	bl	80041dc <dwSpiWrite>
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <dwNewTransmit>:

void dwNewTransmit(dwDeviceTypes_t *dev)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff93 	bl	800261c <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2204      	movs	r2, #4
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 fac4 	bl	8006c8c <memset>
    dwClearTransmitStatus(dev);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fd73 	bl	80031f0 <dwClearTransmitStatus>
    dev->deviceMode = TX_MODE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	721a      	strb	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <dwStartTransmit>:

void dwStartTransmit(dwDeviceTypes_t *dev)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
    dwWriteTransmitFrameControlRegister(dev);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fe40 	bl	80023a6 <dwWriteTransmitFrameControlRegister>
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	1d18      	adds	r0, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f083 0301 	eor.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2200      	movs	r2, #0
 8002748:	2104      	movs	r1, #4
 800274a:	f7ff fae8 	bl	8001d1e <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	1d18      	adds	r0, r3, #4
 8002752:	2301      	movs	r3, #1
 8002754:	2201      	movs	r2, #1
 8002756:	2104      	movs	r1, #4
 8002758:	f7ff fae1 	bl	8001d1e <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	2204      	movs	r2, #4
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	210d      	movs	r1, #13
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f001 fd37 	bl	80041dc <dwSpiWrite>
    if (dev->permanentReceive)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00d      	beq.n	8002794 <dwStartTransmit+0x7c>
    {
        memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	2204      	movs	r2, #4
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fa83 	bl	8006c8c <memset>
        dev->deviceMode = RX_MODE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	721a      	strb	r2, [r3, #8]
        dwStartReceive(dev);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff7f 	bl	8002690 <dwStartReceive>
    }
    else
    {
        dev->deviceMode = IDLE_MODE;
    }
}
 8002792:	e00b      	b.n	80027ac <dwStartTransmit+0x94>
    else if (dev->wait4resp)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <dwStartTransmit+0x8e>
        dev->deviceMode = RX_MODE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	721a      	strb	r2, [r3, #8]
}
 80027a4:	e002      	b.n	80027ac <dwStartTransmit+0x94>
        dev->deviceMode = IDLE_MODE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	721a      	strb	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <dwNewConfiguration>:

void dwNewConfiguration(dwDeviceTypes_t *dev)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff2d 	bl	800261c <dwIdle>
    dwReadNetworkIdAndDeviceAddress(dev);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fd78 	bl	80022b8 <dwReadNetworkIdAndDeviceAddress>
    dwReadSystemConfigurationRegister(dev);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fd42 	bl	8002252 <dwReadSystemConfigurationRegister>
    dwReadChannelControlRegister(dev);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fdb6 	bl	8002340 <dwReadChannelControlRegister>
    dwReadTransmitFrameControlRegister(dev);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fdd5 	bl	8002384 <dwReadTransmitFrameControlRegister>
    dwReadSystemEventMaskRegister(dev);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fd8e 	bl	80022fc <dwReadSystemEventMaskRegister>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDeviceTypes_t *dev)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	6078      	str	r0, [r7, #4]
    // write all configurations back to device
    dwWriteNetworkIdAndDeviceAddress(dev);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fd72 	bl	80022da <dwWriteNetworkIdAndDeviceAddress>
    dwWriteSystemConfigurationRegister(dev);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fd3c 	bl	8002274 <dwWriteSystemConfigurationRegister>
    dwWriteChannelControlRegister(dev);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fdb0 	bl	8002362 <dwWriteChannelControlRegister>
    dwWriteTransmitFrameControlRegister(dev);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff fdcf 	bl	80023a6 <dwWriteTransmitFrameControlRegister>
    dwWriteSystemEventMaskRegister(dev);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fd88 	bl	800231e <dwWriteSystemEventMaskRegister>
    // tune according to configuration
    dwTune(dev);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fdc6 	bl	80033a0 <dwTune>
    // uint8_t antennaDelayBytes[LEN_STAMP];
    // writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
    // dev->antennaDelay.setTimestamp(antennaDelayBytes);
    // dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
    // dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
    dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.timeRaw, LEN_TX_ANTD);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3330      	adds	r3, #48	; 0x30
 8002818:	2202      	movs	r2, #2
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	2200      	movs	r2, #0
 800281e:	2118      	movs	r1, #24
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f001 fcdb 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.timeRaw, LEN_LDE_RXANTD);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3330      	adds	r3, #48	; 0x30
 800282a:	2202      	movs	r2, #2
 800282c:	9200      	str	r2, [sp, #0]
 800282e:	f641 0204 	movw	r2, #6148	; 0x1804
 8002832:	212e      	movs	r1, #46	; 0x2e
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f001 fcd1 	bl	80041dc <dwSpiWrite>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <dwSuppressFrameCheck>:
    dev->wait4resp = val;
    setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDeviceTypes_t *dev, bool val)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	70fb      	strb	r3, [r7, #3]
    dev->frameCheck = !val;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <dwUseSmartPower>:

void dwUseSmartPower(dwDeviceTypes_t *dev, bool smartPower)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
    dev->smartPower = smartPower;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f103 000d 	add.w	r0, r3, #13
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2212      	movs	r2, #18
 80028aa:	2104      	movs	r1, #4
 80028ac:	f7ff fa37 	bl	8001d1e <setBit>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <dwSetDataRate>:
    delayBytes[1] &= 0xFE;
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}

void dwSetDataRate(dwDeviceTypes_t *dev, uint8_t rate)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
    rate &= 0x03;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[1] &= 0x83;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7fdb      	ldrb	r3, [r3, #31]
 80028d0:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7fda      	ldrb	r2, [r3, #31]
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	015b      	lsls	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	77da      	strb	r2, [r3, #31]
    // special 110kbps flag
    if (rate == TRX_RATE_110KBPS)
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <dwSetDataRate+0x4c>
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f103 000d 	add.w	r0, r3, #13
 80028f8:	2301      	movs	r3, #1
 80028fa:	2216      	movs	r2, #22
 80028fc:	2104      	movs	r1, #4
 80028fe:	f7ff fa0e 	bl	8001d1e <setBit>
 8002902:	e007      	b.n	8002914 <dwSetDataRate+0x5c>
    }
    else
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f103 000d 	add.w	r0, r3, #13
 800290a:	2300      	movs	r3, #0
 800290c:	2216      	movs	r2, #22
 800290e:	2104      	movs	r1, #4
 8002910:	f7ff fa05 	bl	8001d1e <setBit>
    }
    // SFD mode and type (non-configurable, as in Table )
    if (rate == TRX_RATE_6800KBPS)
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d118      	bne.n	800294c <dwSetDataRate+0x94>
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f103 0015 	add.w	r0, r3, #21
 8002920:	2300      	movs	r3, #0
 8002922:	2211      	movs	r2, #17
 8002924:	2104      	movs	r1, #4
 8002926:	f7ff f9fa 	bl	8001d1e <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f103 0015 	add.w	r0, r3, #21
 8002930:	2300      	movs	r3, #0
 8002932:	2214      	movs	r2, #20
 8002934:	2104      	movs	r1, #4
 8002936:	f7ff f9f2 	bl	8001d1e <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f103 0015 	add.w	r0, r3, #21
 8002940:	2300      	movs	r3, #0
 8002942:	2215      	movs	r2, #21
 8002944:	2104      	movs	r1, #4
 8002946:	f7ff f9ea 	bl	8001d1e <setBit>
 800294a:	e017      	b.n	800297c <dwSetDataRate+0xc4>
    }
    else
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0015 	add.w	r0, r3, #21
 8002952:	2301      	movs	r3, #1
 8002954:	2211      	movs	r2, #17
 8002956:	2104      	movs	r1, #4
 8002958:	f7ff f9e1 	bl	8001d1e <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0015 	add.w	r0, r3, #21
 8002962:	2301      	movs	r3, #1
 8002964:	2214      	movs	r2, #20
 8002966:	2104      	movs	r1, #4
 8002968:	f7ff f9d9 	bl	8001d1e <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0015 	add.w	r0, r3, #21
 8002972:	2301      	movs	r3, #1
 8002974:	2215      	movs	r2, #21
 8002976:	2104      	movs	r1, #4
 8002978:	f7ff f9d1 	bl	8001d1e <setBit>
    }
    uint8_t sfdLength;
    if (rate == TRX_RATE_6800KBPS)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d102      	bne.n	8002988 <dwSetDataRate+0xd0>
    {
        sfdLength = 0x08;
 8002982:	2308      	movs	r3, #8
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e007      	b.n	8002998 <dwSetDataRate+0xe0>
    }
    else if (rate == TRX_RATE_850KBPS)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <dwSetDataRate+0xdc>
    {
        sfdLength = 0x10;
 800298e:	2310      	movs	r3, #16
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e001      	b.n	8002998 <dwSetDataRate+0xe0>
    }
    else
    {
        sfdLength = 0x40;
 8002994:	2340      	movs	r3, #64	; 0x40
 8002996:	73fb      	strb	r3, [r7, #15]
    }
    dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8002998:	f107 030f 	add.w	r3, r7, #15
 800299c:	2201      	movs	r2, #1
 800299e:	9200      	str	r2, [sp, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	2121      	movs	r1, #33	; 0x21
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f001 fc19 	bl	80041dc <dwSpiWrite>
    dev->dataRate = rate;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDeviceTypes_t *dev, uint8_t freq)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
    freq &= 0x03;
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xFC;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	f023 0303 	bic.w	r3, r3, #3
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f883 2020 	strb.w	r2, [r3, #32]
    dev->chanctrl[2] &= 0xF3;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7ddb      	ldrb	r3, [r3, #23]
 80029f6:	f023 030c 	bic.w	r3, r3, #12
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7dda      	ldrb	r2, [r3, #23]
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	75da      	strb	r2, [r3, #23]
    dev->pulseFrequency = freq;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <dwSetPreambleLength>:
{
    return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDeviceTypes_t *dev, uint8_t prealen)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
    prealen &= 0x0F;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xC3;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3e:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f883 2020 	strb.w	r2, [r3, #32]
    if (prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128)
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d002      	beq.n	8002a6c <dwSetPreambleLength+0x48>
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d104      	bne.n	8002a76 <dwSetPreambleLength+0x52>
    {
        dev->pacSize = PAC_SIZE_8;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2208      	movs	r2, #8
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a74:	e016      	b.n	8002aa4 <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512)
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	d002      	beq.n	8002a82 <dwSetPreambleLength+0x5e>
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	2b0d      	cmp	r3, #13
 8002a80:	d104      	bne.n	8002a8c <dwSetPreambleLength+0x68>
    {
        dev->pacSize = PAC_SIZE_16;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2210      	movs	r2, #16
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a8a:	e00b      	b.n	8002aa4 <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_1024)
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d104      	bne.n	8002a9c <dwSetPreambleLength+0x78>
    {
        dev->pacSize = PAC_SIZE_32;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a9a:	e003      	b.n	8002aa4 <dwSetPreambleLength+0x80>
    }
    else
    {
        dev->pacSize = PAC_SIZE_64;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    dev->preambleLength = prealen;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDeviceTypes_t *dev, bool val)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	70fb      	strb	r3, [r7, #3]
    dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <dwUseExtendedFrameLength+0x16>
 8002ac8:	2203      	movs	r2, #3
 8002aca:	e000      	b.n	8002ace <dwUseExtendedFrameLength+0x18>
 8002acc:	2200      	movs	r2, #0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    dev->syscfg[2] &= 0xFC;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7bdb      	ldrb	r3, [r3, #15]
 8002ad8:	f023 0303 	bic.w	r3, r3, #3
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	73da      	strb	r2, [r3, #15]
    dev->syscfg[2] |= dev->extendedFrameLength;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7bda      	ldrb	r2, [r3, #15]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	73da      	strb	r2, [r3, #15]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <dwSetChannel>:
{
    dev->permanentReceive = val;
}

void dwSetChannel(dwDeviceTypes_t *dev, uint8_t channel)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
    channel &= 0xF;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	b25a      	sxtb	r2, r3
 8002b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	755a      	strb	r2, [r3, #21]
    dev->channel = channel;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <dwSetPreambleCode>:

void dwSetPreambleCode(dwDeviceTypes_t *dev, uint8_t preacode)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
    preacode &= 0x1F;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[2] &= 0x3F;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7ddb      	ldrb	r3, [r3, #23]
 8002b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7ddb      	ldrb	r3, [r3, #23]
 8002b5e:	b25a      	sxtb	r2, r3
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	019b      	lsls	r3, r3, #6
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[3] = 0x00;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	761a      	strb	r2, [r3, #24]
    dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	b25a      	sxtb	r2, r3
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	761a      	strb	r2, [r3, #24]
    dev->preambleCode = preacode;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <dwSetDefaults>:

void dwSetDefaults(dwDeviceTypes_t *dev)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
    if (dev->deviceMode == TX_MODE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7a1b      	ldrb	r3, [r3, #8]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d03e      	beq.n	8002c34 <dwSetDefaults+0x8e>
    {
    }
    else if (dev->deviceMode == RX_MODE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7a1b      	ldrb	r3, [r3, #8]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d03a      	beq.n	8002c34 <dwSetDefaults+0x8e>
    {
    }
    else if (dev->deviceMode == IDLE_MODE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7a1b      	ldrb	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d136      	bne.n	8002c34 <dwSetDefaults+0x8e>
    {
        dwUseExtendedFrameLength(dev, false);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff74 	bl	8002ab6 <dwUseExtendedFrameLength>
        dwUseSmartPower(dev, true);
 8002bce:	2101      	movs	r1, #1
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fe50 	bl	8002876 <dwUseSmartPower>
        dwSuppressFrameCheck(dev, false);
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fe32 	bl	8002842 <dwSuppressFrameCheck>
        // for global frame filtering
        dwSetFrameFilter(dev, false);
 8002bde:	2100      	movs	r1, #0
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fbf1 	bl	80023c8 <dwSetFrameFilter>
        // for data frame (poll, poll_ack, range, range report, range failed) filtering
        dwSetFrameFilterAllowData(dev, false);
 8002be6:	2100      	movs	r1, #0
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fbff 	bl	80023ec <dwSetFrameFilterAllowData>
        // for reserved (blink) frame filtering
        dwSetFrameFilterAllowReserved(dev, false);
 8002bee:	2100      	movs	r1, #0
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fc0d 	bl	8002410 <dwSetFrameFilterAllowReserved>
        // setFrameFilterAllowMAC(true);
        // setFrameFilterAllowBeacon(true);
        // setFrameFilterAllowAcknowledgement(true);
        dwInterruptOnSent(dev, true);
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff fc5c 	bl	80024b6 <dwInterruptOnSent>
        dwInterruptOnReceived(dev, true);
 8002bfe:	2101      	movs	r1, #1
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fc6a 	bl	80024da <dwInterruptOnReceived>
        dwInterruptOnReceiveTimeout(dev, true);
 8002c06:	2101      	movs	r1, #1
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fcba 	bl	8002582 <dwInterruptOnReceiveTimeout>
        dwInterruptOnReceiveFailed(dev, false);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fc7c 	bl	800250e <dwInterruptOnReceiveFailed>
        dwInterruptOnReceiveTimestampAvailable(dev, false);
 8002c16:	2100      	movs	r1, #0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fccc 	bl	80025b6 <dwInterruptOnReceiveTimestampAvailable>
        dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8002c1e:	2100      	movs	r1, #0
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff fcda 	bl	80025da <dwInterruptOnAutomaticAcknowledgeTrigger>
        dwSetReceiverAutoReenable(dev, true);
 8002c26:	2101      	movs	r1, #1
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fc32 	bl	8002492 <dwSetReceiverAutoReenable>
        // default mode when powering up the chip
        // still explicitly selected for later tuning
        dwSetMode(dev);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fb8a 	bl	8003348 <dwSetMode>
    }
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <dwSetData>:

void dwSetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
    if (dev->frameCheck)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <dwSetData+0x1c>
    {
        n += 2; // two bytes CRC-16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3302      	adds	r3, #2
 8002c56:	607b      	str	r3, [r7, #4]
    }
    if (n > LEN_EXT_UWB_FRAMES)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d229      	bcs.n	8002cb4 <dwSetData+0x78>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    if (n > LEN_UWB_FRAMES && !dev->extendedFrameLength)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b7f      	cmp	r3, #127	; 0x7f
 8002c64:	d904      	bls.n	8002c70 <dwSetData+0x34>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d023      	beq.n	8002cb8 <dwSetData+0x7c>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    // transmit data and length
    dwSpiWrite(dev, TX_BUFFER, NO_SUB, data, n);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2109      	movs	r1, #9
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f001 faae 	bl	80041dc <dwSpiWrite>
    dev->txfctrl[0] = (uint8_t)(n & 0xFF); // 1 byte (regular length + 1 bit)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	779a      	strb	r2, [r3, #30]
    dev->txfctrl[1] &= 0xE0;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	7fdb      	ldrb	r3, [r3, #31]
 8002c8c:	f023 031f 	bic.w	r3, r3, #31
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((n >> 8) & 0x03); // 2 added bits if extended length
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	7fdb      	ldrb	r3, [r3, #31]
 8002c9a:	b25a      	sxtb	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	77da      	strb	r2, [r3, #31]
 8002cb2:	e002      	b.n	8002cba <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8002cb4:	bf00      	nop
 8002cb6:	e000      	b.n	8002cba <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8002cb8:	bf00      	nop
}
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <dwGetDataLength>:

unsigned int dwGetDataLength(dwDeviceTypes_t *dev)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
    unsigned int len = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
    if (dev->deviceMode == TX_MODE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7a1b      	ldrb	r3, [r3, #8]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d109      	bne.n	8002ce8 <dwGetDataLength+0x28>
    {
        // 10 bits of TX frame control register
        len = ((((unsigned int)dev->txfctrl[1] << 8) | (unsigned int)dev->txfctrl[0]) & 0x03FF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7fdb      	ldrb	r3, [r3, #31]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	7f92      	ldrb	r2, [r2, #30]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e013      	b.n	8002d10 <dwGetDataLength+0x50>
    }
    else if (dev->deviceMode == RX_MODE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7a1b      	ldrb	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10f      	bne.n	8002d10 <dwGetDataLength+0x50>
    {
        // 10 bits of RX frame control register
        uint8_t rxFrameInfo[LEN_RX_FINFO];
        dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	9200      	str	r2, [sp, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f001 fa05 	bl	800410c <dwSpiRead>
        len = ((((unsigned int)rxFrameInfo[1] << 8) | (unsigned int)rxFrameInfo[0]) & 0x03FF);
 8002d02:	7a7b      	ldrb	r3, [r7, #9]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	7a3a      	ldrb	r2, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0e:	60fb      	str	r3, [r7, #12]
    }
    if (dev->frameCheck && len > 2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <dwGetDataLength+0x66>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d902      	bls.n	8002d26 <dwGetDataLength+0x66>
    {
        return len - 2;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3b02      	subs	r3, #2
 8002d24:	e000      	b.n	8002d28 <dwGetDataLength+0x68>
    }
    return len;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <dwGetData>:

void dwGetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
    if (n <= 0)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <dwGetData+0x24>
    {
        return;
    }
    dwSpiRead(dev, RX_BUFFER, NO_SUB, data, n);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2111      	movs	r1, #17
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f001 f9dd 	bl	800410c <dwSpiRead>
 8002d52:	e000      	b.n	8002d56 <dwGetData+0x26>
        return;
 8002d54:	bf00      	nop
}
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <dwGetTransmitTimestamp>:

void dwGetTransmitTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
    dwSpiRead(dev, TX_TIME, TX_STAMP_SUB, time->timeRaw, LEN_TX_STAMP);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2205      	movs	r2, #5
 8002d6a:	9200      	str	r2, [sp, #0]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2117      	movs	r1, #23
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f001 f9cb 	bl	800410c <dwSpiRead>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <dwGetReceiveTimestamp>:

void dwGetReceiveTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af02      	add	r7, sp, #8
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
    time->timeFull = 0;
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9c1 2300 	strd	r2, r3, [r1]
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2205      	movs	r2, #5
 8002d9a:	9200      	str	r2, [sp, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2115      	movs	r1, #21
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f001 f9b3 	bl	800410c <dwSpiRead>
    // correct timestamp (i.e. consider range bias)
    dwCorrectTimestamp(dev, time);
 8002da6:	6839      	ldr	r1, [r7, #0]
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f805 	bl	8002db8 <dwCorrectTimestamp>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <dwCorrectTimestamp>:
    time->timeFull = 0;
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
}

void dwCorrectTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *timestamp)
{
 8002db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
    // base line dBm, which is -61, 2 dBm steps, total 18 data points (down to -95 dBm)
    float rxPowerBase = -(dwGetReceivePower(dev) + 61.0f) * 0.5f;
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fa97 	bl	80032f8 <dwGetReceivePower>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4997      	ldr	r1, [pc, #604]	; (800302c <dwCorrectTimestamp+0x274>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fed0 	bl	8000b74 <__addsf3>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002dda:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd ffd0 	bl	8000d84 <__aeabi_fmul>
 8002de4:	4603      	mov	r3, r0
 8002de6:	617b      	str	r3, [r7, #20]

    if (!isfinite(rxPowerBase))
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8002dee:	4990      	ldr	r1, [pc, #576]	; (8003030 <dwCorrectTimestamp+0x278>)
 8002df0:	4630      	mov	r0, r6
 8002df2:	f7fe f98d 	bl	8001110 <__aeabi_fcmpun>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 8111 	bne.w	8003020 <dwCorrectTimestamp+0x268>
 8002dfe:	498c      	ldr	r1, [pc, #560]	; (8003030 <dwCorrectTimestamp+0x278>)
 8002e00:	4630      	mov	r0, r6
 8002e02:	f7fe f97b 	bl	80010fc <__aeabi_fcmpgt>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 8109 	bne.w	8003020 <dwCorrectTimestamp+0x268>
    {
        return;
    }
    int rxPowerBaseLow = (int)rxPowerBase;
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7fe f994 	bl	800113c <__aeabi_f2iz>
 8002e14:	4603      	mov	r3, r0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    int rxPowerBaseHigh = rxPowerBaseLow + 1;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	623b      	str	r3, [r7, #32]
    if (rxPowerBaseLow <= 0)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dc04      	bgt.n	8002e2e <dwCorrectTimestamp+0x76>
    {
        rxPowerBaseLow = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	e006      	b.n	8002e3c <dwCorrectTimestamp+0x84>
    }
    else if (rxPowerBaseHigh >= 17)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	dd03      	ble.n	8002e3c <dwCorrectTimestamp+0x84>
    {
        rxPowerBaseLow = 17;
 8002e34:	2311      	movs	r3, #17
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 17;
 8002e38:	2311      	movs	r3, #17
 8002e3a:	623b      	str	r3, [r7, #32]
    }
    // select range low/high values from corresponding table
    int rangeBiasHigh = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
    int rangeBiasLow = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
    if (dev->channel == CHANNEL_4 || dev->channel == CHANNEL_7)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d004      	beq.n	8002e58 <dwCorrectTimestamp+0xa0>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e54:	2b07      	cmp	r3, #7
 8002e56:	d157      	bne.n	8002f08 <dwCorrectTimestamp+0x150>
    {
        // 900 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d126      	bne.n	8002eb0 <dwCorrectTimestamp+0xf8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseHigh] : BIAS_900_16[rxPowerBaseHigh]);
 8002e62:	2307      	movs	r3, #7
 8002e64:	461a      	mov	r2, r3
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	da05      	bge.n	8002e78 <dwCorrectTimestamp+0xc0>
 8002e6c:	4a71      	ldr	r2, [pc, #452]	; (8003034 <dwCorrectTimestamp+0x27c>)
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	4413      	add	r3, r2
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	425b      	negs	r3, r3
 8002e76:	e003      	b.n	8002e80 <dwCorrectTimestamp+0xc8>
 8002e78:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <dwCorrectTimestamp+0x27c>)
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseLow] : BIAS_900_16[rxPowerBaseLow]);
 8002e88:	2307      	movs	r3, #7
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	da05      	bge.n	8002e9e <dwCorrectTimestamp+0xe6>
 8002e92:	4a68      	ldr	r2, [pc, #416]	; (8003034 <dwCorrectTimestamp+0x27c>)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	4413      	add	r3, r2
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	425b      	negs	r3, r3
 8002e9c:	e003      	b.n	8002ea6 <dwCorrectTimestamp+0xee>
 8002e9e:	4a65      	ldr	r2, [pc, #404]	; (8003034 <dwCorrectTimestamp+0x27c>)
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	4413      	add	r3, r2
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002eae:	e077      	b.n	8002fa0 <dwCorrectTimestamp+0x1e8>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d172      	bne.n	8002fa0 <dwCorrectTimestamp+0x1e8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseHigh] : BIAS_900_64[rxPowerBaseHigh]);
 8002eba:	2307      	movs	r3, #7
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	da05      	bge.n	8002ed0 <dwCorrectTimestamp+0x118>
 8002ec4:	4a5c      	ldr	r2, [pc, #368]	; (8003038 <dwCorrectTimestamp+0x280>)
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	425b      	negs	r3, r3
 8002ece:	e003      	b.n	8002ed8 <dwCorrectTimestamp+0x120>
 8002ed0:	4a59      	ldr	r2, [pc, #356]	; (8003038 <dwCorrectTimestamp+0x280>)
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseLow] : BIAS_900_64[rxPowerBaseLow]);
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	da05      	bge.n	8002ef6 <dwCorrectTimestamp+0x13e>
 8002eea:	4a53      	ldr	r2, [pc, #332]	; (8003038 <dwCorrectTimestamp+0x280>)
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	4413      	add	r3, r2
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	425b      	negs	r3, r3
 8002ef4:	e003      	b.n	8002efe <dwCorrectTimestamp+0x146>
 8002ef6:	4a50      	ldr	r2, [pc, #320]	; (8003038 <dwCorrectTimestamp+0x280>)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	4413      	add	r3, r2
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002f06:	e04b      	b.n	8002fa0 <dwCorrectTimestamp+0x1e8>
        }
    }
    else
    {
        // 500 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d120      	bne.n	8002f54 <dwCorrectTimestamp+0x19c>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseHigh] : BIAS_500_16[rxPowerBaseHigh]);
 8002f12:	230a      	movs	r3, #10
 8002f14:	461a      	mov	r2, r3
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	da05      	bge.n	8002f28 <dwCorrectTimestamp+0x170>
 8002f1c:	4a47      	ldr	r2, [pc, #284]	; (800303c <dwCorrectTimestamp+0x284>)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	425b      	negs	r3, r3
 8002f26:	e003      	b.n	8002f30 <dwCorrectTimestamp+0x178>
 8002f28:	4a44      	ldr	r2, [pc, #272]	; (800303c <dwCorrectTimestamp+0x284>)
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseLow] : BIAS_500_16[rxPowerBaseLow]);
 8002f32:	230a      	movs	r3, #10
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	da05      	bge.n	8002f48 <dwCorrectTimestamp+0x190>
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <dwCorrectTimestamp+0x284>)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	4413      	add	r3, r2
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	425b      	negs	r3, r3
 8002f46:	e003      	b.n	8002f50 <dwCorrectTimestamp+0x198>
 8002f48:	4a3c      	ldr	r2, [pc, #240]	; (800303c <dwCorrectTimestamp+0x284>)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	4413      	add	r3, r2
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e026      	b.n	8002fa2 <dwCorrectTimestamp+0x1ea>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d121      	bne.n	8002fa2 <dwCorrectTimestamp+0x1ea>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseHigh] : BIAS_500_64[rxPowerBaseHigh]);
 8002f5e:	2308      	movs	r3, #8
 8002f60:	461a      	mov	r2, r3
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	4293      	cmp	r3, r2
 8002f66:	da05      	bge.n	8002f74 <dwCorrectTimestamp+0x1bc>
 8002f68:	4a35      	ldr	r2, [pc, #212]	; (8003040 <dwCorrectTimestamp+0x288>)
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	425b      	negs	r3, r3
 8002f72:	e003      	b.n	8002f7c <dwCorrectTimestamp+0x1c4>
 8002f74:	4a32      	ldr	r2, [pc, #200]	; (8003040 <dwCorrectTimestamp+0x288>)
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	4413      	add	r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseLow] : BIAS_500_64[rxPowerBaseLow]);
 8002f7e:	2308      	movs	r3, #8
 8002f80:	461a      	mov	r2, r3
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	4293      	cmp	r3, r2
 8002f86:	da05      	bge.n	8002f94 <dwCorrectTimestamp+0x1dc>
 8002f88:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <dwCorrectTimestamp+0x288>)
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	4413      	add	r3, r2
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	425b      	negs	r3, r3
 8002f92:	e003      	b.n	8002f9c <dwCorrectTimestamp+0x1e4>
 8002f94:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <dwCorrectTimestamp+0x288>)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	e000      	b.n	8002fa2 <dwCorrectTimestamp+0x1ea>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002fa0:	bf00      	nop
        {
            // TODO proper error handling
        }
    }
    // linear interpolation of bias values
    float rangeBias = rangeBiasLow + (rxPowerBase - rxPowerBaseLow) * (rangeBiasHigh - rangeBiasLow);
 8002fa2:	69b8      	ldr	r0, [r7, #24]
 8002fa4:	f7fd fe9a 	bl	8000cdc <__aeabi_i2f>
 8002fa8:	4606      	mov	r6, r0
 8002faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fac:	f7fd fe96 	bl	8000cdc <__aeabi_i2f>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6978      	ldr	r0, [r7, #20]
 8002fb6:	f7fd fddb 	bl	8000b70 <__aeabi_fsub>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	469a      	mov	sl, r3
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fe89 	bl	8000cdc <__aeabi_i2f>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4650      	mov	r0, sl
 8002fd0:	f7fd fed8 	bl	8000d84 <__aeabi_fmul>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f7fd fdcb 	bl	8000b74 <__addsf3>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	613b      	str	r3, [r7, #16]
    // range bias [mm] to timestamp modification value conversion
    dwTimestamp_t adjustmentTime;
    adjustmentTime.timeFull = (int)(rangeBias * DISTANCE_OF_RADIO_INV * 0.001f);
 8002fe2:	4918      	ldr	r1, [pc, #96]	; (8003044 <dwCorrectTimestamp+0x28c>)
 8002fe4:	6938      	ldr	r0, [r7, #16]
 8002fe6:	f7fd fecd 	bl	8000d84 <__aeabi_fmul>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4916      	ldr	r1, [pc, #88]	; (8003048 <dwCorrectTimestamp+0x290>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fec8 	bl	8000d84 <__aeabi_fmul>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f8a0 	bl	800113c <__aeabi_f2iz>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	17da      	asrs	r2, r3, #31
 8003000:	4698      	mov	r8, r3
 8003002:	4691      	mov	r9, r2
 8003004:	e9c7 8902 	strd	r8, r9, [r7, #8]
    // apply correction
    timestamp->timeFull -= adjustmentTime.timeFull;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800300e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003012:	1a84      	subs	r4, r0, r2
 8003014:	eb61 0503 	sbc.w	r5, r1, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	e9c3 4500 	strd	r4, r5, [r3]
 800301e:	e000      	b.n	8003022 <dwCorrectTimestamp+0x26a>
        return;
 8003020:	bf00      	nop
}
 8003022:	3728      	adds	r7, #40	; 0x28
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302a:	bf00      	nop
 800302c:	42740000 	.word	0x42740000
 8003030:	7f7fffff 	.word	0x7f7fffff
 8003034:	0800b900 	.word	0x0800b900
 8003038:	0800b914 	.word	0x0800b914
 800303c:	0800b8d8 	.word	0x0800b8d8
 8003040:	0800b8ec 	.word	0x0800b8ec
 8003044:	435523b3 	.word	0x435523b3
 8003048:	3a83126f 	.word	0x3a83126f

0800304c <dwIsTransmitDone>:
{
    dwSpiRead(dev, SYS_TIME, NO_SUB, time->timeRaw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDeviceTypes_t *dev)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3319      	adds	r3, #25
 8003058:	2207      	movs	r2, #7
 800305a:	2105      	movs	r1, #5
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fe9a 	bl	8001d96 <getBit>
 8003062:	4603      	mov	r3, r0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDeviceTypes_t *dev)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3319      	adds	r3, #25
 8003078:	220a      	movs	r2, #10
 800307a:	2105      	movs	r1, #5
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fe8a 	bl	8001d96 <getBit>
 8003082:	4603      	mov	r3, r0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDeviceTypes_t *dev)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
    if (dev->frameCheck)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <dwIsReceiveDone+0x24>
    {
        return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3319      	adds	r3, #25
 80030a2:	220e      	movs	r2, #14
 80030a4:	2105      	movs	r1, #5
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fe75 	bl	8001d96 <getBit>
 80030ac:	4603      	mov	r3, r0
 80030ae:	e007      	b.n	80030c0 <dwIsReceiveDone+0x34>
    }
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3319      	adds	r3, #25
 80030b4:	220d      	movs	r2, #13
 80030b6:	2105      	movs	r1, #5
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe fe6c 	bl	8001d96 <getBit>
 80030be:	4603      	mov	r3, r0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDeviceTypes_t *dev)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
    bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3319      	adds	r3, #25
 80030d4:	2212      	movs	r2, #18
 80030d6:	2105      	movs	r1, #5
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe fe5c 	bl	8001d96 <getBit>
 80030de:	4603      	mov	r3, r0
 80030e0:	73fb      	strb	r3, [r7, #15]
    bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3319      	adds	r3, #25
 80030e6:	220f      	movs	r2, #15
 80030e8:	2105      	movs	r1, #5
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fe53 	bl	8001d96 <getBit>
 80030f0:	4603      	mov	r3, r0
 80030f2:	73bb      	strb	r3, [r7, #14]
    bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3319      	adds	r3, #25
 80030f8:	220c      	movs	r2, #12
 80030fa:	2105      	movs	r1, #5
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fe4a 	bl	8001d96 <getBit>
 8003102:	4603      	mov	r3, r0
 8003104:	737b      	strb	r3, [r7, #13]
    bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3319      	adds	r3, #25
 800310a:	2210      	movs	r2, #16
 800310c:	2105      	movs	r1, #5
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fe41 	bl	8001d96 <getBit>
 8003114:	4603      	mov	r3, r0
 8003116:	733b      	strb	r3, [r7, #12]

    bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3319      	adds	r3, #25
 800311c:	221a      	movs	r2, #26
 800311e:	2105      	movs	r1, #5
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe fe38 	bl	8001d96 <getBit>
 8003126:	4603      	mov	r3, r0
 8003128:	72fb      	strb	r3, [r7, #11]
    bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3319      	adds	r3, #25
 800312e:	221d      	movs	r2, #29
 8003130:	2105      	movs	r1, #5
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fe2f 	bl	8001d96 <getBit>
 8003138:	4603      	mov	r3, r0
 800313a:	72bb      	strb	r3, [r7, #10]

    return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10e      	bne.n	8003160 <dwIsReceiveFailed+0x98>
 8003142:	7bbb      	ldrb	r3, [r7, #14]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <dwIsReceiveFailed+0x98>
 8003148:	7b7b      	ldrb	r3, [r7, #13]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <dwIsReceiveFailed+0x98>
 800314e:	7b3b      	ldrb	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <dwIsReceiveFailed+0x98>
 8003154:	7afb      	ldrb	r3, [r7, #11]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <dwIsReceiveFailed+0x98>
 800315a:	7abb      	ldrb	r3, [r7, #10]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <dwIsReceiveFailed+0x9c>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <dwIsReceiveFailed+0x9e>
 8003164:	2300      	movs	r3, #0
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDeviceTypes_t *dev)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3319      	adds	r3, #25
 8003180:	2211      	movs	r2, #17
 8003182:	2105      	movs	r1, #5
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fe06 	bl	8001d96 <getBit>
 800318a:	4603      	mov	r3, r0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <dwClearReceiveTimestampAvailableStatus>:
    uint32_t reg = 0xffffffff;
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDeviceTypes_t *dev)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af02      	add	r7, sp, #8
 800319a:	6078      	str	r0, [r7, #4]
    uint8_t reg[LEN_SYS_STATUS] = {0};
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	2300      	movs	r3, #0
 80031a2:	733b      	strb	r3, [r7, #12]
    setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 80031a4:	f107 0008 	add.w	r0, r7, #8
 80031a8:	2301      	movs	r3, #1
 80031aa:	220a      	movs	r2, #10
 80031ac:	2105      	movs	r1, #5
 80031ae:	f7fe fdb6 	bl	8001d1e <setBit>
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	2205      	movs	r2, #5
 80031b8:	9200      	str	r2, [sp, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	210f      	movs	r1, #15
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f001 f80c 	bl	80041dc <dwSpiWrite>
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDeviceTypes_t *dev)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
    // clear latched RX bits (i.e. write 1 to clear)
    uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <dwClearReceiveStatus+0x20>)
 80031d6:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	210f      	movs	r1, #15
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f001 f856 	bl	8004290 <dwSpiWrite32>
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2427ff00 	.word	0x2427ff00

080031f0 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDeviceTypes_t *dev)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    // clear latched TX bits
    uint32_t regData = SYS_STATUS_ALL_TX;
 80031f8:	23f8      	movs	r3, #248	; 0xf8
 80031fa:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	210f      	movs	r1, #15
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 f844 	bl	8004290 <dwSpiWrite32>
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <spiReadRxInfo>:
    f2 = (unsigned int)fpAmpl2Bytes[0] | ((unsigned int)fpAmpl2Bytes[1] << 8);
    return (float)f2 / noise;
}

static float spiReadRxInfo(dwDeviceTypes_t *dev)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af02      	add	r7, sp, #8
 8003216:	6078      	str	r0, [r7, #4]
    uint8_t rxFrameInfo[LEN_RX_FINFO];
    dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2204      	movs	r2, #4
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	2110      	movs	r1, #16
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 ff71 	bl	800410c <dwSpiRead>
    return (float)((((unsigned int)rxFrameInfo[2] >> 4) & 0xFF) | ((unsigned int)rxFrameInfo[3] << 4));
 800322a:	7bbb      	ldrb	r3, [r7, #14]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	4313      	orrs	r3, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fd4b 	bl	8000cd4 <__aeabi_ui2f>
 800323e:	4603      	mov	r3, r0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <calculatePower>:

static float calculatePower(float base, float N, uint8_t pulseFrequency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	71fb      	strb	r3, [r7, #7]
    float A, corrFac;

    if (TX_PULSE_FREQ_16MHZ == pulseFrequency)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d104      	bne.n	8003266 <calculatePower+0x1e>
    {
        A = 113.77f;
 800325c:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <calculatePower+0x94>)
 800325e:	61fb      	str	r3, [r7, #28]
        corrFac = 2.3334f;
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <calculatePower+0x98>)
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e003      	b.n	800326e <calculatePower+0x26>
    }
    else
    {
        A = 121.74f;
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <calculatePower+0x9c>)
 8003268:	61fb      	str	r3, [r7, #28]
        corrFac = 1.1667f;
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <calculatePower+0xa0>)
 800326c:	61bb      	str	r3, [r7, #24]
    }

    float estFpPwr = 10.0f * log10f(base / (N * N)) - A;
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	68b8      	ldr	r0, [r7, #8]
 8003272:	f7fd fd87 	bl	8000d84 <__aeabi_fmul>
 8003276:	4603      	mov	r3, r0
 8003278:	4619      	mov	r1, r3
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7fd fe36 	bl	8000eec <__aeabi_fdiv>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	f008 f92c 	bl	800b4e0 <log10f>
 8003288:	4603      	mov	r3, r0
 800328a:	4918      	ldr	r1, [pc, #96]	; (80032ec <calculatePower+0xa4>)
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fd79 	bl	8000d84 <__aeabi_fmul>
 8003292:	4603      	mov	r3, r0
 8003294:	69f9      	ldr	r1, [r7, #28]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fc6a 	bl	8000b70 <__aeabi_fsub>
 800329c:	4603      	mov	r3, r0
 800329e:	617b      	str	r3, [r7, #20]

    if (estFpPwr <= -88)
 80032a0:	4913      	ldr	r1, [pc, #76]	; (80032f0 <calculatePower+0xa8>)
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7fd ff16 	bl	80010d4 <__aeabi_fcmple>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <calculatePower+0x6a>
    {
        return estFpPwr;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	e010      	b.n	80032d4 <calculatePower+0x8c>
    }
    else
    {
        // approximation of Fig. 22 in user manual for dbm correction
        estFpPwr += (estFpPwr + 88) * corrFac;
 80032b2:	4910      	ldr	r1, [pc, #64]	; (80032f4 <calculatePower+0xac>)
 80032b4:	6978      	ldr	r0, [r7, #20]
 80032b6:	f7fd fc5d 	bl	8000b74 <__addsf3>
 80032ba:	4603      	mov	r3, r0
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fd60 	bl	8000d84 <__aeabi_fmul>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4619      	mov	r1, r3
 80032c8:	6978      	ldr	r0, [r7, #20]
 80032ca:	f7fd fc53 	bl	8000b74 <__addsf3>
 80032ce:	4603      	mov	r3, r0
 80032d0:	617b      	str	r3, [r7, #20]
    }

    return estFpPwr;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	42e38a3d 	.word	0x42e38a3d
 80032e0:	4015566d 	.word	0x4015566d
 80032e4:	42f37ae1 	.word	0x42f37ae1
 80032e8:	3f95566d 	.word	0x3f95566d
 80032ec:	41200000 	.word	0x41200000
 80032f0:	c2b00000 	.word	0xc2b00000
 80032f4:	42b00000 	.word	0x42b00000

080032f8 <dwGetReceivePower>:

    return calculatePower(f1 * f1 + f2 * f2 + f3 * f3, N, dev->pulseFrequency);
}

float dwGetReceivePower(dwDeviceTypes_t *dev)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    float C = (float)dwSpiRead16(dev, RX_FQUAL, CIR_PWR_SUB);
 8003300:	2206      	movs	r2, #6
 8003302:	2112      	movs	r1, #18
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 ff3f 	bl	8004188 <dwSpiRead16>
 800330a:	4603      	mov	r3, r0
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd fce1 	bl	8000cd4 <__aeabi_ui2f>
 8003312:	4603      	mov	r3, r0
 8003314:	617b      	str	r3, [r7, #20]
    float N = spiReadRxInfo(dev);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff7a 	bl	8003210 <spiReadRxInfo>
 800331c:	6138      	str	r0, [r7, #16]

    float twoPower17 = 131072.0f;
 800331e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003322:	60fb      	str	r3, [r7, #12]

    return calculatePower(C * twoPower17, N, dev->pulseFrequency);
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f7fd fd2c 	bl	8000d84 <__aeabi_fmul>
 800332c:	4603      	mov	r3, r0
 800332e:	4618      	mov	r0, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003336:	461a      	mov	r2, r3
 8003338:	6939      	ldr	r1, [r7, #16]
 800333a:	f7ff ff85 	bl	8003248 <calculatePower>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <dwSetMode>:
    dwSetChannel(dev, dev->channel);
    dwSetPreambleCode(dev, dev->preambleCode);
}

void dwSetMode(dwDeviceTypes_t *dev)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
    dwSetDataRate(dev, dev->dataRate);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff faad 	bl	80028b8 <dwSetDataRate>
    dwSetPulseFrequency(dev, dev->pulseFrequency);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fb27 	bl	80029ba <dwSetPulseFrequency>
    dwSetPreambleLength(dev, dev->preambleLength);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fb55 	bl	8002a24 <dwSetPreambleLength>
    // TODO add channel and code to mode tuples
    // TODO add channel and code settings with checks (see Table 58)
    dwSetChannel(dev, dev->channel);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fbbb 	bl	8002afe <dwSetChannel>
    dwSetPreambleCode(dev, dev->preambleCode);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fbd1 	bl	8002b38 <dwSetPreambleCode>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <dwTune>:

void dwTune(dwDeviceTypes_t *dev)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b098      	sub	sp, #96	; 0x60
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	6078      	str	r0, [r7, #4]
    uint8_t tcpgdelay[LEN_TC_PGDELAY];
    uint8_t fspllcfg[LEN_FS_PLLCFG];
    uint8_t fsplltune[LEN_FS_PLLTUNE];
    uint8_t fsxtalt[LEN_FS_XTALT];
    // AGC_TUNE1
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <dwTune+0x24>
    {
        writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 80033b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033b6:	2202      	movs	r2, #2
 80033b8:	f648 0170 	movw	r1, #34928	; 0x8870
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fd12 	bl	8001de6 <writeValueToBytes>
 80033c2:	e00c      	b.n	80033de <dwTune+0x3e>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d107      	bne.n	80033de <dwTune+0x3e>
    {
        writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 80033ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033d2:	2202      	movs	r2, #2
 80033d4:	f648 019b 	movw	r1, #34971	; 0x889b
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fd04 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // AGC_TUNE2
    writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 80033de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033e2:	2204      	movs	r2, #4
 80033e4:	49b9      	ldr	r1, [pc, #740]	; (80036cc <dwTune+0x32c>)
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fcfd 	bl	8001de6 <writeValueToBytes>
    // AGC_TUNE3
    writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 80033ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033f0:	2202      	movs	r2, #2
 80033f2:	2135      	movs	r1, #53	; 0x35
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fcf6 	bl	8001de6 <writeValueToBytes>
    // DRX_TUNE0b (already optimized according to Table 20 of user manual)
    if (dev->dataRate == TRX_RATE_110KBPS)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <dwTune+0x74>
    {
        writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8003404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003408:	2202      	movs	r2, #2
 800340a:	2116      	movs	r1, #22
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fcea 	bl	8001de6 <writeValueToBytes>
 8003412:	e018      	b.n	8003446 <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_850KBPS)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <dwTune+0x8e>
    {
        writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 800341e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003422:	2202      	movs	r2, #2
 8003424:	2106      	movs	r1, #6
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fcdd 	bl	8001de6 <writeValueToBytes>
 800342c:	e00b      	b.n	8003446 <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_6800KBPS)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003434:	2b02      	cmp	r3, #2
 8003436:	d106      	bne.n	8003446 <dwTune+0xa6>
    {
        writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8003438:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800343c:	2202      	movs	r2, #2
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fcd0 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1a
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <dwTune+0xc0>
    {
        writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8003450:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003454:	2202      	movs	r2, #2
 8003456:	2187      	movs	r1, #135	; 0x87
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fcc4 	bl	8001de6 <writeValueToBytes>
 800345e:	e00b      	b.n	8003478 <dwTune+0xd8>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003466:	2b02      	cmp	r3, #2
 8003468:	d106      	bne.n	8003478 <dwTune+0xd8>
    {
        writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 800346a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800346e:	2202      	movs	r2, #2
 8003470:	218d      	movs	r1, #141	; 0x8d
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fcb7 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1b
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800347e:	2b06      	cmp	r3, #6
 8003480:	d009      	beq.n	8003496 <dwTune+0xf6>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003488:	2b0a      	cmp	r3, #10
 800348a:	d004      	beq.n	8003496 <dwTune+0xf6>
        dev->preambleLength == TX_PREAMBLE_LEN_4096)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8003492:	2b03      	cmp	r3, #3
 8003494:	d10c      	bne.n	80034b0 <dwTune+0x110>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800349c:	2b00      	cmp	r3, #0
 800349e:	d12a      	bne.n	80034f6 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 80034a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034a4:	2202      	movs	r2, #2
 80034a6:	2164      	movs	r1, #100	; 0x64
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fc9c 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80034ae:	e022      	b.n	80034f6 <dwTune+0x156>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->preambleLength != TX_PREAMBLE_LEN_64)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d011      	beq.n	80034de <dwTune+0x13e>
    {
        if (dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d004      	beq.n	80034ce <dwTune+0x12e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d113      	bne.n	80034f6 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 80034ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034d2:	2202      	movs	r2, #2
 80034d4:	2120      	movs	r1, #32
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fc85 	bl	8001de6 <writeValueToBytes>
 80034dc:	e00b      	b.n	80034f6 <dwTune+0x156>
            // TODO proper error/warning handling
        }
    }
    else
    {
        if (dev->dataRate == TRX_RATE_6800KBPS)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d106      	bne.n	80034f6 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 80034e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034ec:	2202      	movs	r2, #2
 80034ee:	2110      	movs	r1, #16
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe fc78 	bl	8001de6 <writeValueToBytes>
        {
            // TODO proper error/warning handling
        }
    }
    // DRX_TUNE2
    if (dev->pacSize == PAC_SIZE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d119      	bne.n	8003534 <dwTune+0x194>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <dwTune+0x17a>
        {
            writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 800350a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800350e:	2204      	movs	r2, #4
 8003510:	496f      	ldr	r1, [pc, #444]	; (80036d0 <dwTune+0x330>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fc67 	bl	8001de6 <writeValueToBytes>
 8003518:	e068      	b.n	80035ec <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003520:	2b02      	cmp	r3, #2
 8003522:	d163      	bne.n	80035ec <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8003524:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003528:	2204      	movs	r2, #4
 800352a:	496a      	ldr	r1, [pc, #424]	; (80036d4 <dwTune+0x334>)
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fc5a 	bl	8001de6 <writeValueToBytes>
 8003532:	e05b      	b.n	80035ec <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_16)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800353a:	2b10      	cmp	r3, #16
 800353c:	d119      	bne.n	8003572 <dwTune+0x1d2>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <dwTune+0x1b8>
        {
            writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 8003548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800354c:	2204      	movs	r2, #4
 800354e:	4962      	ldr	r1, [pc, #392]	; (80036d8 <dwTune+0x338>)
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe fc48 	bl	8001de6 <writeValueToBytes>
 8003556:	e049      	b.n	80035ec <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800355e:	2b02      	cmp	r3, #2
 8003560:	d144      	bne.n	80035ec <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8003562:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003566:	2204      	movs	r2, #4
 8003568:	495c      	ldr	r1, [pc, #368]	; (80036dc <dwTune+0x33c>)
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fc3b 	bl	8001de6 <writeValueToBytes>
 8003570:	e03c      	b.n	80035ec <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_32)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003578:	2b20      	cmp	r3, #32
 800357a:	d119      	bne.n	80035b0 <dwTune+0x210>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <dwTune+0x1f6>
        {
            writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 8003586:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800358a:	2204      	movs	r2, #4
 800358c:	4954      	ldr	r1, [pc, #336]	; (80036e0 <dwTune+0x340>)
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fc29 	bl	8001de6 <writeValueToBytes>
 8003594:	e02a      	b.n	80035ec <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800359c:	2b02      	cmp	r3, #2
 800359e:	d125      	bne.n	80035ec <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 80035a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035a4:	2204      	movs	r2, #4
 80035a6:	494f      	ldr	r1, [pc, #316]	; (80036e4 <dwTune+0x344>)
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fc1c 	bl	8001de6 <writeValueToBytes>
 80035ae:	e01d      	b.n	80035ec <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_64)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d118      	bne.n	80035ec <dwTune+0x24c>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <dwTune+0x234>
        {
            writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 80035c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035c8:	2204      	movs	r2, #4
 80035ca:	4947      	ldr	r1, [pc, #284]	; (80036e8 <dwTune+0x348>)
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe fc0a 	bl	8001de6 <writeValueToBytes>
 80035d2:	e00b      	b.n	80035ec <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d106      	bne.n	80035ec <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 80035de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035e2:	2204      	movs	r2, #4
 80035e4:	4941      	ldr	r1, [pc, #260]	; (80036ec <dwTune+0x34c>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fbfd 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE4H
    if (dev->preambleLength == TX_PREAMBLE_LEN_64)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <dwTune+0x266>
    {
        writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 80035f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035fa:	2202      	movs	r2, #2
 80035fc:	2110      	movs	r1, #16
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fbf1 	bl	8001de6 <writeValueToBytes>
 8003604:	e006      	b.n	8003614 <dwTune+0x274>
    }
    else
    {
        writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 8003606:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800360a:	2202      	movs	r2, #2
 800360c:	2128      	movs	r1, #40	; 0x28
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe fbe9 	bl	8001de6 <writeValueToBytes>
    }
    // RF_RXCTRLH
    if (dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800361a:	2b04      	cmp	r3, #4
 800361c:	d00c      	beq.n	8003638 <dwTune+0x298>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003624:	2b07      	cmp	r3, #7
 8003626:	d007      	beq.n	8003638 <dwTune+0x298>
    {
        writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 8003628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362c:	2201      	movs	r2, #1
 800362e:	21d8      	movs	r1, #216	; 0xd8
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fbd8 	bl	8001de6 <writeValueToBytes>
 8003636:	e006      	b.n	8003646 <dwTune+0x2a6>
    }
    else
    {
        writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 8003638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800363c:	2201      	movs	r2, #1
 800363e:	21bc      	movs	r1, #188	; 0xbc
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fbd0 	bl	8001de6 <writeValueToBytes>
    }
    // RX_TXCTRL
    if (dev->channel == CHANNEL_1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <dwTune+0x2c2>
    {
        writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8003650:	f107 0320 	add.w	r3, r7, #32
 8003654:	2204      	movs	r2, #4
 8003656:	f645 4140 	movw	r1, #23616	; 0x5c40
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fbc3 	bl	8001de6 <writeValueToBytes>
 8003660:	e05a      	b.n	8003718 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003668:	2b02      	cmp	r3, #2
 800366a:	d107      	bne.n	800367c <dwTune+0x2dc>
    {
        writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 800366c:	f107 0320 	add.w	r3, r7, #32
 8003670:	2204      	movs	r2, #4
 8003672:	491f      	ldr	r1, [pc, #124]	; (80036f0 <dwTune+0x350>)
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fbb6 	bl	8001de6 <writeValueToBytes>
 800367a:	e04d      	b.n	8003718 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_3)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <dwTune+0x2f6>
    {
        writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 8003686:	f107 0320 	add.w	r3, r7, #32
 800368a:	2204      	movs	r2, #4
 800368c:	4919      	ldr	r1, [pc, #100]	; (80036f4 <dwTune+0x354>)
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fba9 	bl	8001de6 <writeValueToBytes>
 8003694:	e040      	b.n	8003718 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_4)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800369c:	2b04      	cmp	r3, #4
 800369e:	d107      	bne.n	80036b0 <dwTune+0x310>
    {
        writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 80036a0:	f107 0320 	add.w	r3, r7, #32
 80036a4:	2204      	movs	r2, #4
 80036a6:	4914      	ldr	r1, [pc, #80]	; (80036f8 <dwTune+0x358>)
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe fb9c 	bl	8001de6 <writeValueToBytes>
 80036ae:	e033      	b.n	8003718 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_5)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d122      	bne.n	8003700 <dwTune+0x360>
    {
        writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 80036ba:	f107 0320 	add.w	r3, r7, #32
 80036be:	2204      	movs	r2, #4
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <dwTune+0x35c>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fb8f 	bl	8001de6 <writeValueToBytes>
 80036c8:	e026      	b.n	8003718 <dwTune+0x378>
 80036ca:	bf00      	nop
 80036cc:	2502a907 	.word	0x2502a907
 80036d0:	311a002d 	.word	0x311a002d
 80036d4:	313b006b 	.word	0x313b006b
 80036d8:	331a0052 	.word	0x331a0052
 80036dc:	333b00be 	.word	0x333b00be
 80036e0:	351a009a 	.word	0x351a009a
 80036e4:	353b015e 	.word	0x353b015e
 80036e8:	371a011d 	.word	0x371a011d
 80036ec:	373b0296 	.word	0x373b0296
 80036f0:	00045ca0 	.word	0x00045ca0
 80036f4:	00086cc0 	.word	0x00086cc0
 80036f8:	00045c80 	.word	0x00045c80
 80036fc:	001e3fe0 	.word	0x001e3fe0
    }
    else if (dev->channel == CHANNEL_7)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003706:	2b07      	cmp	r3, #7
 8003708:	d106      	bne.n	8003718 <dwTune+0x378>
    {
        writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 800370a:	f107 0320 	add.w	r3, r7, #32
 800370e:	2204      	movs	r2, #4
 8003710:	49be      	ldr	r1, [pc, #760]	; (8003a0c <dwTune+0x66c>)
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fb67 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TC_PGDELAY
    if (dev->channel == CHANNEL_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <dwTune+0x392>
    {
        writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8003722:	f107 031c 	add.w	r3, r7, #28
 8003726:	2201      	movs	r2, #1
 8003728:	21c9      	movs	r1, #201	; 0xc9
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fb5b 	bl	8001de6 <writeValueToBytes>
 8003730:	e03f      	b.n	80037b2 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003738:	2b02      	cmp	r3, #2
 800373a:	d107      	bne.n	800374c <dwTune+0x3ac>
    {
        writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	2201      	movs	r2, #1
 8003742:	21c2      	movs	r1, #194	; 0xc2
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fb4e 	bl	8001de6 <writeValueToBytes>
 800374a:	e032      	b.n	80037b2 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <dwTune+0x3c6>
    {
        writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	2201      	movs	r2, #1
 800375c:	21c5      	movs	r1, #197	; 0xc5
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fb41 	bl	8001de6 <writeValueToBytes>
 8003764:	e025      	b.n	80037b2 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_4)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800376c:	2b04      	cmp	r3, #4
 800376e:	d107      	bne.n	8003780 <dwTune+0x3e0>
    {
        writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	2201      	movs	r2, #1
 8003776:	2195      	movs	r1, #149	; 0x95
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fb34 	bl	8001de6 <writeValueToBytes>
 800377e:	e018      	b.n	80037b2 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_5)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003786:	2b05      	cmp	r3, #5
 8003788:	d107      	bne.n	800379a <dwTune+0x3fa>
    {
        writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 800378a:	f107 031c 	add.w	r3, r7, #28
 800378e:	2201      	movs	r2, #1
 8003790:	21c0      	movs	r1, #192	; 0xc0
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fb27 	bl	8001de6 <writeValueToBytes>
 8003798:	e00b      	b.n	80037b2 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_7)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037a0:	2b07      	cmp	r3, #7
 80037a2:	d106      	bne.n	80037b2 <dwTune+0x412>
    {
        writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	2201      	movs	r2, #1
 80037aa:	2193      	movs	r1, #147	; 0x93
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fb1a 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // FS_PLLCFG and FS_PLLTUNE
    if (dev->channel == CHANNEL_1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d10e      	bne.n	80037da <dwTune+0x43a>
    {
        writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 80037bc:	f107 0318 	add.w	r3, r7, #24
 80037c0:	2204      	movs	r2, #4
 80037c2:	4993      	ldr	r1, [pc, #588]	; (8003a10 <dwTune+0x670>)
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fb0e 	bl	8001de6 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	2201      	movs	r2, #1
 80037d0:	211e      	movs	r1, #30
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fb07 	bl	8001de6 <writeValueToBytes>
 80037d8:	e044      	b.n	8003864 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d004      	beq.n	80037ee <dwTune+0x44e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d10e      	bne.n	800380c <dwTune+0x46c>
    {
        writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 80037ee:	f107 0318 	add.w	r3, r7, #24
 80037f2:	2204      	movs	r2, #4
 80037f4:	4987      	ldr	r1, [pc, #540]	; (8003a14 <dwTune+0x674>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe faf5 	bl	8001de6 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	2201      	movs	r2, #1
 8003802:	2126      	movs	r1, #38	; 0x26
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe faee 	bl	8001de6 <writeValueToBytes>
 800380a:	e02b      	b.n	8003864 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003812:	2b03      	cmp	r3, #3
 8003814:	d10e      	bne.n	8003834 <dwTune+0x494>
    {
        writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 8003816:	f107 0318 	add.w	r3, r7, #24
 800381a:	2204      	movs	r2, #4
 800381c:	497e      	ldr	r1, [pc, #504]	; (8003a18 <dwTune+0x678>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fae1 	bl	8001de6 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	2201      	movs	r2, #1
 800382a:	2156      	movs	r1, #86	; 0x56
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fada 	bl	8001de6 <writeValueToBytes>
 8003832:	e017      	b.n	8003864 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800383a:	2b05      	cmp	r3, #5
 800383c:	d004      	beq.n	8003848 <dwTune+0x4a8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003844:	2b07      	cmp	r3, #7
 8003846:	d10d      	bne.n	8003864 <dwTune+0x4c4>
    {
        writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 8003848:	f107 0318 	add.w	r3, r7, #24
 800384c:	2204      	movs	r2, #4
 800384e:	4973      	ldr	r1, [pc, #460]	; (8003a1c <dwTune+0x67c>)
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fac8 	bl	8001de6 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	2201      	movs	r2, #1
 800385c:	21a6      	movs	r1, #166	; 0xa6
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fac1 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_CFG1
    writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 8003864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003868:	2201      	movs	r2, #1
 800386a:	210d      	movs	r1, #13
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe faba 	bl	8001de6 <writeValueToBytes>
    // LDE_CFG2
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003878:	2b01      	cmp	r3, #1
 800387a:	d108      	bne.n	800388e <dwTune+0x4ee>
    {
        writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 800387c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003880:	2202      	movs	r2, #2
 8003882:	f241 6107 	movw	r1, #5639	; 0x1607
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe faad 	bl	8001de6 <writeValueToBytes>
 800388c:	e00c      	b.n	80038a8 <dwTune+0x508>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003894:	2b02      	cmp	r3, #2
 8003896:	d107      	bne.n	80038a8 <dwTune+0x508>
    {
        writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 8003898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800389c:	2202      	movs	r2, #2
 800389e:	f240 6107 	movw	r1, #1543	; 0x607
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fa9f 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_REPC
    if (dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d004      	beq.n	80038bc <dwTune+0x51c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d116      	bne.n	80038ea <dwTune+0x54a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <dwTune+0x538>
        {
            writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80038c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ca:	2202      	movs	r2, #2
 80038cc:	f640 3133 	movw	r1, #2867	; 0xb33
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fa88 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80038d6:	e154      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 80038d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038dc:	2202      	movs	r2, #2
 80038de:	f645 1198 	movw	r1, #22936	; 0x5998
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fa7f 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80038e8:	e14b      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d004      	beq.n	80038fe <dwTune+0x55e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d116      	bne.n	800392c <dwTune+0x58c>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <dwTune+0x57a>
        {
            writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390c:	2202      	movs	r2, #2
 800390e:	f640 213d 	movw	r1, #2621	; 0xa3d
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fa67 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003918:	e133      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 800391a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800391e:	2202      	movs	r2, #2
 8003920:	f245 11ea 	movw	r1, #20970	; 0x51ea
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fa5e 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 800392a:	e12a      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_4)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003932:	2b04      	cmp	r3, #4
 8003934:	d116      	bne.n	8003964 <dwTune+0x5c4>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <dwTune+0x5b2>
        {
            writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003944:	2202      	movs	r2, #2
 8003946:	f640 0151 	movw	r1, #2129	; 0x851
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fa4b 	bl	8001de6 <writeValueToBytes>
 8003950:	e117      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 8003952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003956:	2202      	movs	r2, #2
 8003958:	f244 218e 	movw	r1, #17038	; 0x428e
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fa42 	bl	8001de6 <writeValueToBytes>
 8003962:	e10e      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_5)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800396a:	2b05      	cmp	r3, #5
 800396c:	d116      	bne.n	800399c <dwTune+0x5fc>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <dwTune+0x5ea>
        {
            writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397c:	2202      	movs	r2, #2
 800397e:	f640 01a3 	movw	r1, #2211	; 0x8a3
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fa2f 	bl	8001de6 <writeValueToBytes>
 8003988:	e0fb      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 800398a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800398e:	2202      	movs	r2, #2
 8003990:	f244 511e 	movw	r1, #17694	; 0x451e
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fa26 	bl	8001de6 <writeValueToBytes>
 800399a:	e0f2      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_6)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d116      	bne.n	80039d4 <dwTune+0x634>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d108      	bne.n	80039c2 <dwTune+0x622>
        {
            writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80039b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b4:	2202      	movs	r2, #2
 80039b6:	f240 51c2 	movw	r1, #1474	; 0x5c2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fa13 	bl	8001de6 <writeValueToBytes>
 80039c0:	e0df      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 80039c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c6:	2202      	movs	r2, #2
 80039c8:	f642 6114 	movw	r1, #11796	; 0x2e14
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fa0a 	bl	8001de6 <writeValueToBytes>
 80039d2:	e0d6      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_7)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039da:	2b07      	cmp	r3, #7
 80039dc:	d120      	bne.n	8003a20 <dwTune+0x680>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d108      	bne.n	80039fa <dwTune+0x65a>
        {
            writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80039e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ec:	2202      	movs	r2, #2
 80039ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe f9f7 	bl	8001de6 <writeValueToBytes>
 80039f8:	e0c3      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 80039fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039fe:	2202      	movs	r2, #2
 8003a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe f9ee 	bl	8001de6 <writeValueToBytes>
 8003a0a:	e0ba      	b.n	8003b82 <dwTune+0x7e2>
 8003a0c:	001e7de0 	.word	0x001e7de0
 8003a10:	09000407 	.word	0x09000407
 8003a14:	08400508 	.word	0x08400508
 8003a18:	08401009 	.word	0x08401009
 8003a1c:	0800041d 	.word	0x0800041d
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_9)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a26:	2b09      	cmp	r3, #9
 8003a28:	d116      	bne.n	8003a58 <dwTune+0x6b8>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d108      	bne.n	8003a46 <dwTune+0x6a6>
        {
            writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f240 511e 	movw	r1, #1310	; 0x51e
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe f9d1 	bl	8001de6 <writeValueToBytes>
 8003a44:	e09d      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 8003a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f642 01f4 	movw	r1, #10484	; 0x28f4
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe f9c8 	bl	8001de6 <writeValueToBytes>
 8003a56:	e094      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a5e:	2b0a      	cmp	r3, #10
 8003a60:	d004      	beq.n	8003a6c <dwTune+0x6cc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a68:	2b11      	cmp	r3, #17
 8003a6a:	d116      	bne.n	8003a9a <dwTune+0x6fa>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <dwTune+0x6e8>
        {
            writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f240 6166 	movw	r1, #1638	; 0x666
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe f9b0 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003a86:	e07c      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 8003a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f243 3132 	movw	r1, #13106	; 0x3332
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe f9a7 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003a98:	e073      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_11)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa0:	2b0b      	cmp	r3, #11
 8003aa2:	d116      	bne.n	8003ad2 <dwTune+0x732>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d108      	bne.n	8003ac0 <dwTune+0x720>
        {
            writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f240 715c 	movw	r1, #1884	; 0x75c
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe f994 	bl	8001de6 <writeValueToBytes>
 8003abe:	e060      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 8003ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f643 21e0 	movw	r1, #15072	; 0x3ae0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe f98b 	bl	8001de6 <writeValueToBytes>
 8003ad0:	e057      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_12)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	d116      	bne.n	8003b0a <dwTune+0x76a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <dwTune+0x758>
        {
            writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aea:	2202      	movs	r2, #2
 8003aec:	f240 71ae 	movw	r1, #1966	; 0x7ae
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe f978 	bl	8001de6 <writeValueToBytes>
 8003af6:	e044      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 8003af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003afc:	2202      	movs	r2, #2
 8003afe:	f643 5170 	movw	r1, #15728	; 0x3d70
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe f96f 	bl	8001de6 <writeValueToBytes>
 8003b08:	e03b      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b10:	2b12      	cmp	r3, #18
 8003b12:	d004      	beq.n	8003b1e <dwTune+0x77e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1a:	2b13      	cmp	r3, #19
 8003b1c:	d116      	bne.n	8003b4c <dwTune+0x7ac>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <dwTune+0x79a>
        {
            writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f957 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b38:	e023      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 8003b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f243 51c2 	movw	r1, #13762	; 0x35c2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe f94e 	bl	8001de6 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b4a:	e01a      	b.n	8003b82 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_20)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b52:	2b14      	cmp	r3, #20
 8003b54:	d115      	bne.n	8003b82 <dwTune+0x7e2>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <dwTune+0x7d2>
        {
            writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b64:	2202      	movs	r2, #2
 8003b66:	f640 01f5 	movw	r1, #2293	; 0x8f5
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe f93b 	bl	8001de6 <writeValueToBytes>
 8003b70:	e007      	b.n	8003b82 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8003b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b76:	2202      	movs	r2, #2
 8003b78:	f244 71ae 	movw	r1, #18350	; 0x47ae
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe f932 	bl	8001de6 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TX_POWER (enabled smart transmit power control)
    if (dev->forceTxPower)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <dwTune+0x800>
    {
        writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	4619      	mov	r1, r3
 8003b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b96:	2204      	movs	r2, #4
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe f924 	bl	8001de6 <writeValueToBytes>
 8003b9e:	e12f      	b.n	8003e00 <dwTune+0xa60>
    }
    else if (dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d004      	beq.n	8003bb4 <dwTune+0x814>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d136      	bne.n	8003c22 <dwTune+0x882>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d115      	bne.n	8003bea <dwTune+0x84a>
        {
            if (dev->smartPower)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <dwTune+0x838>
            {
                writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 8003bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bcc:	2204      	movs	r2, #4
 8003bce:	4995      	ldr	r1, [pc, #596]	; (8003e24 <dwTune+0xa84>)
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe f908 	bl	8001de6 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003bd6:	e112      	b.n	8003dfe <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 8003bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bdc:	2204      	movs	r2, #4
 8003bde:	f04f 3175 	mov.w	r1, #1970632053	; 0x75757575
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe f8ff 	bl	8001de6 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003be8:	e109      	b.n	8003dfe <dwTune+0xa5e>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	f040 8104 	bne.w	8003dfe <dwTune+0xa5e>
        {
            if (dev->smartPower)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <dwTune+0x870>
            {
                writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 8003c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c04:	2204      	movs	r2, #4
 8003c06:	4988      	ldr	r1, [pc, #544]	; (8003e28 <dwTune+0xa88>)
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe f8ec 	bl	8001de6 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003c0e:	e0f6      	b.n	8003dfe <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 8003c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c14:	2204      	movs	r2, #4
 8003c16:	f04f 3167 	mov.w	r1, #1734829927	; 0x67676767
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe f8e3 	bl	8001de6 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003c20:	e0ed      	b.n	8003dfe <dwTune+0xa5e>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d136      	bne.n	8003c9a <dwTune+0x8fa>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d115      	bne.n	8003c62 <dwTune+0x8c2>
        {
            if (dev->smartPower)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <dwTune+0x8b0>
            {
                writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8003c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c44:	2204      	movs	r2, #4
 8003c46:	4979      	ldr	r1, [pc, #484]	; (8003e2c <dwTune+0xa8c>)
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe f8cc 	bl	8001de6 <writeValueToBytes>
 8003c4e:	e0d7      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8003c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c54:	2204      	movs	r2, #4
 8003c56:	f04f 316f 	mov.w	r1, #1869573999	; 0x6f6f6f6f
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe f8c3 	bl	8001de6 <writeValueToBytes>
 8003c60:	e0ce      	b.n	8003e00 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	f040 80c9 	bne.w	8003e00 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <dwTune+0x8e8>
            {
                writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8003c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	496c      	ldr	r1, [pc, #432]	; (8003e30 <dwTune+0xa90>)
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe f8b0 	bl	8001de6 <writeValueToBytes>
 8003c86:	e0bb      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8003c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	f04f 318b 	mov.w	r1, #2341178251	; 0x8b8b8b8b
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f8a7 	bl	8001de6 <writeValueToBytes>
 8003c98:	e0b2      	b.n	8003e00 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_4)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d136      	bne.n	8003d12 <dwTune+0x972>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d115      	bne.n	8003cda <dwTune+0x93a>
        {
            if (dev->smartPower)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <dwTune+0x928>
            {
                writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8003cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	495d      	ldr	r1, [pc, #372]	; (8003e34 <dwTune+0xa94>)
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe f890 	bl	8001de6 <writeValueToBytes>
 8003cc6:	e09b      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8003cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ccc:	2204      	movs	r2, #4
 8003cce:	f04f 315f 	mov.w	r1, #1600085855	; 0x5f5f5f5f
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe f887 	bl	8001de6 <writeValueToBytes>
 8003cd8:	e092      	b.n	8003e00 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	f040 808d 	bne.w	8003e00 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <dwTune+0x960>
            {
                writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8003cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	4950      	ldr	r1, [pc, #320]	; (8003e38 <dwTune+0xa98>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe f874 	bl	8001de6 <writeValueToBytes>
 8003cfe:	e07f      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8003d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d04:	2204      	movs	r2, #4
 8003d06:	f04f 319a 	mov.w	r1, #2593823386	; 0x9a9a9a9a
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe f86b 	bl	8001de6 <writeValueToBytes>
 8003d10:	e076      	b.n	8003e00 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_5)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d135      	bne.n	8003d88 <dwTune+0x9e8>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d115      	bne.n	8003d52 <dwTune+0x9b2>
        {
            if (dev->smartPower)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <dwTune+0x9a0>
            {
                writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8003d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d34:	2204      	movs	r2, #4
 8003d36:	4941      	ldr	r1, [pc, #260]	; (8003e3c <dwTune+0xa9c>)
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe f854 	bl	8001de6 <writeValueToBytes>
 8003d3e:	e05f      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8003d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d44:	2204      	movs	r2, #4
 8003d46:	f04f 3148 	mov.w	r1, #1212696648	; 0x48484848
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe f84b 	bl	8001de6 <writeValueToBytes>
 8003d50:	e056      	b.n	8003e00 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d151      	bne.n	8003e00 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <dwTune+0x9d6>
            {
                writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 8003d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	4934      	ldr	r1, [pc, #208]	; (8003e40 <dwTune+0xaa0>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe f839 	bl	8001de6 <writeValueToBytes>
 8003d74:	e044      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 8003d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	f04f 3185 	mov.w	r1, #2240120197	; 0x85858585
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe f830 	bl	8001de6 <writeValueToBytes>
 8003d86:	e03b      	b.n	8003e00 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_7)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d8e:	2b07      	cmp	r3, #7
 8003d90:	d136      	bne.n	8003e00 <dwTune+0xa60>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d115      	bne.n	8003dc8 <dwTune+0xa28>
        {
            if (dev->smartPower)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <dwTune+0xa16>
            {
                writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8003da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003daa:	2204      	movs	r2, #4
 8003dac:	4925      	ldr	r1, [pc, #148]	; (8003e44 <dwTune+0xaa4>)
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe f819 	bl	8001de6 <writeValueToBytes>
 8003db4:	e024      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8003db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dba:	2204      	movs	r2, #4
 8003dbc:	f04f 3192 	mov.w	r1, #2459079314	; 0x92929292
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe f810 	bl	8001de6 <writeValueToBytes>
 8003dc6:	e01b      	b.n	8003e00 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d116      	bne.n	8003e00 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <dwTune+0xa4c>
            {
                writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8003ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de0:	2204      	movs	r2, #4
 8003de2:	4919      	ldr	r1, [pc, #100]	; (8003e48 <dwTune+0xaa8>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd fffe 	bl	8001de6 <writeValueToBytes>
 8003dea:	e009      	b.n	8003e00 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8003dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df0:	2204      	movs	r2, #4
 8003df2:	f04f 31d1 	mov.w	r1, #3520188881	; 0xd1d1d1d1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd fff5 	bl	8001de6 <writeValueToBytes>
 8003dfc:	e000      	b.n	8003e00 <dwTune+0xa60>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003dfe:	bf00      	nop
    {
        // TODO proper error/warning handling
    }
    // Crystal calibration from OTP (if available)
    uint8_t buf_otp[4];
    readBytesOTP(dev, 0x01E, buf_otp);
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	461a      	mov	r2, r3
 8003e06:	211e      	movs	r1, #30
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fe f80c 	bl	8001e26 <readBytesOTP>
    if (buf_otp[0] == 0)
 8003e0e:	7b3b      	ldrb	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11b      	bne.n	8003e4c <dwTune+0xaac>
    {
        // No trim value available from OTP, use midrange value of 0x10
        writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8003e14:	f107 0310 	add.w	r3, r7, #16
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2170      	movs	r1, #112	; 0x70
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd ffe2 	bl	8001de6 <writeValueToBytes>
 8003e22:	e01e      	b.n	8003e62 <dwTune+0xac2>
 8003e24:	15355575 	.word	0x15355575
 8003e28:	07274767 	.word	0x07274767
 8003e2c:	0f2f4f6f 	.word	0x0f2f4f6f
 8003e30:	2b4b6b8b 	.word	0x2b4b6b8b
 8003e34:	1f1f3f5f 	.word	0x1f1f3f5f
 8003e38:	3a5a7a9a 	.word	0x3a5a7a9a
 8003e3c:	0e082848 	.word	0x0e082848
 8003e40:	25456585 	.word	0x25456585
 8003e44:	32527292 	.word	0x32527292
 8003e48:	5171b1d1 	.word	0x5171b1d1
    }
    else
    {
        writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8003e4c:	7b3b      	ldrb	r3, [r7, #12]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	f043 0160 	orr.w	r1, r3, #96	; 0x60
 8003e56:	f107 0310 	add.w	r3, r7, #16
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd ffc2 	bl	8001de6 <writeValueToBytes>
    }
    // write configuration back to chip
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8003e62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e66:	2202      	movs	r2, #2
 8003e68:	9200      	str	r2, [sp, #0]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	2123      	movs	r1, #35	; 0x23
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9b4 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8003e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e78:	2204      	movs	r2, #4
 8003e7a:	9200      	str	r2, [sp, #0]
 8003e7c:	220c      	movs	r2, #12
 8003e7e:	2123      	movs	r1, #35	; 0x23
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f9ab 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 8003e86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	9200      	str	r2, [sp, #0]
 8003e8e:	2212      	movs	r2, #18
 8003e90:	2123      	movs	r1, #35	; 0x23
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9a2 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8003e98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	9200      	str	r2, [sp, #0]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	2127      	movs	r1, #39	; 0x27
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f999 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8003eaa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003eae:	2202      	movs	r2, #2
 8003eb0:	9200      	str	r2, [sp, #0]
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	2127      	movs	r1, #39	; 0x27
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f990 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8003ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	9200      	str	r2, [sp, #0]
 8003ec4:	2206      	movs	r2, #6
 8003ec6:	2127      	movs	r1, #39	; 0x27
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f987 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8003ece:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	9200      	str	r2, [sp, #0]
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	2127      	movs	r1, #39	; 0x27
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f97e 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8003ee0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	9200      	str	r2, [sp, #0]
 8003ee8:	2226      	movs	r2, #38	; 0x26
 8003eea:	2127      	movs	r1, #39	; 0x27
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f975 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 8003ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	9200      	str	r2, [sp, #0]
 8003efa:	f640 0206 	movw	r2, #2054	; 0x806
 8003efe:	212e      	movs	r1, #46	; 0x2e
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f96b 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 8003f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	9200      	str	r2, [sp, #0]
 8003f0e:	f641 0206 	movw	r2, #6150	; 0x1806
 8003f12:	212e      	movs	r1, #46	; 0x2e
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f961 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8003f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1e:	2202      	movs	r2, #2
 8003f20:	9200      	str	r2, [sp, #0]
 8003f22:	f642 0204 	movw	r2, #10244	; 0x2804
 8003f26:	212e      	movs	r1, #46	; 0x2e
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f957 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8003f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f32:	2204      	movs	r2, #4
 8003f34:	9200      	str	r2, [sp, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	211e      	movs	r1, #30
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f94e 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8003f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f44:	2201      	movs	r2, #1
 8003f46:	9200      	str	r2, [sp, #0]
 8003f48:	220b      	movs	r2, #11
 8003f4a:	2128      	movs	r1, #40	; 0x28
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f945 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8003f52:	f107 0320 	add.w	r3, r7, #32
 8003f56:	2204      	movs	r2, #4
 8003f58:	9200      	str	r2, [sp, #0]
 8003f5a:	220c      	movs	r2, #12
 8003f5c:	2128      	movs	r1, #40	; 0x28
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f93c 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	2201      	movs	r2, #1
 8003f6a:	9200      	str	r2, [sp, #0]
 8003f6c:	220b      	movs	r2, #11
 8003f6e:	212a      	movs	r1, #42	; 0x2a
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f933 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 8003f76:	f107 0314 	add.w	r3, r7, #20
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	9200      	str	r2, [sp, #0]
 8003f7e:	220b      	movs	r2, #11
 8003f80:	212b      	movs	r1, #43	; 0x2b
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f92a 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8003f88:	f107 0318 	add.w	r3, r7, #24
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	9200      	str	r2, [sp, #0]
 8003f90:	2207      	movs	r2, #7
 8003f92:	212b      	movs	r1, #43	; 0x2b
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f921 	bl	80041dc <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8003f9a:	f107 0310 	add.w	r3, r7, #16
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	220e      	movs	r2, #14
 8003fa4:	212b      	movs	r1, #43	; 0x2b
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f918 	bl	80041dc <dwSpiWrite>
}
 8003fac:	bf00      	nop
 8003fae:	3758      	adds	r7, #88	; 0x58
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <spiWrite>:

uint16_t buffer[64];

static void spiWrite(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                     const void *data, size_t dataLength)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2110      	movs	r1, #16
 8003fc6:	4813      	ldr	r0, [pc, #76]	; (8004014 <spiWrite+0x60>)
 8003fc8:	f000 fd40 	bl	8004a4c <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	4811      	ldr	r0, [pc, #68]	; (8004018 <spiWrite+0x64>)
 8003fd2:	f002 fe4d 	bl	8006c70 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	490e      	ldr	r1, [pc, #56]	; (8004018 <spiWrite+0x64>)
 8003fe0:	480e      	ldr	r0, [pc, #56]	; (800401c <spiWrite+0x68>)
 8003fe2:	f001 f9df 	bl	80053a4 <HAL_SPI_Transmit>
    memcpy(buffer, data, dataLength);
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	480b      	ldr	r0, [pc, #44]	; (8004018 <spiWrite+0x64>)
 8003fec:	f002 fe40 	bl	8006c70 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	4907      	ldr	r1, [pc, #28]	; (8004018 <spiWrite+0x64>)
 8003ffa:	4808      	ldr	r0, [pc, #32]	; (800401c <spiWrite+0x68>)
 8003ffc:	f001 f9d2 	bl	80053a4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8004000:	2201      	movs	r2, #1
 8004002:	2110      	movs	r1, #16
 8004004:	4803      	ldr	r0, [pc, #12]	; (8004014 <spiWrite+0x60>)
 8004006:	f000 fd21 	bl	8004a4c <HAL_GPIO_WritePin>
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40010800 	.word	0x40010800
 8004018:	20000454 	.word	0x20000454
 800401c:	200003b0 	.word	0x200003b0

08004020 <spiRead>:

static void spiRead(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                    void *data, size_t dataLength)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800402e:	2200      	movs	r2, #0
 8004030:	2110      	movs	r1, #16
 8004032:	4813      	ldr	r0, [pc, #76]	; (8004080 <spiRead+0x60>)
 8004034:	f000 fd0a 	bl	8004a4c <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	4811      	ldr	r0, [pc, #68]	; (8004084 <spiRead+0x64>)
 800403e:	f002 fe17 	bl	8006c70 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	b29a      	uxth	r2, r3
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	490e      	ldr	r1, [pc, #56]	; (8004084 <spiRead+0x64>)
 800404c:	480e      	ldr	r0, [pc, #56]	; (8004088 <spiRead+0x68>)
 800404e:	f001 f9a9 	bl	80053a4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	b29a      	uxth	r2, r3
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	490a      	ldr	r1, [pc, #40]	; (8004084 <spiRead+0x64>)
 800405c:	480a      	ldr	r0, [pc, #40]	; (8004088 <spiRead+0x68>)
 800405e:	f001 fae4 	bl	800562a <HAL_SPI_Receive>
    memcpy(data, buffer, dataLength);
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4907      	ldr	r1, [pc, #28]	; (8004084 <spiRead+0x64>)
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	f002 fe02 	bl	8006c70 <memcpy>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800406c:	2201      	movs	r2, #1
 800406e:	2110      	movs	r1, #16
 8004070:	4803      	ldr	r0, [pc, #12]	; (8004080 <spiRead+0x60>)
 8004072:	f000 fceb 	bl	8004a4c <HAL_GPIO_WritePin>
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40010800 	.word	0x40010800
 8004084:	20000454 	.word	0x20000454
 8004088:	200003b0 	.word	0x200003b0

0800408c <spiSetSpeed>:

static void spiSetSpeed(dwDeviceTypes_t *dev, dwSpiSpeed_t speed)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
    if (speed == dwSpiSpeedLow)
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <spiSetSpeed+0x20>
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <spiSetSpeed+0x34>)
 80040a0:	2220      	movs	r2, #32
 80040a2:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 80040a4:	4806      	ldr	r0, [pc, #24]	; (80040c0 <spiSetSpeed+0x34>)
 80040a6:	f001 f8f9 	bl	800529c <HAL_SPI_Init>
    else
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
        HAL_SPI_Init(&hspi1);
    }
}
 80040aa:	e005      	b.n	80040b8 <spiSetSpeed+0x2c>
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <spiSetSpeed+0x34>)
 80040ae:	2208      	movs	r2, #8
 80040b0:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 80040b2:	4803      	ldr	r0, [pc, #12]	; (80040c0 <spiSetSpeed+0x34>)
 80040b4:	f001 f8f2 	bl	800529c <HAL_SPI_Init>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	200003b0 	.word	0x200003b0

080040c4 <reset>:

static void reset(dwDeviceTypes_t *dev)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80040cc:	2200      	movs	r2, #0
 80040ce:	2102      	movs	r1, #2
 80040d0:	4807      	ldr	r0, [pc, #28]	; (80040f0 <reset+0x2c>)
 80040d2:	f000 fcbb 	bl	8004a4c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80040d6:	200a      	movs	r0, #10
 80040d8:	f000 f950 	bl	800437c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80040dc:	2201      	movs	r2, #1
 80040de:	2102      	movs	r1, #2
 80040e0:	4803      	ldr	r0, [pc, #12]	; (80040f0 <reset+0x2c>)
 80040e2:	f000 fcb3 	bl	8004a4c <HAL_GPIO_WritePin>
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40010c00 	.word	0x40010c00

080040f4 <delayms>:
    HAL_Delay(2);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
}

static void delayms(dwDeviceTypes_t *dev, unsigned int delay)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
    HAL_Delay(delay);
 80040fe:	6838      	ldr	r0, [r7, #0]
 8004100:	f000 f93c 	bl	800437c <HAL_Delay>
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <dwSpiRead>:
#include "dw_spi.h"

void dwSpiRead(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, void *data, size_t length)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	460b      	mov	r3, r1
 800411a:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004126:	b2db      	uxtb	r3, r3
 8004128:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <dwSpiRead+0x5e>
    {
        header[0] |= 0x40;
 8004130:	7c3b      	ldrb	r3, [r7, #16]
 8004132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004136:	b2db      	uxtb	r3, r3
 8004138:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004142:	b2db      	uxtb	r3, r3
 8004144:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	09db      	lsrs	r3, r3, #7
 800414a:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 800414c:	2302      	movs	r3, #2
 800414e:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <dwSpiRead+0x5e>
        {
            header[1] |= 0x80;
 8004156:	7c7b      	ldrb	r3, [r7, #17]
 8004158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800415c:	b2db      	uxtb	r3, r3
 800415e:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 8004166:	2303      	movs	r3, #3
 8004168:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiRead(dev, header, headerLength, data, length);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681c      	ldr	r4, [r3, #0]
 8004170:	f107 0110 	add.w	r1, r7, #16
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	47a0      	blx	r4
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd90      	pop	{r4, r7, pc}

08004188 <dwSpiRead16>:

uint16_t dwSpiRead16(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	460b      	mov	r3, r1
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	72fb      	strb	r3, [r7, #11]
    uint16_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 8004196:	f107 0316 	add.w	r3, r7, #22
 800419a:	7af9      	ldrb	r1, [r7, #11]
 800419c:	2202      	movs	r2, #2
 800419e:	9200      	str	r2, [sp, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff ffb2 	bl	800410c <dwSpiRead>
    return data;
 80041a8:	8afb      	ldrh	r3, [r7, #22]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <dwSpiRead32>:

uint32_t dwSpiRead32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b088      	sub	sp, #32
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	460b      	mov	r3, r1
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	72fb      	strb	r3, [r7, #11]
    uint32_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	7af9      	ldrb	r1, [r7, #11]
 80041c6:	2204      	movs	r2, #4
 80041c8:	9200      	str	r2, [sp, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff ff9d 	bl	800410c <dwSpiRead>
    return data;
 80041d2:	697b      	ldr	r3, [r7, #20]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <dwSpiWrite>:

void dwSpiWrite(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, const void *data, size_t length)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 80041f0:	7afb      	ldrb	r3, [r7, #11]
 80041f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	743b      	strb	r3, [r7, #16]
    header[0] |= 0x80;
 80041fa:	7c3b      	ldrb	r3, [r7, #16]
 80041fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004200:	b2db      	uxtb	r3, r3
 8004202:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01c      	beq.n	8004244 <dwSpiWrite+0x68>
    {
        header[0] |= 0x40;
 800420a:	7c3b      	ldrb	r3, [r7, #16]
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	b2db      	uxtb	r3, r3
 8004212:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421c:	b2db      	uxtb	r3, r3
 800421e:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	09db      	lsrs	r3, r3, #7
 8004224:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 8004226:	2302      	movs	r3, #2
 8004228:	617b      	str	r3, [r7, #20]
        if (address != 0)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <dwSpiWrite+0x68>
        {
            header[1] |= 0x80;
 8004230:	7c7b      	ldrb	r3, [r7, #17]
 8004232:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004236:	b2db      	uxtb	r3, r3
 8004238:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 8004240:	2303      	movs	r3, #3
 8004242:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiWrite(dev, header, headerLength, data, length);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685c      	ldr	r4, [r3, #4]
 800424a:	f107 0110 	add.w	r1, r7, #16
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	47a0      	blx	r4
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd90      	pop	{r4, r7, pc}

08004262 <dwSpiWrite8>:

void dwSpiWrite8(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint8_t data)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af02      	add	r7, sp, #8
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	461a      	mov	r2, r3
 800426e:	460b      	mov	r3, r1
 8004270:	72fb      	strb	r3, [r7, #11]
 8004272:	4613      	mov	r3, r2
 8004274:	72bb      	strb	r3, [r7, #10]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8004276:	f107 030a 	add.w	r3, r7, #10
 800427a:	7af9      	ldrb	r1, [r7, #11]
 800427c:	2201      	movs	r2, #1
 800427e:	9200      	str	r2, [sp, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff ffaa 	bl	80041dc <dwSpiWrite>
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <dwSpiWrite32>:

void dwSpiWrite32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint32_t data)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	460b      	mov	r3, r1
 800429e:	72fb      	strb	r3, [r7, #11]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 80042a0:	463b      	mov	r3, r7
 80042a2:	7af9      	ldrb	r1, [r7, #11]
 80042a4:	2204      	movs	r2, #4
 80042a6:	9200      	str	r2, [sp, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff ff96 	bl	80041dc <dwSpiWrite>
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_Init+0x28>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <HAL_Init+0x28>)
 80042c2:	f043 0310 	orr.w	r3, r3, #16
 80042c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c8:	2003      	movs	r0, #3
 80042ca:	f000 f947 	bl	800455c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ce:	200f      	movs	r0, #15
 80042d0:	f000 f808 	bl	80042e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042d4:	f7fd fb4c 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40022000 	.word	0x40022000

080042e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_InitTick+0x54>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_InitTick+0x58>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4619      	mov	r1, r3
 80042f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f95f 	bl	80045c6 <HAL_SYSTICK_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e00e      	b.n	8004330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b0f      	cmp	r3, #15
 8004316:	d80a      	bhi.n	800432e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004318:	2200      	movs	r2, #0
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	f000 f927 	bl	8004572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004324:	4a06      	ldr	r2, [pc, #24]	; (8004340 <HAL_InitTick+0x5c>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000068 	.word	0x20000068
 800433c:	20000084 	.word	0x20000084
 8004340:	20000080 	.word	0x20000080

08004344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_IncTick+0x1c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_IncTick+0x20>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	4a03      	ldr	r2, [pc, #12]	; (8004364 <HAL_IncTick+0x20>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	20000084 	.word	0x20000084
 8004364:	200004d4 	.word	0x200004d4

08004368 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return uwTick;
 800436c:	4b02      	ldr	r3, [pc, #8]	; (8004378 <HAL_GetTick+0x10>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	200004d4 	.word	0x200004d4

0800437c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7ff fff0 	bl	8004368 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d005      	beq.n	80043a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_Delay+0x44>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043a2:	bf00      	nop
 80043a4:	f7ff ffe0 	bl	8004368 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d8f7      	bhi.n	80043a4 <HAL_Delay+0x28>
  {
  }
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000084 	.word	0x20000084

080043c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043e0:	4013      	ands	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	60d3      	str	r3, [r2, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <__NVIC_GetPriorityGrouping+0x18>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	f003 0307 	and.w	r3, r3, #7
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db0b      	blt.n	8004452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	4906      	ldr	r1, [pc, #24]	; (800445c <__NVIC_EnableIRQ+0x34>)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2001      	movs	r0, #1
 800444a:	fa00 f202 	lsl.w	r2, r0, r2
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100

08004460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	6039      	str	r1, [r7, #0]
 800446a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	2b00      	cmp	r3, #0
 8004472:	db0a      	blt.n	800448a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	490c      	ldr	r1, [pc, #48]	; (80044ac <__NVIC_SetPriority+0x4c>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	0112      	lsls	r2, r2, #4
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	440b      	add	r3, r1
 8004484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004488:	e00a      	b.n	80044a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4908      	ldr	r1, [pc, #32]	; (80044b0 <__NVIC_SetPriority+0x50>)
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	3b04      	subs	r3, #4
 8004498:	0112      	lsls	r2, r2, #4
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	440b      	add	r3, r1
 800449e:	761a      	strb	r2, [r3, #24]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000e100 	.word	0xe000e100
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f1c3 0307 	rsb	r3, r3, #7
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	bf28      	it	cs
 80044d2:	2304      	movcs	r3, #4
 80044d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3304      	adds	r3, #4
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d902      	bls.n	80044e4 <NVIC_EncodePriority+0x30>
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3b03      	subs	r3, #3
 80044e2:	e000      	b.n	80044e6 <NVIC_EncodePriority+0x32>
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	401a      	ands	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	43d9      	mvns	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450c:	4313      	orrs	r3, r2
         );
}
 800450e:	4618      	mov	r0, r3
 8004510:	3724      	adds	r7, #36	; 0x24
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004528:	d301      	bcc.n	800452e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800452a:	2301      	movs	r3, #1
 800452c:	e00f      	b.n	800454e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800452e:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <SysTick_Config+0x40>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3b01      	subs	r3, #1
 8004534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004536:	210f      	movs	r1, #15
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	f7ff ff90 	bl	8004460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <SysTick_Config+0x40>)
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004546:	4b04      	ldr	r3, [pc, #16]	; (8004558 <SysTick_Config+0x40>)
 8004548:	2207      	movs	r2, #7
 800454a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	e000e010 	.word	0xe000e010

0800455c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff2d 	bl	80043c4 <__NVIC_SetPriorityGrouping>
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	4603      	mov	r3, r0
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004584:	f7ff ff42 	bl	800440c <__NVIC_GetPriorityGrouping>
 8004588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	6978      	ldr	r0, [r7, #20]
 8004590:	f7ff ff90 	bl	80044b4 <NVIC_EncodePriority>
 8004594:	4602      	mov	r2, r0
 8004596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff5f 	bl	8004460 <__NVIC_SetPriority>
}
 80045a2:	bf00      	nop
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff35 	bl	8004428 <__NVIC_EnableIRQ>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff ffa2 	bl	8004518 <SysTick_Config>
 80045d4:	4603      	mov	r3, r0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d008      	beq.n	8004608 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2204      	movs	r2, #4
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e020      	b.n	800464a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 020e 	bic.w	r2, r2, #14
 8004616:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f202 	lsl.w	r2, r1, r2
 8004636:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d005      	beq.n	8004678 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2204      	movs	r2, #4
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e051      	b.n	800471c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 020e 	bic.w	r2, r2, #14
 8004686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a22      	ldr	r2, [pc, #136]	; (8004728 <HAL_DMA_Abort_IT+0xd4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d029      	beq.n	80046f6 <HAL_DMA_Abort_IT+0xa2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a21      	ldr	r2, [pc, #132]	; (800472c <HAL_DMA_Abort_IT+0xd8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d022      	beq.n	80046f2 <HAL_DMA_Abort_IT+0x9e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <HAL_DMA_Abort_IT+0xdc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01a      	beq.n	80046ec <HAL_DMA_Abort_IT+0x98>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_DMA_Abort_IT+0xe0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d012      	beq.n	80046e6 <HAL_DMA_Abort_IT+0x92>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_DMA_Abort_IT+0xe4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00a      	beq.n	80046e0 <HAL_DMA_Abort_IT+0x8c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <HAL_DMA_Abort_IT+0xe8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d102      	bne.n	80046da <HAL_DMA_Abort_IT+0x86>
 80046d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046d8:	e00e      	b.n	80046f8 <HAL_DMA_Abort_IT+0xa4>
 80046da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046de:	e00b      	b.n	80046f8 <HAL_DMA_Abort_IT+0xa4>
 80046e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e4:	e008      	b.n	80046f8 <HAL_DMA_Abort_IT+0xa4>
 80046e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ea:	e005      	b.n	80046f8 <HAL_DMA_Abort_IT+0xa4>
 80046ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046f0:	e002      	b.n	80046f8 <HAL_DMA_Abort_IT+0xa4>
 80046f2:	2310      	movs	r3, #16
 80046f4:	e000      	b.n	80046f8 <HAL_DMA_Abort_IT+0xa4>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4a11      	ldr	r2, [pc, #68]	; (8004740 <HAL_DMA_Abort_IT+0xec>)
 80046fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
    } 
  }
  return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40020008 	.word	0x40020008
 800472c:	4002001c 	.word	0x4002001c
 8004730:	40020030 	.word	0x40020030
 8004734:	40020044 	.word	0x40020044
 8004738:	40020058 	.word	0x40020058
 800473c:	4002006c 	.word	0x4002006c
 8004740:	40020000 	.word	0x40020000

08004744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004744:	b480      	push	{r7}
 8004746:	b08b      	sub	sp, #44	; 0x2c
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800474e:	2300      	movs	r3, #0
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004756:	e169      	b.n	8004a2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004758:	2201      	movs	r2, #1
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	429a      	cmp	r2, r3
 8004772:	f040 8158 	bne.w	8004a26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4a9a      	ldr	r2, [pc, #616]	; (80049e4 <HAL_GPIO_Init+0x2a0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d05e      	beq.n	800483e <HAL_GPIO_Init+0xfa>
 8004780:	4a98      	ldr	r2, [pc, #608]	; (80049e4 <HAL_GPIO_Init+0x2a0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d875      	bhi.n	8004872 <HAL_GPIO_Init+0x12e>
 8004786:	4a98      	ldr	r2, [pc, #608]	; (80049e8 <HAL_GPIO_Init+0x2a4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d058      	beq.n	800483e <HAL_GPIO_Init+0xfa>
 800478c:	4a96      	ldr	r2, [pc, #600]	; (80049e8 <HAL_GPIO_Init+0x2a4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d86f      	bhi.n	8004872 <HAL_GPIO_Init+0x12e>
 8004792:	4a96      	ldr	r2, [pc, #600]	; (80049ec <HAL_GPIO_Init+0x2a8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d052      	beq.n	800483e <HAL_GPIO_Init+0xfa>
 8004798:	4a94      	ldr	r2, [pc, #592]	; (80049ec <HAL_GPIO_Init+0x2a8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d869      	bhi.n	8004872 <HAL_GPIO_Init+0x12e>
 800479e:	4a94      	ldr	r2, [pc, #592]	; (80049f0 <HAL_GPIO_Init+0x2ac>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04c      	beq.n	800483e <HAL_GPIO_Init+0xfa>
 80047a4:	4a92      	ldr	r2, [pc, #584]	; (80049f0 <HAL_GPIO_Init+0x2ac>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d863      	bhi.n	8004872 <HAL_GPIO_Init+0x12e>
 80047aa:	4a92      	ldr	r2, [pc, #584]	; (80049f4 <HAL_GPIO_Init+0x2b0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d046      	beq.n	800483e <HAL_GPIO_Init+0xfa>
 80047b0:	4a90      	ldr	r2, [pc, #576]	; (80049f4 <HAL_GPIO_Init+0x2b0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d85d      	bhi.n	8004872 <HAL_GPIO_Init+0x12e>
 80047b6:	2b12      	cmp	r3, #18
 80047b8:	d82a      	bhi.n	8004810 <HAL_GPIO_Init+0xcc>
 80047ba:	2b12      	cmp	r3, #18
 80047bc:	d859      	bhi.n	8004872 <HAL_GPIO_Init+0x12e>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_GPIO_Init+0x80>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	0800483f 	.word	0x0800483f
 80047c8:	08004819 	.word	0x08004819
 80047cc:	0800482b 	.word	0x0800482b
 80047d0:	0800486d 	.word	0x0800486d
 80047d4:	08004873 	.word	0x08004873
 80047d8:	08004873 	.word	0x08004873
 80047dc:	08004873 	.word	0x08004873
 80047e0:	08004873 	.word	0x08004873
 80047e4:	08004873 	.word	0x08004873
 80047e8:	08004873 	.word	0x08004873
 80047ec:	08004873 	.word	0x08004873
 80047f0:	08004873 	.word	0x08004873
 80047f4:	08004873 	.word	0x08004873
 80047f8:	08004873 	.word	0x08004873
 80047fc:	08004873 	.word	0x08004873
 8004800:	08004873 	.word	0x08004873
 8004804:	08004873 	.word	0x08004873
 8004808:	08004821 	.word	0x08004821
 800480c:	08004835 	.word	0x08004835
 8004810:	4a79      	ldr	r2, [pc, #484]	; (80049f8 <HAL_GPIO_Init+0x2b4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004816:	e02c      	b.n	8004872 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	623b      	str	r3, [r7, #32]
          break;
 800481e:	e029      	b.n	8004874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	3304      	adds	r3, #4
 8004826:	623b      	str	r3, [r7, #32]
          break;
 8004828:	e024      	b.n	8004874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	3308      	adds	r3, #8
 8004830:	623b      	str	r3, [r7, #32]
          break;
 8004832:	e01f      	b.n	8004874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	330c      	adds	r3, #12
 800483a:	623b      	str	r3, [r7, #32]
          break;
 800483c:	e01a      	b.n	8004874 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004846:	2304      	movs	r3, #4
 8004848:	623b      	str	r3, [r7, #32]
          break;
 800484a:	e013      	b.n	8004874 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004854:	2308      	movs	r3, #8
 8004856:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	611a      	str	r2, [r3, #16]
          break;
 800485e:	e009      	b.n	8004874 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004860:	2308      	movs	r3, #8
 8004862:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	615a      	str	r2, [r3, #20]
          break;
 800486a:	e003      	b.n	8004874 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800486c:	2300      	movs	r3, #0
 800486e:	623b      	str	r3, [r7, #32]
          break;
 8004870:	e000      	b.n	8004874 <HAL_GPIO_Init+0x130>
          break;
 8004872:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2bff      	cmp	r3, #255	; 0xff
 8004878:	d801      	bhi.n	800487e <HAL_GPIO_Init+0x13a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	e001      	b.n	8004882 <HAL_GPIO_Init+0x13e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3304      	adds	r3, #4
 8004882:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2bff      	cmp	r3, #255	; 0xff
 8004888:	d802      	bhi.n	8004890 <HAL_GPIO_Init+0x14c>
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	e002      	b.n	8004896 <HAL_GPIO_Init+0x152>
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	3b08      	subs	r3, #8
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	210f      	movs	r1, #15
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	fa01 f303 	lsl.w	r3, r1, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	401a      	ands	r2, r3
 80048a8:	6a39      	ldr	r1, [r7, #32]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	431a      	orrs	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80b1 	beq.w	8004a26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048c4:	4b4d      	ldr	r3, [pc, #308]	; (80049fc <HAL_GPIO_Init+0x2b8>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	4a4c      	ldr	r2, [pc, #304]	; (80049fc <HAL_GPIO_Init+0x2b8>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6193      	str	r3, [r2, #24]
 80048d0:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <HAL_GPIO_Init+0x2b8>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048dc:	4a48      	ldr	r2, [pc, #288]	; (8004a00 <HAL_GPIO_Init+0x2bc>)
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3302      	adds	r3, #2
 80048e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	220f      	movs	r2, #15
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4013      	ands	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a40      	ldr	r2, [pc, #256]	; (8004a04 <HAL_GPIO_Init+0x2c0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <HAL_GPIO_Init+0x1ec>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <HAL_GPIO_Init+0x2c4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00d      	beq.n	800492c <HAL_GPIO_Init+0x1e8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3e      	ldr	r2, [pc, #248]	; (8004a0c <HAL_GPIO_Init+0x2c8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <HAL_GPIO_Init+0x1e4>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3d      	ldr	r2, [pc, #244]	; (8004a10 <HAL_GPIO_Init+0x2cc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_GPIO_Init+0x1e0>
 8004920:	2303      	movs	r3, #3
 8004922:	e006      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004924:	2304      	movs	r3, #4
 8004926:	e004      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004928:	2302      	movs	r3, #2
 800492a:	e002      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_GPIO_Init+0x1ee>
 8004930:	2300      	movs	r3, #0
 8004932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004934:	f002 0203 	and.w	r2, r2, #3
 8004938:	0092      	lsls	r2, r2, #2
 800493a:	4093      	lsls	r3, r2
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004942:	492f      	ldr	r1, [pc, #188]	; (8004a00 <HAL_GPIO_Init+0x2bc>)
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	3302      	adds	r3, #2
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d006      	beq.n	800496a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800495c:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	492c      	ldr	r1, [pc, #176]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	4313      	orrs	r3, r2
 8004966:	608b      	str	r3, [r1, #8]
 8004968:	e006      	b.n	8004978 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	43db      	mvns	r3, r3
 8004972:	4928      	ldr	r1, [pc, #160]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 8004974:	4013      	ands	r3, r2
 8004976:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d006      	beq.n	8004992 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004984:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	4922      	ldr	r1, [pc, #136]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4313      	orrs	r3, r2
 800498e:	60cb      	str	r3, [r1, #12]
 8004990:	e006      	b.n	80049a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	43db      	mvns	r3, r3
 800499a:	491e      	ldr	r1, [pc, #120]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 800499c:	4013      	ands	r3, r2
 800499e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d006      	beq.n	80049ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	4918      	ldr	r1, [pc, #96]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
 80049b8:	e006      	b.n	80049c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	4914      	ldr	r1, [pc, #80]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d021      	beq.n	8004a18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049d4:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	490e      	ldr	r1, [pc, #56]	; (8004a14 <HAL_GPIO_Init+0x2d0>)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
 80049e0:	e021      	b.n	8004a26 <HAL_GPIO_Init+0x2e2>
 80049e2:	bf00      	nop
 80049e4:	10320000 	.word	0x10320000
 80049e8:	10310000 	.word	0x10310000
 80049ec:	10220000 	.word	0x10220000
 80049f0:	10210000 	.word	0x10210000
 80049f4:	10120000 	.word	0x10120000
 80049f8:	10110000 	.word	0x10110000
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40010800 	.word	0x40010800
 8004a08:	40010c00 	.word	0x40010c00
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	40011400 	.word	0x40011400
 8004a14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_GPIO_Init+0x304>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	4909      	ldr	r1, [pc, #36]	; (8004a48 <HAL_GPIO_Init+0x304>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	3301      	adds	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f47f ae8e 	bne.w	8004758 <HAL_GPIO_Init+0x14>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	372c      	adds	r7, #44	; 0x2c
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40010400 	.word	0x40010400

08004a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	807b      	strh	r3, [r7, #2]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a5c:	787b      	ldrb	r3, [r7, #1]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a68:	e003      	b.n	8004a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	041a      	lsls	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e272      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8087 	beq.w	8004baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a9c:	4b92      	ldr	r3, [pc, #584]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004aa8:	4b8f      	ldr	r3, [pc, #572]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d112      	bne.n	8004ada <HAL_RCC_OscConfig+0x5e>
 8004ab4:	4b8c      	ldr	r3, [pc, #560]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac2:	4b89      	ldr	r3, [pc, #548]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d06c      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x12c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d168      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e24c      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x76>
 8004ae4:	4b80      	ldr	r3, [pc, #512]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a7f      	ldr	r2, [pc, #508]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e02e      	b.n	8004b50 <HAL_RCC_OscConfig+0xd4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x98>
 8004afa:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7a      	ldr	r2, [pc, #488]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b78      	ldr	r3, [pc, #480]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a77      	ldr	r2, [pc, #476]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e01d      	b.n	8004b50 <HAL_RCC_OscConfig+0xd4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0xbc>
 8004b1e:	4b72      	ldr	r3, [pc, #456]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a71      	ldr	r2, [pc, #452]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b6f      	ldr	r3, [pc, #444]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a6e      	ldr	r2, [pc, #440]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0xd4>
 8004b38:	4b6b      	ldr	r3, [pc, #428]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a6a      	ldr	r2, [pc, #424]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a67      	ldr	r2, [pc, #412]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7ff fc06 	bl	8004368 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7ff fc02 	bl	8004368 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e200      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	4b5d      	ldr	r3, [pc, #372]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0xe4>
 8004b7e:	e014      	b.n	8004baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7ff fbf2 	bl	8004368 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7ff fbee 	bl	8004368 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e1ec      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9a:	4b53      	ldr	r3, [pc, #332]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x10c>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d063      	beq.n	8004c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb6:	4b4c      	ldr	r3, [pc, #304]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bc2:	4b49      	ldr	r3, [pc, #292]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d11c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x18c>
 8004bce:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d116      	bne.n	8004c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x176>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e1c0      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf2:	4b3d      	ldr	r3, [pc, #244]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4939      	ldr	r1, [pc, #228]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	e03a      	b.n	8004c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d020      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c10:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c16:	f7ff fba7 	bl	8004368 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c1e:	f7ff fba3 	bl	8004368 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e1a1      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c30:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4927      	ldr	r1, [pc, #156]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]
 8004c50:	e015      	b.n	8004c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c52:	4b26      	ldr	r3, [pc, #152]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7ff fb86 	bl	8004368 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c60:	f7ff fb82 	bl	8004368 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e180      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d03a      	beq.n	8004d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d019      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7ff fb66 	bl	8004368 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca0:	f7ff fb62 	bl	8004368 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e160      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f000 face 	bl	8005260 <RCC_Delay>
 8004cc4:	e01c      	b.n	8004d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7ff fb4c 	bl	8004368 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd2:	e00f      	b.n	8004cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7ff fb48 	bl	8004368 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d908      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e146      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	42420000 	.word	0x42420000
 8004cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	4b92      	ldr	r3, [pc, #584]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e9      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a6 	beq.w	8004e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d12:	4b8b      	ldr	r3, [pc, #556]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1e:	4b88      	ldr	r3, [pc, #544]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4a87      	ldr	r2, [pc, #540]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	61d3      	str	r3, [r2, #28]
 8004d2a:	4b85      	ldr	r3, [pc, #532]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d36:	2301      	movs	r3, #1
 8004d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3a:	4b82      	ldr	r3, [pc, #520]	; (8004f44 <HAL_RCC_OscConfig+0x4c8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d118      	bne.n	8004d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d46:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <HAL_RCC_OscConfig+0x4c8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a7e      	ldr	r2, [pc, #504]	; (8004f44 <HAL_RCC_OscConfig+0x4c8>)
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d52:	f7ff fb09 	bl	8004368 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5a:	f7ff fb05 	bl	8004368 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b64      	cmp	r3, #100	; 0x64
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e103      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	4b75      	ldr	r3, [pc, #468]	; (8004f44 <HAL_RCC_OscConfig+0x4c8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCC_OscConfig+0x312>
 8004d80:	4b6f      	ldr	r3, [pc, #444]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4a6e      	ldr	r2, [pc, #440]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6213      	str	r3, [r2, #32]
 8004d8c:	e02d      	b.n	8004dea <HAL_RCC_OscConfig+0x36e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x334>
 8004d96:	4b6a      	ldr	r3, [pc, #424]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4a69      	ldr	r2, [pc, #420]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	6213      	str	r3, [r2, #32]
 8004da2:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	4a66      	ldr	r2, [pc, #408]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	f023 0304 	bic.w	r3, r3, #4
 8004dac:	6213      	str	r3, [r2, #32]
 8004dae:	e01c      	b.n	8004dea <HAL_RCC_OscConfig+0x36e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	d10c      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x356>
 8004db8:	4b61      	ldr	r3, [pc, #388]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	4a60      	ldr	r2, [pc, #384]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	f043 0304 	orr.w	r3, r3, #4
 8004dc2:	6213      	str	r3, [r2, #32]
 8004dc4:	4b5e      	ldr	r3, [pc, #376]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4a5d      	ldr	r2, [pc, #372]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6213      	str	r3, [r2, #32]
 8004dd0:	e00b      	b.n	8004dea <HAL_RCC_OscConfig+0x36e>
 8004dd2:	4b5b      	ldr	r3, [pc, #364]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4a5a      	ldr	r2, [pc, #360]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	6213      	str	r3, [r2, #32]
 8004dde:	4b58      	ldr	r3, [pc, #352]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4a57      	ldr	r2, [pc, #348]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	f023 0304 	bic.w	r3, r3, #4
 8004de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d015      	beq.n	8004e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df2:	f7ff fab9 	bl	8004368 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7ff fab5 	bl	8004368 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e0b1      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e10:	4b4b      	ldr	r3, [pc, #300]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ee      	beq.n	8004dfa <HAL_RCC_OscConfig+0x37e>
 8004e1c:	e014      	b.n	8004e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7ff faa3 	bl	8004368 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7ff fa9f 	bl	8004368 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e09b      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3c:	4b40      	ldr	r3, [pc, #256]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ee      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4e:	4b3c      	ldr	r3, [pc, #240]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8087 	beq.w	8004f72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e64:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d061      	beq.n	8004f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d146      	bne.n	8004f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e78:	4b33      	ldr	r3, [pc, #204]	; (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7e:	f7ff fa73 	bl	8004368 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e86:	f7ff fa6f 	bl	8004368 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e06d      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e98:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d108      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eae:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	4921      	ldr	r1, [pc, #132]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a19      	ldr	r1, [r3, #32]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	491b      	ldr	r1, [pc, #108]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7ff fa43 	bl	8004368 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7ff fa3f 	bl	8004368 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e03d      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x46a>
 8004f04:	e035      	b.n	8004f72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7ff fa2c 	bl	8004368 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f14:	f7ff fa28 	bl	8004368 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e026      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x498>
 8004f32:	e01e      	b.n	8004f72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e019      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40007000 	.word	0x40007000
 8004f48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_OscConfig+0x500>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000

08004f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0d0      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f94:	4b6a      	ldr	r3, [pc, #424]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d910      	bls.n	8004fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b67      	ldr	r3, [pc, #412]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 0207 	bic.w	r2, r3, #7
 8004faa:	4965      	ldr	r1, [pc, #404]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b63      	ldr	r3, [pc, #396]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0b8      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fdc:	4b59      	ldr	r3, [pc, #356]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a58      	ldr	r2, [pc, #352]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff4:	4b53      	ldr	r3, [pc, #332]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a52      	ldr	r2, [pc, #328]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005000:	4b50      	ldr	r3, [pc, #320]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	494d      	ldr	r1, [pc, #308]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 800500e:	4313      	orrs	r3, r2
 8005010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d040      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b47      	ldr	r3, [pc, #284]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d115      	bne.n	800505e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e07f      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e073      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504e:	4b3d      	ldr	r3, [pc, #244]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e06b      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800505e:	4b39      	ldr	r3, [pc, #228]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f023 0203 	bic.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	4936      	ldr	r1, [pc, #216]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005070:	f7ff f97a 	bl	8004368 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	e00a      	b.n	800508e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005078:	f7ff f976 	bl	8004368 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e053      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508e:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 020c 	and.w	r2, r3, #12
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	429a      	cmp	r2, r3
 800509e:	d1eb      	bne.n	8005078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050a0:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d210      	bcs.n	80050d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 0207 	bic.w	r2, r3, #7
 80050b6:	4922      	ldr	r1, [pc, #136]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e032      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4916      	ldr	r1, [pc, #88]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	490e      	ldr	r1, [pc, #56]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 800510a:	4313      	orrs	r3, r2
 800510c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800510e:	f000 f821 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8005112:	4602      	mov	r2, r0
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	490a      	ldr	r1, [pc, #40]	; (8005148 <HAL_RCC_ClockConfig+0x1c8>)
 8005120:	5ccb      	ldrb	r3, [r1, r3]
 8005122:	fa22 f303 	lsr.w	r3, r2, r3
 8005126:	4a09      	ldr	r2, [pc, #36]	; (800514c <HAL_RCC_ClockConfig+0x1cc>)
 8005128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800512a:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_RCC_ClockConfig+0x1d0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff f8d8 	bl	80042e4 <HAL_InitTick>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40022000 	.word	0x40022000
 8005144:	40021000 	.word	0x40021000
 8005148:	0800b8c0 	.word	0x0800b8c0
 800514c:	20000068 	.word	0x20000068
 8005150:	20000080 	.word	0x20000080

08005154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	2300      	movs	r3, #0
 8005168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b04      	cmp	r3, #4
 800517c:	d002      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x30>
 800517e:	2b08      	cmp	r3, #8
 8005180:	d003      	beq.n	800518a <HAL_RCC_GetSysClockFreq+0x36>
 8005182:	e027      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <HAL_RCC_GetSysClockFreq+0x98>)
 8005186:	613b      	str	r3, [r7, #16]
      break;
 8005188:	e027      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	0c9b      	lsrs	r3, r3, #18
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005194:	5cd3      	ldrb	r3, [r2, r3]
 8005196:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	0c5b      	lsrs	r3, r3, #17
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <HAL_RCC_GetSysClockFreq+0x98>)
 80051b6:	fb03 f202 	mul.w	r2, r3, r2
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e004      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	613b      	str	r3, [r7, #16]
      break;
 80051d2:	e002      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_RCC_GetSysClockFreq+0x98>)
 80051d6:	613b      	str	r3, [r7, #16]
      break;
 80051d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051da:	693b      	ldr	r3, [r7, #16]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000
 80051ec:	007a1200 	.word	0x007a1200
 80051f0:	0800b928 	.word	0x0800b928
 80051f4:	0800b938 	.word	0x0800b938
 80051f8:	003d0900 	.word	0x003d0900

080051fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005200:	4b02      	ldr	r3, [pc, #8]	; (800520c <HAL_RCC_GetHCLKFreq+0x10>)
 8005202:	681b      	ldr	r3, [r3, #0]
}
 8005204:	4618      	mov	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	20000068 	.word	0x20000068

08005210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005214:	f7ff fff2 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4903      	ldr	r1, [pc, #12]	; (8005234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	0800b8d0 	.word	0x0800b8d0

08005238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800523c:	f7ff ffde 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	0adb      	lsrs	r3, r3, #11
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4903      	ldr	r1, [pc, #12]	; (800525c <HAL_RCC_GetPCLK2Freq+0x24>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40021000 	.word	0x40021000
 800525c:	0800b8d0 	.word	0x0800b8d0

08005260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <RCC_Delay+0x34>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <RCC_Delay+0x38>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	0a5b      	lsrs	r3, r3, #9
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800527c:	bf00      	nop
  }
  while (Delay --);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1e5a      	subs	r2, r3, #1
 8005282:	60fa      	str	r2, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f9      	bne.n	800527c <RCC_Delay+0x1c>
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	20000068 	.word	0x20000068
 8005298:	10624dd3 	.word	0x10624dd3

0800529c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e076      	b.n	800539c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d108      	bne.n	80052c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052be:	d009      	beq.n	80052d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
 80052c6:	e005      	b.n	80052d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc faec 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	ea42 0103 	orr.w	r1, r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	0c1a      	lsrs	r2, r3, #16
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f002 0204 	and.w	r2, r2, #4
 800537a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69da      	ldr	r2, [r3, #28]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800538a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Transmit+0x22>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e12d      	b.n	8005622 <HAL_SPI_Transmit+0x27e>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ce:	f7fe ffcb 	bl	8004368 <HAL_GetTick>
 80053d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d002      	beq.n	80053ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
 80053e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053e8:	e116      	b.n	8005618 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Transmit+0x52>
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053fa:	e10d      	b.n	8005618 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2203      	movs	r2, #3
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005442:	d10f      	bne.n	8005464 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005452:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005462:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d007      	beq.n	8005482 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548a:	d14f      	bne.n	800552c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_Transmit+0xf6>
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d142      	bne.n	8005520 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	881a      	ldrh	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	1c9a      	adds	r2, r3, #2
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054be:	e02f      	b.n	8005520 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d112      	bne.n	80054f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	881a      	ldrh	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	1c9a      	adds	r2, r3, #2
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80054f2:	e015      	b.n	8005520 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f4:	f7fe ff38 	bl	8004368 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d803      	bhi.n	800550c <HAL_SPI_Transmit+0x168>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d102      	bne.n	8005512 <HAL_SPI_Transmit+0x16e>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800551e:	e07b      	b.n	8005618 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ca      	bne.n	80054c0 <HAL_SPI_Transmit+0x11c>
 800552a:	e050      	b.n	80055ce <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_Transmit+0x196>
 8005534:	8afb      	ldrh	r3, [r7, #22]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d144      	bne.n	80055c4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005560:	e030      	b.n	80055c4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d113      	bne.n	8005598 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	86da      	strh	r2, [r3, #54]	; 0x36
 8005596:	e015      	b.n	80055c4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005598:	f7fe fee6 	bl	8004368 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d803      	bhi.n	80055b0 <HAL_SPI_Transmit+0x20c>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Transmit+0x212>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80055c2:	e029      	b.n	8005618 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1c9      	bne.n	8005562 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fcd0 	bl	8005f78 <SPI_EndRxTxTransaction>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e003      	b.n	8005618 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005620:	7ffb      	ldrb	r3, [r7, #31]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b088      	sub	sp, #32
 800562e:	af02      	add	r7, sp, #8
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800564e:	e0fb      	b.n	8005848 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005658:	d112      	bne.n	8005680 <HAL_SPI_Receive+0x56>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10e      	bne.n	8005680 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2204      	movs	r2, #4
 8005666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f8ef 	bl	800585a <HAL_SPI_TransmitReceive>
 800567c:	4603      	mov	r3, r0
 800567e:	e0e8      	b.n	8005852 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_SPI_Receive+0x64>
 800568a:	2302      	movs	r3, #2
 800568c:	e0e1      	b.n	8005852 <HAL_SPI_Receive+0x228>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005696:	f7fe fe67 	bl	8004368 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Receive+0x7e>
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ac:	e0cc      	b.n	8005848 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2204      	movs	r2, #4
 80056b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f4:	d10f      	bne.n	8005716 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005704:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005714:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d007      	beq.n	8005734 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005732:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d16a      	bne.n	8005812 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800573c:	e032      	b.n	80057a4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d115      	bne.n	8005778 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f103 020c 	add.w	r2, r3, #12
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	7812      	ldrb	r2, [r2, #0]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005776:	e015      	b.n	80057a4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005778:	f7fe fdf6 	bl	8004368 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d803      	bhi.n	8005790 <HAL_SPI_Receive+0x166>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d102      	bne.n	8005796 <HAL_SPI_Receive+0x16c>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80057a2:	e051      	b.n	8005848 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1c7      	bne.n	800573e <HAL_SPI_Receive+0x114>
 80057ae:	e035      	b.n	800581c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d113      	bne.n	80057e6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	b292      	uxth	r2, r2
 80057ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	1c9a      	adds	r2, r3, #2
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057e4:	e015      	b.n	8005812 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e6:	f7fe fdbf 	bl	8004368 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d803      	bhi.n	80057fe <HAL_SPI_Receive+0x1d4>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d102      	bne.n	8005804 <HAL_SPI_Receive+0x1da>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005810:	e01a      	b.n	8005848 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1c9      	bne.n	80057b0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fb57 	bl	8005ed4 <SPI_EndRxTransaction>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
 800583e:	e003      	b.n	8005848 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08c      	sub	sp, #48	; 0x30
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005868:	2301      	movs	r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x26>
 800587c:	2302      	movs	r3, #2
 800587e:	e198      	b.n	8005bb2 <HAL_SPI_TransmitReceive+0x358>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005888:	f7fe fd6e 	bl	8004368 <HAL_GetTick>
 800588c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800589e:	887b      	ldrh	r3, [r7, #2]
 80058a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d00f      	beq.n	80058ca <HAL_SPI_TransmitReceive+0x70>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b0:	d107      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x68>
 80058ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d003      	beq.n	80058ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
 80058c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058c8:	e16d      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_SPI_TransmitReceive+0x82>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_SPI_TransmitReceive+0x82>
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058e2:	e160      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d003      	beq.n	80058f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2205      	movs	r2, #5
 80058f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	887a      	ldrh	r2, [r7, #2]
 8005908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	887a      	ldrh	r2, [r7, #2]
 800590e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	887a      	ldrh	r2, [r7, #2]
 8005920:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d007      	beq.n	800594c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005954:	d17c      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_SPI_TransmitReceive+0x10a>
 800595e:	8b7b      	ldrh	r3, [r7, #26]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d16a      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	881a      	ldrh	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	1c9a      	adds	r2, r3, #2
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005988:	e057      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d11b      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x176>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_SPI_TransmitReceive+0x176>
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d113      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	881a      	ldrh	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	1c9a      	adds	r2, r3, #2
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d119      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x1b8>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d014      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	b292      	uxth	r2, r2
 80059f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a12:	f7fe fca9 	bl	8004368 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d80b      	bhi.n	8005a3a <HAL_SPI_TransmitReceive+0x1e0>
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d007      	beq.n	8005a3a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005a38:	e0b5      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1a2      	bne.n	800598a <HAL_SPI_TransmitReceive+0x130>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d19d      	bne.n	800598a <HAL_SPI_TransmitReceive+0x130>
 8005a4e:	e080      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_TransmitReceive+0x204>
 8005a58:	8b7b      	ldrh	r3, [r7, #26]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d16f      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a84:	e05b      	b.n	8005b3e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11c      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x274>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d017      	beq.n	8005ace <HAL_SPI_TransmitReceive+0x274>
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d114      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d119      	bne.n	8005b10 <HAL_SPI_TransmitReceive+0x2b6>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d014      	beq.n	8005b10 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b10:	f7fe fc2a 	bl	8004368 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d803      	bhi.n	8005b28 <HAL_SPI_TransmitReceive+0x2ce>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d102      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x2d4>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005b3c:	e033      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d19e      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x22c>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d199      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fa0e 	bl	8005f78 <SPI_EndRxTxTransaction>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d006      	beq.n	8005b70 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b6e:	e01a      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9c:	e003      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3730      	adds	r7, #48	; 0x30
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	099b      	lsrs	r3, r3, #6
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10f      	bne.n	8005c00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
    return;
 8005bfe:	e0be      	b.n	8005d7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_SPI_IRQHandler+0x66>
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	09db      	lsrs	r3, r3, #7
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
    return;
 8005c20:	e0ad      	b.n	8005d7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_SPI_IRQHandler+0x80>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	099b      	lsrs	r3, r3, #6
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80a1 	beq.w	8005d7e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 809a 	beq.w	8005d7e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	099b      	lsrs	r3, r3, #6
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d023      	beq.n	8005c9e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d011      	beq.n	8005c86 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f043 0204 	orr.w	r2, r3, #4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	e00b      	b.n	8005c9e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	693b      	ldr	r3, [r7, #16]
        return;
 8005c9c:	e06f      	b.n	8005d7e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	f043 0201 	orr.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d04f      	beq.n	8005d7c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <HAL_SPI_IRQHandler+0x14c>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d034      	beq.n	8005d72 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0203 	bic.w	r2, r2, #3
 8005d16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d011      	beq.n	8005d44 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d24:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <HAL_SPI_IRQHandler+0x1c8>)
 8005d26:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fc91 	bl	8004654 <HAL_DMA_Abort_IT>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d50:	4a0c      	ldr	r2, [pc, #48]	; (8005d84 <HAL_SPI_IRQHandler+0x1c8>)
 8005d52:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe fc7b 	bl	8004654 <HAL_DMA_Abort_IT>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d70:	e003      	b.n	8005d7a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f808 	bl	8005d88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d78:	e000      	b.n	8005d7c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005d7a:	bf00      	nop
    return;
 8005d7c:	bf00      	nop
  }
}
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08005d9b 	.word	0x08005d9b

08005d88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff ffe7 	bl	8005d88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dd4:	f7fe fac8 	bl	8004368 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	4413      	add	r3, r2
 8005de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005de4:	f7fe fac0 	bl	8004368 <HAL_GetTick>
 8005de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dea:	4b39      	ldr	r3, [pc, #228]	; (8005ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	015b      	lsls	r3, r3, #5
 8005df0:	0d1b      	lsrs	r3, r3, #20
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	fb02 f303 	mul.w	r3, r2, r3
 8005df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dfa:	e054      	b.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d050      	beq.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e04:	f7fe fab0 	bl	8004368 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d902      	bls.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d13d      	bne.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e32:	d111      	bne.n	8005e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	d004      	beq.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e46:	d107      	bne.n	8005e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e60:	d10f      	bne.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e017      	b.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d19b      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000068 	.word	0x20000068

08005ed4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee8:	d111      	bne.n	8005f0e <SPI_EndRxTransaction+0x3a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef2:	d004      	beq.n	8005efe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efc:	d107      	bne.n	8005f0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f16:	d117      	bne.n	8005f48 <SPI_EndRxTransaction+0x74>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f20:	d112      	bne.n	8005f48 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff ff49 	bl	8005dc4 <SPI_WaitFlagStateUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01a      	beq.n	8005f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f043 0220 	orr.w	r2, r3, #32
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e013      	b.n	8005f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff ff36 	bl	8005dc4 <SPI_WaitFlagStateUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e000      	b.n	8005f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2180      	movs	r1, #128	; 0x80
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff ff18 	bl	8005dc4 <SPI_WaitFlagStateUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f043 0220 	orr.w	r2, r3, #32
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e000      	b.n	8005fac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e042      	b.n	800604c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fb fe26 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fd71 	bl	8006ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800600c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800601c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800602c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b20      	cmp	r3, #32
 8006072:	d16d      	bne.n	8006150 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_UART_Transmit+0x2c>
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e066      	b.n	8006152 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2221      	movs	r2, #33	; 0x21
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006092:	f7fe f969 	bl	8004368 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d108      	bne.n	80060c0 <HAL_UART_Transmit+0x6c>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e003      	b.n	80060c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060c8:	e02a      	b.n	8006120 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 faf9 	bl	80066cc <UART_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e036      	b.n	8006152 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	3302      	adds	r3, #2
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	e007      	b.n	8006112 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	3301      	adds	r3, #1
 8006110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1cf      	bne.n	80060ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2200      	movs	r2, #0
 8006132:	2140      	movs	r1, #64	; 0x40
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fac9 	bl	80066cc <UART_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e006      	b.n	8006152 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b0ba      	sub	sp, #232	; 0xe8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006182:	2300      	movs	r3, #0
 8006184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006188:	2300      	movs	r3, #0
 800618a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800618e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800619a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10f      	bne.n	80061c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <HAL_UART_IRQHandler+0x66>
 80061ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fbd1 	bl	8006962 <UART_Receive_IT>
      return;
 80061c0:	e25b      	b.n	800667a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80de 	beq.w	8006388 <HAL_UART_IRQHandler+0x22c>
 80061cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80d1 	beq.w	8006388 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <HAL_UART_IRQHandler+0xae>
 80061f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <HAL_UART_IRQHandler+0xd2>
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	f043 0202 	orr.w	r2, r3, #2
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <HAL_UART_IRQHandler+0xf6>
 800623a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f043 0204 	orr.w	r2, r3, #4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d011      	beq.n	8006282 <HAL_UART_IRQHandler+0x126>
 800625e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d105      	bne.n	8006276 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800626a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	f043 0208 	orr.w	r2, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 81f2 	beq.w	8006670 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_UART_IRQHandler+0x14e>
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fb5c 	bl	8006962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d103      	bne.n	80062d6 <HAL_UART_IRQHandler+0x17a>
 80062ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d04f      	beq.n	8006376 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa66 	bl	80067a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d041      	beq.n	800636e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3314      	adds	r3, #20
 8006312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006316:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800631a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800632e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1d9      	bne.n	80062ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d013      	beq.n	8006366 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006342:	4a7e      	ldr	r2, [pc, #504]	; (800653c <HAL_UART_IRQHandler+0x3e0>)
 8006344:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe f982 	bl	8004654 <HAL_DMA_Abort_IT>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	e00e      	b.n	8006384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f99c 	bl	80066a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636c:	e00a      	b.n	8006384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f998 	bl	80066a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	e006      	b.n	8006384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f994 	bl	80066a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006382:	e175      	b.n	8006670 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	bf00      	nop
    return;
 8006386:	e173      	b.n	8006670 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	2b01      	cmp	r3, #1
 800638e:	f040 814f 	bne.w	8006630 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8148 	beq.w	8006630 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8141 	beq.w	8006630 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ae:	2300      	movs	r3, #0
 80063b0:	60bb      	str	r3, [r7, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80b6 	beq.w	8006540 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8145 	beq.w	8006674 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f2:	429a      	cmp	r2, r3
 80063f4:	f080 813e 	bcs.w	8006674 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b20      	cmp	r3, #32
 8006408:	f000 8088 	beq.w	800651c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006438:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800643c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006444:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1d9      	bne.n	800640c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3314      	adds	r3, #20
 800645e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800647c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006480:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006484:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800648e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e1      	bne.n	8006458 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3314      	adds	r3, #20
 800649a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e3      	bne.n	8006494 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ec:	f023 0310 	bic.w	r3, r3, #16
 80064f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006500:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800650c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e3      	bne.n	80064da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe f861 	bl	80045de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800652a:	b29b      	uxth	r3, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f8bf 	bl	80066b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006538:	e09c      	b.n	8006674 <HAL_UART_IRQHandler+0x518>
 800653a:	bf00      	nop
 800653c:	0800686d 	.word	0x0800686d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006548:	b29b      	uxth	r3, r3
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 808e 	beq.w	8006678 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800655c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8089 	beq.w	8006678 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800657c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800658a:	647a      	str	r2, [r7, #68]	; 0x44
 800658c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e3      	bne.n	8006566 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3314      	adds	r3, #20
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	623b      	str	r3, [r7, #32]
   return(result);
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3314      	adds	r3, #20
 80065be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065c2:	633a      	str	r2, [r7, #48]	; 0x30
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e3      	bne.n	800659e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0310 	bic.w	r3, r3, #16
 80065fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006608:	61fa      	str	r2, [r7, #28]
 800660a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	69b9      	ldr	r1, [r7, #24]
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	617b      	str	r3, [r7, #20]
   return(result);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e3      	bne.n	80065e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f844 	bl	80066b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800662e:	e023      	b.n	8006678 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <HAL_UART_IRQHandler+0x4f4>
 800663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f923 	bl	8006894 <UART_Transmit_IT>
    return;
 800664e:	e014      	b.n	800667a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <HAL_UART_IRQHandler+0x51e>
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d008      	beq.n	800667a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f962 	bl	8006932 <UART_EndTransmit_IT>
    return;
 800666e:	e004      	b.n	800667a <HAL_UART_IRQHandler+0x51e>
    return;
 8006670:	bf00      	nop
 8006672:	e002      	b.n	800667a <HAL_UART_IRQHandler+0x51e>
      return;
 8006674:	bf00      	nop
 8006676:	e000      	b.n	800667a <HAL_UART_IRQHandler+0x51e>
      return;
 8006678:	bf00      	nop
  }
}
 800667a:	37e8      	adds	r7, #232	; 0xe8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b090      	sub	sp, #64	; 0x40
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066dc:	e050      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d04c      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <UART_WaitOnFlagUntilTimeout+0x30>
 80066ec:	f7fd fe3c 	bl	8004368 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d241      	bcs.n	8006780 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800671c:	637a      	str	r2, [r7, #52]	; 0x34
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3314      	adds	r3, #20
 8006736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	613b      	str	r3, [r7, #16]
   return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3314      	adds	r3, #20
 800674e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006750:	623a      	str	r2, [r7, #32]
 8006752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	69f9      	ldr	r1, [r7, #28]
 8006756:	6a3a      	ldr	r2, [r7, #32]
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	61bb      	str	r3, [r7, #24]
   return(result);
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e5      	bne.n	8006730 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e00f      	b.n	80067a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4013      	ands	r3, r2
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	429a      	cmp	r2, r3
 800679c:	d09f      	beq.n	80066de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3740      	adds	r7, #64	; 0x40
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b095      	sub	sp, #84	; 0x54
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	330c      	adds	r3, #12
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067d0:	643a      	str	r2, [r7, #64]	; 0x40
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3314      	adds	r3, #20
 80067ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3314      	adds	r3, #20
 8006802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006804:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800680a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	2b01      	cmp	r3, #1
 800681e:	d119      	bne.n	8006854 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	330c      	adds	r3, #12
 8006826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0310 	bic.w	r3, r3, #16
 8006836:	647b      	str	r3, [r7, #68]	; 0x44
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	330c      	adds	r3, #12
 800683e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006840:	61ba      	str	r2, [r7, #24]
 8006842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6979      	ldr	r1, [r7, #20]
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	613b      	str	r3, [r7, #16]
   return(result);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e5      	bne.n	8006820 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006862:	bf00      	nop
 8006864:	3754      	adds	r7, #84	; 0x54
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7ff ff0c 	bl	80066a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b21      	cmp	r3, #33	; 0x21
 80068a6:	d13e      	bne.n	8006926 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d114      	bne.n	80068dc <UART_Transmit_IT+0x48>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d110      	bne.n	80068dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	1c9a      	adds	r2, r3, #2
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]
 80068da:	e008      	b.n	80068ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	1c59      	adds	r1, r3, #1
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6211      	str	r1, [r2, #32]
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4619      	mov	r1, r3
 80068fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10f      	bne.n	8006922 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006910:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006920:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e000      	b.n	8006928 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006926:	2302      	movs	r3, #2
  }
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff fe94 	bl	8006680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b08c      	sub	sp, #48	; 0x30
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b22      	cmp	r3, #34	; 0x22
 8006974:	f040 80ae 	bne.w	8006ad4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d117      	bne.n	80069b2 <UART_Receive_IT+0x50>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d113      	bne.n	80069b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
 80069b0:	e026      	b.n	8006a00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c4:	d007      	beq.n	80069d6 <UART_Receive_IT+0x74>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <UART_Receive_IT+0x82>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e008      	b.n	80069f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d15d      	bne.n	8006ad0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0220 	bic.w	r2, r2, #32
 8006a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d135      	bne.n	8006ac6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f023 0310 	bic.w	r3, r3, #16
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a80:	623a      	str	r2, [r7, #32]
 8006a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	69f9      	ldr	r1, [r7, #28]
 8006a86:	6a3a      	ldr	r2, [r7, #32]
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e5      	bne.n	8006a60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d10a      	bne.n	8006ab8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fdf9 	bl	80066b6 <HAL_UARTEx_RxEventCallback>
 8006ac4:	e002      	b.n	8006acc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fde3 	bl	8006692 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e002      	b.n	8006ad6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3730      	adds	r7, #48	; 0x30
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b1a:	f023 030c 	bic.w	r3, r3, #12
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2c      	ldr	r2, [pc, #176]	; (8006bf4 <UART_SetConfig+0x114>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d103      	bne.n	8006b50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b48:	f7fe fb76 	bl	8005238 <HAL_RCC_GetPCLK2Freq>
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	e002      	b.n	8006b56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b50:	f7fe fb5e 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 8006b54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009a      	lsls	r2, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	4a22      	ldr	r2, [pc, #136]	; (8006bf8 <UART_SetConfig+0x118>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	0119      	lsls	r1, r3, #4
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009a      	lsls	r2, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <UART_SetConfig+0x118>)
 8006b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	2064      	movs	r0, #100	; 0x64
 8006b96:	fb00 f303 	mul.w	r3, r0, r3
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	3332      	adds	r3, #50	; 0x32
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <UART_SetConfig+0x118>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bac:	4419      	add	r1, r3
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009a      	lsls	r2, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <UART_SetConfig+0x118>)
 8006bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2064      	movs	r0, #100	; 0x64
 8006bce:	fb00 f303 	mul.w	r3, r0, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	3332      	adds	r3, #50	; 0x32
 8006bd8:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <UART_SetConfig+0x118>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	440a      	add	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40013800 	.word	0x40013800
 8006bf8:	51eb851f 	.word	0x51eb851f

08006bfc <__errno>:
 8006bfc:	4b01      	ldr	r3, [pc, #4]	; (8006c04 <__errno+0x8>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000088 	.word	0x20000088

08006c08 <__libc_init_array>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	2600      	movs	r6, #0
 8006c0c:	4d0c      	ldr	r5, [pc, #48]	; (8006c40 <__libc_init_array+0x38>)
 8006c0e:	4c0d      	ldr	r4, [pc, #52]	; (8006c44 <__libc_init_array+0x3c>)
 8006c10:	1b64      	subs	r4, r4, r5
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	42a6      	cmp	r6, r4
 8006c16:	d109      	bne.n	8006c2c <__libc_init_array+0x24>
 8006c18:	f004 fe00 	bl	800b81c <_init>
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	4d0a      	ldr	r5, [pc, #40]	; (8006c48 <__libc_init_array+0x40>)
 8006c20:	4c0a      	ldr	r4, [pc, #40]	; (8006c4c <__libc_init_array+0x44>)
 8006c22:	1b64      	subs	r4, r4, r5
 8006c24:	10a4      	asrs	r4, r4, #2
 8006c26:	42a6      	cmp	r6, r4
 8006c28:	d105      	bne.n	8006c36 <__libc_init_array+0x2e>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c30:	4798      	blx	r3
 8006c32:	3601      	adds	r6, #1
 8006c34:	e7ee      	b.n	8006c14 <__libc_init_array+0xc>
 8006c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3a:	4798      	blx	r3
 8006c3c:	3601      	adds	r6, #1
 8006c3e:	e7f2      	b.n	8006c26 <__libc_init_array+0x1e>
 8006c40:	0800bde4 	.word	0x0800bde4
 8006c44:	0800bde4 	.word	0x0800bde4
 8006c48:	0800bde4 	.word	0x0800bde4
 8006c4c:	0800bde8 	.word	0x0800bde8

08006c50 <memcmp>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	3901      	subs	r1, #1
 8006c54:	4402      	add	r2, r0
 8006c56:	4290      	cmp	r0, r2
 8006c58:	d101      	bne.n	8006c5e <memcmp+0xe>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e005      	b.n	8006c6a <memcmp+0x1a>
 8006c5e:	7803      	ldrb	r3, [r0, #0]
 8006c60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d001      	beq.n	8006c6c <memcmp+0x1c>
 8006c68:	1b18      	subs	r0, r3, r4
 8006c6a:	bd10      	pop	{r4, pc}
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	e7f2      	b.n	8006c56 <memcmp+0x6>

08006c70 <memcpy>:
 8006c70:	440a      	add	r2, r1
 8006c72:	4291      	cmp	r1, r2
 8006c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c78:	d100      	bne.n	8006c7c <memcpy+0xc>
 8006c7a:	4770      	bx	lr
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c82:	4291      	cmp	r1, r2
 8006c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c88:	d1f9      	bne.n	8006c7e <memcpy+0xe>
 8006c8a:	bd10      	pop	{r4, pc}

08006c8c <memset>:
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	4402      	add	r2, r0
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d100      	bne.n	8006c96 <memset+0xa>
 8006c94:	4770      	bx	lr
 8006c96:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9a:	e7f9      	b.n	8006c90 <memset+0x4>

08006c9c <__cvt>:
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca2:	461f      	mov	r7, r3
 8006ca4:	bfbb      	ittet	lt
 8006ca6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006caa:	461f      	movlt	r7, r3
 8006cac:	2300      	movge	r3, #0
 8006cae:	232d      	movlt	r3, #45	; 0x2d
 8006cb0:	b088      	sub	sp, #32
 8006cb2:	4614      	mov	r4, r2
 8006cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006cb8:	7013      	strb	r3, [r2, #0]
 8006cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cbc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006cc0:	f023 0820 	bic.w	r8, r3, #32
 8006cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cc8:	d005      	beq.n	8006cd6 <__cvt+0x3a>
 8006cca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cce:	d100      	bne.n	8006cd2 <__cvt+0x36>
 8006cd0:	3501      	adds	r5, #1
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e000      	b.n	8006cd8 <__cvt+0x3c>
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	aa07      	add	r2, sp, #28
 8006cda:	9204      	str	r2, [sp, #16]
 8006cdc:	aa06      	add	r2, sp, #24
 8006cde:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006ce2:	e9cd 3500 	strd	r3, r5, [sp]
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	463b      	mov	r3, r7
 8006cea:	f001 fd85 	bl	80087f8 <_dtoa_r>
 8006cee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	d102      	bne.n	8006cfc <__cvt+0x60>
 8006cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cf8:	07db      	lsls	r3, r3, #31
 8006cfa:	d522      	bpl.n	8006d42 <__cvt+0xa6>
 8006cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d00:	eb06 0905 	add.w	r9, r6, r5
 8006d04:	d110      	bne.n	8006d28 <__cvt+0x8c>
 8006d06:	7833      	ldrb	r3, [r6, #0]
 8006d08:	2b30      	cmp	r3, #48	; 0x30
 8006d0a:	d10a      	bne.n	8006d22 <__cvt+0x86>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4620      	mov	r0, r4
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fe48 	bl	80009a8 <__aeabi_dcmpeq>
 8006d18:	b918      	cbnz	r0, 8006d22 <__cvt+0x86>
 8006d1a:	f1c5 0501 	rsb	r5, r5, #1
 8006d1e:	f8ca 5000 	str.w	r5, [sl]
 8006d22:	f8da 3000 	ldr.w	r3, [sl]
 8006d26:	4499      	add	r9, r3
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4639      	mov	r1, r7
 8006d30:	f7f9 fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006d34:	b108      	cbz	r0, 8006d3a <__cvt+0x9e>
 8006d36:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d3a:	2230      	movs	r2, #48	; 0x30
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	454b      	cmp	r3, r9
 8006d40:	d307      	bcc.n	8006d52 <__cvt+0xb6>
 8006d42:	4630      	mov	r0, r6
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d48:	1b9b      	subs	r3, r3, r6
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	b008      	add	sp, #32
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	1c59      	adds	r1, r3, #1
 8006d54:	9107      	str	r1, [sp, #28]
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e7f0      	b.n	8006d3c <__cvt+0xa0>

08006d5a <__exponent>:
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	f803 2b02 	strb.w	r2, [r3], #2
 8006d64:	bfb6      	itet	lt
 8006d66:	222d      	movlt	r2, #45	; 0x2d
 8006d68:	222b      	movge	r2, #43	; 0x2b
 8006d6a:	4249      	neglt	r1, r1
 8006d6c:	2909      	cmp	r1, #9
 8006d6e:	7042      	strb	r2, [r0, #1]
 8006d70:	dd2b      	ble.n	8006dca <__exponent+0x70>
 8006d72:	f10d 0407 	add.w	r4, sp, #7
 8006d76:	46a4      	mov	ip, r4
 8006d78:	270a      	movs	r7, #10
 8006d7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d7e:	460a      	mov	r2, r1
 8006d80:	46a6      	mov	lr, r4
 8006d82:	fb07 1516 	mls	r5, r7, r6, r1
 8006d86:	2a63      	cmp	r2, #99	; 0x63
 8006d88:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d96:	dcf0      	bgt.n	8006d7a <__exponent+0x20>
 8006d98:	3130      	adds	r1, #48	; 0x30
 8006d9a:	f1ae 0502 	sub.w	r5, lr, #2
 8006d9e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006da2:	4629      	mov	r1, r5
 8006da4:	1c44      	adds	r4, r0, #1
 8006da6:	4561      	cmp	r1, ip
 8006da8:	d30a      	bcc.n	8006dc0 <__exponent+0x66>
 8006daa:	f10d 0209 	add.w	r2, sp, #9
 8006dae:	eba2 020e 	sub.w	r2, r2, lr
 8006db2:	4565      	cmp	r5, ip
 8006db4:	bf88      	it	hi
 8006db6:	2200      	movhi	r2, #0
 8006db8:	4413      	add	r3, r2
 8006dba:	1a18      	subs	r0, r3, r0
 8006dbc:	b003      	add	sp, #12
 8006dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dc4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dc8:	e7ed      	b.n	8006da6 <__exponent+0x4c>
 8006dca:	2330      	movs	r3, #48	; 0x30
 8006dcc:	3130      	adds	r1, #48	; 0x30
 8006dce:	7083      	strb	r3, [r0, #2]
 8006dd0:	70c1      	strb	r1, [r0, #3]
 8006dd2:	1d03      	adds	r3, r0, #4
 8006dd4:	e7f1      	b.n	8006dba <__exponent+0x60>
	...

08006dd8 <_printf_float>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	b091      	sub	sp, #68	; 0x44
 8006dde:	460c      	mov	r4, r1
 8006de0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006de4:	4616      	mov	r6, r2
 8006de6:	461f      	mov	r7, r3
 8006de8:	4605      	mov	r5, r0
 8006dea:	f002 fe59 	bl	8009aa0 <_localeconv_r>
 8006dee:	6803      	ldr	r3, [r0, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	9309      	str	r3, [sp, #36]	; 0x24
 8006df4:	f7f9 f9ac 	bl	8000150 <strlen>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8006dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8006e00:	900a      	str	r0, [sp, #40]	; 0x28
 8006e02:	3307      	adds	r3, #7
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	f103 0208 	add.w	r2, r3, #8
 8006e0c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e10:	f8d4 b000 	ldr.w	fp, [r4]
 8006e14:	f8c8 2000 	str.w	r2, [r8]
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e20:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006e24:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	4640      	mov	r0, r8
 8006e30:	4b9c      	ldr	r3, [pc, #624]	; (80070a4 <_printf_float+0x2cc>)
 8006e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e34:	f7f9 fdea 	bl	8000a0c <__aeabi_dcmpun>
 8006e38:	bb70      	cbnz	r0, 8006e98 <_printf_float+0xc0>
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	4640      	mov	r0, r8
 8006e40:	4b98      	ldr	r3, [pc, #608]	; (80070a4 <_printf_float+0x2cc>)
 8006e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e44:	f7f9 fdc4 	bl	80009d0 <__aeabi_dcmple>
 8006e48:	bb30      	cbnz	r0, 8006e98 <_printf_float+0xc0>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4640      	mov	r0, r8
 8006e50:	4651      	mov	r1, sl
 8006e52:	f7f9 fdb3 	bl	80009bc <__aeabi_dcmplt>
 8006e56:	b110      	cbz	r0, 8006e5e <_printf_float+0x86>
 8006e58:	232d      	movs	r3, #45	; 0x2d
 8006e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5e:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <_printf_float+0x2d0>)
 8006e60:	4892      	ldr	r0, [pc, #584]	; (80070ac <_printf_float+0x2d4>)
 8006e62:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e66:	bf94      	ite	ls
 8006e68:	4698      	movls	r8, r3
 8006e6a:	4680      	movhi	r8, r0
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	f04f 0a00 	mov.w	sl, #0
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	f02b 0304 	bic.w	r3, fp, #4
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	4633      	mov	r3, r6
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	9700      	str	r7, [sp, #0]
 8006e82:	aa0f      	add	r2, sp, #60	; 0x3c
 8006e84:	f000 f9d4 	bl	8007230 <_printf_common>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f040 8090 	bne.w	8006fae <_printf_float+0x1d6>
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e92:	b011      	add	sp, #68	; 0x44
 8006e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e98:	4642      	mov	r2, r8
 8006e9a:	4653      	mov	r3, sl
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4651      	mov	r1, sl
 8006ea0:	f7f9 fdb4 	bl	8000a0c <__aeabi_dcmpun>
 8006ea4:	b148      	cbz	r0, 8006eba <_printf_float+0xe2>
 8006ea6:	f1ba 0f00 	cmp.w	sl, #0
 8006eaa:	bfb8      	it	lt
 8006eac:	232d      	movlt	r3, #45	; 0x2d
 8006eae:	4880      	ldr	r0, [pc, #512]	; (80070b0 <_printf_float+0x2d8>)
 8006eb0:	bfb8      	it	lt
 8006eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eb6:	4b7f      	ldr	r3, [pc, #508]	; (80070b4 <_printf_float+0x2dc>)
 8006eb8:	e7d3      	b.n	8006e62 <_printf_float+0x8a>
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	d142      	bne.n	8006f4a <_printf_float+0x172>
 8006ec4:	2306      	movs	r3, #6
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	9206      	str	r2, [sp, #24]
 8006ecc:	aa0e      	add	r2, sp, #56	; 0x38
 8006ece:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006ed2:	aa0d      	add	r2, sp, #52	; 0x34
 8006ed4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006ed8:	9203      	str	r2, [sp, #12]
 8006eda:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006ede:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4628      	mov	r0, r5
 8006eec:	4653      	mov	r3, sl
 8006eee:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ef0:	f7ff fed4 	bl	8006c9c <__cvt>
 8006ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	2947      	cmp	r1, #71	; 0x47
 8006efa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006efc:	d108      	bne.n	8006f10 <_printf_float+0x138>
 8006efe:	1cc8      	adds	r0, r1, #3
 8006f00:	db02      	blt.n	8006f08 <_printf_float+0x130>
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	4299      	cmp	r1, r3
 8006f06:	dd40      	ble.n	8006f8a <_printf_float+0x1b2>
 8006f08:	f1a9 0902 	sub.w	r9, r9, #2
 8006f0c:	fa5f f989 	uxtb.w	r9, r9
 8006f10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f14:	d81f      	bhi.n	8006f56 <_printf_float+0x17e>
 8006f16:	464a      	mov	r2, r9
 8006f18:	3901      	subs	r1, #1
 8006f1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f1e:	910d      	str	r1, [sp, #52]	; 0x34
 8006f20:	f7ff ff1b 	bl	8006d5a <__exponent>
 8006f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f26:	4682      	mov	sl, r0
 8006f28:	1813      	adds	r3, r2, r0
 8006f2a:	2a01      	cmp	r2, #1
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	dc02      	bgt.n	8006f36 <_printf_float+0x15e>
 8006f30:	6822      	ldr	r2, [r4, #0]
 8006f32:	07d2      	lsls	r2, r2, #31
 8006f34:	d501      	bpl.n	8006f3a <_printf_float+0x162>
 8006f36:	3301      	adds	r3, #1
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d09b      	beq.n	8006e7a <_printf_float+0xa2>
 8006f42:	232d      	movs	r3, #45	; 0x2d
 8006f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f48:	e797      	b.n	8006e7a <_printf_float+0xa2>
 8006f4a:	2947      	cmp	r1, #71	; 0x47
 8006f4c:	d1bc      	bne.n	8006ec8 <_printf_float+0xf0>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1ba      	bne.n	8006ec8 <_printf_float+0xf0>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e7b7      	b.n	8006ec6 <_printf_float+0xee>
 8006f56:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006f5a:	d118      	bne.n	8006f8e <_printf_float+0x1b6>
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	dd0b      	ble.n	8006f7a <_printf_float+0x1a2>
 8006f62:	6121      	str	r1, [r4, #16]
 8006f64:	b913      	cbnz	r3, 8006f6c <_printf_float+0x194>
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	07d0      	lsls	r0, r2, #31
 8006f6a:	d502      	bpl.n	8006f72 <_printf_float+0x19a>
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	440b      	add	r3, r1
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	f04f 0a00 	mov.w	sl, #0
 8006f76:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f78:	e7df      	b.n	8006f3a <_printf_float+0x162>
 8006f7a:	b913      	cbnz	r3, 8006f82 <_printf_float+0x1aa>
 8006f7c:	6822      	ldr	r2, [r4, #0]
 8006f7e:	07d2      	lsls	r2, r2, #31
 8006f80:	d501      	bpl.n	8006f86 <_printf_float+0x1ae>
 8006f82:	3302      	adds	r3, #2
 8006f84:	e7f4      	b.n	8006f70 <_printf_float+0x198>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e7f2      	b.n	8006f70 <_printf_float+0x198>
 8006f8a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f90:	4299      	cmp	r1, r3
 8006f92:	db05      	blt.n	8006fa0 <_printf_float+0x1c8>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	6121      	str	r1, [r4, #16]
 8006f98:	07d8      	lsls	r0, r3, #31
 8006f9a:	d5ea      	bpl.n	8006f72 <_printf_float+0x19a>
 8006f9c:	1c4b      	adds	r3, r1, #1
 8006f9e:	e7e7      	b.n	8006f70 <_printf_float+0x198>
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	bfcc      	ite	gt
 8006fa4:	2201      	movgt	r2, #1
 8006fa6:	f1c1 0202 	rsble	r2, r1, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	e7e0      	b.n	8006f70 <_printf_float+0x198>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	055a      	lsls	r2, r3, #21
 8006fb2:	d407      	bmi.n	8006fc4 <_printf_float+0x1ec>
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d12b      	bne.n	800701a <_printf_float+0x242>
 8006fc2:	e764      	b.n	8006e8e <_printf_float+0xb6>
 8006fc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fc8:	f240 80dd 	bls.w	8007186 <_printf_float+0x3ae>
 8006fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f7f9 fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d033      	beq.n	8007044 <_printf_float+0x26c>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	4a35      	ldr	r2, [pc, #212]	; (80070b8 <_printf_float+0x2e0>)
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	f43f af51 	beq.w	8006e8e <_printf_float+0xb6>
 8006fec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	db02      	blt.n	8006ffa <_printf_float+0x222>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	07d8      	lsls	r0, r3, #31
 8006ff8:	d50f      	bpl.n	800701a <_printf_float+0x242>
 8006ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	f43f af42 	beq.w	8006e8e <_printf_float+0xb6>
 800700a:	f04f 0800 	mov.w	r8, #0
 800700e:	f104 091a 	add.w	r9, r4, #26
 8007012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007014:	3b01      	subs	r3, #1
 8007016:	4543      	cmp	r3, r8
 8007018:	dc09      	bgt.n	800702e <_printf_float+0x256>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	079b      	lsls	r3, r3, #30
 800701e:	f100 8102 	bmi.w	8007226 <_printf_float+0x44e>
 8007022:	68e0      	ldr	r0, [r4, #12]
 8007024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007026:	4298      	cmp	r0, r3
 8007028:	bfb8      	it	lt
 800702a:	4618      	movlt	r0, r3
 800702c:	e731      	b.n	8006e92 <_printf_float+0xba>
 800702e:	2301      	movs	r3, #1
 8007030:	464a      	mov	r2, r9
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	47b8      	blx	r7
 8007038:	3001      	adds	r0, #1
 800703a:	f43f af28 	beq.w	8006e8e <_printf_float+0xb6>
 800703e:	f108 0801 	add.w	r8, r8, #1
 8007042:	e7e6      	b.n	8007012 <_printf_float+0x23a>
 8007044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	dc38      	bgt.n	80070bc <_printf_float+0x2e4>
 800704a:	2301      	movs	r3, #1
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	4a19      	ldr	r2, [pc, #100]	; (80070b8 <_printf_float+0x2e0>)
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	f43f af1a 	beq.w	8006e8e <_printf_float+0xb6>
 800705a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800705e:	4313      	orrs	r3, r2
 8007060:	d102      	bne.n	8007068 <_printf_float+0x290>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	07d9      	lsls	r1, r3, #31
 8007066:	d5d8      	bpl.n	800701a <_printf_float+0x242>
 8007068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800706c:	4631      	mov	r1, r6
 800706e:	4628      	mov	r0, r5
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f af0b 	beq.w	8006e8e <_printf_float+0xb6>
 8007078:	f04f 0900 	mov.w	r9, #0
 800707c:	f104 0a1a 	add.w	sl, r4, #26
 8007080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007082:	425b      	negs	r3, r3
 8007084:	454b      	cmp	r3, r9
 8007086:	dc01      	bgt.n	800708c <_printf_float+0x2b4>
 8007088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800708a:	e794      	b.n	8006fb6 <_printf_float+0x1de>
 800708c:	2301      	movs	r3, #1
 800708e:	4652      	mov	r2, sl
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	f43f aef9 	beq.w	8006e8e <_printf_float+0xb6>
 800709c:	f109 0901 	add.w	r9, r9, #1
 80070a0:	e7ee      	b.n	8007080 <_printf_float+0x2a8>
 80070a2:	bf00      	nop
 80070a4:	7fefffff 	.word	0x7fefffff
 80070a8:	0800b940 	.word	0x0800b940
 80070ac:	0800b944 	.word	0x0800b944
 80070b0:	0800b94c 	.word	0x0800b94c
 80070b4:	0800b948 	.word	0x0800b948
 80070b8:	0800b950 	.word	0x0800b950
 80070bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070c0:	429a      	cmp	r2, r3
 80070c2:	bfa8      	it	ge
 80070c4:	461a      	movge	r2, r3
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	4691      	mov	r9, r2
 80070ca:	dc37      	bgt.n	800713c <_printf_float+0x364>
 80070cc:	f04f 0b00 	mov.w	fp, #0
 80070d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070d4:	f104 021a 	add.w	r2, r4, #26
 80070d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80070dc:	ebaa 0309 	sub.w	r3, sl, r9
 80070e0:	455b      	cmp	r3, fp
 80070e2:	dc33      	bgt.n	800714c <_printf_float+0x374>
 80070e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070e8:	429a      	cmp	r2, r3
 80070ea:	db3b      	blt.n	8007164 <_printf_float+0x38c>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	07da      	lsls	r2, r3, #31
 80070f0:	d438      	bmi.n	8007164 <_printf_float+0x38c>
 80070f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070f6:	eba3 020a 	sub.w	r2, r3, sl
 80070fa:	eba3 0901 	sub.w	r9, r3, r1
 80070fe:	4591      	cmp	r9, r2
 8007100:	bfa8      	it	ge
 8007102:	4691      	movge	r9, r2
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	dc34      	bgt.n	8007174 <_printf_float+0x39c>
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	eba3 0309 	sub.w	r3, r3, r9
 8007120:	4543      	cmp	r3, r8
 8007122:	f77f af7a 	ble.w	800701a <_printf_float+0x242>
 8007126:	2301      	movs	r3, #1
 8007128:	4652      	mov	r2, sl
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f aeac 	beq.w	8006e8e <_printf_float+0xb6>
 8007136:	f108 0801 	add.w	r8, r8, #1
 800713a:	e7ec      	b.n	8007116 <_printf_float+0x33e>
 800713c:	4613      	mov	r3, r2
 800713e:	4631      	mov	r1, r6
 8007140:	4642      	mov	r2, r8
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	d1c0      	bne.n	80070cc <_printf_float+0x2f4>
 800714a:	e6a0      	b.n	8006e8e <_printf_float+0xb6>
 800714c:	2301      	movs	r3, #1
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	920b      	str	r2, [sp, #44]	; 0x2c
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f ae99 	beq.w	8006e8e <_printf_float+0xb6>
 800715c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800715e:	f10b 0b01 	add.w	fp, fp, #1
 8007162:	e7b9      	b.n	80070d8 <_printf_float+0x300>
 8007164:	4631      	mov	r1, r6
 8007166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	d1bf      	bne.n	80070f2 <_printf_float+0x31a>
 8007172:	e68c      	b.n	8006e8e <_printf_float+0xb6>
 8007174:	464b      	mov	r3, r9
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	eb08 020a 	add.w	r2, r8, sl
 800717e:	47b8      	blx	r7
 8007180:	3001      	adds	r0, #1
 8007182:	d1c2      	bne.n	800710a <_printf_float+0x332>
 8007184:	e683      	b.n	8006e8e <_printf_float+0xb6>
 8007186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007188:	2a01      	cmp	r2, #1
 800718a:	dc01      	bgt.n	8007190 <_printf_float+0x3b8>
 800718c:	07db      	lsls	r3, r3, #31
 800718e:	d537      	bpl.n	8007200 <_printf_float+0x428>
 8007190:	2301      	movs	r3, #1
 8007192:	4642      	mov	r2, r8
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	f43f ae77 	beq.w	8006e8e <_printf_float+0xb6>
 80071a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071a4:	4631      	mov	r1, r6
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f ae6f 	beq.w	8006e8e <_printf_float+0xb6>
 80071b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071b4:	2200      	movs	r2, #0
 80071b6:	2300      	movs	r3, #0
 80071b8:	f7f9 fbf6 	bl	80009a8 <__aeabi_dcmpeq>
 80071bc:	b9d8      	cbnz	r0, 80071f6 <_printf_float+0x41e>
 80071be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c0:	f108 0201 	add.w	r2, r8, #1
 80071c4:	3b01      	subs	r3, #1
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	d10e      	bne.n	80071ee <_printf_float+0x416>
 80071d0:	e65d      	b.n	8006e8e <_printf_float+0xb6>
 80071d2:	2301      	movs	r3, #1
 80071d4:	464a      	mov	r2, r9
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f ae56 	beq.w	8006e8e <_printf_float+0xb6>
 80071e2:	f108 0801 	add.w	r8, r8, #1
 80071e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4543      	cmp	r3, r8
 80071ec:	dcf1      	bgt.n	80071d2 <_printf_float+0x3fa>
 80071ee:	4653      	mov	r3, sl
 80071f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071f4:	e6e0      	b.n	8006fb8 <_printf_float+0x1e0>
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	f104 091a 	add.w	r9, r4, #26
 80071fe:	e7f2      	b.n	80071e6 <_printf_float+0x40e>
 8007200:	2301      	movs	r3, #1
 8007202:	4642      	mov	r2, r8
 8007204:	e7df      	b.n	80071c6 <_printf_float+0x3ee>
 8007206:	2301      	movs	r3, #1
 8007208:	464a      	mov	r2, r9
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f ae3c 	beq.w	8006e8e <_printf_float+0xb6>
 8007216:	f108 0801 	add.w	r8, r8, #1
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800721e:	1a5b      	subs	r3, r3, r1
 8007220:	4543      	cmp	r3, r8
 8007222:	dcf0      	bgt.n	8007206 <_printf_float+0x42e>
 8007224:	e6fd      	b.n	8007022 <_printf_float+0x24a>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	f104 0919 	add.w	r9, r4, #25
 800722e:	e7f4      	b.n	800721a <_printf_float+0x442>

08007230 <_printf_common>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	4616      	mov	r6, r2
 8007236:	4699      	mov	r9, r3
 8007238:	688a      	ldr	r2, [r1, #8]
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	4607      	mov	r7, r0
 800723e:	4293      	cmp	r3, r2
 8007240:	bfb8      	it	lt
 8007242:	4613      	movlt	r3, r2
 8007244:	6033      	str	r3, [r6, #0]
 8007246:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800724a:	460c      	mov	r4, r1
 800724c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007250:	b10a      	cbz	r2, 8007256 <_printf_common+0x26>
 8007252:	3301      	adds	r3, #1
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	0699      	lsls	r1, r3, #26
 800725a:	bf42      	ittt	mi
 800725c:	6833      	ldrmi	r3, [r6, #0]
 800725e:	3302      	addmi	r3, #2
 8007260:	6033      	strmi	r3, [r6, #0]
 8007262:	6825      	ldr	r5, [r4, #0]
 8007264:	f015 0506 	ands.w	r5, r5, #6
 8007268:	d106      	bne.n	8007278 <_printf_common+0x48>
 800726a:	f104 0a19 	add.w	sl, r4, #25
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	6832      	ldr	r2, [r6, #0]
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	42ab      	cmp	r3, r5
 8007276:	dc28      	bgt.n	80072ca <_printf_common+0x9a>
 8007278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800727c:	1e13      	subs	r3, r2, #0
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	bf18      	it	ne
 8007282:	2301      	movne	r3, #1
 8007284:	0692      	lsls	r2, r2, #26
 8007286:	d42d      	bmi.n	80072e4 <_printf_common+0xb4>
 8007288:	4649      	mov	r1, r9
 800728a:	4638      	mov	r0, r7
 800728c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d020      	beq.n	80072d8 <_printf_common+0xa8>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	68e5      	ldr	r5, [r4, #12]
 800729a:	f003 0306 	and.w	r3, r3, #6
 800729e:	2b04      	cmp	r3, #4
 80072a0:	bf18      	it	ne
 80072a2:	2500      	movne	r5, #0
 80072a4:	6832      	ldr	r2, [r6, #0]
 80072a6:	f04f 0600 	mov.w	r6, #0
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	bf08      	it	eq
 80072ae:	1aad      	subeq	r5, r5, r2
 80072b0:	6922      	ldr	r2, [r4, #16]
 80072b2:	bf08      	it	eq
 80072b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b8:	4293      	cmp	r3, r2
 80072ba:	bfc4      	itt	gt
 80072bc:	1a9b      	subgt	r3, r3, r2
 80072be:	18ed      	addgt	r5, r5, r3
 80072c0:	341a      	adds	r4, #26
 80072c2:	42b5      	cmp	r5, r6
 80072c4:	d11a      	bne.n	80072fc <_printf_common+0xcc>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e008      	b.n	80072dc <_printf_common+0xac>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4652      	mov	r2, sl
 80072ce:	4649      	mov	r1, r9
 80072d0:	4638      	mov	r0, r7
 80072d2:	47c0      	blx	r8
 80072d4:	3001      	adds	r0, #1
 80072d6:	d103      	bne.n	80072e0 <_printf_common+0xb0>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e0:	3501      	adds	r5, #1
 80072e2:	e7c4      	b.n	800726e <_printf_common+0x3e>
 80072e4:	2030      	movs	r0, #48	; 0x30
 80072e6:	18e1      	adds	r1, r4, r3
 80072e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f2:	4422      	add	r2, r4
 80072f4:	3302      	adds	r3, #2
 80072f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072fa:	e7c5      	b.n	8007288 <_printf_common+0x58>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4622      	mov	r2, r4
 8007300:	4649      	mov	r1, r9
 8007302:	4638      	mov	r0, r7
 8007304:	47c0      	blx	r8
 8007306:	3001      	adds	r0, #1
 8007308:	d0e6      	beq.n	80072d8 <_printf_common+0xa8>
 800730a:	3601      	adds	r6, #1
 800730c:	e7d9      	b.n	80072c2 <_printf_common+0x92>
	...

08007310 <_printf_i>:
 8007310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	7e0f      	ldrb	r7, [r1, #24]
 8007316:	4691      	mov	r9, r2
 8007318:	2f78      	cmp	r7, #120	; 0x78
 800731a:	4680      	mov	r8, r0
 800731c:	460c      	mov	r4, r1
 800731e:	469a      	mov	sl, r3
 8007320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007326:	d807      	bhi.n	8007338 <_printf_i+0x28>
 8007328:	2f62      	cmp	r7, #98	; 0x62
 800732a:	d80a      	bhi.n	8007342 <_printf_i+0x32>
 800732c:	2f00      	cmp	r7, #0
 800732e:	f000 80d9 	beq.w	80074e4 <_printf_i+0x1d4>
 8007332:	2f58      	cmp	r7, #88	; 0x58
 8007334:	f000 80a4 	beq.w	8007480 <_printf_i+0x170>
 8007338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800733c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007340:	e03a      	b.n	80073b8 <_printf_i+0xa8>
 8007342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007346:	2b15      	cmp	r3, #21
 8007348:	d8f6      	bhi.n	8007338 <_printf_i+0x28>
 800734a:	a101      	add	r1, pc, #4	; (adr r1, 8007350 <_printf_i+0x40>)
 800734c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007350:	080073a9 	.word	0x080073a9
 8007354:	080073bd 	.word	0x080073bd
 8007358:	08007339 	.word	0x08007339
 800735c:	08007339 	.word	0x08007339
 8007360:	08007339 	.word	0x08007339
 8007364:	08007339 	.word	0x08007339
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007339 	.word	0x08007339
 8007370:	08007339 	.word	0x08007339
 8007374:	08007339 	.word	0x08007339
 8007378:	08007339 	.word	0x08007339
 800737c:	080074cb 	.word	0x080074cb
 8007380:	080073ed 	.word	0x080073ed
 8007384:	080074ad 	.word	0x080074ad
 8007388:	08007339 	.word	0x08007339
 800738c:	08007339 	.word	0x08007339
 8007390:	080074ed 	.word	0x080074ed
 8007394:	08007339 	.word	0x08007339
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007339 	.word	0x08007339
 80073a0:	08007339 	.word	0x08007339
 80073a4:	080074b5 	.word	0x080074b5
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	1d1a      	adds	r2, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	602a      	str	r2, [r5, #0]
 80073b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0a4      	b.n	8007506 <_printf_i+0x1f6>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	6829      	ldr	r1, [r5, #0]
 80073c0:	0606      	lsls	r6, r0, #24
 80073c2:	f101 0304 	add.w	r3, r1, #4
 80073c6:	d50a      	bpl.n	80073de <_printf_i+0xce>
 80073c8:	680e      	ldr	r6, [r1, #0]
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	da03      	bge.n	80073d8 <_printf_i+0xc8>
 80073d0:	232d      	movs	r3, #45	; 0x2d
 80073d2:	4276      	negs	r6, r6
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d8:	230a      	movs	r3, #10
 80073da:	485e      	ldr	r0, [pc, #376]	; (8007554 <_printf_i+0x244>)
 80073dc:	e019      	b.n	8007412 <_printf_i+0x102>
 80073de:	680e      	ldr	r6, [r1, #0]
 80073e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073e4:	602b      	str	r3, [r5, #0]
 80073e6:	bf18      	it	ne
 80073e8:	b236      	sxthne	r6, r6
 80073ea:	e7ef      	b.n	80073cc <_printf_i+0xbc>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	1d19      	adds	r1, r3, #4
 80073f2:	6029      	str	r1, [r5, #0]
 80073f4:	0601      	lsls	r1, r0, #24
 80073f6:	d501      	bpl.n	80073fc <_printf_i+0xec>
 80073f8:	681e      	ldr	r6, [r3, #0]
 80073fa:	e002      	b.n	8007402 <_printf_i+0xf2>
 80073fc:	0646      	lsls	r6, r0, #25
 80073fe:	d5fb      	bpl.n	80073f8 <_printf_i+0xe8>
 8007400:	881e      	ldrh	r6, [r3, #0]
 8007402:	2f6f      	cmp	r7, #111	; 0x6f
 8007404:	bf0c      	ite	eq
 8007406:	2308      	moveq	r3, #8
 8007408:	230a      	movne	r3, #10
 800740a:	4852      	ldr	r0, [pc, #328]	; (8007554 <_printf_i+0x244>)
 800740c:	2100      	movs	r1, #0
 800740e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007412:	6865      	ldr	r5, [r4, #4]
 8007414:	2d00      	cmp	r5, #0
 8007416:	bfa8      	it	ge
 8007418:	6821      	ldrge	r1, [r4, #0]
 800741a:	60a5      	str	r5, [r4, #8]
 800741c:	bfa4      	itt	ge
 800741e:	f021 0104 	bicge.w	r1, r1, #4
 8007422:	6021      	strge	r1, [r4, #0]
 8007424:	b90e      	cbnz	r6, 800742a <_printf_i+0x11a>
 8007426:	2d00      	cmp	r5, #0
 8007428:	d04d      	beq.n	80074c6 <_printf_i+0x1b6>
 800742a:	4615      	mov	r5, r2
 800742c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007430:	fb03 6711 	mls	r7, r3, r1, r6
 8007434:	5dc7      	ldrb	r7, [r0, r7]
 8007436:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800743a:	4637      	mov	r7, r6
 800743c:	42bb      	cmp	r3, r7
 800743e:	460e      	mov	r6, r1
 8007440:	d9f4      	bls.n	800742c <_printf_i+0x11c>
 8007442:	2b08      	cmp	r3, #8
 8007444:	d10b      	bne.n	800745e <_printf_i+0x14e>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	07de      	lsls	r6, r3, #31
 800744a:	d508      	bpl.n	800745e <_printf_i+0x14e>
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	6861      	ldr	r1, [r4, #4]
 8007450:	4299      	cmp	r1, r3
 8007452:	bfde      	ittt	le
 8007454:	2330      	movle	r3, #48	; 0x30
 8007456:	f805 3c01 	strble.w	r3, [r5, #-1]
 800745a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800745e:	1b52      	subs	r2, r2, r5
 8007460:	6122      	str	r2, [r4, #16]
 8007462:	464b      	mov	r3, r9
 8007464:	4621      	mov	r1, r4
 8007466:	4640      	mov	r0, r8
 8007468:	f8cd a000 	str.w	sl, [sp]
 800746c:	aa03      	add	r2, sp, #12
 800746e:	f7ff fedf 	bl	8007230 <_printf_common>
 8007472:	3001      	adds	r0, #1
 8007474:	d14c      	bne.n	8007510 <_printf_i+0x200>
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	b004      	add	sp, #16
 800747c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007480:	4834      	ldr	r0, [pc, #208]	; (8007554 <_printf_i+0x244>)
 8007482:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007486:	6829      	ldr	r1, [r5, #0]
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	f851 6b04 	ldr.w	r6, [r1], #4
 800748e:	6029      	str	r1, [r5, #0]
 8007490:	061d      	lsls	r5, r3, #24
 8007492:	d514      	bpl.n	80074be <_printf_i+0x1ae>
 8007494:	07df      	lsls	r7, r3, #31
 8007496:	bf44      	itt	mi
 8007498:	f043 0320 	orrmi.w	r3, r3, #32
 800749c:	6023      	strmi	r3, [r4, #0]
 800749e:	b91e      	cbnz	r6, 80074a8 <_printf_i+0x198>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	f023 0320 	bic.w	r3, r3, #32
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	2310      	movs	r3, #16
 80074aa:	e7af      	b.n	800740c <_printf_i+0xfc>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	f043 0320 	orr.w	r3, r3, #32
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	2378      	movs	r3, #120	; 0x78
 80074b6:	4828      	ldr	r0, [pc, #160]	; (8007558 <_printf_i+0x248>)
 80074b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074bc:	e7e3      	b.n	8007486 <_printf_i+0x176>
 80074be:	0659      	lsls	r1, r3, #25
 80074c0:	bf48      	it	mi
 80074c2:	b2b6      	uxthmi	r6, r6
 80074c4:	e7e6      	b.n	8007494 <_printf_i+0x184>
 80074c6:	4615      	mov	r5, r2
 80074c8:	e7bb      	b.n	8007442 <_printf_i+0x132>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	6826      	ldr	r6, [r4, #0]
 80074ce:	1d18      	adds	r0, r3, #4
 80074d0:	6961      	ldr	r1, [r4, #20]
 80074d2:	6028      	str	r0, [r5, #0]
 80074d4:	0635      	lsls	r5, r6, #24
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	d501      	bpl.n	80074de <_printf_i+0x1ce>
 80074da:	6019      	str	r1, [r3, #0]
 80074dc:	e002      	b.n	80074e4 <_printf_i+0x1d4>
 80074de:	0670      	lsls	r0, r6, #25
 80074e0:	d5fb      	bpl.n	80074da <_printf_i+0x1ca>
 80074e2:	8019      	strh	r1, [r3, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	4615      	mov	r5, r2
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	e7ba      	b.n	8007462 <_printf_i+0x152>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	2100      	movs	r1, #0
 80074f0:	1d1a      	adds	r2, r3, #4
 80074f2:	602a      	str	r2, [r5, #0]
 80074f4:	681d      	ldr	r5, [r3, #0]
 80074f6:	6862      	ldr	r2, [r4, #4]
 80074f8:	4628      	mov	r0, r5
 80074fa:	f002 faef 	bl	8009adc <memchr>
 80074fe:	b108      	cbz	r0, 8007504 <_printf_i+0x1f4>
 8007500:	1b40      	subs	r0, r0, r5
 8007502:	6060      	str	r0, [r4, #4]
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	2300      	movs	r3, #0
 800750a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750e:	e7a8      	b.n	8007462 <_printf_i+0x152>
 8007510:	462a      	mov	r2, r5
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	6923      	ldr	r3, [r4, #16]
 8007518:	47d0      	blx	sl
 800751a:	3001      	adds	r0, #1
 800751c:	d0ab      	beq.n	8007476 <_printf_i+0x166>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	079b      	lsls	r3, r3, #30
 8007522:	d413      	bmi.n	800754c <_printf_i+0x23c>
 8007524:	68e0      	ldr	r0, [r4, #12]
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	4298      	cmp	r0, r3
 800752a:	bfb8      	it	lt
 800752c:	4618      	movlt	r0, r3
 800752e:	e7a4      	b.n	800747a <_printf_i+0x16a>
 8007530:	2301      	movs	r3, #1
 8007532:	4632      	mov	r2, r6
 8007534:	4649      	mov	r1, r9
 8007536:	4640      	mov	r0, r8
 8007538:	47d0      	blx	sl
 800753a:	3001      	adds	r0, #1
 800753c:	d09b      	beq.n	8007476 <_printf_i+0x166>
 800753e:	3501      	adds	r5, #1
 8007540:	68e3      	ldr	r3, [r4, #12]
 8007542:	9903      	ldr	r1, [sp, #12]
 8007544:	1a5b      	subs	r3, r3, r1
 8007546:	42ab      	cmp	r3, r5
 8007548:	dcf2      	bgt.n	8007530 <_printf_i+0x220>
 800754a:	e7eb      	b.n	8007524 <_printf_i+0x214>
 800754c:	2500      	movs	r5, #0
 800754e:	f104 0619 	add.w	r6, r4, #25
 8007552:	e7f5      	b.n	8007540 <_printf_i+0x230>
 8007554:	0800b952 	.word	0x0800b952
 8007558:	0800b963 	.word	0x0800b963

0800755c <_scanf_float>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	b087      	sub	sp, #28
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	688b      	ldr	r3, [r1, #8]
 8007566:	4617      	mov	r7, r2
 8007568:	1e5a      	subs	r2, r3, #1
 800756a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800756e:	bf85      	ittet	hi
 8007570:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007574:	195b      	addhi	r3, r3, r5
 8007576:	2300      	movls	r3, #0
 8007578:	9302      	strhi	r3, [sp, #8]
 800757a:	bf88      	it	hi
 800757c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007580:	468b      	mov	fp, r1
 8007582:	f04f 0500 	mov.w	r5, #0
 8007586:	bf8c      	ite	hi
 8007588:	608b      	strhi	r3, [r1, #8]
 800758a:	9302      	strls	r3, [sp, #8]
 800758c:	680b      	ldr	r3, [r1, #0]
 800758e:	4680      	mov	r8, r0
 8007590:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007594:	f84b 3b1c 	str.w	r3, [fp], #28
 8007598:	460c      	mov	r4, r1
 800759a:	465e      	mov	r6, fp
 800759c:	46aa      	mov	sl, r5
 800759e:	46a9      	mov	r9, r5
 80075a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075a4:	9501      	str	r5, [sp, #4]
 80075a6:	68a2      	ldr	r2, [r4, #8]
 80075a8:	b152      	cbz	r2, 80075c0 <_scanf_float+0x64>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b4e      	cmp	r3, #78	; 0x4e
 80075b0:	d864      	bhi.n	800767c <_scanf_float+0x120>
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d83c      	bhi.n	8007630 <_scanf_float+0xd4>
 80075b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075ba:	b2c8      	uxtb	r0, r1
 80075bc:	280e      	cmp	r0, #14
 80075be:	d93a      	bls.n	8007636 <_scanf_float+0xda>
 80075c0:	f1b9 0f00 	cmp.w	r9, #0
 80075c4:	d003      	beq.n	80075ce <_scanf_float+0x72>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d2:	f1ba 0f01 	cmp.w	sl, #1
 80075d6:	f200 8113 	bhi.w	8007800 <_scanf_float+0x2a4>
 80075da:	455e      	cmp	r6, fp
 80075dc:	f200 8105 	bhi.w	80077ea <_scanf_float+0x28e>
 80075e0:	2501      	movs	r5, #1
 80075e2:	4628      	mov	r0, r5
 80075e4:	b007      	add	sp, #28
 80075e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80075ee:	2a0d      	cmp	r2, #13
 80075f0:	d8e6      	bhi.n	80075c0 <_scanf_float+0x64>
 80075f2:	a101      	add	r1, pc, #4	; (adr r1, 80075f8 <_scanf_float+0x9c>)
 80075f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075f8:	08007737 	.word	0x08007737
 80075fc:	080075c1 	.word	0x080075c1
 8007600:	080075c1 	.word	0x080075c1
 8007604:	080075c1 	.word	0x080075c1
 8007608:	08007797 	.word	0x08007797
 800760c:	0800776f 	.word	0x0800776f
 8007610:	080075c1 	.word	0x080075c1
 8007614:	080075c1 	.word	0x080075c1
 8007618:	08007745 	.word	0x08007745
 800761c:	080075c1 	.word	0x080075c1
 8007620:	080075c1 	.word	0x080075c1
 8007624:	080075c1 	.word	0x080075c1
 8007628:	080075c1 	.word	0x080075c1
 800762c:	080076fd 	.word	0x080076fd
 8007630:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007634:	e7db      	b.n	80075ee <_scanf_float+0x92>
 8007636:	290e      	cmp	r1, #14
 8007638:	d8c2      	bhi.n	80075c0 <_scanf_float+0x64>
 800763a:	a001      	add	r0, pc, #4	; (adr r0, 8007640 <_scanf_float+0xe4>)
 800763c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007640:	080076ef 	.word	0x080076ef
 8007644:	080075c1 	.word	0x080075c1
 8007648:	080076ef 	.word	0x080076ef
 800764c:	08007783 	.word	0x08007783
 8007650:	080075c1 	.word	0x080075c1
 8007654:	0800769d 	.word	0x0800769d
 8007658:	080076d9 	.word	0x080076d9
 800765c:	080076d9 	.word	0x080076d9
 8007660:	080076d9 	.word	0x080076d9
 8007664:	080076d9 	.word	0x080076d9
 8007668:	080076d9 	.word	0x080076d9
 800766c:	080076d9 	.word	0x080076d9
 8007670:	080076d9 	.word	0x080076d9
 8007674:	080076d9 	.word	0x080076d9
 8007678:	080076d9 	.word	0x080076d9
 800767c:	2b6e      	cmp	r3, #110	; 0x6e
 800767e:	d809      	bhi.n	8007694 <_scanf_float+0x138>
 8007680:	2b60      	cmp	r3, #96	; 0x60
 8007682:	d8b2      	bhi.n	80075ea <_scanf_float+0x8e>
 8007684:	2b54      	cmp	r3, #84	; 0x54
 8007686:	d077      	beq.n	8007778 <_scanf_float+0x21c>
 8007688:	2b59      	cmp	r3, #89	; 0x59
 800768a:	d199      	bne.n	80075c0 <_scanf_float+0x64>
 800768c:	2d07      	cmp	r5, #7
 800768e:	d197      	bne.n	80075c0 <_scanf_float+0x64>
 8007690:	2508      	movs	r5, #8
 8007692:	e029      	b.n	80076e8 <_scanf_float+0x18c>
 8007694:	2b74      	cmp	r3, #116	; 0x74
 8007696:	d06f      	beq.n	8007778 <_scanf_float+0x21c>
 8007698:	2b79      	cmp	r3, #121	; 0x79
 800769a:	e7f6      	b.n	800768a <_scanf_float+0x12e>
 800769c:	6821      	ldr	r1, [r4, #0]
 800769e:	05c8      	lsls	r0, r1, #23
 80076a0:	d51a      	bpl.n	80076d8 <_scanf_float+0x17c>
 80076a2:	9b02      	ldr	r3, [sp, #8]
 80076a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076a8:	6021      	str	r1, [r4, #0]
 80076aa:	f109 0901 	add.w	r9, r9, #1
 80076ae:	b11b      	cbz	r3, 80076b8 <_scanf_float+0x15c>
 80076b0:	3b01      	subs	r3, #1
 80076b2:	3201      	adds	r2, #1
 80076b4:	9302      	str	r3, [sp, #8]
 80076b6:	60a2      	str	r2, [r4, #8]
 80076b8:	68a3      	ldr	r3, [r4, #8]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	60a3      	str	r3, [r4, #8]
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	3301      	adds	r3, #1
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	f340 8084 	ble.w	80077d8 <_scanf_float+0x27c>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	603b      	str	r3, [r7, #0]
 80076d6:	e766      	b.n	80075a6 <_scanf_float+0x4a>
 80076d8:	eb1a 0f05 	cmn.w	sl, r5
 80076dc:	f47f af70 	bne.w	80075c0 <_scanf_float+0x64>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80076e6:	6022      	str	r2, [r4, #0]
 80076e8:	f806 3b01 	strb.w	r3, [r6], #1
 80076ec:	e7e4      	b.n	80076b8 <_scanf_float+0x15c>
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	0610      	lsls	r0, r2, #24
 80076f2:	f57f af65 	bpl.w	80075c0 <_scanf_float+0x64>
 80076f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076fa:	e7f4      	b.n	80076e6 <_scanf_float+0x18a>
 80076fc:	f1ba 0f00 	cmp.w	sl, #0
 8007700:	d10e      	bne.n	8007720 <_scanf_float+0x1c4>
 8007702:	f1b9 0f00 	cmp.w	r9, #0
 8007706:	d10e      	bne.n	8007726 <_scanf_float+0x1ca>
 8007708:	6822      	ldr	r2, [r4, #0]
 800770a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800770e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007712:	d108      	bne.n	8007726 <_scanf_float+0x1ca>
 8007714:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007718:	f04f 0a01 	mov.w	sl, #1
 800771c:	6022      	str	r2, [r4, #0]
 800771e:	e7e3      	b.n	80076e8 <_scanf_float+0x18c>
 8007720:	f1ba 0f02 	cmp.w	sl, #2
 8007724:	d055      	beq.n	80077d2 <_scanf_float+0x276>
 8007726:	2d01      	cmp	r5, #1
 8007728:	d002      	beq.n	8007730 <_scanf_float+0x1d4>
 800772a:	2d04      	cmp	r5, #4
 800772c:	f47f af48 	bne.w	80075c0 <_scanf_float+0x64>
 8007730:	3501      	adds	r5, #1
 8007732:	b2ed      	uxtb	r5, r5
 8007734:	e7d8      	b.n	80076e8 <_scanf_float+0x18c>
 8007736:	f1ba 0f01 	cmp.w	sl, #1
 800773a:	f47f af41 	bne.w	80075c0 <_scanf_float+0x64>
 800773e:	f04f 0a02 	mov.w	sl, #2
 8007742:	e7d1      	b.n	80076e8 <_scanf_float+0x18c>
 8007744:	b97d      	cbnz	r5, 8007766 <_scanf_float+0x20a>
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	f47f af3c 	bne.w	80075c6 <_scanf_float+0x6a>
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007754:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007758:	f47f af39 	bne.w	80075ce <_scanf_float+0x72>
 800775c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007760:	2501      	movs	r5, #1
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	e7c0      	b.n	80076e8 <_scanf_float+0x18c>
 8007766:	2d03      	cmp	r5, #3
 8007768:	d0e2      	beq.n	8007730 <_scanf_float+0x1d4>
 800776a:	2d05      	cmp	r5, #5
 800776c:	e7de      	b.n	800772c <_scanf_float+0x1d0>
 800776e:	2d02      	cmp	r5, #2
 8007770:	f47f af26 	bne.w	80075c0 <_scanf_float+0x64>
 8007774:	2503      	movs	r5, #3
 8007776:	e7b7      	b.n	80076e8 <_scanf_float+0x18c>
 8007778:	2d06      	cmp	r5, #6
 800777a:	f47f af21 	bne.w	80075c0 <_scanf_float+0x64>
 800777e:	2507      	movs	r5, #7
 8007780:	e7b2      	b.n	80076e8 <_scanf_float+0x18c>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	0591      	lsls	r1, r2, #22
 8007786:	f57f af1b 	bpl.w	80075c0 <_scanf_float+0x64>
 800778a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800778e:	6022      	str	r2, [r4, #0]
 8007790:	f8cd 9004 	str.w	r9, [sp, #4]
 8007794:	e7a8      	b.n	80076e8 <_scanf_float+0x18c>
 8007796:	6822      	ldr	r2, [r4, #0]
 8007798:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800779c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077a0:	d006      	beq.n	80077b0 <_scanf_float+0x254>
 80077a2:	0550      	lsls	r0, r2, #21
 80077a4:	f57f af0c 	bpl.w	80075c0 <_scanf_float+0x64>
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	f43f af0f 	beq.w	80075ce <_scanf_float+0x72>
 80077b0:	0591      	lsls	r1, r2, #22
 80077b2:	bf58      	it	pl
 80077b4:	9901      	ldrpl	r1, [sp, #4]
 80077b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077ba:	bf58      	it	pl
 80077bc:	eba9 0101 	subpl.w	r1, r9, r1
 80077c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80077c4:	f04f 0900 	mov.w	r9, #0
 80077c8:	bf58      	it	pl
 80077ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077ce:	6022      	str	r2, [r4, #0]
 80077d0:	e78a      	b.n	80076e8 <_scanf_float+0x18c>
 80077d2:	f04f 0a03 	mov.w	sl, #3
 80077d6:	e787      	b.n	80076e8 <_scanf_float+0x18c>
 80077d8:	4639      	mov	r1, r7
 80077da:	4640      	mov	r0, r8
 80077dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077e0:	4798      	blx	r3
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f43f aedf 	beq.w	80075a6 <_scanf_float+0x4a>
 80077e8:	e6ea      	b.n	80075c0 <_scanf_float+0x64>
 80077ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ee:	463a      	mov	r2, r7
 80077f0:	4640      	mov	r0, r8
 80077f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077f6:	4798      	blx	r3
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	6123      	str	r3, [r4, #16]
 80077fe:	e6ec      	b.n	80075da <_scanf_float+0x7e>
 8007800:	1e6b      	subs	r3, r5, #1
 8007802:	2b06      	cmp	r3, #6
 8007804:	d825      	bhi.n	8007852 <_scanf_float+0x2f6>
 8007806:	2d02      	cmp	r5, #2
 8007808:	d836      	bhi.n	8007878 <_scanf_float+0x31c>
 800780a:	455e      	cmp	r6, fp
 800780c:	f67f aee8 	bls.w	80075e0 <_scanf_float+0x84>
 8007810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007814:	463a      	mov	r2, r7
 8007816:	4640      	mov	r0, r8
 8007818:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800781c:	4798      	blx	r3
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	3b01      	subs	r3, #1
 8007822:	6123      	str	r3, [r4, #16]
 8007824:	e7f1      	b.n	800780a <_scanf_float+0x2ae>
 8007826:	9802      	ldr	r0, [sp, #8]
 8007828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800782c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007830:	463a      	mov	r2, r7
 8007832:	9002      	str	r0, [sp, #8]
 8007834:	4640      	mov	r0, r8
 8007836:	4798      	blx	r3
 8007838:	6923      	ldr	r3, [r4, #16]
 800783a:	3b01      	subs	r3, #1
 800783c:	6123      	str	r3, [r4, #16]
 800783e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007842:	fa5f fa8a 	uxtb.w	sl, sl
 8007846:	f1ba 0f02 	cmp.w	sl, #2
 800784a:	d1ec      	bne.n	8007826 <_scanf_float+0x2ca>
 800784c:	3d03      	subs	r5, #3
 800784e:	b2ed      	uxtb	r5, r5
 8007850:	1b76      	subs	r6, r6, r5
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	05da      	lsls	r2, r3, #23
 8007856:	d52f      	bpl.n	80078b8 <_scanf_float+0x35c>
 8007858:	055b      	lsls	r3, r3, #21
 800785a:	d510      	bpl.n	800787e <_scanf_float+0x322>
 800785c:	455e      	cmp	r6, fp
 800785e:	f67f aebf 	bls.w	80075e0 <_scanf_float+0x84>
 8007862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007866:	463a      	mov	r2, r7
 8007868:	4640      	mov	r0, r8
 800786a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800786e:	4798      	blx	r3
 8007870:	6923      	ldr	r3, [r4, #16]
 8007872:	3b01      	subs	r3, #1
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	e7f1      	b.n	800785c <_scanf_float+0x300>
 8007878:	46aa      	mov	sl, r5
 800787a:	9602      	str	r6, [sp, #8]
 800787c:	e7df      	b.n	800783e <_scanf_float+0x2e2>
 800787e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	2965      	cmp	r1, #101	; 0x65
 8007886:	f103 33ff 	add.w	r3, r3, #4294967295
 800788a:	f106 35ff 	add.w	r5, r6, #4294967295
 800788e:	6123      	str	r3, [r4, #16]
 8007890:	d00c      	beq.n	80078ac <_scanf_float+0x350>
 8007892:	2945      	cmp	r1, #69	; 0x45
 8007894:	d00a      	beq.n	80078ac <_scanf_float+0x350>
 8007896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800789a:	463a      	mov	r2, r7
 800789c:	4640      	mov	r0, r8
 800789e:	4798      	blx	r3
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	1eb5      	subs	r5, r6, #2
 80078aa:	6123      	str	r3, [r4, #16]
 80078ac:	463a      	mov	r2, r7
 80078ae:	4640      	mov	r0, r8
 80078b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b4:	4798      	blx	r3
 80078b6:	462e      	mov	r6, r5
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	f015 0510 	ands.w	r5, r5, #16
 80078be:	d155      	bne.n	800796c <_scanf_float+0x410>
 80078c0:	7035      	strb	r5, [r6, #0]
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d11b      	bne.n	8007906 <_scanf_float+0x3aa>
 80078ce:	9b01      	ldr	r3, [sp, #4]
 80078d0:	454b      	cmp	r3, r9
 80078d2:	eba3 0209 	sub.w	r2, r3, r9
 80078d6:	d123      	bne.n	8007920 <_scanf_float+0x3c4>
 80078d8:	2200      	movs	r2, #0
 80078da:	4659      	mov	r1, fp
 80078dc:	4640      	mov	r0, r8
 80078de:	f000 fe7b 	bl	80085d8 <_strtod_r>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	f012 0f02 	tst.w	r2, #2
 80078ea:	4606      	mov	r6, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	d021      	beq.n	8007936 <_scanf_float+0x3da>
 80078f2:	1d1a      	adds	r2, r3, #4
 80078f4:	9903      	ldr	r1, [sp, #12]
 80078f6:	600a      	str	r2, [r1, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	e9c3 6700 	strd	r6, r7, [r3]
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60e3      	str	r3, [r4, #12]
 8007904:	e66d      	b.n	80075e2 <_scanf_float+0x86>
 8007906:	9b04      	ldr	r3, [sp, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0e5      	beq.n	80078d8 <_scanf_float+0x37c>
 800790c:	9905      	ldr	r1, [sp, #20]
 800790e:	230a      	movs	r3, #10
 8007910:	462a      	mov	r2, r5
 8007912:	4640      	mov	r0, r8
 8007914:	3101      	adds	r1, #1
 8007916:	f000 fee1 	bl	80086dc <_strtol_r>
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	9e05      	ldr	r6, [sp, #20]
 800791e:	1ac2      	subs	r2, r0, r3
 8007920:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007924:	429e      	cmp	r6, r3
 8007926:	bf28      	it	cs
 8007928:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800792c:	4630      	mov	r0, r6
 800792e:	4910      	ldr	r1, [pc, #64]	; (8007970 <_scanf_float+0x414>)
 8007930:	f000 f826 	bl	8007980 <siprintf>
 8007934:	e7d0      	b.n	80078d8 <_scanf_float+0x37c>
 8007936:	f012 0f04 	tst.w	r2, #4
 800793a:	f103 0204 	add.w	r2, r3, #4
 800793e:	d1d9      	bne.n	80078f4 <_scanf_float+0x398>
 8007940:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007944:	f8cc 2000 	str.w	r2, [ip]
 8007948:	f8d3 8000 	ldr.w	r8, [r3]
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	f7f9 f85c 	bl	8000a0c <__aeabi_dcmpun>
 8007954:	b128      	cbz	r0, 8007962 <_scanf_float+0x406>
 8007956:	4807      	ldr	r0, [pc, #28]	; (8007974 <_scanf_float+0x418>)
 8007958:	f000 f80e 	bl	8007978 <nanf>
 800795c:	f8c8 0000 	str.w	r0, [r8]
 8007960:	e7cd      	b.n	80078fe <_scanf_float+0x3a2>
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7f9 f8af 	bl	8000ac8 <__aeabi_d2f>
 800796a:	e7f7      	b.n	800795c <_scanf_float+0x400>
 800796c:	2500      	movs	r5, #0
 800796e:	e638      	b.n	80075e2 <_scanf_float+0x86>
 8007970:	0800b974 	.word	0x0800b974
 8007974:	0800bd80 	.word	0x0800bd80

08007978 <nanf>:
 8007978:	4800      	ldr	r0, [pc, #0]	; (800797c <nanf+0x4>)
 800797a:	4770      	bx	lr
 800797c:	7fc00000 	.word	0x7fc00000

08007980 <siprintf>:
 8007980:	b40e      	push	{r1, r2, r3}
 8007982:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007986:	b500      	push	{lr}
 8007988:	b09c      	sub	sp, #112	; 0x70
 800798a:	ab1d      	add	r3, sp, #116	; 0x74
 800798c:	9002      	str	r0, [sp, #8]
 800798e:	9006      	str	r0, [sp, #24]
 8007990:	9107      	str	r1, [sp, #28]
 8007992:	9104      	str	r1, [sp, #16]
 8007994:	4808      	ldr	r0, [pc, #32]	; (80079b8 <siprintf+0x38>)
 8007996:	4909      	ldr	r1, [pc, #36]	; (80079bc <siprintf+0x3c>)
 8007998:	f853 2b04 	ldr.w	r2, [r3], #4
 800799c:	9105      	str	r1, [sp, #20]
 800799e:	6800      	ldr	r0, [r0, #0]
 80079a0:	a902      	add	r1, sp, #8
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	f002 feac 	bl	800a700 <_svfiprintf_r>
 80079a8:	2200      	movs	r2, #0
 80079aa:	9b02      	ldr	r3, [sp, #8]
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	b01c      	add	sp, #112	; 0x70
 80079b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b4:	b003      	add	sp, #12
 80079b6:	4770      	bx	lr
 80079b8:	20000088 	.word	0x20000088
 80079bc:	ffff0208 	.word	0xffff0208

080079c0 <sulp>:
 80079c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	460f      	mov	r7, r1
 80079c6:	4690      	mov	r8, r2
 80079c8:	f002 fc06 	bl	800a1d8 <__ulp>
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	f1b8 0f00 	cmp.w	r8, #0
 80079d4:	d011      	beq.n	80079fa <sulp+0x3a>
 80079d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80079da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd0b      	ble.n	80079fa <sulp+0x3a>
 80079e2:	2400      	movs	r4, #0
 80079e4:	051b      	lsls	r3, r3, #20
 80079e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079ee:	4622      	mov	r2, r4
 80079f0:	462b      	mov	r3, r5
 80079f2:	f7f8 fd71 	bl	80004d8 <__aeabi_dmul>
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a02:	0000      	movs	r0, r0
 8007a04:	0000      	movs	r0, r0
	...

08007a08 <_strtod_l>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	469b      	mov	fp, r3
 8007a0e:	2300      	movs	r3, #0
 8007a10:	b09f      	sub	sp, #124	; 0x7c
 8007a12:	931a      	str	r3, [sp, #104]	; 0x68
 8007a14:	4b9e      	ldr	r3, [pc, #632]	; (8007c90 <_strtod_l+0x288>)
 8007a16:	4682      	mov	sl, r0
 8007a18:	681f      	ldr	r7, [r3, #0]
 8007a1a:	460e      	mov	r6, r1
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	9215      	str	r2, [sp, #84]	; 0x54
 8007a20:	f7f8 fb96 	bl	8000150 <strlen>
 8007a24:	f04f 0800 	mov.w	r8, #0
 8007a28:	4604      	mov	r4, r0
 8007a2a:	f04f 0900 	mov.w	r9, #0
 8007a2e:	9619      	str	r6, [sp, #100]	; 0x64
 8007a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	2a2b      	cmp	r2, #43	; 0x2b
 8007a36:	d04c      	beq.n	8007ad2 <_strtod_l+0xca>
 8007a38:	d83a      	bhi.n	8007ab0 <_strtod_l+0xa8>
 8007a3a:	2a0d      	cmp	r2, #13
 8007a3c:	d833      	bhi.n	8007aa6 <_strtod_l+0x9e>
 8007a3e:	2a08      	cmp	r2, #8
 8007a40:	d833      	bhi.n	8007aaa <_strtod_l+0xa2>
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d03d      	beq.n	8007ac2 <_strtod_l+0xba>
 8007a46:	2300      	movs	r3, #0
 8007a48:	930a      	str	r3, [sp, #40]	; 0x28
 8007a4a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a4c:	782b      	ldrb	r3, [r5, #0]
 8007a4e:	2b30      	cmp	r3, #48	; 0x30
 8007a50:	f040 80aa 	bne.w	8007ba8 <_strtod_l+0x1a0>
 8007a54:	786b      	ldrb	r3, [r5, #1]
 8007a56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a5a:	2b58      	cmp	r3, #88	; 0x58
 8007a5c:	d166      	bne.n	8007b2c <_strtod_l+0x124>
 8007a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a60:	4650      	mov	r0, sl
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	ab1a      	add	r3, sp, #104	; 0x68
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4a8a      	ldr	r2, [pc, #552]	; (8007c94 <_strtod_l+0x28c>)
 8007a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a70:	a919      	add	r1, sp, #100	; 0x64
 8007a72:	f001 fd17 	bl	80094a4 <__gethex>
 8007a76:	f010 0607 	ands.w	r6, r0, #7
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	d005      	beq.n	8007a8a <_strtod_l+0x82>
 8007a7e:	2e06      	cmp	r6, #6
 8007a80:	d129      	bne.n	8007ad6 <_strtod_l+0xce>
 8007a82:	2300      	movs	r3, #0
 8007a84:	3501      	adds	r5, #1
 8007a86:	9519      	str	r5, [sp, #100]	; 0x64
 8007a88:	930a      	str	r3, [sp, #40]	; 0x28
 8007a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 858a 	bne.w	80085a6 <_strtod_l+0xb9e>
 8007a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a94:	b1d3      	cbz	r3, 8007acc <_strtod_l+0xc4>
 8007a96:	4642      	mov	r2, r8
 8007a98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	b01f      	add	sp, #124	; 0x7c
 8007aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa6:	2a20      	cmp	r2, #32
 8007aa8:	d1cd      	bne.n	8007a46 <_strtod_l+0x3e>
 8007aaa:	3301      	adds	r3, #1
 8007aac:	9319      	str	r3, [sp, #100]	; 0x64
 8007aae:	e7bf      	b.n	8007a30 <_strtod_l+0x28>
 8007ab0:	2a2d      	cmp	r2, #45	; 0x2d
 8007ab2:	d1c8      	bne.n	8007a46 <_strtod_l+0x3e>
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	920a      	str	r2, [sp, #40]	; 0x28
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	9219      	str	r2, [sp, #100]	; 0x64
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1c3      	bne.n	8007a4a <_strtod_l+0x42>
 8007ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ac4:	9619      	str	r6, [sp, #100]	; 0x64
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 856b 	bne.w	80085a2 <_strtod_l+0xb9a>
 8007acc:	4642      	mov	r2, r8
 8007ace:	464b      	mov	r3, r9
 8007ad0:	e7e4      	b.n	8007a9c <_strtod_l+0x94>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	e7ef      	b.n	8007ab6 <_strtod_l+0xae>
 8007ad6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ad8:	b13a      	cbz	r2, 8007aea <_strtod_l+0xe2>
 8007ada:	2135      	movs	r1, #53	; 0x35
 8007adc:	a81c      	add	r0, sp, #112	; 0x70
 8007ade:	f002 fc7f 	bl	800a3e0 <__copybits>
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ae6:	f002 f847 	bl	8009b78 <_Bfree>
 8007aea:	3e01      	subs	r6, #1
 8007aec:	2e04      	cmp	r6, #4
 8007aee:	d806      	bhi.n	8007afe <_strtod_l+0xf6>
 8007af0:	e8df f006 	tbb	[pc, r6]
 8007af4:	1714030a 	.word	0x1714030a
 8007af8:	0a          	.byte	0x0a
 8007af9:	00          	.byte	0x00
 8007afa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007afe:	0721      	lsls	r1, r4, #28
 8007b00:	d5c3      	bpl.n	8007a8a <_strtod_l+0x82>
 8007b02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007b06:	e7c0      	b.n	8007a8a <_strtod_l+0x82>
 8007b08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b0a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007b0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b16:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b1a:	e7f0      	b.n	8007afe <_strtod_l+0xf6>
 8007b1c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007c98 <_strtod_l+0x290>
 8007b20:	e7ed      	b.n	8007afe <_strtod_l+0xf6>
 8007b22:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b26:	f04f 38ff 	mov.w	r8, #4294967295
 8007b2a:	e7e8      	b.n	8007afe <_strtod_l+0xf6>
 8007b2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	9219      	str	r2, [sp, #100]	; 0x64
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	2b30      	cmp	r3, #48	; 0x30
 8007b36:	d0f9      	beq.n	8007b2c <_strtod_l+0x124>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0a6      	beq.n	8007a8a <_strtod_l+0x82>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b42:	220a      	movs	r2, #10
 8007b44:	9308      	str	r3, [sp, #32]
 8007b46:	2300      	movs	r3, #0
 8007b48:	469b      	mov	fp, r3
 8007b4a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007b4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b50:	7805      	ldrb	r5, [r0, #0]
 8007b52:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007b56:	b2d9      	uxtb	r1, r3
 8007b58:	2909      	cmp	r1, #9
 8007b5a:	d927      	bls.n	8007bac <_strtod_l+0x1a4>
 8007b5c:	4622      	mov	r2, r4
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f002 fee4 	bl	800a92c <strncmp>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d033      	beq.n	8007bd0 <_strtod_l+0x1c8>
 8007b68:	2000      	movs	r0, #0
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	465c      	mov	r4, fp
 8007b6e:	4603      	mov	r3, r0
 8007b70:	9004      	str	r0, [sp, #16]
 8007b72:	2a65      	cmp	r2, #101	; 0x65
 8007b74:	d001      	beq.n	8007b7a <_strtod_l+0x172>
 8007b76:	2a45      	cmp	r2, #69	; 0x45
 8007b78:	d114      	bne.n	8007ba4 <_strtod_l+0x19c>
 8007b7a:	b91c      	cbnz	r4, 8007b84 <_strtod_l+0x17c>
 8007b7c:	9a07      	ldr	r2, [sp, #28]
 8007b7e:	4302      	orrs	r2, r0
 8007b80:	d09f      	beq.n	8007ac2 <_strtod_l+0xba>
 8007b82:	2400      	movs	r4, #0
 8007b84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007b86:	1c72      	adds	r2, r6, #1
 8007b88:	9219      	str	r2, [sp, #100]	; 0x64
 8007b8a:	7872      	ldrb	r2, [r6, #1]
 8007b8c:	2a2b      	cmp	r2, #43	; 0x2b
 8007b8e:	d079      	beq.n	8007c84 <_strtod_l+0x27c>
 8007b90:	2a2d      	cmp	r2, #45	; 0x2d
 8007b92:	f000 8083 	beq.w	8007c9c <_strtod_l+0x294>
 8007b96:	2700      	movs	r7, #0
 8007b98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b9c:	2909      	cmp	r1, #9
 8007b9e:	f240 8083 	bls.w	8007ca8 <_strtod_l+0x2a0>
 8007ba2:	9619      	str	r6, [sp, #100]	; 0x64
 8007ba4:	2500      	movs	r5, #0
 8007ba6:	e09f      	b.n	8007ce8 <_strtod_l+0x2e0>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	e7c8      	b.n	8007b3e <_strtod_l+0x136>
 8007bac:	f1bb 0f08 	cmp.w	fp, #8
 8007bb0:	bfd5      	itete	le
 8007bb2:	9906      	ldrle	r1, [sp, #24]
 8007bb4:	9905      	ldrgt	r1, [sp, #20]
 8007bb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bba:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007bbe:	f100 0001 	add.w	r0, r0, #1
 8007bc2:	bfd4      	ite	le
 8007bc4:	9306      	strle	r3, [sp, #24]
 8007bc6:	9305      	strgt	r3, [sp, #20]
 8007bc8:	f10b 0b01 	add.w	fp, fp, #1
 8007bcc:	9019      	str	r0, [sp, #100]	; 0x64
 8007bce:	e7be      	b.n	8007b4e <_strtod_l+0x146>
 8007bd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bd2:	191a      	adds	r2, r3, r4
 8007bd4:	9219      	str	r2, [sp, #100]	; 0x64
 8007bd6:	5d1a      	ldrb	r2, [r3, r4]
 8007bd8:	f1bb 0f00 	cmp.w	fp, #0
 8007bdc:	d036      	beq.n	8007c4c <_strtod_l+0x244>
 8007bde:	465c      	mov	r4, fp
 8007be0:	9004      	str	r0, [sp, #16]
 8007be2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007be6:	2b09      	cmp	r3, #9
 8007be8:	d912      	bls.n	8007c10 <_strtod_l+0x208>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7c1      	b.n	8007b72 <_strtod_l+0x16a>
 8007bee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	9219      	str	r2, [sp, #100]	; 0x64
 8007bf6:	785a      	ldrb	r2, [r3, #1]
 8007bf8:	2a30      	cmp	r2, #48	; 0x30
 8007bfa:	d0f8      	beq.n	8007bee <_strtod_l+0x1e6>
 8007bfc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	f200 84d5 	bhi.w	80085b0 <_strtod_l+0xba8>
 8007c06:	9004      	str	r0, [sp, #16]
 8007c08:	2000      	movs	r0, #0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c0e:	9308      	str	r3, [sp, #32]
 8007c10:	3a30      	subs	r2, #48	; 0x30
 8007c12:	f100 0301 	add.w	r3, r0, #1
 8007c16:	d013      	beq.n	8007c40 <_strtod_l+0x238>
 8007c18:	9904      	ldr	r1, [sp, #16]
 8007c1a:	1905      	adds	r5, r0, r4
 8007c1c:	4419      	add	r1, r3
 8007c1e:	9104      	str	r1, [sp, #16]
 8007c20:	4623      	mov	r3, r4
 8007c22:	210a      	movs	r1, #10
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	d113      	bne.n	8007c50 <_strtod_l+0x248>
 8007c28:	1823      	adds	r3, r4, r0
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	f104 0401 	add.w	r4, r4, #1
 8007c30:	4404      	add	r4, r0
 8007c32:	dc1b      	bgt.n	8007c6c <_strtod_l+0x264>
 8007c34:	230a      	movs	r3, #10
 8007c36:	9906      	ldr	r1, [sp, #24]
 8007c38:	fb03 2301 	mla	r3, r3, r1, r2
 8007c3c:	9306      	str	r3, [sp, #24]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c42:	4618      	mov	r0, r3
 8007c44:	1c51      	adds	r1, r2, #1
 8007c46:	9119      	str	r1, [sp, #100]	; 0x64
 8007c48:	7852      	ldrb	r2, [r2, #1]
 8007c4a:	e7ca      	b.n	8007be2 <_strtod_l+0x1da>
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	e7d3      	b.n	8007bf8 <_strtod_l+0x1f0>
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	dc04      	bgt.n	8007c5e <_strtod_l+0x256>
 8007c54:	9f06      	ldr	r7, [sp, #24]
 8007c56:	434f      	muls	r7, r1
 8007c58:	9706      	str	r7, [sp, #24]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	e7e2      	b.n	8007c24 <_strtod_l+0x21c>
 8007c5e:	1c5f      	adds	r7, r3, #1
 8007c60:	2f10      	cmp	r7, #16
 8007c62:	bfde      	ittt	le
 8007c64:	9f05      	ldrle	r7, [sp, #20]
 8007c66:	434f      	mulle	r7, r1
 8007c68:	9705      	strle	r7, [sp, #20]
 8007c6a:	e7f6      	b.n	8007c5a <_strtod_l+0x252>
 8007c6c:	2c10      	cmp	r4, #16
 8007c6e:	bfdf      	itttt	le
 8007c70:	230a      	movle	r3, #10
 8007c72:	9905      	ldrle	r1, [sp, #20]
 8007c74:	fb03 2301 	mlale	r3, r3, r1, r2
 8007c78:	9305      	strle	r3, [sp, #20]
 8007c7a:	e7e0      	b.n	8007c3e <_strtod_l+0x236>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	2301      	movs	r3, #1
 8007c82:	e77b      	b.n	8007b7c <_strtod_l+0x174>
 8007c84:	2700      	movs	r7, #0
 8007c86:	1cb2      	adds	r2, r6, #2
 8007c88:	9219      	str	r2, [sp, #100]	; 0x64
 8007c8a:	78b2      	ldrb	r2, [r6, #2]
 8007c8c:	e784      	b.n	8007b98 <_strtod_l+0x190>
 8007c8e:	bf00      	nop
 8007c90:	0800bbc8 	.word	0x0800bbc8
 8007c94:	0800b97c 	.word	0x0800b97c
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	2701      	movs	r7, #1
 8007c9e:	e7f2      	b.n	8007c86 <_strtod_l+0x27e>
 8007ca0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ca2:	1c51      	adds	r1, r2, #1
 8007ca4:	9119      	str	r1, [sp, #100]	; 0x64
 8007ca6:	7852      	ldrb	r2, [r2, #1]
 8007ca8:	2a30      	cmp	r2, #48	; 0x30
 8007caa:	d0f9      	beq.n	8007ca0 <_strtod_l+0x298>
 8007cac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cb0:	2908      	cmp	r1, #8
 8007cb2:	f63f af77 	bhi.w	8007ba4 <_strtod_l+0x19c>
 8007cb6:	f04f 0e0a 	mov.w	lr, #10
 8007cba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007cbe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cc4:	1c51      	adds	r1, r2, #1
 8007cc6:	9119      	str	r1, [sp, #100]	; 0x64
 8007cc8:	7852      	ldrb	r2, [r2, #1]
 8007cca:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007cce:	2d09      	cmp	r5, #9
 8007cd0:	d935      	bls.n	8007d3e <_strtod_l+0x336>
 8007cd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cd4:	1b49      	subs	r1, r1, r5
 8007cd6:	2908      	cmp	r1, #8
 8007cd8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007cdc:	dc02      	bgt.n	8007ce4 <_strtod_l+0x2dc>
 8007cde:	4565      	cmp	r5, ip
 8007ce0:	bfa8      	it	ge
 8007ce2:	4665      	movge	r5, ip
 8007ce4:	b107      	cbz	r7, 8007ce8 <_strtod_l+0x2e0>
 8007ce6:	426d      	negs	r5, r5
 8007ce8:	2c00      	cmp	r4, #0
 8007cea:	d14c      	bne.n	8007d86 <_strtod_l+0x37e>
 8007cec:	9907      	ldr	r1, [sp, #28]
 8007cee:	4301      	orrs	r1, r0
 8007cf0:	f47f aecb 	bne.w	8007a8a <_strtod_l+0x82>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f47f aee4 	bne.w	8007ac2 <_strtod_l+0xba>
 8007cfa:	2a69      	cmp	r2, #105	; 0x69
 8007cfc:	d026      	beq.n	8007d4c <_strtod_l+0x344>
 8007cfe:	dc23      	bgt.n	8007d48 <_strtod_l+0x340>
 8007d00:	2a49      	cmp	r2, #73	; 0x49
 8007d02:	d023      	beq.n	8007d4c <_strtod_l+0x344>
 8007d04:	2a4e      	cmp	r2, #78	; 0x4e
 8007d06:	f47f aedc 	bne.w	8007ac2 <_strtod_l+0xba>
 8007d0a:	499d      	ldr	r1, [pc, #628]	; (8007f80 <_strtod_l+0x578>)
 8007d0c:	a819      	add	r0, sp, #100	; 0x64
 8007d0e:	f001 fe17 	bl	8009940 <__match>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f43f aed5 	beq.w	8007ac2 <_strtod_l+0xba>
 8007d18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b28      	cmp	r3, #40	; 0x28
 8007d1e:	d12c      	bne.n	8007d7a <_strtod_l+0x372>
 8007d20:	4998      	ldr	r1, [pc, #608]	; (8007f84 <_strtod_l+0x57c>)
 8007d22:	aa1c      	add	r2, sp, #112	; 0x70
 8007d24:	a819      	add	r0, sp, #100	; 0x64
 8007d26:	f001 fe1f 	bl	8009968 <__hexnan>
 8007d2a:	2805      	cmp	r0, #5
 8007d2c:	d125      	bne.n	8007d7a <_strtod_l+0x372>
 8007d2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d30:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007d34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d3c:	e6a5      	b.n	8007a8a <_strtod_l+0x82>
 8007d3e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007d42:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007d46:	e7bc      	b.n	8007cc2 <_strtod_l+0x2ba>
 8007d48:	2a6e      	cmp	r2, #110	; 0x6e
 8007d4a:	e7dc      	b.n	8007d06 <_strtod_l+0x2fe>
 8007d4c:	498e      	ldr	r1, [pc, #568]	; (8007f88 <_strtod_l+0x580>)
 8007d4e:	a819      	add	r0, sp, #100	; 0x64
 8007d50:	f001 fdf6 	bl	8009940 <__match>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f43f aeb4 	beq.w	8007ac2 <_strtod_l+0xba>
 8007d5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d5c:	498b      	ldr	r1, [pc, #556]	; (8007f8c <_strtod_l+0x584>)
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	a819      	add	r0, sp, #100	; 0x64
 8007d62:	9319      	str	r3, [sp, #100]	; 0x64
 8007d64:	f001 fdec 	bl	8009940 <__match>
 8007d68:	b910      	cbnz	r0, 8007d70 <_strtod_l+0x368>
 8007d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	9319      	str	r3, [sp, #100]	; 0x64
 8007d70:	f04f 0800 	mov.w	r8, #0
 8007d74:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007f90 <_strtod_l+0x588>
 8007d78:	e687      	b.n	8007a8a <_strtod_l+0x82>
 8007d7a:	4886      	ldr	r0, [pc, #536]	; (8007f94 <_strtod_l+0x58c>)
 8007d7c:	f002 fdc0 	bl	800a900 <nan>
 8007d80:	4680      	mov	r8, r0
 8007d82:	4689      	mov	r9, r1
 8007d84:	e681      	b.n	8007a8a <_strtod_l+0x82>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	f1bb 0f00 	cmp.w	fp, #0
 8007d8c:	bf08      	it	eq
 8007d8e:	46a3      	moveq	fp, r4
 8007d90:	1aeb      	subs	r3, r5, r3
 8007d92:	2c10      	cmp	r4, #16
 8007d94:	9806      	ldr	r0, [sp, #24]
 8007d96:	4626      	mov	r6, r4
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	bfa8      	it	ge
 8007d9c:	2610      	movge	r6, #16
 8007d9e:	f7f8 fb21 	bl	80003e4 <__aeabi_ui2d>
 8007da2:	2c09      	cmp	r4, #9
 8007da4:	4680      	mov	r8, r0
 8007da6:	4689      	mov	r9, r1
 8007da8:	dd13      	ble.n	8007dd2 <_strtod_l+0x3ca>
 8007daa:	4b7b      	ldr	r3, [pc, #492]	; (8007f98 <_strtod_l+0x590>)
 8007dac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007db0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007db4:	f7f8 fb90 	bl	80004d8 <__aeabi_dmul>
 8007db8:	4680      	mov	r8, r0
 8007dba:	9805      	ldr	r0, [sp, #20]
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	f7f8 fb11 	bl	80003e4 <__aeabi_ui2d>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	4649      	mov	r1, r9
 8007dca:	f7f8 f9cf 	bl	800016c <__adddf3>
 8007dce:	4680      	mov	r8, r0
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	2c0f      	cmp	r4, #15
 8007dd4:	dc36      	bgt.n	8007e44 <_strtod_l+0x43c>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f43f ae56 	beq.w	8007a8a <_strtod_l+0x82>
 8007dde:	dd22      	ble.n	8007e26 <_strtod_l+0x41e>
 8007de0:	2b16      	cmp	r3, #22
 8007de2:	dc09      	bgt.n	8007df8 <_strtod_l+0x3f0>
 8007de4:	496c      	ldr	r1, [pc, #432]	; (8007f98 <_strtod_l+0x590>)
 8007de6:	4642      	mov	r2, r8
 8007de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dec:	464b      	mov	r3, r9
 8007dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df2:	f7f8 fb71 	bl	80004d8 <__aeabi_dmul>
 8007df6:	e7c3      	b.n	8007d80 <_strtod_l+0x378>
 8007df8:	9a07      	ldr	r2, [sp, #28]
 8007dfa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	db20      	blt.n	8007e44 <_strtod_l+0x43c>
 8007e02:	4d65      	ldr	r5, [pc, #404]	; (8007f98 <_strtod_l+0x590>)
 8007e04:	f1c4 040f 	rsb	r4, r4, #15
 8007e08:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e12:	464b      	mov	r3, r9
 8007e14:	f7f8 fb60 	bl	80004d8 <__aeabi_dmul>
 8007e18:	9b07      	ldr	r3, [sp, #28]
 8007e1a:	1b1c      	subs	r4, r3, r4
 8007e1c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007e20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e24:	e7e5      	b.n	8007df2 <_strtod_l+0x3ea>
 8007e26:	9b07      	ldr	r3, [sp, #28]
 8007e28:	3316      	adds	r3, #22
 8007e2a:	db0b      	blt.n	8007e44 <_strtod_l+0x43c>
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	4640      	mov	r0, r8
 8007e30:	1b5d      	subs	r5, r3, r5
 8007e32:	4b59      	ldr	r3, [pc, #356]	; (8007f98 <_strtod_l+0x590>)
 8007e34:	4649      	mov	r1, r9
 8007e36:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007e3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e3e:	f7f8 fc75 	bl	800072c <__aeabi_ddiv>
 8007e42:	e79d      	b.n	8007d80 <_strtod_l+0x378>
 8007e44:	9b07      	ldr	r3, [sp, #28]
 8007e46:	1ba6      	subs	r6, r4, r6
 8007e48:	441e      	add	r6, r3
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	dd74      	ble.n	8007f38 <_strtod_l+0x530>
 8007e4e:	f016 030f 	ands.w	r3, r6, #15
 8007e52:	d00a      	beq.n	8007e6a <_strtod_l+0x462>
 8007e54:	4950      	ldr	r1, [pc, #320]	; (8007f98 <_strtod_l+0x590>)
 8007e56:	4642      	mov	r2, r8
 8007e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e60:	464b      	mov	r3, r9
 8007e62:	f7f8 fb39 	bl	80004d8 <__aeabi_dmul>
 8007e66:	4680      	mov	r8, r0
 8007e68:	4689      	mov	r9, r1
 8007e6a:	f036 060f 	bics.w	r6, r6, #15
 8007e6e:	d052      	beq.n	8007f16 <_strtod_l+0x50e>
 8007e70:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007e74:	dd27      	ble.n	8007ec6 <_strtod_l+0x4be>
 8007e76:	f04f 0b00 	mov.w	fp, #0
 8007e7a:	f8cd b010 	str.w	fp, [sp, #16]
 8007e7e:	f8cd b020 	str.w	fp, [sp, #32]
 8007e82:	f8cd b018 	str.w	fp, [sp, #24]
 8007e86:	2322      	movs	r3, #34	; 0x22
 8007e88:	f04f 0800 	mov.w	r8, #0
 8007e8c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007f90 <_strtod_l+0x588>
 8007e90:	f8ca 3000 	str.w	r3, [sl]
 8007e94:	9b08      	ldr	r3, [sp, #32]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f43f adf7 	beq.w	8007a8a <_strtod_l+0x82>
 8007e9c:	4650      	mov	r0, sl
 8007e9e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ea0:	f001 fe6a 	bl	8009b78 <_Bfree>
 8007ea4:	4650      	mov	r0, sl
 8007ea6:	9906      	ldr	r1, [sp, #24]
 8007ea8:	f001 fe66 	bl	8009b78 <_Bfree>
 8007eac:	4650      	mov	r0, sl
 8007eae:	9904      	ldr	r1, [sp, #16]
 8007eb0:	f001 fe62 	bl	8009b78 <_Bfree>
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	9908      	ldr	r1, [sp, #32]
 8007eb8:	f001 fe5e 	bl	8009b78 <_Bfree>
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f001 fe5a 	bl	8009b78 <_Bfree>
 8007ec4:	e5e1      	b.n	8007a8a <_strtod_l+0x82>
 8007ec6:	4b35      	ldr	r3, [pc, #212]	; (8007f9c <_strtod_l+0x594>)
 8007ec8:	4640      	mov	r0, r8
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4649      	mov	r1, r9
 8007ed0:	461f      	mov	r7, r3
 8007ed2:	1136      	asrs	r6, r6, #4
 8007ed4:	2e01      	cmp	r6, #1
 8007ed6:	dc21      	bgt.n	8007f1c <_strtod_l+0x514>
 8007ed8:	b10b      	cbz	r3, 8007ede <_strtod_l+0x4d6>
 8007eda:	4680      	mov	r8, r0
 8007edc:	4689      	mov	r9, r1
 8007ede:	4b2f      	ldr	r3, [pc, #188]	; (8007f9c <_strtod_l+0x594>)
 8007ee0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ee4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ee8:	4642      	mov	r2, r8
 8007eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eee:	464b      	mov	r3, r9
 8007ef0:	f7f8 faf2 	bl	80004d8 <__aeabi_dmul>
 8007ef4:	4b26      	ldr	r3, [pc, #152]	; (8007f90 <_strtod_l+0x588>)
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	400b      	ands	r3, r1
 8007efa:	4929      	ldr	r1, [pc, #164]	; (8007fa0 <_strtod_l+0x598>)
 8007efc:	4680      	mov	r8, r0
 8007efe:	428b      	cmp	r3, r1
 8007f00:	d8b9      	bhi.n	8007e76 <_strtod_l+0x46e>
 8007f02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f06:	428b      	cmp	r3, r1
 8007f08:	bf86      	itte	hi
 8007f0a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007f0e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007fa4 <_strtod_l+0x59c>
 8007f12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007f16:	2300      	movs	r3, #0
 8007f18:	9305      	str	r3, [sp, #20]
 8007f1a:	e07f      	b.n	800801c <_strtod_l+0x614>
 8007f1c:	07f2      	lsls	r2, r6, #31
 8007f1e:	d505      	bpl.n	8007f2c <_strtod_l+0x524>
 8007f20:	9b05      	ldr	r3, [sp, #20]
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fad7 	bl	80004d8 <__aeabi_dmul>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	9a05      	ldr	r2, [sp, #20]
 8007f2e:	3701      	adds	r7, #1
 8007f30:	3208      	adds	r2, #8
 8007f32:	1076      	asrs	r6, r6, #1
 8007f34:	9205      	str	r2, [sp, #20]
 8007f36:	e7cd      	b.n	8007ed4 <_strtod_l+0x4cc>
 8007f38:	d0ed      	beq.n	8007f16 <_strtod_l+0x50e>
 8007f3a:	4276      	negs	r6, r6
 8007f3c:	f016 020f 	ands.w	r2, r6, #15
 8007f40:	d00a      	beq.n	8007f58 <_strtod_l+0x550>
 8007f42:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <_strtod_l+0x590>)
 8007f44:	4640      	mov	r0, r8
 8007f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 fbec 	bl	800072c <__aeabi_ddiv>
 8007f54:	4680      	mov	r8, r0
 8007f56:	4689      	mov	r9, r1
 8007f58:	1136      	asrs	r6, r6, #4
 8007f5a:	d0dc      	beq.n	8007f16 <_strtod_l+0x50e>
 8007f5c:	2e1f      	cmp	r6, #31
 8007f5e:	dd23      	ble.n	8007fa8 <_strtod_l+0x5a0>
 8007f60:	f04f 0b00 	mov.w	fp, #0
 8007f64:	f8cd b010 	str.w	fp, [sp, #16]
 8007f68:	f8cd b020 	str.w	fp, [sp, #32]
 8007f6c:	f8cd b018 	str.w	fp, [sp, #24]
 8007f70:	2322      	movs	r3, #34	; 0x22
 8007f72:	f04f 0800 	mov.w	r8, #0
 8007f76:	f04f 0900 	mov.w	r9, #0
 8007f7a:	f8ca 3000 	str.w	r3, [sl]
 8007f7e:	e789      	b.n	8007e94 <_strtod_l+0x48c>
 8007f80:	0800b94d 	.word	0x0800b94d
 8007f84:	0800b990 	.word	0x0800b990
 8007f88:	0800b945 	.word	0x0800b945
 8007f8c:	0800bad4 	.word	0x0800bad4
 8007f90:	7ff00000 	.word	0x7ff00000
 8007f94:	0800bd80 	.word	0x0800bd80
 8007f98:	0800bc60 	.word	0x0800bc60
 8007f9c:	0800bc38 	.word	0x0800bc38
 8007fa0:	7ca00000 	.word	0x7ca00000
 8007fa4:	7fefffff 	.word	0x7fefffff
 8007fa8:	f016 0310 	ands.w	r3, r6, #16
 8007fac:	bf18      	it	ne
 8007fae:	236a      	movne	r3, #106	; 0x6a
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	9305      	str	r3, [sp, #20]
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4fb0      	ldr	r7, [pc, #704]	; (800827c <_strtod_l+0x874>)
 8007fba:	07f2      	lsls	r2, r6, #31
 8007fbc:	d504      	bpl.n	8007fc8 <_strtod_l+0x5c0>
 8007fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc2:	f7f8 fa89 	bl	80004d8 <__aeabi_dmul>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	1076      	asrs	r6, r6, #1
 8007fca:	f107 0708 	add.w	r7, r7, #8
 8007fce:	d1f4      	bne.n	8007fba <_strtod_l+0x5b2>
 8007fd0:	b10b      	cbz	r3, 8007fd6 <_strtod_l+0x5ce>
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	4689      	mov	r9, r1
 8007fd6:	9b05      	ldr	r3, [sp, #20]
 8007fd8:	b1c3      	cbz	r3, 800800c <_strtod_l+0x604>
 8007fda:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007fde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	dd11      	ble.n	800800c <_strtod_l+0x604>
 8007fe8:	2b1f      	cmp	r3, #31
 8007fea:	f340 8127 	ble.w	800823c <_strtod_l+0x834>
 8007fee:	2b34      	cmp	r3, #52	; 0x34
 8007ff0:	bfd8      	it	le
 8007ff2:	f04f 33ff 	movle.w	r3, #4294967295
 8007ff6:	f04f 0800 	mov.w	r8, #0
 8007ffa:	bfcf      	iteee	gt
 8007ffc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008000:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008004:	fa03 f202 	lslle.w	r2, r3, r2
 8008008:	ea02 0901 	andle.w	r9, r2, r1
 800800c:	2200      	movs	r2, #0
 800800e:	2300      	movs	r3, #0
 8008010:	4640      	mov	r0, r8
 8008012:	4649      	mov	r1, r9
 8008014:	f7f8 fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8008018:	2800      	cmp	r0, #0
 800801a:	d1a1      	bne.n	8007f60 <_strtod_l+0x558>
 800801c:	9b06      	ldr	r3, [sp, #24]
 800801e:	465a      	mov	r2, fp
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	4650      	mov	r0, sl
 8008024:	4623      	mov	r3, r4
 8008026:	9908      	ldr	r1, [sp, #32]
 8008028:	f001 fe0e 	bl	8009c48 <__s2b>
 800802c:	9008      	str	r0, [sp, #32]
 800802e:	2800      	cmp	r0, #0
 8008030:	f43f af21 	beq.w	8007e76 <_strtod_l+0x46e>
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	f04f 0b00 	mov.w	fp, #0
 800803a:	1b5d      	subs	r5, r3, r5
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	f8cd b010 	str.w	fp, [sp, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	bfb4      	ite	lt
 8008046:	462b      	movlt	r3, r5
 8008048:	2300      	movge	r3, #0
 800804a:	930e      	str	r3, [sp, #56]	; 0x38
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008052:	9314      	str	r3, [sp, #80]	; 0x50
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	4650      	mov	r0, sl
 8008058:	6859      	ldr	r1, [r3, #4]
 800805a:	f001 fd4d 	bl	8009af8 <_Balloc>
 800805e:	9006      	str	r0, [sp, #24]
 8008060:	2800      	cmp	r0, #0
 8008062:	f43f af10 	beq.w	8007e86 <_strtod_l+0x47e>
 8008066:	9b08      	ldr	r3, [sp, #32]
 8008068:	300c      	adds	r0, #12
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	f103 010c 	add.w	r1, r3, #12
 8008070:	3202      	adds	r2, #2
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	f7fe fdfc 	bl	8006c70 <memcpy>
 8008078:	ab1c      	add	r3, sp, #112	; 0x70
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	ab1b      	add	r3, sp, #108	; 0x6c
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	4650      	mov	r0, sl
 8008086:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800808a:	f002 f91f 	bl	800a2cc <__d2b>
 800808e:	901a      	str	r0, [sp, #104]	; 0x68
 8008090:	2800      	cmp	r0, #0
 8008092:	f43f aef8 	beq.w	8007e86 <_strtod_l+0x47e>
 8008096:	2101      	movs	r1, #1
 8008098:	4650      	mov	r0, sl
 800809a:	f001 fe6d 	bl	8009d78 <__i2b>
 800809e:	4603      	mov	r3, r0
 80080a0:	9004      	str	r0, [sp, #16]
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f aeef 	beq.w	8007e86 <_strtod_l+0x47e>
 80080a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80080aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	bfab      	itete	ge
 80080b0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80080b2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80080b4:	18ee      	addge	r6, r5, r3
 80080b6:	1b5c      	sublt	r4, r3, r5
 80080b8:	9b05      	ldr	r3, [sp, #20]
 80080ba:	bfa8      	it	ge
 80080bc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80080be:	eba5 0503 	sub.w	r5, r5, r3
 80080c2:	4415      	add	r5, r2
 80080c4:	4b6e      	ldr	r3, [pc, #440]	; (8008280 <_strtod_l+0x878>)
 80080c6:	f105 35ff 	add.w	r5, r5, #4294967295
 80080ca:	bfb8      	it	lt
 80080cc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80080ce:	429d      	cmp	r5, r3
 80080d0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080d4:	f280 80c4 	bge.w	8008260 <_strtod_l+0x858>
 80080d8:	1b5b      	subs	r3, r3, r5
 80080da:	2b1f      	cmp	r3, #31
 80080dc:	f04f 0701 	mov.w	r7, #1
 80080e0:	eba2 0203 	sub.w	r2, r2, r3
 80080e4:	f300 80b1 	bgt.w	800824a <_strtod_l+0x842>
 80080e8:	2500      	movs	r5, #0
 80080ea:	fa07 f303 	lsl.w	r3, r7, r3
 80080ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80080f0:	18b7      	adds	r7, r6, r2
 80080f2:	9b05      	ldr	r3, [sp, #20]
 80080f4:	42be      	cmp	r6, r7
 80080f6:	4414      	add	r4, r2
 80080f8:	441c      	add	r4, r3
 80080fa:	4633      	mov	r3, r6
 80080fc:	bfa8      	it	ge
 80080fe:	463b      	movge	r3, r7
 8008100:	42a3      	cmp	r3, r4
 8008102:	bfa8      	it	ge
 8008104:	4623      	movge	r3, r4
 8008106:	2b00      	cmp	r3, #0
 8008108:	bfc2      	ittt	gt
 800810a:	1aff      	subgt	r7, r7, r3
 800810c:	1ae4      	subgt	r4, r4, r3
 800810e:	1af6      	subgt	r6, r6, r3
 8008110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	dd17      	ble.n	8008146 <_strtod_l+0x73e>
 8008116:	461a      	mov	r2, r3
 8008118:	4650      	mov	r0, sl
 800811a:	9904      	ldr	r1, [sp, #16]
 800811c:	f001 feea 	bl	8009ef4 <__pow5mult>
 8008120:	9004      	str	r0, [sp, #16]
 8008122:	2800      	cmp	r0, #0
 8008124:	f43f aeaf 	beq.w	8007e86 <_strtod_l+0x47e>
 8008128:	4601      	mov	r1, r0
 800812a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800812c:	4650      	mov	r0, sl
 800812e:	f001 fe39 	bl	8009da4 <__multiply>
 8008132:	9009      	str	r0, [sp, #36]	; 0x24
 8008134:	2800      	cmp	r0, #0
 8008136:	f43f aea6 	beq.w	8007e86 <_strtod_l+0x47e>
 800813a:	4650      	mov	r0, sl
 800813c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800813e:	f001 fd1b 	bl	8009b78 <_Bfree>
 8008142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008144:	931a      	str	r3, [sp, #104]	; 0x68
 8008146:	2f00      	cmp	r7, #0
 8008148:	f300 808e 	bgt.w	8008268 <_strtod_l+0x860>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	dd08      	ble.n	8008164 <_strtod_l+0x75c>
 8008152:	4650      	mov	r0, sl
 8008154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008156:	9906      	ldr	r1, [sp, #24]
 8008158:	f001 fecc 	bl	8009ef4 <__pow5mult>
 800815c:	9006      	str	r0, [sp, #24]
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f ae91 	beq.w	8007e86 <_strtod_l+0x47e>
 8008164:	2c00      	cmp	r4, #0
 8008166:	dd08      	ble.n	800817a <_strtod_l+0x772>
 8008168:	4622      	mov	r2, r4
 800816a:	4650      	mov	r0, sl
 800816c:	9906      	ldr	r1, [sp, #24]
 800816e:	f001 ff1b 	bl	8009fa8 <__lshift>
 8008172:	9006      	str	r0, [sp, #24]
 8008174:	2800      	cmp	r0, #0
 8008176:	f43f ae86 	beq.w	8007e86 <_strtod_l+0x47e>
 800817a:	2e00      	cmp	r6, #0
 800817c:	dd08      	ble.n	8008190 <_strtod_l+0x788>
 800817e:	4632      	mov	r2, r6
 8008180:	4650      	mov	r0, sl
 8008182:	9904      	ldr	r1, [sp, #16]
 8008184:	f001 ff10 	bl	8009fa8 <__lshift>
 8008188:	9004      	str	r0, [sp, #16]
 800818a:	2800      	cmp	r0, #0
 800818c:	f43f ae7b 	beq.w	8007e86 <_strtod_l+0x47e>
 8008190:	4650      	mov	r0, sl
 8008192:	9a06      	ldr	r2, [sp, #24]
 8008194:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008196:	f001 ff93 	bl	800a0c0 <__mdiff>
 800819a:	4683      	mov	fp, r0
 800819c:	2800      	cmp	r0, #0
 800819e:	f43f ae72 	beq.w	8007e86 <_strtod_l+0x47e>
 80081a2:	2400      	movs	r4, #0
 80081a4:	68c3      	ldr	r3, [r0, #12]
 80081a6:	9904      	ldr	r1, [sp, #16]
 80081a8:	60c4      	str	r4, [r0, #12]
 80081aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ac:	f001 ff6c 	bl	800a088 <__mcmp>
 80081b0:	42a0      	cmp	r0, r4
 80081b2:	da6b      	bge.n	800828c <_strtod_l+0x884>
 80081b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b6:	ea53 0308 	orrs.w	r3, r3, r8
 80081ba:	f040 8091 	bne.w	80082e0 <_strtod_l+0x8d8>
 80081be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 808c 	bne.w	80082e0 <_strtod_l+0x8d8>
 80081c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081cc:	0d1b      	lsrs	r3, r3, #20
 80081ce:	051b      	lsls	r3, r3, #20
 80081d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081d4:	f240 8084 	bls.w	80082e0 <_strtod_l+0x8d8>
 80081d8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80081dc:	b91b      	cbnz	r3, 80081e6 <_strtod_l+0x7de>
 80081de:	f8db 3010 	ldr.w	r3, [fp, #16]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	dd7c      	ble.n	80082e0 <_strtod_l+0x8d8>
 80081e6:	4659      	mov	r1, fp
 80081e8:	2201      	movs	r2, #1
 80081ea:	4650      	mov	r0, sl
 80081ec:	f001 fedc 	bl	8009fa8 <__lshift>
 80081f0:	9904      	ldr	r1, [sp, #16]
 80081f2:	4683      	mov	fp, r0
 80081f4:	f001 ff48 	bl	800a088 <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	dd71      	ble.n	80082e0 <_strtod_l+0x8d8>
 80081fc:	9905      	ldr	r1, [sp, #20]
 80081fe:	464b      	mov	r3, r9
 8008200:	4a20      	ldr	r2, [pc, #128]	; (8008284 <_strtod_l+0x87c>)
 8008202:	2900      	cmp	r1, #0
 8008204:	f000 808c 	beq.w	8008320 <_strtod_l+0x918>
 8008208:	ea02 0109 	and.w	r1, r2, r9
 800820c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008210:	f300 8086 	bgt.w	8008320 <_strtod_l+0x918>
 8008214:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008218:	f77f aeaa 	ble.w	8007f70 <_strtod_l+0x568>
 800821c:	4640      	mov	r0, r8
 800821e:	4649      	mov	r1, r9
 8008220:	4b19      	ldr	r3, [pc, #100]	; (8008288 <_strtod_l+0x880>)
 8008222:	2200      	movs	r2, #0
 8008224:	f7f8 f958 	bl	80004d8 <__aeabi_dmul>
 8008228:	460b      	mov	r3, r1
 800822a:	4303      	orrs	r3, r0
 800822c:	bf08      	it	eq
 800822e:	2322      	moveq	r3, #34	; 0x22
 8008230:	4680      	mov	r8, r0
 8008232:	4689      	mov	r9, r1
 8008234:	bf08      	it	eq
 8008236:	f8ca 3000 	streq.w	r3, [sl]
 800823a:	e62f      	b.n	8007e9c <_strtod_l+0x494>
 800823c:	f04f 32ff 	mov.w	r2, #4294967295
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	ea03 0808 	and.w	r8, r3, r8
 8008248:	e6e0      	b.n	800800c <_strtod_l+0x604>
 800824a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800824e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008252:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008256:	35e2      	adds	r5, #226	; 0xe2
 8008258:	fa07 f505 	lsl.w	r5, r7, r5
 800825c:	970f      	str	r7, [sp, #60]	; 0x3c
 800825e:	e747      	b.n	80080f0 <_strtod_l+0x6e8>
 8008260:	2301      	movs	r3, #1
 8008262:	2500      	movs	r5, #0
 8008264:	930f      	str	r3, [sp, #60]	; 0x3c
 8008266:	e743      	b.n	80080f0 <_strtod_l+0x6e8>
 8008268:	463a      	mov	r2, r7
 800826a:	4650      	mov	r0, sl
 800826c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800826e:	f001 fe9b 	bl	8009fa8 <__lshift>
 8008272:	901a      	str	r0, [sp, #104]	; 0x68
 8008274:	2800      	cmp	r0, #0
 8008276:	f47f af69 	bne.w	800814c <_strtod_l+0x744>
 800827a:	e604      	b.n	8007e86 <_strtod_l+0x47e>
 800827c:	0800b9a8 	.word	0x0800b9a8
 8008280:	fffffc02 	.word	0xfffffc02
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	39500000 	.word	0x39500000
 800828c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008290:	d165      	bne.n	800835e <_strtod_l+0x956>
 8008292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008294:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008298:	b35a      	cbz	r2, 80082f2 <_strtod_l+0x8ea>
 800829a:	4a99      	ldr	r2, [pc, #612]	; (8008500 <_strtod_l+0xaf8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d12b      	bne.n	80082f8 <_strtod_l+0x8f0>
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	4641      	mov	r1, r8
 80082a4:	b303      	cbz	r3, 80082e8 <_strtod_l+0x8e0>
 80082a6:	464a      	mov	r2, r9
 80082a8:	4b96      	ldr	r3, [pc, #600]	; (8008504 <_strtod_l+0xafc>)
 80082aa:	4013      	ands	r3, r2
 80082ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	d81b      	bhi.n	80082ee <_strtod_l+0x8e6>
 80082b6:	0d1b      	lsrs	r3, r3, #20
 80082b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	4299      	cmp	r1, r3
 80082c2:	d119      	bne.n	80082f8 <_strtod_l+0x8f0>
 80082c4:	4b90      	ldr	r3, [pc, #576]	; (8008508 <_strtod_l+0xb00>)
 80082c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d102      	bne.n	80082d2 <_strtod_l+0x8ca>
 80082cc:	3101      	adds	r1, #1
 80082ce:	f43f adda 	beq.w	8007e86 <_strtod_l+0x47e>
 80082d2:	f04f 0800 	mov.w	r8, #0
 80082d6:	4b8b      	ldr	r3, [pc, #556]	; (8008504 <_strtod_l+0xafc>)
 80082d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082da:	401a      	ands	r2, r3
 80082dc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80082e0:	9b05      	ldr	r3, [sp, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d19a      	bne.n	800821c <_strtod_l+0x814>
 80082e6:	e5d9      	b.n	8007e9c <_strtod_l+0x494>
 80082e8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ec:	e7e8      	b.n	80082c0 <_strtod_l+0x8b8>
 80082ee:	4613      	mov	r3, r2
 80082f0:	e7e6      	b.n	80082c0 <_strtod_l+0x8b8>
 80082f2:	ea53 0308 	orrs.w	r3, r3, r8
 80082f6:	d081      	beq.n	80081fc <_strtod_l+0x7f4>
 80082f8:	b1e5      	cbz	r5, 8008334 <_strtod_l+0x92c>
 80082fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fc:	421d      	tst	r5, r3
 80082fe:	d0ef      	beq.n	80082e0 <_strtod_l+0x8d8>
 8008300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008302:	4640      	mov	r0, r8
 8008304:	4649      	mov	r1, r9
 8008306:	9a05      	ldr	r2, [sp, #20]
 8008308:	b1c3      	cbz	r3, 800833c <_strtod_l+0x934>
 800830a:	f7ff fb59 	bl	80079c0 <sulp>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008316:	f7f7 ff29 	bl	800016c <__adddf3>
 800831a:	4680      	mov	r8, r0
 800831c:	4689      	mov	r9, r1
 800831e:	e7df      	b.n	80082e0 <_strtod_l+0x8d8>
 8008320:	4013      	ands	r3, r2
 8008322:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008326:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800832a:	f04f 38ff 	mov.w	r8, #4294967295
 800832e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008332:	e7d5      	b.n	80082e0 <_strtod_l+0x8d8>
 8008334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008336:	ea13 0f08 	tst.w	r3, r8
 800833a:	e7e0      	b.n	80082fe <_strtod_l+0x8f6>
 800833c:	f7ff fb40 	bl	80079c0 <sulp>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008348:	f7f7 ff0e 	bl	8000168 <__aeabi_dsub>
 800834c:	2200      	movs	r2, #0
 800834e:	2300      	movs	r3, #0
 8008350:	4680      	mov	r8, r0
 8008352:	4689      	mov	r9, r1
 8008354:	f7f8 fb28 	bl	80009a8 <__aeabi_dcmpeq>
 8008358:	2800      	cmp	r0, #0
 800835a:	d0c1      	beq.n	80082e0 <_strtod_l+0x8d8>
 800835c:	e608      	b.n	8007f70 <_strtod_l+0x568>
 800835e:	4658      	mov	r0, fp
 8008360:	9904      	ldr	r1, [sp, #16]
 8008362:	f002 f80f 	bl	800a384 <__ratio>
 8008366:	2200      	movs	r2, #0
 8008368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800836c:	4606      	mov	r6, r0
 800836e:	460f      	mov	r7, r1
 8008370:	f7f8 fb2e 	bl	80009d0 <__aeabi_dcmple>
 8008374:	2800      	cmp	r0, #0
 8008376:	d070      	beq.n	800845a <_strtod_l+0xa52>
 8008378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d042      	beq.n	8008404 <_strtod_l+0x9fc>
 800837e:	2600      	movs	r6, #0
 8008380:	4f62      	ldr	r7, [pc, #392]	; (800850c <_strtod_l+0xb04>)
 8008382:	4d62      	ldr	r5, [pc, #392]	; (800850c <_strtod_l+0xb04>)
 8008384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800838a:	0d1b      	lsrs	r3, r3, #20
 800838c:	051b      	lsls	r3, r3, #20
 800838e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008392:	4b5f      	ldr	r3, [pc, #380]	; (8008510 <_strtod_l+0xb08>)
 8008394:	429a      	cmp	r2, r3
 8008396:	f040 80c3 	bne.w	8008520 <_strtod_l+0xb18>
 800839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839c:	4640      	mov	r0, r8
 800839e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80083a2:	4649      	mov	r1, r9
 80083a4:	f001 ff18 	bl	800a1d8 <__ulp>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4630      	mov	r0, r6
 80083ae:	4639      	mov	r1, r7
 80083b0:	f7f8 f892 	bl	80004d8 <__aeabi_dmul>
 80083b4:	4642      	mov	r2, r8
 80083b6:	464b      	mov	r3, r9
 80083b8:	f7f7 fed8 	bl	800016c <__adddf3>
 80083bc:	460b      	mov	r3, r1
 80083be:	4951      	ldr	r1, [pc, #324]	; (8008504 <_strtod_l+0xafc>)
 80083c0:	4a54      	ldr	r2, [pc, #336]	; (8008514 <_strtod_l+0xb0c>)
 80083c2:	4019      	ands	r1, r3
 80083c4:	4291      	cmp	r1, r2
 80083c6:	4680      	mov	r8, r0
 80083c8:	d95d      	bls.n	8008486 <_strtod_l+0xa7e>
 80083ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083cc:	4b4e      	ldr	r3, [pc, #312]	; (8008508 <_strtod_l+0xb00>)
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d103      	bne.n	80083da <_strtod_l+0x9d2>
 80083d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d4:	3301      	adds	r3, #1
 80083d6:	f43f ad56 	beq.w	8007e86 <_strtod_l+0x47e>
 80083da:	f04f 38ff 	mov.w	r8, #4294967295
 80083de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008508 <_strtod_l+0xb00>
 80083e2:	4650      	mov	r0, sl
 80083e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80083e6:	f001 fbc7 	bl	8009b78 <_Bfree>
 80083ea:	4650      	mov	r0, sl
 80083ec:	9906      	ldr	r1, [sp, #24]
 80083ee:	f001 fbc3 	bl	8009b78 <_Bfree>
 80083f2:	4650      	mov	r0, sl
 80083f4:	9904      	ldr	r1, [sp, #16]
 80083f6:	f001 fbbf 	bl	8009b78 <_Bfree>
 80083fa:	4659      	mov	r1, fp
 80083fc:	4650      	mov	r0, sl
 80083fe:	f001 fbbb 	bl	8009b78 <_Bfree>
 8008402:	e627      	b.n	8008054 <_strtod_l+0x64c>
 8008404:	f1b8 0f00 	cmp.w	r8, #0
 8008408:	d119      	bne.n	800843e <_strtod_l+0xa36>
 800840a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008410:	b9e3      	cbnz	r3, 800844c <_strtod_l+0xa44>
 8008412:	2200      	movs	r2, #0
 8008414:	4630      	mov	r0, r6
 8008416:	4639      	mov	r1, r7
 8008418:	4b3c      	ldr	r3, [pc, #240]	; (800850c <_strtod_l+0xb04>)
 800841a:	f7f8 facf 	bl	80009bc <__aeabi_dcmplt>
 800841e:	b9c8      	cbnz	r0, 8008454 <_strtod_l+0xa4c>
 8008420:	2200      	movs	r2, #0
 8008422:	4630      	mov	r0, r6
 8008424:	4639      	mov	r1, r7
 8008426:	4b3c      	ldr	r3, [pc, #240]	; (8008518 <_strtod_l+0xb10>)
 8008428:	f7f8 f856 	bl	80004d8 <__aeabi_dmul>
 800842c:	4604      	mov	r4, r0
 800842e:	460d      	mov	r5, r1
 8008430:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008434:	9416      	str	r4, [sp, #88]	; 0x58
 8008436:	9317      	str	r3, [sp, #92]	; 0x5c
 8008438:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800843c:	e7a2      	b.n	8008384 <_strtod_l+0x97c>
 800843e:	f1b8 0f01 	cmp.w	r8, #1
 8008442:	d103      	bne.n	800844c <_strtod_l+0xa44>
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	f43f ad92 	beq.w	8007f70 <_strtod_l+0x568>
 800844c:	2600      	movs	r6, #0
 800844e:	2400      	movs	r4, #0
 8008450:	4f32      	ldr	r7, [pc, #200]	; (800851c <_strtod_l+0xb14>)
 8008452:	e796      	b.n	8008382 <_strtod_l+0x97a>
 8008454:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008456:	4d30      	ldr	r5, [pc, #192]	; (8008518 <_strtod_l+0xb10>)
 8008458:	e7ea      	b.n	8008430 <_strtod_l+0xa28>
 800845a:	4b2f      	ldr	r3, [pc, #188]	; (8008518 <_strtod_l+0xb10>)
 800845c:	2200      	movs	r2, #0
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f8 f839 	bl	80004d8 <__aeabi_dmul>
 8008466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008468:	4604      	mov	r4, r0
 800846a:	460d      	mov	r5, r1
 800846c:	b933      	cbnz	r3, 800847c <_strtod_l+0xa74>
 800846e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008472:	9010      	str	r0, [sp, #64]	; 0x40
 8008474:	9311      	str	r3, [sp, #68]	; 0x44
 8008476:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800847a:	e783      	b.n	8008384 <_strtod_l+0x97c>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008484:	e7f7      	b.n	8008476 <_strtod_l+0xa6e>
 8008486:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1a8      	bne.n	80083e2 <_strtod_l+0x9da>
 8008490:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008496:	0d1b      	lsrs	r3, r3, #20
 8008498:	051b      	lsls	r3, r3, #20
 800849a:	429a      	cmp	r2, r3
 800849c:	d1a1      	bne.n	80083e2 <_strtod_l+0x9da>
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 fe71 	bl	8001188 <__aeabi_d2lz>
 80084a6:	f7f7 ffe9 	bl	800047c <__aeabi_l2d>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f7 fe59 	bl	8000168 <__aeabi_dsub>
 80084b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084bc:	ea43 0308 	orr.w	r3, r3, r8
 80084c0:	4313      	orrs	r3, r2
 80084c2:	4604      	mov	r4, r0
 80084c4:	460d      	mov	r5, r1
 80084c6:	d066      	beq.n	8008596 <_strtod_l+0xb8e>
 80084c8:	a309      	add	r3, pc, #36	; (adr r3, 80084f0 <_strtod_l+0xae8>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f7f8 fa75 	bl	80009bc <__aeabi_dcmplt>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f47f ace2 	bne.w	8007e9c <_strtod_l+0x494>
 80084d8:	a307      	add	r3, pc, #28	; (adr r3, 80084f8 <_strtod_l+0xaf0>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	4620      	mov	r0, r4
 80084e0:	4629      	mov	r1, r5
 80084e2:	f7f8 fa89 	bl	80009f8 <__aeabi_dcmpgt>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f43f af7b 	beq.w	80083e2 <_strtod_l+0x9da>
 80084ec:	e4d6      	b.n	8007e9c <_strtod_l+0x494>
 80084ee:	bf00      	nop
 80084f0:	94a03595 	.word	0x94a03595
 80084f4:	3fdfffff 	.word	0x3fdfffff
 80084f8:	35afe535 	.word	0x35afe535
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	000fffff 	.word	0x000fffff
 8008504:	7ff00000 	.word	0x7ff00000
 8008508:	7fefffff 	.word	0x7fefffff
 800850c:	3ff00000 	.word	0x3ff00000
 8008510:	7fe00000 	.word	0x7fe00000
 8008514:	7c9fffff 	.word	0x7c9fffff
 8008518:	3fe00000 	.word	0x3fe00000
 800851c:	bff00000 	.word	0xbff00000
 8008520:	9b05      	ldr	r3, [sp, #20]
 8008522:	b313      	cbz	r3, 800856a <_strtod_l+0xb62>
 8008524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008526:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800852a:	d81e      	bhi.n	800856a <_strtod_l+0xb62>
 800852c:	a326      	add	r3, pc, #152	; (adr r3, 80085c8 <_strtod_l+0xbc0>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f8 fa4b 	bl	80009d0 <__aeabi_dcmple>
 800853a:	b190      	cbz	r0, 8008562 <_strtod_l+0xb5a>
 800853c:	4629      	mov	r1, r5
 800853e:	4620      	mov	r0, r4
 8008540:	f7f8 faa2 	bl	8000a88 <__aeabi_d2uiz>
 8008544:	2801      	cmp	r0, #1
 8008546:	bf38      	it	cc
 8008548:	2001      	movcc	r0, #1
 800854a:	f7f7 ff4b 	bl	80003e4 <__aeabi_ui2d>
 800854e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b9d3      	cbnz	r3, 800858c <_strtod_l+0xb84>
 8008556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800855a:	9012      	str	r0, [sp, #72]	; 0x48
 800855c:	9313      	str	r3, [sp, #76]	; 0x4c
 800855e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008562:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008564:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008568:	1a9f      	subs	r7, r3, r2
 800856a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800856e:	f001 fe33 	bl	800a1d8 <__ulp>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f7 ffad 	bl	80004d8 <__aeabi_dmul>
 800857e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008582:	f7f7 fdf3 	bl	800016c <__adddf3>
 8008586:	4680      	mov	r8, r0
 8008588:	4689      	mov	r9, r1
 800858a:	e77e      	b.n	800848a <_strtod_l+0xa82>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008594:	e7e3      	b.n	800855e <_strtod_l+0xb56>
 8008596:	a30e      	add	r3, pc, #56	; (adr r3, 80085d0 <_strtod_l+0xbc8>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f7f8 fa0e 	bl	80009bc <__aeabi_dcmplt>
 80085a0:	e7a1      	b.n	80084e6 <_strtod_l+0xade>
 80085a2:	2300      	movs	r3, #0
 80085a4:	930a      	str	r3, [sp, #40]	; 0x28
 80085a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	f7ff ba71 	b.w	8007a92 <_strtod_l+0x8a>
 80085b0:	2a65      	cmp	r2, #101	; 0x65
 80085b2:	f43f ab63 	beq.w	8007c7c <_strtod_l+0x274>
 80085b6:	2a45      	cmp	r2, #69	; 0x45
 80085b8:	f43f ab60 	beq.w	8007c7c <_strtod_l+0x274>
 80085bc:	2301      	movs	r3, #1
 80085be:	f7ff bb95 	b.w	8007cec <_strtod_l+0x2e4>
 80085c2:	bf00      	nop
 80085c4:	f3af 8000 	nop.w
 80085c8:	ffc00000 	.word	0xffc00000
 80085cc:	41dfffff 	.word	0x41dfffff
 80085d0:	94a03595 	.word	0x94a03595
 80085d4:	3fcfffff 	.word	0x3fcfffff

080085d8 <_strtod_r>:
 80085d8:	4b01      	ldr	r3, [pc, #4]	; (80085e0 <_strtod_r+0x8>)
 80085da:	f7ff ba15 	b.w	8007a08 <_strtod_l>
 80085de:	bf00      	nop
 80085e0:	200000f0 	.word	0x200000f0

080085e4 <_strtol_l.constprop.0>:
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ea:	4680      	mov	r8, r0
 80085ec:	d001      	beq.n	80085f2 <_strtol_l.constprop.0+0xe>
 80085ee:	2b24      	cmp	r3, #36	; 0x24
 80085f0:	d906      	bls.n	8008600 <_strtol_l.constprop.0+0x1c>
 80085f2:	f7fe fb03 	bl	8006bfc <__errno>
 80085f6:	2316      	movs	r3, #22
 80085f8:	6003      	str	r3, [r0, #0]
 80085fa:	2000      	movs	r0, #0
 80085fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008600:	460d      	mov	r5, r1
 8008602:	4f35      	ldr	r7, [pc, #212]	; (80086d8 <_strtol_l.constprop.0+0xf4>)
 8008604:	4628      	mov	r0, r5
 8008606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800860a:	5de6      	ldrb	r6, [r4, r7]
 800860c:	f016 0608 	ands.w	r6, r6, #8
 8008610:	d1f8      	bne.n	8008604 <_strtol_l.constprop.0+0x20>
 8008612:	2c2d      	cmp	r4, #45	; 0x2d
 8008614:	d12f      	bne.n	8008676 <_strtol_l.constprop.0+0x92>
 8008616:	2601      	movs	r6, #1
 8008618:	782c      	ldrb	r4, [r5, #0]
 800861a:	1c85      	adds	r5, r0, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d057      	beq.n	80086d0 <_strtol_l.constprop.0+0xec>
 8008620:	2b10      	cmp	r3, #16
 8008622:	d109      	bne.n	8008638 <_strtol_l.constprop.0+0x54>
 8008624:	2c30      	cmp	r4, #48	; 0x30
 8008626:	d107      	bne.n	8008638 <_strtol_l.constprop.0+0x54>
 8008628:	7828      	ldrb	r0, [r5, #0]
 800862a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800862e:	2858      	cmp	r0, #88	; 0x58
 8008630:	d149      	bne.n	80086c6 <_strtol_l.constprop.0+0xe2>
 8008632:	2310      	movs	r3, #16
 8008634:	786c      	ldrb	r4, [r5, #1]
 8008636:	3502      	adds	r5, #2
 8008638:	2700      	movs	r7, #0
 800863a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800863e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008642:	fbbe f9f3 	udiv	r9, lr, r3
 8008646:	4638      	mov	r0, r7
 8008648:	fb03 ea19 	mls	sl, r3, r9, lr
 800864c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008650:	f1bc 0f09 	cmp.w	ip, #9
 8008654:	d814      	bhi.n	8008680 <_strtol_l.constprop.0+0x9c>
 8008656:	4664      	mov	r4, ip
 8008658:	42a3      	cmp	r3, r4
 800865a:	dd22      	ble.n	80086a2 <_strtol_l.constprop.0+0xbe>
 800865c:	2f00      	cmp	r7, #0
 800865e:	db1d      	blt.n	800869c <_strtol_l.constprop.0+0xb8>
 8008660:	4581      	cmp	r9, r0
 8008662:	d31b      	bcc.n	800869c <_strtol_l.constprop.0+0xb8>
 8008664:	d101      	bne.n	800866a <_strtol_l.constprop.0+0x86>
 8008666:	45a2      	cmp	sl, r4
 8008668:	db18      	blt.n	800869c <_strtol_l.constprop.0+0xb8>
 800866a:	2701      	movs	r7, #1
 800866c:	fb00 4003 	mla	r0, r0, r3, r4
 8008670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008674:	e7ea      	b.n	800864c <_strtol_l.constprop.0+0x68>
 8008676:	2c2b      	cmp	r4, #43	; 0x2b
 8008678:	bf04      	itt	eq
 800867a:	782c      	ldrbeq	r4, [r5, #0]
 800867c:	1c85      	addeq	r5, r0, #2
 800867e:	e7cd      	b.n	800861c <_strtol_l.constprop.0+0x38>
 8008680:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008684:	f1bc 0f19 	cmp.w	ip, #25
 8008688:	d801      	bhi.n	800868e <_strtol_l.constprop.0+0xaa>
 800868a:	3c37      	subs	r4, #55	; 0x37
 800868c:	e7e4      	b.n	8008658 <_strtol_l.constprop.0+0x74>
 800868e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008692:	f1bc 0f19 	cmp.w	ip, #25
 8008696:	d804      	bhi.n	80086a2 <_strtol_l.constprop.0+0xbe>
 8008698:	3c57      	subs	r4, #87	; 0x57
 800869a:	e7dd      	b.n	8008658 <_strtol_l.constprop.0+0x74>
 800869c:	f04f 37ff 	mov.w	r7, #4294967295
 80086a0:	e7e6      	b.n	8008670 <_strtol_l.constprop.0+0x8c>
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	da07      	bge.n	80086b6 <_strtol_l.constprop.0+0xd2>
 80086a6:	2322      	movs	r3, #34	; 0x22
 80086a8:	4670      	mov	r0, lr
 80086aa:	f8c8 3000 	str.w	r3, [r8]
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	d0a4      	beq.n	80085fc <_strtol_l.constprop.0+0x18>
 80086b2:	1e69      	subs	r1, r5, #1
 80086b4:	e005      	b.n	80086c2 <_strtol_l.constprop.0+0xde>
 80086b6:	b106      	cbz	r6, 80086ba <_strtol_l.constprop.0+0xd6>
 80086b8:	4240      	negs	r0, r0
 80086ba:	2a00      	cmp	r2, #0
 80086bc:	d09e      	beq.n	80085fc <_strtol_l.constprop.0+0x18>
 80086be:	2f00      	cmp	r7, #0
 80086c0:	d1f7      	bne.n	80086b2 <_strtol_l.constprop.0+0xce>
 80086c2:	6011      	str	r1, [r2, #0]
 80086c4:	e79a      	b.n	80085fc <_strtol_l.constprop.0+0x18>
 80086c6:	2430      	movs	r4, #48	; 0x30
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1b5      	bne.n	8008638 <_strtol_l.constprop.0+0x54>
 80086cc:	2308      	movs	r3, #8
 80086ce:	e7b3      	b.n	8008638 <_strtol_l.constprop.0+0x54>
 80086d0:	2c30      	cmp	r4, #48	; 0x30
 80086d2:	d0a9      	beq.n	8008628 <_strtol_l.constprop.0+0x44>
 80086d4:	230a      	movs	r3, #10
 80086d6:	e7af      	b.n	8008638 <_strtol_l.constprop.0+0x54>
 80086d8:	0800b9d1 	.word	0x0800b9d1

080086dc <_strtol_r>:
 80086dc:	f7ff bf82 	b.w	80085e4 <_strtol_l.constprop.0>

080086e0 <quorem>:
 80086e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	6903      	ldr	r3, [r0, #16]
 80086e6:	690c      	ldr	r4, [r1, #16]
 80086e8:	4607      	mov	r7, r0
 80086ea:	42a3      	cmp	r3, r4
 80086ec:	f2c0 8082 	blt.w	80087f4 <quorem+0x114>
 80086f0:	3c01      	subs	r4, #1
 80086f2:	f100 0514 	add.w	r5, r0, #20
 80086f6:	f101 0814 	add.w	r8, r1, #20
 80086fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008708:	3301      	adds	r3, #1
 800870a:	429a      	cmp	r2, r3
 800870c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008718:	d331      	bcc.n	800877e <quorem+0x9e>
 800871a:	f04f 0e00 	mov.w	lr, #0
 800871e:	4640      	mov	r0, r8
 8008720:	46ac      	mov	ip, r5
 8008722:	46f2      	mov	sl, lr
 8008724:	f850 2b04 	ldr.w	r2, [r0], #4
 8008728:	b293      	uxth	r3, r2
 800872a:	fb06 e303 	mla	r3, r6, r3, lr
 800872e:	0c12      	lsrs	r2, r2, #16
 8008730:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008734:	b29b      	uxth	r3, r3
 8008736:	fb06 e202 	mla	r2, r6, r2, lr
 800873a:	ebaa 0303 	sub.w	r3, sl, r3
 800873e:	f8dc a000 	ldr.w	sl, [ip]
 8008742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008746:	fa1f fa8a 	uxth.w	sl, sl
 800874a:	4453      	add	r3, sl
 800874c:	f8dc a000 	ldr.w	sl, [ip]
 8008750:	b292      	uxth	r2, r2
 8008752:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800875a:	b29b      	uxth	r3, r3
 800875c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008760:	4581      	cmp	r9, r0
 8008762:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008766:	f84c 3b04 	str.w	r3, [ip], #4
 800876a:	d2db      	bcs.n	8008724 <quorem+0x44>
 800876c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008770:	b92b      	cbnz	r3, 800877e <quorem+0x9e>
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	3b04      	subs	r3, #4
 8008776:	429d      	cmp	r5, r3
 8008778:	461a      	mov	r2, r3
 800877a:	d32f      	bcc.n	80087dc <quorem+0xfc>
 800877c:	613c      	str	r4, [r7, #16]
 800877e:	4638      	mov	r0, r7
 8008780:	f001 fc82 	bl	800a088 <__mcmp>
 8008784:	2800      	cmp	r0, #0
 8008786:	db25      	blt.n	80087d4 <quorem+0xf4>
 8008788:	4628      	mov	r0, r5
 800878a:	f04f 0c00 	mov.w	ip, #0
 800878e:	3601      	adds	r6, #1
 8008790:	f858 1b04 	ldr.w	r1, [r8], #4
 8008794:	f8d0 e000 	ldr.w	lr, [r0]
 8008798:	b28b      	uxth	r3, r1
 800879a:	ebac 0303 	sub.w	r3, ip, r3
 800879e:	fa1f f28e 	uxth.w	r2, lr
 80087a2:	4413      	add	r3, r2
 80087a4:	0c0a      	lsrs	r2, r1, #16
 80087a6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087b4:	45c1      	cmp	r9, r8
 80087b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087ba:	f840 3b04 	str.w	r3, [r0], #4
 80087be:	d2e7      	bcs.n	8008790 <quorem+0xb0>
 80087c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087c8:	b922      	cbnz	r2, 80087d4 <quorem+0xf4>
 80087ca:	3b04      	subs	r3, #4
 80087cc:	429d      	cmp	r5, r3
 80087ce:	461a      	mov	r2, r3
 80087d0:	d30a      	bcc.n	80087e8 <quorem+0x108>
 80087d2:	613c      	str	r4, [r7, #16]
 80087d4:	4630      	mov	r0, r6
 80087d6:	b003      	add	sp, #12
 80087d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	3b04      	subs	r3, #4
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	d1cb      	bne.n	800877c <quorem+0x9c>
 80087e4:	3c01      	subs	r4, #1
 80087e6:	e7c6      	b.n	8008776 <quorem+0x96>
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	3b04      	subs	r3, #4
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d1f0      	bne.n	80087d2 <quorem+0xf2>
 80087f0:	3c01      	subs	r4, #1
 80087f2:	e7eb      	b.n	80087cc <quorem+0xec>
 80087f4:	2000      	movs	r0, #0
 80087f6:	e7ee      	b.n	80087d6 <quorem+0xf6>

080087f8 <_dtoa_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4616      	mov	r6, r2
 80087fe:	461f      	mov	r7, r3
 8008800:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008802:	b099      	sub	sp, #100	; 0x64
 8008804:	4605      	mov	r5, r0
 8008806:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800880a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800880e:	b974      	cbnz	r4, 800882e <_dtoa_r+0x36>
 8008810:	2010      	movs	r0, #16
 8008812:	f001 f949 	bl	8009aa8 <malloc>
 8008816:	4602      	mov	r2, r0
 8008818:	6268      	str	r0, [r5, #36]	; 0x24
 800881a:	b920      	cbnz	r0, 8008826 <_dtoa_r+0x2e>
 800881c:	21ea      	movs	r1, #234	; 0xea
 800881e:	4ba8      	ldr	r3, [pc, #672]	; (8008ac0 <_dtoa_r+0x2c8>)
 8008820:	48a8      	ldr	r0, [pc, #672]	; (8008ac4 <_dtoa_r+0x2cc>)
 8008822:	f002 f8a5 	bl	800a970 <__assert_func>
 8008826:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800882a:	6004      	str	r4, [r0, #0]
 800882c:	60c4      	str	r4, [r0, #12]
 800882e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	b151      	cbz	r1, 800884a <_dtoa_r+0x52>
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	2301      	movs	r3, #1
 8008838:	4093      	lsls	r3, r2
 800883a:	604a      	str	r2, [r1, #4]
 800883c:	608b      	str	r3, [r1, #8]
 800883e:	4628      	mov	r0, r5
 8008840:	f001 f99a 	bl	8009b78 <_Bfree>
 8008844:	2200      	movs	r2, #0
 8008846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	1e3b      	subs	r3, r7, #0
 800884c:	bfaf      	iteee	ge
 800884e:	2300      	movge	r3, #0
 8008850:	2201      	movlt	r2, #1
 8008852:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008856:	9305      	strlt	r3, [sp, #20]
 8008858:	bfa8      	it	ge
 800885a:	f8c8 3000 	strge.w	r3, [r8]
 800885e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008862:	4b99      	ldr	r3, [pc, #612]	; (8008ac8 <_dtoa_r+0x2d0>)
 8008864:	bfb8      	it	lt
 8008866:	f8c8 2000 	strlt.w	r2, [r8]
 800886a:	ea33 0309 	bics.w	r3, r3, r9
 800886e:	d119      	bne.n	80088a4 <_dtoa_r+0xac>
 8008870:	f242 730f 	movw	r3, #9999	; 0x270f
 8008874:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800887c:	4333      	orrs	r3, r6
 800887e:	f000 857f 	beq.w	8009380 <_dtoa_r+0xb88>
 8008882:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008884:	b953      	cbnz	r3, 800889c <_dtoa_r+0xa4>
 8008886:	4b91      	ldr	r3, [pc, #580]	; (8008acc <_dtoa_r+0x2d4>)
 8008888:	e022      	b.n	80088d0 <_dtoa_r+0xd8>
 800888a:	4b91      	ldr	r3, [pc, #580]	; (8008ad0 <_dtoa_r+0x2d8>)
 800888c:	9303      	str	r3, [sp, #12]
 800888e:	3308      	adds	r3, #8
 8008890:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	9803      	ldr	r0, [sp, #12]
 8008896:	b019      	add	sp, #100	; 0x64
 8008898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	4b8b      	ldr	r3, [pc, #556]	; (8008acc <_dtoa_r+0x2d4>)
 800889e:	9303      	str	r3, [sp, #12]
 80088a0:	3303      	adds	r3, #3
 80088a2:	e7f5      	b.n	8008890 <_dtoa_r+0x98>
 80088a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80088a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80088ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	f7f8 f878 	bl	80009a8 <__aeabi_dcmpeq>
 80088b8:	4680      	mov	r8, r0
 80088ba:	b158      	cbz	r0, 80088d4 <_dtoa_r+0xdc>
 80088bc:	2301      	movs	r3, #1
 80088be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8558 	beq.w	800937a <_dtoa_r+0xb82>
 80088ca:	4882      	ldr	r0, [pc, #520]	; (8008ad4 <_dtoa_r+0x2dc>)
 80088cc:	6018      	str	r0, [r3, #0]
 80088ce:	1e43      	subs	r3, r0, #1
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	e7df      	b.n	8008894 <_dtoa_r+0x9c>
 80088d4:	ab16      	add	r3, sp, #88	; 0x58
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	ab17      	add	r3, sp, #92	; 0x5c
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	4628      	mov	r0, r5
 80088de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80088e2:	f001 fcf3 	bl	800a2cc <__d2b>
 80088e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80088ea:	4683      	mov	fp, r0
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	d07f      	beq.n	80089f0 <_dtoa_r+0x1f8>
 80088f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80088fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008902:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008906:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800890a:	2200      	movs	r2, #0
 800890c:	4b72      	ldr	r3, [pc, #456]	; (8008ad8 <_dtoa_r+0x2e0>)
 800890e:	f7f7 fc2b 	bl	8000168 <__aeabi_dsub>
 8008912:	a365      	add	r3, pc, #404	; (adr r3, 8008aa8 <_dtoa_r+0x2b0>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	f7f7 fdde 	bl	80004d8 <__aeabi_dmul>
 800891c:	a364      	add	r3, pc, #400	; (adr r3, 8008ab0 <_dtoa_r+0x2b8>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fc23 	bl	800016c <__adddf3>
 8008926:	4606      	mov	r6, r0
 8008928:	4620      	mov	r0, r4
 800892a:	460f      	mov	r7, r1
 800892c:	f7f7 fd6a 	bl	8000404 <__aeabi_i2d>
 8008930:	a361      	add	r3, pc, #388	; (adr r3, 8008ab8 <_dtoa_r+0x2c0>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fdcf 	bl	80004d8 <__aeabi_dmul>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f7 fc13 	bl	800016c <__adddf3>
 8008946:	4606      	mov	r6, r0
 8008948:	460f      	mov	r7, r1
 800894a:	f7f8 f875 	bl	8000a38 <__aeabi_d2iz>
 800894e:	2200      	movs	r2, #0
 8008950:	4682      	mov	sl, r0
 8008952:	2300      	movs	r3, #0
 8008954:	4630      	mov	r0, r6
 8008956:	4639      	mov	r1, r7
 8008958:	f7f8 f830 	bl	80009bc <__aeabi_dcmplt>
 800895c:	b148      	cbz	r0, 8008972 <_dtoa_r+0x17a>
 800895e:	4650      	mov	r0, sl
 8008960:	f7f7 fd50 	bl	8000404 <__aeabi_i2d>
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	f7f8 f81e 	bl	80009a8 <__aeabi_dcmpeq>
 800896c:	b908      	cbnz	r0, 8008972 <_dtoa_r+0x17a>
 800896e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008972:	f1ba 0f16 	cmp.w	sl, #22
 8008976:	d858      	bhi.n	8008a2a <_dtoa_r+0x232>
 8008978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800897c:	4b57      	ldr	r3, [pc, #348]	; (8008adc <_dtoa_r+0x2e4>)
 800897e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f8 f819 	bl	80009bc <__aeabi_dcmplt>
 800898a:	2800      	cmp	r0, #0
 800898c:	d04f      	beq.n	8008a2e <_dtoa_r+0x236>
 800898e:	2300      	movs	r3, #0
 8008990:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008994:	930f      	str	r3, [sp, #60]	; 0x3c
 8008996:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008998:	1b1c      	subs	r4, r3, r4
 800899a:	1e63      	subs	r3, r4, #1
 800899c:	9309      	str	r3, [sp, #36]	; 0x24
 800899e:	bf49      	itett	mi
 80089a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80089a4:	2300      	movpl	r3, #0
 80089a6:	9306      	strmi	r3, [sp, #24]
 80089a8:	2300      	movmi	r3, #0
 80089aa:	bf54      	ite	pl
 80089ac:	9306      	strpl	r3, [sp, #24]
 80089ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80089b0:	f1ba 0f00 	cmp.w	sl, #0
 80089b4:	db3d      	blt.n	8008a32 <_dtoa_r+0x23a>
 80089b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089bc:	4453      	add	r3, sl
 80089be:	9309      	str	r3, [sp, #36]	; 0x24
 80089c0:	2300      	movs	r3, #0
 80089c2:	930a      	str	r3, [sp, #40]	; 0x28
 80089c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	f200 808c 	bhi.w	8008ae4 <_dtoa_r+0x2ec>
 80089cc:	2b05      	cmp	r3, #5
 80089ce:	bfc4      	itt	gt
 80089d0:	3b04      	subgt	r3, #4
 80089d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80089d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089d6:	bfc8      	it	gt
 80089d8:	2400      	movgt	r4, #0
 80089da:	f1a3 0302 	sub.w	r3, r3, #2
 80089de:	bfd8      	it	le
 80089e0:	2401      	movle	r4, #1
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	f200 808a 	bhi.w	8008afc <_dtoa_r+0x304>
 80089e8:	e8df f003 	tbb	[pc, r3]
 80089ec:	5b4d4f2d 	.word	0x5b4d4f2d
 80089f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80089f4:	441c      	add	r4, r3
 80089f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	bfc3      	ittte	gt
 80089fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a02:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008a06:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a0a:	f1c3 0320 	rsble	r3, r3, #32
 8008a0e:	bfc6      	itte	gt
 8008a10:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a14:	4318      	orrgt	r0, r3
 8008a16:	fa06 f003 	lslle.w	r0, r6, r3
 8008a1a:	f7f7 fce3 	bl	80003e4 <__aeabi_ui2d>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008a24:	3c01      	subs	r4, #1
 8008a26:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a28:	e76f      	b.n	800890a <_dtoa_r+0x112>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e7b2      	b.n	8008994 <_dtoa_r+0x19c>
 8008a2e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a30:	e7b1      	b.n	8008996 <_dtoa_r+0x19e>
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	eba3 030a 	sub.w	r3, r3, sl
 8008a38:	9306      	str	r3, [sp, #24]
 8008a3a:	f1ca 0300 	rsb	r3, sl, #0
 8008a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a40:	2300      	movs	r3, #0
 8008a42:	930e      	str	r3, [sp, #56]	; 0x38
 8008a44:	e7be      	b.n	80089c4 <_dtoa_r+0x1cc>
 8008a46:	2300      	movs	r3, #0
 8008a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dc58      	bgt.n	8008b02 <_dtoa_r+0x30a>
 8008a50:	f04f 0901 	mov.w	r9, #1
 8008a54:	464b      	mov	r3, r9
 8008a56:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a5a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008a5e:	2200      	movs	r2, #0
 8008a60:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008a62:	6042      	str	r2, [r0, #4]
 8008a64:	2204      	movs	r2, #4
 8008a66:	f102 0614 	add.w	r6, r2, #20
 8008a6a:	429e      	cmp	r6, r3
 8008a6c:	6841      	ldr	r1, [r0, #4]
 8008a6e:	d94e      	bls.n	8008b0e <_dtoa_r+0x316>
 8008a70:	4628      	mov	r0, r5
 8008a72:	f001 f841 	bl	8009af8 <_Balloc>
 8008a76:	9003      	str	r0, [sp, #12]
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d14c      	bne.n	8008b16 <_dtoa_r+0x31e>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a82:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <_dtoa_r+0x2e8>)
 8008a84:	e6cc      	b.n	8008820 <_dtoa_r+0x28>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e7de      	b.n	8008a48 <_dtoa_r+0x250>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a90:	eb0a 0903 	add.w	r9, sl, r3
 8008a94:	f109 0301 	add.w	r3, r9, #1
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	9308      	str	r3, [sp, #32]
 8008a9c:	bfb8      	it	lt
 8008a9e:	2301      	movlt	r3, #1
 8008aa0:	e7dd      	b.n	8008a5e <_dtoa_r+0x266>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e7f2      	b.n	8008a8c <_dtoa_r+0x294>
 8008aa6:	bf00      	nop
 8008aa8:	636f4361 	.word	0x636f4361
 8008aac:	3fd287a7 	.word	0x3fd287a7
 8008ab0:	8b60c8b3 	.word	0x8b60c8b3
 8008ab4:	3fc68a28 	.word	0x3fc68a28
 8008ab8:	509f79fb 	.word	0x509f79fb
 8008abc:	3fd34413 	.word	0x3fd34413
 8008ac0:	0800bade 	.word	0x0800bade
 8008ac4:	0800baf5 	.word	0x0800baf5
 8008ac8:	7ff00000 	.word	0x7ff00000
 8008acc:	0800bada 	.word	0x0800bada
 8008ad0:	0800bad1 	.word	0x0800bad1
 8008ad4:	0800b951 	.word	0x0800b951
 8008ad8:	3ff80000 	.word	0x3ff80000
 8008adc:	0800bc60 	.word	0x0800bc60
 8008ae0:	0800bb50 	.word	0x0800bb50
 8008ae4:	2401      	movs	r4, #1
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008aea:	9322      	str	r3, [sp, #136]	; 0x88
 8008aec:	f04f 39ff 	mov.w	r9, #4294967295
 8008af0:	2200      	movs	r2, #0
 8008af2:	2312      	movs	r3, #18
 8008af4:	f8cd 9020 	str.w	r9, [sp, #32]
 8008af8:	9223      	str	r2, [sp, #140]	; 0x8c
 8008afa:	e7b0      	b.n	8008a5e <_dtoa_r+0x266>
 8008afc:	2301      	movs	r3, #1
 8008afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b00:	e7f4      	b.n	8008aec <_dtoa_r+0x2f4>
 8008b02:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008b06:	464b      	mov	r3, r9
 8008b08:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b0c:	e7a7      	b.n	8008a5e <_dtoa_r+0x266>
 8008b0e:	3101      	adds	r1, #1
 8008b10:	6041      	str	r1, [r0, #4]
 8008b12:	0052      	lsls	r2, r2, #1
 8008b14:	e7a7      	b.n	8008a66 <_dtoa_r+0x26e>
 8008b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b18:	9a03      	ldr	r2, [sp, #12]
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	2b0e      	cmp	r3, #14
 8008b20:	f200 80a8 	bhi.w	8008c74 <_dtoa_r+0x47c>
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	f000 80a5 	beq.w	8008c74 <_dtoa_r+0x47c>
 8008b2a:	f1ba 0f00 	cmp.w	sl, #0
 8008b2e:	dd34      	ble.n	8008b9a <_dtoa_r+0x3a2>
 8008b30:	4a9a      	ldr	r2, [pc, #616]	; (8008d9c <_dtoa_r+0x5a4>)
 8008b32:	f00a 030f 	and.w	r3, sl, #15
 8008b36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b3a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b46:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008b4a:	d016      	beq.n	8008b7a <_dtoa_r+0x382>
 8008b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b50:	4b93      	ldr	r3, [pc, #588]	; (8008da0 <_dtoa_r+0x5a8>)
 8008b52:	2703      	movs	r7, #3
 8008b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b58:	f7f7 fde8 	bl	800072c <__aeabi_ddiv>
 8008b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b60:	f004 040f 	and.w	r4, r4, #15
 8008b64:	4e8e      	ldr	r6, [pc, #568]	; (8008da0 <_dtoa_r+0x5a8>)
 8008b66:	b954      	cbnz	r4, 8008b7e <_dtoa_r+0x386>
 8008b68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b70:	f7f7 fddc 	bl	800072c <__aeabi_ddiv>
 8008b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b78:	e029      	b.n	8008bce <_dtoa_r+0x3d6>
 8008b7a:	2702      	movs	r7, #2
 8008b7c:	e7f2      	b.n	8008b64 <_dtoa_r+0x36c>
 8008b7e:	07e1      	lsls	r1, r4, #31
 8008b80:	d508      	bpl.n	8008b94 <_dtoa_r+0x39c>
 8008b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b8a:	f7f7 fca5 	bl	80004d8 <__aeabi_dmul>
 8008b8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b92:	3701      	adds	r7, #1
 8008b94:	1064      	asrs	r4, r4, #1
 8008b96:	3608      	adds	r6, #8
 8008b98:	e7e5      	b.n	8008b66 <_dtoa_r+0x36e>
 8008b9a:	f000 80a5 	beq.w	8008ce8 <_dtoa_r+0x4f0>
 8008b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ba2:	f1ca 0400 	rsb	r4, sl, #0
 8008ba6:	4b7d      	ldr	r3, [pc, #500]	; (8008d9c <_dtoa_r+0x5a4>)
 8008ba8:	f004 020f 	and.w	r2, r4, #15
 8008bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 fc90 	bl	80004d8 <__aeabi_dmul>
 8008bb8:	2702      	movs	r7, #2
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bc0:	4e77      	ldr	r6, [pc, #476]	; (8008da0 <_dtoa_r+0x5a8>)
 8008bc2:	1124      	asrs	r4, r4, #4
 8008bc4:	2c00      	cmp	r4, #0
 8008bc6:	f040 8084 	bne.w	8008cd2 <_dtoa_r+0x4da>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1d2      	bne.n	8008b74 <_dtoa_r+0x37c>
 8008bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 808b 	beq.w	8008cec <_dtoa_r+0x4f4>
 8008bd6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008bda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008bde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008be2:	2200      	movs	r2, #0
 8008be4:	4b6f      	ldr	r3, [pc, #444]	; (8008da4 <_dtoa_r+0x5ac>)
 8008be6:	f7f7 fee9 	bl	80009bc <__aeabi_dcmplt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d07e      	beq.n	8008cec <_dtoa_r+0x4f4>
 8008bee:	9b08      	ldr	r3, [sp, #32]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d07b      	beq.n	8008cec <_dtoa_r+0x4f4>
 8008bf4:	f1b9 0f00 	cmp.w	r9, #0
 8008bf8:	dd38      	ble.n	8008c6c <_dtoa_r+0x474>
 8008bfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bfe:	2200      	movs	r2, #0
 8008c00:	4b69      	ldr	r3, [pc, #420]	; (8008da8 <_dtoa_r+0x5b0>)
 8008c02:	f7f7 fc69 	bl	80004d8 <__aeabi_dmul>
 8008c06:	464c      	mov	r4, r9
 8008c08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c0c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008c10:	3701      	adds	r7, #1
 8008c12:	4638      	mov	r0, r7
 8008c14:	f7f7 fbf6 	bl	8000404 <__aeabi_i2d>
 8008c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c1c:	f7f7 fc5c 	bl	80004d8 <__aeabi_dmul>
 8008c20:	2200      	movs	r2, #0
 8008c22:	4b62      	ldr	r3, [pc, #392]	; (8008dac <_dtoa_r+0x5b4>)
 8008c24:	f7f7 faa2 	bl	800016c <__adddf3>
 8008c28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c30:	9611      	str	r6, [sp, #68]	; 0x44
 8008c32:	2c00      	cmp	r4, #0
 8008c34:	d15d      	bne.n	8008cf2 <_dtoa_r+0x4fa>
 8008c36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4b5c      	ldr	r3, [pc, #368]	; (8008db0 <_dtoa_r+0x5b8>)
 8008c3e:	f7f7 fa93 	bl	8000168 <__aeabi_dsub>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c4a:	4633      	mov	r3, r6
 8008c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c4e:	f7f7 fed3 	bl	80009f8 <__aeabi_dcmpgt>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f040 829c 	bne.w	8009190 <_dtoa_r+0x998>
 8008c58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c5e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c62:	f7f7 feab 	bl	80009bc <__aeabi_dcmplt>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f040 8290 	bne.w	800918c <_dtoa_r+0x994>
 8008c6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008c70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f2c0 8152 	blt.w	8008f20 <_dtoa_r+0x728>
 8008c7c:	f1ba 0f0e 	cmp.w	sl, #14
 8008c80:	f300 814e 	bgt.w	8008f20 <_dtoa_r+0x728>
 8008c84:	4b45      	ldr	r3, [pc, #276]	; (8008d9c <_dtoa_r+0x5a4>)
 8008c86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008c92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f280 80db 	bge.w	8008e50 <_dtoa_r+0x658>
 8008c9a:	9b08      	ldr	r3, [sp, #32]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f300 80d7 	bgt.w	8008e50 <_dtoa_r+0x658>
 8008ca2:	f040 8272 	bne.w	800918a <_dtoa_r+0x992>
 8008ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008caa:	2200      	movs	r2, #0
 8008cac:	4b40      	ldr	r3, [pc, #256]	; (8008db0 <_dtoa_r+0x5b8>)
 8008cae:	f7f7 fc13 	bl	80004d8 <__aeabi_dmul>
 8008cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cb6:	f7f7 fe95 	bl	80009e4 <__aeabi_dcmpge>
 8008cba:	9c08      	ldr	r4, [sp, #32]
 8008cbc:	4626      	mov	r6, r4
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f040 8248 	bne.w	8009154 <_dtoa_r+0x95c>
 8008cc4:	2331      	movs	r3, #49	; 0x31
 8008cc6:	9f03      	ldr	r7, [sp, #12]
 8008cc8:	f10a 0a01 	add.w	sl, sl, #1
 8008ccc:	f807 3b01 	strb.w	r3, [r7], #1
 8008cd0:	e244      	b.n	800915c <_dtoa_r+0x964>
 8008cd2:	07e2      	lsls	r2, r4, #31
 8008cd4:	d505      	bpl.n	8008ce2 <_dtoa_r+0x4ea>
 8008cd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cda:	f7f7 fbfd 	bl	80004d8 <__aeabi_dmul>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	3701      	adds	r7, #1
 8008ce2:	1064      	asrs	r4, r4, #1
 8008ce4:	3608      	adds	r6, #8
 8008ce6:	e76d      	b.n	8008bc4 <_dtoa_r+0x3cc>
 8008ce8:	2702      	movs	r7, #2
 8008cea:	e770      	b.n	8008bce <_dtoa_r+0x3d6>
 8008cec:	46d0      	mov	r8, sl
 8008cee:	9c08      	ldr	r4, [sp, #32]
 8008cf0:	e78f      	b.n	8008c12 <_dtoa_r+0x41a>
 8008cf2:	9903      	ldr	r1, [sp, #12]
 8008cf4:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <_dtoa_r+0x5a4>)
 8008cf6:	4421      	add	r1, r4
 8008cf8:	9112      	str	r1, [sp, #72]	; 0x48
 8008cfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d00:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008d04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d055      	beq.n	8008db8 <_dtoa_r+0x5c0>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	4929      	ldr	r1, [pc, #164]	; (8008db4 <_dtoa_r+0x5bc>)
 8008d10:	f7f7 fd0c 	bl	800072c <__aeabi_ddiv>
 8008d14:	463b      	mov	r3, r7
 8008d16:	4632      	mov	r2, r6
 8008d18:	f7f7 fa26 	bl	8000168 <__aeabi_dsub>
 8008d1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d20:	9f03      	ldr	r7, [sp, #12]
 8008d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d26:	f7f7 fe87 	bl	8000a38 <__aeabi_d2iz>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	f7f7 fb6a 	bl	8000404 <__aeabi_i2d>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d38:	f7f7 fa16 	bl	8000168 <__aeabi_dsub>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	3430      	adds	r4, #48	; 0x30
 8008d42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d4a:	f807 4b01 	strb.w	r4, [r7], #1
 8008d4e:	f7f7 fe35 	bl	80009bc <__aeabi_dcmplt>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d174      	bne.n	8008e40 <_dtoa_r+0x648>
 8008d56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	4911      	ldr	r1, [pc, #68]	; (8008da4 <_dtoa_r+0x5ac>)
 8008d5e:	f7f7 fa03 	bl	8000168 <__aeabi_dsub>
 8008d62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d66:	f7f7 fe29 	bl	80009bc <__aeabi_dcmplt>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f040 80b7 	bne.w	8008ede <_dtoa_r+0x6e6>
 8008d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d72:	429f      	cmp	r7, r3
 8008d74:	f43f af7a 	beq.w	8008c6c <_dtoa_r+0x474>
 8008d78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <_dtoa_r+0x5b0>)
 8008d80:	f7f7 fbaa 	bl	80004d8 <__aeabi_dmul>
 8008d84:	2200      	movs	r2, #0
 8008d86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d8e:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <_dtoa_r+0x5b0>)
 8008d90:	f7f7 fba2 	bl	80004d8 <__aeabi_dmul>
 8008d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d98:	e7c3      	b.n	8008d22 <_dtoa_r+0x52a>
 8008d9a:	bf00      	nop
 8008d9c:	0800bc60 	.word	0x0800bc60
 8008da0:	0800bc38 	.word	0x0800bc38
 8008da4:	3ff00000 	.word	0x3ff00000
 8008da8:	40240000 	.word	0x40240000
 8008dac:	401c0000 	.word	0x401c0000
 8008db0:	40140000 	.word	0x40140000
 8008db4:	3fe00000 	.word	0x3fe00000
 8008db8:	4630      	mov	r0, r6
 8008dba:	4639      	mov	r1, r7
 8008dbc:	f7f7 fb8c 	bl	80004d8 <__aeabi_dmul>
 8008dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dc6:	9c03      	ldr	r4, [sp, #12]
 8008dc8:	9314      	str	r3, [sp, #80]	; 0x50
 8008dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dce:	f7f7 fe33 	bl	8000a38 <__aeabi_d2iz>
 8008dd2:	9015      	str	r0, [sp, #84]	; 0x54
 8008dd4:	f7f7 fb16 	bl	8000404 <__aeabi_i2d>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008de0:	f7f7 f9c2 	bl	8000168 <__aeabi_dsub>
 8008de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de6:	4606      	mov	r6, r0
 8008de8:	3330      	adds	r3, #48	; 0x30
 8008dea:	f804 3b01 	strb.w	r3, [r4], #1
 8008dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008df0:	460f      	mov	r7, r1
 8008df2:	429c      	cmp	r4, r3
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	d124      	bne.n	8008e44 <_dtoa_r+0x64c>
 8008dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008dfe:	4bb0      	ldr	r3, [pc, #704]	; (80090c0 <_dtoa_r+0x8c8>)
 8008e00:	f7f7 f9b4 	bl	800016c <__adddf3>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	f7f7 fdf4 	bl	80009f8 <__aeabi_dcmpgt>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d163      	bne.n	8008edc <_dtoa_r+0x6e4>
 8008e14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e18:	2000      	movs	r0, #0
 8008e1a:	49a9      	ldr	r1, [pc, #676]	; (80090c0 <_dtoa_r+0x8c8>)
 8008e1c:	f7f7 f9a4 	bl	8000168 <__aeabi_dsub>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4630      	mov	r0, r6
 8008e26:	4639      	mov	r1, r7
 8008e28:	f7f7 fdc8 	bl	80009bc <__aeabi_dcmplt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f43f af1d 	beq.w	8008c6c <_dtoa_r+0x474>
 8008e32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008e34:	1e7b      	subs	r3, r7, #1
 8008e36:	9314      	str	r3, [sp, #80]	; 0x50
 8008e38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008e3c:	2b30      	cmp	r3, #48	; 0x30
 8008e3e:	d0f8      	beq.n	8008e32 <_dtoa_r+0x63a>
 8008e40:	46c2      	mov	sl, r8
 8008e42:	e03b      	b.n	8008ebc <_dtoa_r+0x6c4>
 8008e44:	4b9f      	ldr	r3, [pc, #636]	; (80090c4 <_dtoa_r+0x8cc>)
 8008e46:	f7f7 fb47 	bl	80004d8 <__aeabi_dmul>
 8008e4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e4e:	e7bc      	b.n	8008dca <_dtoa_r+0x5d2>
 8008e50:	9f03      	ldr	r7, [sp, #12]
 8008e52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fc65 	bl	800072c <__aeabi_ddiv>
 8008e62:	f7f7 fde9 	bl	8000a38 <__aeabi_d2iz>
 8008e66:	4604      	mov	r4, r0
 8008e68:	f7f7 facc 	bl	8000404 <__aeabi_i2d>
 8008e6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e70:	f7f7 fb32 	bl	80004d8 <__aeabi_dmul>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4640      	mov	r0, r8
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	f7f7 f974 	bl	8000168 <__aeabi_dsub>
 8008e80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008e84:	f807 6b01 	strb.w	r6, [r7], #1
 8008e88:	9e03      	ldr	r6, [sp, #12]
 8008e8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008e8e:	1bbe      	subs	r6, r7, r6
 8008e90:	45b4      	cmp	ip, r6
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	d136      	bne.n	8008f06 <_dtoa_r+0x70e>
 8008e98:	f7f7 f968 	bl	800016c <__adddf3>
 8008e9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	4689      	mov	r9, r1
 8008ea4:	f7f7 fda8 	bl	80009f8 <__aeabi_dcmpgt>
 8008ea8:	bb58      	cbnz	r0, 8008f02 <_dtoa_r+0x70a>
 8008eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 fd79 	bl	80009a8 <__aeabi_dcmpeq>
 8008eb6:	b108      	cbz	r0, 8008ebc <_dtoa_r+0x6c4>
 8008eb8:	07e1      	lsls	r1, r4, #31
 8008eba:	d422      	bmi.n	8008f02 <_dtoa_r+0x70a>
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	4659      	mov	r1, fp
 8008ec0:	f000 fe5a 	bl	8009b78 <_Bfree>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	703b      	strb	r3, [r7, #0]
 8008ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008eca:	f10a 0001 	add.w	r0, sl, #1
 8008ece:	6018      	str	r0, [r3, #0]
 8008ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f43f acde 	beq.w	8008894 <_dtoa_r+0x9c>
 8008ed8:	601f      	str	r7, [r3, #0]
 8008eda:	e4db      	b.n	8008894 <_dtoa_r+0x9c>
 8008edc:	4627      	mov	r7, r4
 8008ede:	463b      	mov	r3, r7
 8008ee0:	461f      	mov	r7, r3
 8008ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ee6:	2a39      	cmp	r2, #57	; 0x39
 8008ee8:	d107      	bne.n	8008efa <_dtoa_r+0x702>
 8008eea:	9a03      	ldr	r2, [sp, #12]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d1f7      	bne.n	8008ee0 <_dtoa_r+0x6e8>
 8008ef0:	2230      	movs	r2, #48	; 0x30
 8008ef2:	9903      	ldr	r1, [sp, #12]
 8008ef4:	f108 0801 	add.w	r8, r8, #1
 8008ef8:	700a      	strb	r2, [r1, #0]
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	3201      	adds	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	e79e      	b.n	8008e40 <_dtoa_r+0x648>
 8008f02:	46d0      	mov	r8, sl
 8008f04:	e7eb      	b.n	8008ede <_dtoa_r+0x6e6>
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b6e      	ldr	r3, [pc, #440]	; (80090c4 <_dtoa_r+0x8cc>)
 8008f0a:	f7f7 fae5 	bl	80004d8 <__aeabi_dmul>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2300      	movs	r3, #0
 8008f12:	4680      	mov	r8, r0
 8008f14:	4689      	mov	r9, r1
 8008f16:	f7f7 fd47 	bl	80009a8 <__aeabi_dcmpeq>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d09b      	beq.n	8008e56 <_dtoa_r+0x65e>
 8008f1e:	e7cd      	b.n	8008ebc <_dtoa_r+0x6c4>
 8008f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	f000 80d0 	beq.w	80090c8 <_dtoa_r+0x8d0>
 8008f28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f2a:	2a01      	cmp	r2, #1
 8008f2c:	f300 80ae 	bgt.w	800908c <_dtoa_r+0x894>
 8008f30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	f000 80a6 	beq.w	8009084 <_dtoa_r+0x88c>
 8008f38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f3e:	9f06      	ldr	r7, [sp, #24]
 8008f40:	9a06      	ldr	r2, [sp, #24]
 8008f42:	2101      	movs	r1, #1
 8008f44:	441a      	add	r2, r3
 8008f46:	9206      	str	r2, [sp, #24]
 8008f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	441a      	add	r2, r3
 8008f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f50:	f000 ff12 	bl	8009d78 <__i2b>
 8008f54:	4606      	mov	r6, r0
 8008f56:	2f00      	cmp	r7, #0
 8008f58:	dd0c      	ble.n	8008f74 <_dtoa_r+0x77c>
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dd09      	ble.n	8008f74 <_dtoa_r+0x77c>
 8008f60:	42bb      	cmp	r3, r7
 8008f62:	bfa8      	it	ge
 8008f64:	463b      	movge	r3, r7
 8008f66:	9a06      	ldr	r2, [sp, #24]
 8008f68:	1aff      	subs	r7, r7, r3
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	9206      	str	r2, [sp, #24]
 8008f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	9309      	str	r3, [sp, #36]	; 0x24
 8008f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f76:	b1f3      	cbz	r3, 8008fb6 <_dtoa_r+0x7be>
 8008f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80a8 	beq.w	80090d0 <_dtoa_r+0x8d8>
 8008f80:	2c00      	cmp	r4, #0
 8008f82:	dd10      	ble.n	8008fa6 <_dtoa_r+0x7ae>
 8008f84:	4631      	mov	r1, r6
 8008f86:	4622      	mov	r2, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 ffb3 	bl	8009ef4 <__pow5mult>
 8008f8e:	465a      	mov	r2, fp
 8008f90:	4601      	mov	r1, r0
 8008f92:	4606      	mov	r6, r0
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 ff05 	bl	8009da4 <__multiply>
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 fdea 	bl	8009b78 <_Bfree>
 8008fa4:	46c3      	mov	fp, r8
 8008fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa8:	1b1a      	subs	r2, r3, r4
 8008faa:	d004      	beq.n	8008fb6 <_dtoa_r+0x7be>
 8008fac:	4659      	mov	r1, fp
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 ffa0 	bl	8009ef4 <__pow5mult>
 8008fb4:	4683      	mov	fp, r0
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f000 fedd 	bl	8009d78 <__i2b>
 8008fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f340 8086 	ble.w	80090d4 <_dtoa_r+0x8dc>
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f000 ff91 	bl	8009ef4 <__pow5mult>
 8008fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	dd7f      	ble.n	80090da <_dtoa_r+0x8e2>
 8008fda:	f04f 0800 	mov.w	r8, #0
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fe4:	6918      	ldr	r0, [r3, #16]
 8008fe6:	f000 fe79 	bl	8009cdc <__hi0bits>
 8008fea:	f1c0 0020 	rsb	r0, r0, #32
 8008fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff0:	4418      	add	r0, r3
 8008ff2:	f010 001f 	ands.w	r0, r0, #31
 8008ff6:	f000 8092 	beq.w	800911e <_dtoa_r+0x926>
 8008ffa:	f1c0 0320 	rsb	r3, r0, #32
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	f340 808a 	ble.w	8009118 <_dtoa_r+0x920>
 8009004:	f1c0 001c 	rsb	r0, r0, #28
 8009008:	9b06      	ldr	r3, [sp, #24]
 800900a:	4407      	add	r7, r0
 800900c:	4403      	add	r3, r0
 800900e:	9306      	str	r3, [sp, #24]
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	4403      	add	r3, r0
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	9b06      	ldr	r3, [sp, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	dd05      	ble.n	8009028 <_dtoa_r+0x830>
 800901c:	4659      	mov	r1, fp
 800901e:	461a      	mov	r2, r3
 8009020:	4628      	mov	r0, r5
 8009022:	f000 ffc1 	bl	8009fa8 <__lshift>
 8009026:	4683      	mov	fp, r0
 8009028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	dd05      	ble.n	800903a <_dtoa_r+0x842>
 800902e:	4621      	mov	r1, r4
 8009030:	461a      	mov	r2, r3
 8009032:	4628      	mov	r0, r5
 8009034:	f000 ffb8 	bl	8009fa8 <__lshift>
 8009038:	4604      	mov	r4, r0
 800903a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d070      	beq.n	8009122 <_dtoa_r+0x92a>
 8009040:	4621      	mov	r1, r4
 8009042:	4658      	mov	r0, fp
 8009044:	f001 f820 	bl	800a088 <__mcmp>
 8009048:	2800      	cmp	r0, #0
 800904a:	da6a      	bge.n	8009122 <_dtoa_r+0x92a>
 800904c:	2300      	movs	r3, #0
 800904e:	4659      	mov	r1, fp
 8009050:	220a      	movs	r2, #10
 8009052:	4628      	mov	r0, r5
 8009054:	f000 fdb2 	bl	8009bbc <__multadd>
 8009058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800905a:	4683      	mov	fp, r0
 800905c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8194 	beq.w	800938e <_dtoa_r+0xb96>
 8009066:	4631      	mov	r1, r6
 8009068:	2300      	movs	r3, #0
 800906a:	220a      	movs	r2, #10
 800906c:	4628      	mov	r0, r5
 800906e:	f000 fda5 	bl	8009bbc <__multadd>
 8009072:	f1b9 0f00 	cmp.w	r9, #0
 8009076:	4606      	mov	r6, r0
 8009078:	f300 8093 	bgt.w	80091a2 <_dtoa_r+0x9aa>
 800907c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800907e:	2b02      	cmp	r3, #2
 8009080:	dc57      	bgt.n	8009132 <_dtoa_r+0x93a>
 8009082:	e08e      	b.n	80091a2 <_dtoa_r+0x9aa>
 8009084:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800908a:	e757      	b.n	8008f3c <_dtoa_r+0x744>
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	1e5c      	subs	r4, r3, #1
 8009090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009092:	42a3      	cmp	r3, r4
 8009094:	bfb7      	itett	lt
 8009096:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009098:	1b1c      	subge	r4, r3, r4
 800909a:	1ae2      	sublt	r2, r4, r3
 800909c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800909e:	bfbe      	ittt	lt
 80090a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80090a2:	189b      	addlt	r3, r3, r2
 80090a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80090a6:	9b08      	ldr	r3, [sp, #32]
 80090a8:	bfb8      	it	lt
 80090aa:	2400      	movlt	r4, #0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfbb      	ittet	lt
 80090b0:	9b06      	ldrlt	r3, [sp, #24]
 80090b2:	9a08      	ldrlt	r2, [sp, #32]
 80090b4:	9f06      	ldrge	r7, [sp, #24]
 80090b6:	1a9f      	sublt	r7, r3, r2
 80090b8:	bfac      	ite	ge
 80090ba:	9b08      	ldrge	r3, [sp, #32]
 80090bc:	2300      	movlt	r3, #0
 80090be:	e73f      	b.n	8008f40 <_dtoa_r+0x748>
 80090c0:	3fe00000 	.word	0x3fe00000
 80090c4:	40240000 	.word	0x40240000
 80090c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090ca:	9f06      	ldr	r7, [sp, #24]
 80090cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80090ce:	e742      	b.n	8008f56 <_dtoa_r+0x75e>
 80090d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090d2:	e76b      	b.n	8008fac <_dtoa_r+0x7b4>
 80090d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	dc19      	bgt.n	800910e <_dtoa_r+0x916>
 80090da:	9b04      	ldr	r3, [sp, #16]
 80090dc:	b9bb      	cbnz	r3, 800910e <_dtoa_r+0x916>
 80090de:	9b05      	ldr	r3, [sp, #20]
 80090e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090e4:	b99b      	cbnz	r3, 800910e <_dtoa_r+0x916>
 80090e6:	9b05      	ldr	r3, [sp, #20]
 80090e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090ec:	0d1b      	lsrs	r3, r3, #20
 80090ee:	051b      	lsls	r3, r3, #20
 80090f0:	b183      	cbz	r3, 8009114 <_dtoa_r+0x91c>
 80090f2:	f04f 0801 	mov.w	r8, #1
 80090f6:	9b06      	ldr	r3, [sp, #24]
 80090f8:	3301      	adds	r3, #1
 80090fa:	9306      	str	r3, [sp, #24]
 80090fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fe:	3301      	adds	r3, #1
 8009100:	9309      	str	r3, [sp, #36]	; 0x24
 8009102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	f47f af6a 	bne.w	8008fde <_dtoa_r+0x7e6>
 800910a:	2001      	movs	r0, #1
 800910c:	e76f      	b.n	8008fee <_dtoa_r+0x7f6>
 800910e:	f04f 0800 	mov.w	r8, #0
 8009112:	e7f6      	b.n	8009102 <_dtoa_r+0x90a>
 8009114:	4698      	mov	r8, r3
 8009116:	e7f4      	b.n	8009102 <_dtoa_r+0x90a>
 8009118:	f43f af7d 	beq.w	8009016 <_dtoa_r+0x81e>
 800911c:	4618      	mov	r0, r3
 800911e:	301c      	adds	r0, #28
 8009120:	e772      	b.n	8009008 <_dtoa_r+0x810>
 8009122:	9b08      	ldr	r3, [sp, #32]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dc36      	bgt.n	8009196 <_dtoa_r+0x99e>
 8009128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800912a:	2b02      	cmp	r3, #2
 800912c:	dd33      	ble.n	8009196 <_dtoa_r+0x99e>
 800912e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009132:	f1b9 0f00 	cmp.w	r9, #0
 8009136:	d10d      	bne.n	8009154 <_dtoa_r+0x95c>
 8009138:	4621      	mov	r1, r4
 800913a:	464b      	mov	r3, r9
 800913c:	2205      	movs	r2, #5
 800913e:	4628      	mov	r0, r5
 8009140:	f000 fd3c 	bl	8009bbc <__multadd>
 8009144:	4601      	mov	r1, r0
 8009146:	4604      	mov	r4, r0
 8009148:	4658      	mov	r0, fp
 800914a:	f000 ff9d 	bl	800a088 <__mcmp>
 800914e:	2800      	cmp	r0, #0
 8009150:	f73f adb8 	bgt.w	8008cc4 <_dtoa_r+0x4cc>
 8009154:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009156:	9f03      	ldr	r7, [sp, #12]
 8009158:	ea6f 0a03 	mvn.w	sl, r3
 800915c:	f04f 0800 	mov.w	r8, #0
 8009160:	4621      	mov	r1, r4
 8009162:	4628      	mov	r0, r5
 8009164:	f000 fd08 	bl	8009b78 <_Bfree>
 8009168:	2e00      	cmp	r6, #0
 800916a:	f43f aea7 	beq.w	8008ebc <_dtoa_r+0x6c4>
 800916e:	f1b8 0f00 	cmp.w	r8, #0
 8009172:	d005      	beq.n	8009180 <_dtoa_r+0x988>
 8009174:	45b0      	cmp	r8, r6
 8009176:	d003      	beq.n	8009180 <_dtoa_r+0x988>
 8009178:	4641      	mov	r1, r8
 800917a:	4628      	mov	r0, r5
 800917c:	f000 fcfc 	bl	8009b78 <_Bfree>
 8009180:	4631      	mov	r1, r6
 8009182:	4628      	mov	r0, r5
 8009184:	f000 fcf8 	bl	8009b78 <_Bfree>
 8009188:	e698      	b.n	8008ebc <_dtoa_r+0x6c4>
 800918a:	2400      	movs	r4, #0
 800918c:	4626      	mov	r6, r4
 800918e:	e7e1      	b.n	8009154 <_dtoa_r+0x95c>
 8009190:	46c2      	mov	sl, r8
 8009192:	4626      	mov	r6, r4
 8009194:	e596      	b.n	8008cc4 <_dtoa_r+0x4cc>
 8009196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 80fd 	beq.w	800939c <_dtoa_r+0xba4>
 80091a2:	2f00      	cmp	r7, #0
 80091a4:	dd05      	ble.n	80091b2 <_dtoa_r+0x9ba>
 80091a6:	4631      	mov	r1, r6
 80091a8:	463a      	mov	r2, r7
 80091aa:	4628      	mov	r0, r5
 80091ac:	f000 fefc 	bl	8009fa8 <__lshift>
 80091b0:	4606      	mov	r6, r0
 80091b2:	f1b8 0f00 	cmp.w	r8, #0
 80091b6:	d05c      	beq.n	8009272 <_dtoa_r+0xa7a>
 80091b8:	4628      	mov	r0, r5
 80091ba:	6871      	ldr	r1, [r6, #4]
 80091bc:	f000 fc9c 	bl	8009af8 <_Balloc>
 80091c0:	4607      	mov	r7, r0
 80091c2:	b928      	cbnz	r0, 80091d0 <_dtoa_r+0x9d8>
 80091c4:	4602      	mov	r2, r0
 80091c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ca:	4b7f      	ldr	r3, [pc, #508]	; (80093c8 <_dtoa_r+0xbd0>)
 80091cc:	f7ff bb28 	b.w	8008820 <_dtoa_r+0x28>
 80091d0:	6932      	ldr	r2, [r6, #16]
 80091d2:	f106 010c 	add.w	r1, r6, #12
 80091d6:	3202      	adds	r2, #2
 80091d8:	0092      	lsls	r2, r2, #2
 80091da:	300c      	adds	r0, #12
 80091dc:	f7fd fd48 	bl	8006c70 <memcpy>
 80091e0:	2201      	movs	r2, #1
 80091e2:	4639      	mov	r1, r7
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 fedf 	bl	8009fa8 <__lshift>
 80091ea:	46b0      	mov	r8, r6
 80091ec:	4606      	mov	r6, r0
 80091ee:	9b03      	ldr	r3, [sp, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	9308      	str	r3, [sp, #32]
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	444b      	add	r3, r9
 80091f8:	930a      	str	r3, [sp, #40]	; 0x28
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	9309      	str	r3, [sp, #36]	; 0x24
 8009202:	9b08      	ldr	r3, [sp, #32]
 8009204:	4621      	mov	r1, r4
 8009206:	3b01      	subs	r3, #1
 8009208:	4658      	mov	r0, fp
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	f7ff fa68 	bl	80086e0 <quorem>
 8009210:	4603      	mov	r3, r0
 8009212:	4641      	mov	r1, r8
 8009214:	3330      	adds	r3, #48	; 0x30
 8009216:	9006      	str	r0, [sp, #24]
 8009218:	4658      	mov	r0, fp
 800921a:	930b      	str	r3, [sp, #44]	; 0x2c
 800921c:	f000 ff34 	bl	800a088 <__mcmp>
 8009220:	4632      	mov	r2, r6
 8009222:	4681      	mov	r9, r0
 8009224:	4621      	mov	r1, r4
 8009226:	4628      	mov	r0, r5
 8009228:	f000 ff4a 	bl	800a0c0 <__mdiff>
 800922c:	68c2      	ldr	r2, [r0, #12]
 800922e:	4607      	mov	r7, r0
 8009230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009232:	bb02      	cbnz	r2, 8009276 <_dtoa_r+0xa7e>
 8009234:	4601      	mov	r1, r0
 8009236:	4658      	mov	r0, fp
 8009238:	f000 ff26 	bl	800a088 <__mcmp>
 800923c:	4602      	mov	r2, r0
 800923e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009240:	4639      	mov	r1, r7
 8009242:	4628      	mov	r0, r5
 8009244:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009248:	f000 fc96 	bl	8009b78 <_Bfree>
 800924c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800924e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009250:	9f08      	ldr	r7, [sp, #32]
 8009252:	ea43 0102 	orr.w	r1, r3, r2
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	430b      	orrs	r3, r1
 800925a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800925c:	d10d      	bne.n	800927a <_dtoa_r+0xa82>
 800925e:	2b39      	cmp	r3, #57	; 0x39
 8009260:	d029      	beq.n	80092b6 <_dtoa_r+0xabe>
 8009262:	f1b9 0f00 	cmp.w	r9, #0
 8009266:	dd01      	ble.n	800926c <_dtoa_r+0xa74>
 8009268:	9b06      	ldr	r3, [sp, #24]
 800926a:	3331      	adds	r3, #49	; 0x31
 800926c:	9a04      	ldr	r2, [sp, #16]
 800926e:	7013      	strb	r3, [r2, #0]
 8009270:	e776      	b.n	8009160 <_dtoa_r+0x968>
 8009272:	4630      	mov	r0, r6
 8009274:	e7b9      	b.n	80091ea <_dtoa_r+0x9f2>
 8009276:	2201      	movs	r2, #1
 8009278:	e7e2      	b.n	8009240 <_dtoa_r+0xa48>
 800927a:	f1b9 0f00 	cmp.w	r9, #0
 800927e:	db06      	blt.n	800928e <_dtoa_r+0xa96>
 8009280:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009282:	ea41 0909 	orr.w	r9, r1, r9
 8009286:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009288:	ea59 0101 	orrs.w	r1, r9, r1
 800928c:	d120      	bne.n	80092d0 <_dtoa_r+0xad8>
 800928e:	2a00      	cmp	r2, #0
 8009290:	ddec      	ble.n	800926c <_dtoa_r+0xa74>
 8009292:	4659      	mov	r1, fp
 8009294:	2201      	movs	r2, #1
 8009296:	4628      	mov	r0, r5
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	f000 fe85 	bl	8009fa8 <__lshift>
 800929e:	4621      	mov	r1, r4
 80092a0:	4683      	mov	fp, r0
 80092a2:	f000 fef1 	bl	800a088 <__mcmp>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	dc02      	bgt.n	80092b2 <_dtoa_r+0xaba>
 80092ac:	d1de      	bne.n	800926c <_dtoa_r+0xa74>
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d5dc      	bpl.n	800926c <_dtoa_r+0xa74>
 80092b2:	2b39      	cmp	r3, #57	; 0x39
 80092b4:	d1d8      	bne.n	8009268 <_dtoa_r+0xa70>
 80092b6:	2339      	movs	r3, #57	; 0x39
 80092b8:	9a04      	ldr	r2, [sp, #16]
 80092ba:	7013      	strb	r3, [r2, #0]
 80092bc:	463b      	mov	r3, r7
 80092be:	461f      	mov	r7, r3
 80092c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	2a39      	cmp	r2, #57	; 0x39
 80092c8:	d050      	beq.n	800936c <_dtoa_r+0xb74>
 80092ca:	3201      	adds	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	e747      	b.n	8009160 <_dtoa_r+0x968>
 80092d0:	2a00      	cmp	r2, #0
 80092d2:	dd03      	ble.n	80092dc <_dtoa_r+0xae4>
 80092d4:	2b39      	cmp	r3, #57	; 0x39
 80092d6:	d0ee      	beq.n	80092b6 <_dtoa_r+0xabe>
 80092d8:	3301      	adds	r3, #1
 80092da:	e7c7      	b.n	800926c <_dtoa_r+0xa74>
 80092dc:	9a08      	ldr	r2, [sp, #32]
 80092de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092e4:	428a      	cmp	r2, r1
 80092e6:	d02a      	beq.n	800933e <_dtoa_r+0xb46>
 80092e8:	4659      	mov	r1, fp
 80092ea:	2300      	movs	r3, #0
 80092ec:	220a      	movs	r2, #10
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 fc64 	bl	8009bbc <__multadd>
 80092f4:	45b0      	cmp	r8, r6
 80092f6:	4683      	mov	fp, r0
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	f04f 020a 	mov.w	r2, #10
 8009300:	4641      	mov	r1, r8
 8009302:	4628      	mov	r0, r5
 8009304:	d107      	bne.n	8009316 <_dtoa_r+0xb1e>
 8009306:	f000 fc59 	bl	8009bbc <__multadd>
 800930a:	4680      	mov	r8, r0
 800930c:	4606      	mov	r6, r0
 800930e:	9b08      	ldr	r3, [sp, #32]
 8009310:	3301      	adds	r3, #1
 8009312:	9308      	str	r3, [sp, #32]
 8009314:	e775      	b.n	8009202 <_dtoa_r+0xa0a>
 8009316:	f000 fc51 	bl	8009bbc <__multadd>
 800931a:	4631      	mov	r1, r6
 800931c:	4680      	mov	r8, r0
 800931e:	2300      	movs	r3, #0
 8009320:	220a      	movs	r2, #10
 8009322:	4628      	mov	r0, r5
 8009324:	f000 fc4a 	bl	8009bbc <__multadd>
 8009328:	4606      	mov	r6, r0
 800932a:	e7f0      	b.n	800930e <_dtoa_r+0xb16>
 800932c:	f1b9 0f00 	cmp.w	r9, #0
 8009330:	bfcc      	ite	gt
 8009332:	464f      	movgt	r7, r9
 8009334:	2701      	movle	r7, #1
 8009336:	f04f 0800 	mov.w	r8, #0
 800933a:	9a03      	ldr	r2, [sp, #12]
 800933c:	4417      	add	r7, r2
 800933e:	4659      	mov	r1, fp
 8009340:	2201      	movs	r2, #1
 8009342:	4628      	mov	r0, r5
 8009344:	9308      	str	r3, [sp, #32]
 8009346:	f000 fe2f 	bl	8009fa8 <__lshift>
 800934a:	4621      	mov	r1, r4
 800934c:	4683      	mov	fp, r0
 800934e:	f000 fe9b 	bl	800a088 <__mcmp>
 8009352:	2800      	cmp	r0, #0
 8009354:	dcb2      	bgt.n	80092bc <_dtoa_r+0xac4>
 8009356:	d102      	bne.n	800935e <_dtoa_r+0xb66>
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	07db      	lsls	r3, r3, #31
 800935c:	d4ae      	bmi.n	80092bc <_dtoa_r+0xac4>
 800935e:	463b      	mov	r3, r7
 8009360:	461f      	mov	r7, r3
 8009362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009366:	2a30      	cmp	r2, #48	; 0x30
 8009368:	d0fa      	beq.n	8009360 <_dtoa_r+0xb68>
 800936a:	e6f9      	b.n	8009160 <_dtoa_r+0x968>
 800936c:	9a03      	ldr	r2, [sp, #12]
 800936e:	429a      	cmp	r2, r3
 8009370:	d1a5      	bne.n	80092be <_dtoa_r+0xac6>
 8009372:	2331      	movs	r3, #49	; 0x31
 8009374:	f10a 0a01 	add.w	sl, sl, #1
 8009378:	e779      	b.n	800926e <_dtoa_r+0xa76>
 800937a:	4b14      	ldr	r3, [pc, #80]	; (80093cc <_dtoa_r+0xbd4>)
 800937c:	f7ff baa8 	b.w	80088d0 <_dtoa_r+0xd8>
 8009380:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009382:	2b00      	cmp	r3, #0
 8009384:	f47f aa81 	bne.w	800888a <_dtoa_r+0x92>
 8009388:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <_dtoa_r+0xbd8>)
 800938a:	f7ff baa1 	b.w	80088d0 <_dtoa_r+0xd8>
 800938e:	f1b9 0f00 	cmp.w	r9, #0
 8009392:	dc03      	bgt.n	800939c <_dtoa_r+0xba4>
 8009394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009396:	2b02      	cmp	r3, #2
 8009398:	f73f aecb 	bgt.w	8009132 <_dtoa_r+0x93a>
 800939c:	9f03      	ldr	r7, [sp, #12]
 800939e:	4621      	mov	r1, r4
 80093a0:	4658      	mov	r0, fp
 80093a2:	f7ff f99d 	bl	80086e0 <quorem>
 80093a6:	9a03      	ldr	r2, [sp, #12]
 80093a8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093ac:	f807 3b01 	strb.w	r3, [r7], #1
 80093b0:	1aba      	subs	r2, r7, r2
 80093b2:	4591      	cmp	r9, r2
 80093b4:	ddba      	ble.n	800932c <_dtoa_r+0xb34>
 80093b6:	4659      	mov	r1, fp
 80093b8:	2300      	movs	r3, #0
 80093ba:	220a      	movs	r2, #10
 80093bc:	4628      	mov	r0, r5
 80093be:	f000 fbfd 	bl	8009bbc <__multadd>
 80093c2:	4683      	mov	fp, r0
 80093c4:	e7eb      	b.n	800939e <_dtoa_r+0xba6>
 80093c6:	bf00      	nop
 80093c8:	0800bb50 	.word	0x0800bb50
 80093cc:	0800b950 	.word	0x0800b950
 80093d0:	0800bad1 	.word	0x0800bad1

080093d4 <rshift>:
 80093d4:	6903      	ldr	r3, [r0, #16]
 80093d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093de:	f100 0414 	add.w	r4, r0, #20
 80093e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093e6:	dd46      	ble.n	8009476 <rshift+0xa2>
 80093e8:	f011 011f 	ands.w	r1, r1, #31
 80093ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093f4:	d10c      	bne.n	8009410 <rshift+0x3c>
 80093f6:	4629      	mov	r1, r5
 80093f8:	f100 0710 	add.w	r7, r0, #16
 80093fc:	42b1      	cmp	r1, r6
 80093fe:	d335      	bcc.n	800946c <rshift+0x98>
 8009400:	1a9b      	subs	r3, r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	1eea      	subs	r2, r5, #3
 8009406:	4296      	cmp	r6, r2
 8009408:	bf38      	it	cc
 800940a:	2300      	movcc	r3, #0
 800940c:	4423      	add	r3, r4
 800940e:	e015      	b.n	800943c <rshift+0x68>
 8009410:	46a1      	mov	r9, r4
 8009412:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009416:	f1c1 0820 	rsb	r8, r1, #32
 800941a:	40cf      	lsrs	r7, r1
 800941c:	f105 0e04 	add.w	lr, r5, #4
 8009420:	4576      	cmp	r6, lr
 8009422:	46f4      	mov	ip, lr
 8009424:	d816      	bhi.n	8009454 <rshift+0x80>
 8009426:	1a9a      	subs	r2, r3, r2
 8009428:	0092      	lsls	r2, r2, #2
 800942a:	3a04      	subs	r2, #4
 800942c:	3501      	adds	r5, #1
 800942e:	42ae      	cmp	r6, r5
 8009430:	bf38      	it	cc
 8009432:	2200      	movcc	r2, #0
 8009434:	18a3      	adds	r3, r4, r2
 8009436:	50a7      	str	r7, [r4, r2]
 8009438:	b107      	cbz	r7, 800943c <rshift+0x68>
 800943a:	3304      	adds	r3, #4
 800943c:	42a3      	cmp	r3, r4
 800943e:	eba3 0204 	sub.w	r2, r3, r4
 8009442:	bf08      	it	eq
 8009444:	2300      	moveq	r3, #0
 8009446:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800944a:	6102      	str	r2, [r0, #16]
 800944c:	bf08      	it	eq
 800944e:	6143      	streq	r3, [r0, #20]
 8009450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009454:	f8dc c000 	ldr.w	ip, [ip]
 8009458:	fa0c fc08 	lsl.w	ip, ip, r8
 800945c:	ea4c 0707 	orr.w	r7, ip, r7
 8009460:	f849 7b04 	str.w	r7, [r9], #4
 8009464:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009468:	40cf      	lsrs	r7, r1
 800946a:	e7d9      	b.n	8009420 <rshift+0x4c>
 800946c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009470:	f847 cf04 	str.w	ip, [r7, #4]!
 8009474:	e7c2      	b.n	80093fc <rshift+0x28>
 8009476:	4623      	mov	r3, r4
 8009478:	e7e0      	b.n	800943c <rshift+0x68>

0800947a <__hexdig_fun>:
 800947a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800947e:	2b09      	cmp	r3, #9
 8009480:	d802      	bhi.n	8009488 <__hexdig_fun+0xe>
 8009482:	3820      	subs	r0, #32
 8009484:	b2c0      	uxtb	r0, r0
 8009486:	4770      	bx	lr
 8009488:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800948c:	2b05      	cmp	r3, #5
 800948e:	d801      	bhi.n	8009494 <__hexdig_fun+0x1a>
 8009490:	3847      	subs	r0, #71	; 0x47
 8009492:	e7f7      	b.n	8009484 <__hexdig_fun+0xa>
 8009494:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009498:	2b05      	cmp	r3, #5
 800949a:	d801      	bhi.n	80094a0 <__hexdig_fun+0x26>
 800949c:	3827      	subs	r0, #39	; 0x27
 800949e:	e7f1      	b.n	8009484 <__hexdig_fun+0xa>
 80094a0:	2000      	movs	r0, #0
 80094a2:	4770      	bx	lr

080094a4 <__gethex>:
 80094a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a8:	b08b      	sub	sp, #44	; 0x2c
 80094aa:	9305      	str	r3, [sp, #20]
 80094ac:	4bb2      	ldr	r3, [pc, #712]	; (8009778 <__gethex+0x2d4>)
 80094ae:	9002      	str	r0, [sp, #8]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	468b      	mov	fp, r1
 80094b4:	4618      	mov	r0, r3
 80094b6:	4690      	mov	r8, r2
 80094b8:	9303      	str	r3, [sp, #12]
 80094ba:	f7f6 fe49 	bl	8000150 <strlen>
 80094be:	4682      	mov	sl, r0
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	f8db 2000 	ldr.w	r2, [fp]
 80094c6:	4403      	add	r3, r0
 80094c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80094cc:	9306      	str	r3, [sp, #24]
 80094ce:	1c93      	adds	r3, r2, #2
 80094d0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80094d4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80094d8:	32fe      	adds	r2, #254	; 0xfe
 80094da:	18d1      	adds	r1, r2, r3
 80094dc:	461f      	mov	r7, r3
 80094de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094e2:	9101      	str	r1, [sp, #4]
 80094e4:	2830      	cmp	r0, #48	; 0x30
 80094e6:	d0f8      	beq.n	80094da <__gethex+0x36>
 80094e8:	f7ff ffc7 	bl	800947a <__hexdig_fun>
 80094ec:	4604      	mov	r4, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d13a      	bne.n	8009568 <__gethex+0xc4>
 80094f2:	4652      	mov	r2, sl
 80094f4:	4638      	mov	r0, r7
 80094f6:	9903      	ldr	r1, [sp, #12]
 80094f8:	f001 fa18 	bl	800a92c <strncmp>
 80094fc:	4605      	mov	r5, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	d166      	bne.n	80095d0 <__gethex+0x12c>
 8009502:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009506:	eb07 060a 	add.w	r6, r7, sl
 800950a:	f7ff ffb6 	bl	800947a <__hexdig_fun>
 800950e:	2800      	cmp	r0, #0
 8009510:	d060      	beq.n	80095d4 <__gethex+0x130>
 8009512:	4633      	mov	r3, r6
 8009514:	7818      	ldrb	r0, [r3, #0]
 8009516:	461f      	mov	r7, r3
 8009518:	2830      	cmp	r0, #48	; 0x30
 800951a:	f103 0301 	add.w	r3, r3, #1
 800951e:	d0f9      	beq.n	8009514 <__gethex+0x70>
 8009520:	f7ff ffab 	bl	800947a <__hexdig_fun>
 8009524:	2301      	movs	r3, #1
 8009526:	fab0 f480 	clz	r4, r0
 800952a:	4635      	mov	r5, r6
 800952c:	0964      	lsrs	r4, r4, #5
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	463a      	mov	r2, r7
 8009532:	4616      	mov	r6, r2
 8009534:	7830      	ldrb	r0, [r6, #0]
 8009536:	3201      	adds	r2, #1
 8009538:	f7ff ff9f 	bl	800947a <__hexdig_fun>
 800953c:	2800      	cmp	r0, #0
 800953e:	d1f8      	bne.n	8009532 <__gethex+0x8e>
 8009540:	4652      	mov	r2, sl
 8009542:	4630      	mov	r0, r6
 8009544:	9903      	ldr	r1, [sp, #12]
 8009546:	f001 f9f1 	bl	800a92c <strncmp>
 800954a:	b980      	cbnz	r0, 800956e <__gethex+0xca>
 800954c:	b94d      	cbnz	r5, 8009562 <__gethex+0xbe>
 800954e:	eb06 050a 	add.w	r5, r6, sl
 8009552:	462a      	mov	r2, r5
 8009554:	4616      	mov	r6, r2
 8009556:	7830      	ldrb	r0, [r6, #0]
 8009558:	3201      	adds	r2, #1
 800955a:	f7ff ff8e 	bl	800947a <__hexdig_fun>
 800955e:	2800      	cmp	r0, #0
 8009560:	d1f8      	bne.n	8009554 <__gethex+0xb0>
 8009562:	1bad      	subs	r5, r5, r6
 8009564:	00ad      	lsls	r5, r5, #2
 8009566:	e004      	b.n	8009572 <__gethex+0xce>
 8009568:	2400      	movs	r4, #0
 800956a:	4625      	mov	r5, r4
 800956c:	e7e0      	b.n	8009530 <__gethex+0x8c>
 800956e:	2d00      	cmp	r5, #0
 8009570:	d1f7      	bne.n	8009562 <__gethex+0xbe>
 8009572:	7833      	ldrb	r3, [r6, #0]
 8009574:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009578:	2b50      	cmp	r3, #80	; 0x50
 800957a:	d139      	bne.n	80095f0 <__gethex+0x14c>
 800957c:	7873      	ldrb	r3, [r6, #1]
 800957e:	2b2b      	cmp	r3, #43	; 0x2b
 8009580:	d02a      	beq.n	80095d8 <__gethex+0x134>
 8009582:	2b2d      	cmp	r3, #45	; 0x2d
 8009584:	d02c      	beq.n	80095e0 <__gethex+0x13c>
 8009586:	f04f 0900 	mov.w	r9, #0
 800958a:	1c71      	adds	r1, r6, #1
 800958c:	7808      	ldrb	r0, [r1, #0]
 800958e:	f7ff ff74 	bl	800947a <__hexdig_fun>
 8009592:	1e43      	subs	r3, r0, #1
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b18      	cmp	r3, #24
 8009598:	d82a      	bhi.n	80095f0 <__gethex+0x14c>
 800959a:	f1a0 0210 	sub.w	r2, r0, #16
 800959e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095a2:	f7ff ff6a 	bl	800947a <__hexdig_fun>
 80095a6:	1e43      	subs	r3, r0, #1
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b18      	cmp	r3, #24
 80095ac:	d91b      	bls.n	80095e6 <__gethex+0x142>
 80095ae:	f1b9 0f00 	cmp.w	r9, #0
 80095b2:	d000      	beq.n	80095b6 <__gethex+0x112>
 80095b4:	4252      	negs	r2, r2
 80095b6:	4415      	add	r5, r2
 80095b8:	f8cb 1000 	str.w	r1, [fp]
 80095bc:	b1d4      	cbz	r4, 80095f4 <__gethex+0x150>
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bf14      	ite	ne
 80095c4:	2700      	movne	r7, #0
 80095c6:	2706      	moveq	r7, #6
 80095c8:	4638      	mov	r0, r7
 80095ca:	b00b      	add	sp, #44	; 0x2c
 80095cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d0:	463e      	mov	r6, r7
 80095d2:	4625      	mov	r5, r4
 80095d4:	2401      	movs	r4, #1
 80095d6:	e7cc      	b.n	8009572 <__gethex+0xce>
 80095d8:	f04f 0900 	mov.w	r9, #0
 80095dc:	1cb1      	adds	r1, r6, #2
 80095de:	e7d5      	b.n	800958c <__gethex+0xe8>
 80095e0:	f04f 0901 	mov.w	r9, #1
 80095e4:	e7fa      	b.n	80095dc <__gethex+0x138>
 80095e6:	230a      	movs	r3, #10
 80095e8:	fb03 0202 	mla	r2, r3, r2, r0
 80095ec:	3a10      	subs	r2, #16
 80095ee:	e7d6      	b.n	800959e <__gethex+0xfa>
 80095f0:	4631      	mov	r1, r6
 80095f2:	e7e1      	b.n	80095b8 <__gethex+0x114>
 80095f4:	4621      	mov	r1, r4
 80095f6:	1bf3      	subs	r3, r6, r7
 80095f8:	3b01      	subs	r3, #1
 80095fa:	2b07      	cmp	r3, #7
 80095fc:	dc0a      	bgt.n	8009614 <__gethex+0x170>
 80095fe:	9802      	ldr	r0, [sp, #8]
 8009600:	f000 fa7a 	bl	8009af8 <_Balloc>
 8009604:	4604      	mov	r4, r0
 8009606:	b940      	cbnz	r0, 800961a <__gethex+0x176>
 8009608:	4602      	mov	r2, r0
 800960a:	21de      	movs	r1, #222	; 0xde
 800960c:	4b5b      	ldr	r3, [pc, #364]	; (800977c <__gethex+0x2d8>)
 800960e:	485c      	ldr	r0, [pc, #368]	; (8009780 <__gethex+0x2dc>)
 8009610:	f001 f9ae 	bl	800a970 <__assert_func>
 8009614:	3101      	adds	r1, #1
 8009616:	105b      	asrs	r3, r3, #1
 8009618:	e7ef      	b.n	80095fa <__gethex+0x156>
 800961a:	f04f 0b00 	mov.w	fp, #0
 800961e:	f100 0914 	add.w	r9, r0, #20
 8009622:	f1ca 0301 	rsb	r3, sl, #1
 8009626:	f8cd 9010 	str.w	r9, [sp, #16]
 800962a:	f8cd b004 	str.w	fp, [sp, #4]
 800962e:	9308      	str	r3, [sp, #32]
 8009630:	42b7      	cmp	r7, r6
 8009632:	d33f      	bcc.n	80096b4 <__gethex+0x210>
 8009634:	9f04      	ldr	r7, [sp, #16]
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	f847 3b04 	str.w	r3, [r7], #4
 800963c:	eba7 0709 	sub.w	r7, r7, r9
 8009640:	10bf      	asrs	r7, r7, #2
 8009642:	6127      	str	r7, [r4, #16]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fb49 	bl	8009cdc <__hi0bits>
 800964a:	017f      	lsls	r7, r7, #5
 800964c:	f8d8 6000 	ldr.w	r6, [r8]
 8009650:	1a3f      	subs	r7, r7, r0
 8009652:	42b7      	cmp	r7, r6
 8009654:	dd62      	ble.n	800971c <__gethex+0x278>
 8009656:	1bbf      	subs	r7, r7, r6
 8009658:	4639      	mov	r1, r7
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fee3 	bl	800a426 <__any_on>
 8009660:	4682      	mov	sl, r0
 8009662:	b1a8      	cbz	r0, 8009690 <__gethex+0x1ec>
 8009664:	f04f 0a01 	mov.w	sl, #1
 8009668:	1e7b      	subs	r3, r7, #1
 800966a:	1159      	asrs	r1, r3, #5
 800966c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009670:	f003 021f 	and.w	r2, r3, #31
 8009674:	fa0a f202 	lsl.w	r2, sl, r2
 8009678:	420a      	tst	r2, r1
 800967a:	d009      	beq.n	8009690 <__gethex+0x1ec>
 800967c:	4553      	cmp	r3, sl
 800967e:	dd05      	ble.n	800968c <__gethex+0x1e8>
 8009680:	4620      	mov	r0, r4
 8009682:	1eb9      	subs	r1, r7, #2
 8009684:	f000 fecf 	bl	800a426 <__any_on>
 8009688:	2800      	cmp	r0, #0
 800968a:	d144      	bne.n	8009716 <__gethex+0x272>
 800968c:	f04f 0a02 	mov.w	sl, #2
 8009690:	4639      	mov	r1, r7
 8009692:	4620      	mov	r0, r4
 8009694:	f7ff fe9e 	bl	80093d4 <rshift>
 8009698:	443d      	add	r5, r7
 800969a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800969e:	42ab      	cmp	r3, r5
 80096a0:	da4a      	bge.n	8009738 <__gethex+0x294>
 80096a2:	4621      	mov	r1, r4
 80096a4:	9802      	ldr	r0, [sp, #8]
 80096a6:	f000 fa67 	bl	8009b78 <_Bfree>
 80096aa:	2300      	movs	r3, #0
 80096ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096ae:	27a3      	movs	r7, #163	; 0xa3
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	e789      	b.n	80095c8 <__gethex+0x124>
 80096b4:	1e73      	subs	r3, r6, #1
 80096b6:	9a06      	ldr	r2, [sp, #24]
 80096b8:	9307      	str	r3, [sp, #28]
 80096ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096be:	4293      	cmp	r3, r2
 80096c0:	d019      	beq.n	80096f6 <__gethex+0x252>
 80096c2:	f1bb 0f20 	cmp.w	fp, #32
 80096c6:	d107      	bne.n	80096d8 <__gethex+0x234>
 80096c8:	9b04      	ldr	r3, [sp, #16]
 80096ca:	9a01      	ldr	r2, [sp, #4]
 80096cc:	f843 2b04 	str.w	r2, [r3], #4
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	2300      	movs	r3, #0
 80096d4:	469b      	mov	fp, r3
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80096dc:	f7ff fecd 	bl	800947a <__hexdig_fun>
 80096e0:	9b01      	ldr	r3, [sp, #4]
 80096e2:	f000 000f 	and.w	r0, r0, #15
 80096e6:	fa00 f00b 	lsl.w	r0, r0, fp
 80096ea:	4303      	orrs	r3, r0
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	f10b 0b04 	add.w	fp, fp, #4
 80096f2:	9b07      	ldr	r3, [sp, #28]
 80096f4:	e00d      	b.n	8009712 <__gethex+0x26e>
 80096f6:	9a08      	ldr	r2, [sp, #32]
 80096f8:	1e73      	subs	r3, r6, #1
 80096fa:	4413      	add	r3, r2
 80096fc:	42bb      	cmp	r3, r7
 80096fe:	d3e0      	bcc.n	80096c2 <__gethex+0x21e>
 8009700:	4618      	mov	r0, r3
 8009702:	4652      	mov	r2, sl
 8009704:	9903      	ldr	r1, [sp, #12]
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	f001 f910 	bl	800a92c <strncmp>
 800970c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970e:	2800      	cmp	r0, #0
 8009710:	d1d7      	bne.n	80096c2 <__gethex+0x21e>
 8009712:	461e      	mov	r6, r3
 8009714:	e78c      	b.n	8009630 <__gethex+0x18c>
 8009716:	f04f 0a03 	mov.w	sl, #3
 800971a:	e7b9      	b.n	8009690 <__gethex+0x1ec>
 800971c:	da09      	bge.n	8009732 <__gethex+0x28e>
 800971e:	1bf7      	subs	r7, r6, r7
 8009720:	4621      	mov	r1, r4
 8009722:	463a      	mov	r2, r7
 8009724:	9802      	ldr	r0, [sp, #8]
 8009726:	f000 fc3f 	bl	8009fa8 <__lshift>
 800972a:	4604      	mov	r4, r0
 800972c:	1bed      	subs	r5, r5, r7
 800972e:	f100 0914 	add.w	r9, r0, #20
 8009732:	f04f 0a00 	mov.w	sl, #0
 8009736:	e7b0      	b.n	800969a <__gethex+0x1f6>
 8009738:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800973c:	42a8      	cmp	r0, r5
 800973e:	dd72      	ble.n	8009826 <__gethex+0x382>
 8009740:	1b45      	subs	r5, r0, r5
 8009742:	42ae      	cmp	r6, r5
 8009744:	dc35      	bgt.n	80097b2 <__gethex+0x30e>
 8009746:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800974a:	2b02      	cmp	r3, #2
 800974c:	d029      	beq.n	80097a2 <__gethex+0x2fe>
 800974e:	2b03      	cmp	r3, #3
 8009750:	d02b      	beq.n	80097aa <__gethex+0x306>
 8009752:	2b01      	cmp	r3, #1
 8009754:	d11c      	bne.n	8009790 <__gethex+0x2ec>
 8009756:	42ae      	cmp	r6, r5
 8009758:	d11a      	bne.n	8009790 <__gethex+0x2ec>
 800975a:	2e01      	cmp	r6, #1
 800975c:	d112      	bne.n	8009784 <__gethex+0x2e0>
 800975e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009762:	9a05      	ldr	r2, [sp, #20]
 8009764:	2762      	movs	r7, #98	; 0x62
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	2301      	movs	r3, #1
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	f8c9 3000 	str.w	r3, [r9]
 8009770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009772:	601c      	str	r4, [r3, #0]
 8009774:	e728      	b.n	80095c8 <__gethex+0x124>
 8009776:	bf00      	nop
 8009778:	0800bbc8 	.word	0x0800bbc8
 800977c:	0800bb50 	.word	0x0800bb50
 8009780:	0800bb61 	.word	0x0800bb61
 8009784:	4620      	mov	r0, r4
 8009786:	1e71      	subs	r1, r6, #1
 8009788:	f000 fe4d 	bl	800a426 <__any_on>
 800978c:	2800      	cmp	r0, #0
 800978e:	d1e6      	bne.n	800975e <__gethex+0x2ba>
 8009790:	4621      	mov	r1, r4
 8009792:	9802      	ldr	r0, [sp, #8]
 8009794:	f000 f9f0 	bl	8009b78 <_Bfree>
 8009798:	2300      	movs	r3, #0
 800979a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800979c:	2750      	movs	r7, #80	; 0x50
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	e712      	b.n	80095c8 <__gethex+0x124>
 80097a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1f3      	bne.n	8009790 <__gethex+0x2ec>
 80097a8:	e7d9      	b.n	800975e <__gethex+0x2ba>
 80097aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1d6      	bne.n	800975e <__gethex+0x2ba>
 80097b0:	e7ee      	b.n	8009790 <__gethex+0x2ec>
 80097b2:	1e6f      	subs	r7, r5, #1
 80097b4:	f1ba 0f00 	cmp.w	sl, #0
 80097b8:	d132      	bne.n	8009820 <__gethex+0x37c>
 80097ba:	b127      	cbz	r7, 80097c6 <__gethex+0x322>
 80097bc:	4639      	mov	r1, r7
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 fe31 	bl	800a426 <__any_on>
 80097c4:	4682      	mov	sl, r0
 80097c6:	2101      	movs	r1, #1
 80097c8:	117b      	asrs	r3, r7, #5
 80097ca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80097ce:	f007 071f 	and.w	r7, r7, #31
 80097d2:	fa01 f707 	lsl.w	r7, r1, r7
 80097d6:	421f      	tst	r7, r3
 80097d8:	f04f 0702 	mov.w	r7, #2
 80097dc:	4629      	mov	r1, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	bf18      	it	ne
 80097e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80097e6:	1b76      	subs	r6, r6, r5
 80097e8:	f7ff fdf4 	bl	80093d4 <rshift>
 80097ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097f0:	f1ba 0f00 	cmp.w	sl, #0
 80097f4:	d048      	beq.n	8009888 <__gethex+0x3e4>
 80097f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d015      	beq.n	800982a <__gethex+0x386>
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d017      	beq.n	8009832 <__gethex+0x38e>
 8009802:	2b01      	cmp	r3, #1
 8009804:	d109      	bne.n	800981a <__gethex+0x376>
 8009806:	f01a 0f02 	tst.w	sl, #2
 800980a:	d006      	beq.n	800981a <__gethex+0x376>
 800980c:	f8d9 0000 	ldr.w	r0, [r9]
 8009810:	ea4a 0a00 	orr.w	sl, sl, r0
 8009814:	f01a 0f01 	tst.w	sl, #1
 8009818:	d10e      	bne.n	8009838 <__gethex+0x394>
 800981a:	f047 0710 	orr.w	r7, r7, #16
 800981e:	e033      	b.n	8009888 <__gethex+0x3e4>
 8009820:	f04f 0a01 	mov.w	sl, #1
 8009824:	e7cf      	b.n	80097c6 <__gethex+0x322>
 8009826:	2701      	movs	r7, #1
 8009828:	e7e2      	b.n	80097f0 <__gethex+0x34c>
 800982a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800982c:	f1c3 0301 	rsb	r3, r3, #1
 8009830:	9315      	str	r3, [sp, #84]	; 0x54
 8009832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0f0      	beq.n	800981a <__gethex+0x376>
 8009838:	f04f 0c00 	mov.w	ip, #0
 800983c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009840:	f104 0314 	add.w	r3, r4, #20
 8009844:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009848:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800984c:	4618      	mov	r0, r3
 800984e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009852:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009856:	d01c      	beq.n	8009892 <__gethex+0x3ee>
 8009858:	3201      	adds	r2, #1
 800985a:	6002      	str	r2, [r0, #0]
 800985c:	2f02      	cmp	r7, #2
 800985e:	f104 0314 	add.w	r3, r4, #20
 8009862:	d13d      	bne.n	80098e0 <__gethex+0x43c>
 8009864:	f8d8 2000 	ldr.w	r2, [r8]
 8009868:	3a01      	subs	r2, #1
 800986a:	42b2      	cmp	r2, r6
 800986c:	d10a      	bne.n	8009884 <__gethex+0x3e0>
 800986e:	2201      	movs	r2, #1
 8009870:	1171      	asrs	r1, r6, #5
 8009872:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009876:	f006 061f 	and.w	r6, r6, #31
 800987a:	fa02 f606 	lsl.w	r6, r2, r6
 800987e:	421e      	tst	r6, r3
 8009880:	bf18      	it	ne
 8009882:	4617      	movne	r7, r2
 8009884:	f047 0720 	orr.w	r7, r7, #32
 8009888:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800988a:	601c      	str	r4, [r3, #0]
 800988c:	9b05      	ldr	r3, [sp, #20]
 800988e:	601d      	str	r5, [r3, #0]
 8009890:	e69a      	b.n	80095c8 <__gethex+0x124>
 8009892:	4299      	cmp	r1, r3
 8009894:	f843 cc04 	str.w	ip, [r3, #-4]
 8009898:	d8d8      	bhi.n	800984c <__gethex+0x3a8>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	459b      	cmp	fp, r3
 800989e:	db17      	blt.n	80098d0 <__gethex+0x42c>
 80098a0:	6861      	ldr	r1, [r4, #4]
 80098a2:	9802      	ldr	r0, [sp, #8]
 80098a4:	3101      	adds	r1, #1
 80098a6:	f000 f927 	bl	8009af8 <_Balloc>
 80098aa:	4681      	mov	r9, r0
 80098ac:	b918      	cbnz	r0, 80098b6 <__gethex+0x412>
 80098ae:	4602      	mov	r2, r0
 80098b0:	2184      	movs	r1, #132	; 0x84
 80098b2:	4b19      	ldr	r3, [pc, #100]	; (8009918 <__gethex+0x474>)
 80098b4:	e6ab      	b.n	800960e <__gethex+0x16a>
 80098b6:	6922      	ldr	r2, [r4, #16]
 80098b8:	f104 010c 	add.w	r1, r4, #12
 80098bc:	3202      	adds	r2, #2
 80098be:	0092      	lsls	r2, r2, #2
 80098c0:	300c      	adds	r0, #12
 80098c2:	f7fd f9d5 	bl	8006c70 <memcpy>
 80098c6:	4621      	mov	r1, r4
 80098c8:	9802      	ldr	r0, [sp, #8]
 80098ca:	f000 f955 	bl	8009b78 <_Bfree>
 80098ce:	464c      	mov	r4, r9
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	6122      	str	r2, [r4, #16]
 80098d6:	2201      	movs	r2, #1
 80098d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098dc:	615a      	str	r2, [r3, #20]
 80098de:	e7bd      	b.n	800985c <__gethex+0x3b8>
 80098e0:	6922      	ldr	r2, [r4, #16]
 80098e2:	455a      	cmp	r2, fp
 80098e4:	dd0b      	ble.n	80098fe <__gethex+0x45a>
 80098e6:	2101      	movs	r1, #1
 80098e8:	4620      	mov	r0, r4
 80098ea:	f7ff fd73 	bl	80093d4 <rshift>
 80098ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098f2:	3501      	adds	r5, #1
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	f6ff aed4 	blt.w	80096a2 <__gethex+0x1fe>
 80098fa:	2701      	movs	r7, #1
 80098fc:	e7c2      	b.n	8009884 <__gethex+0x3e0>
 80098fe:	f016 061f 	ands.w	r6, r6, #31
 8009902:	d0fa      	beq.n	80098fa <__gethex+0x456>
 8009904:	4453      	add	r3, sl
 8009906:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800990a:	f000 f9e7 	bl	8009cdc <__hi0bits>
 800990e:	f1c6 0620 	rsb	r6, r6, #32
 8009912:	42b0      	cmp	r0, r6
 8009914:	dbe7      	blt.n	80098e6 <__gethex+0x442>
 8009916:	e7f0      	b.n	80098fa <__gethex+0x456>
 8009918:	0800bb50 	.word	0x0800bb50

0800991c <L_shift>:
 800991c:	f1c2 0208 	rsb	r2, r2, #8
 8009920:	0092      	lsls	r2, r2, #2
 8009922:	b570      	push	{r4, r5, r6, lr}
 8009924:	f1c2 0620 	rsb	r6, r2, #32
 8009928:	6843      	ldr	r3, [r0, #4]
 800992a:	6804      	ldr	r4, [r0, #0]
 800992c:	fa03 f506 	lsl.w	r5, r3, r6
 8009930:	432c      	orrs	r4, r5
 8009932:	40d3      	lsrs	r3, r2
 8009934:	6004      	str	r4, [r0, #0]
 8009936:	f840 3f04 	str.w	r3, [r0, #4]!
 800993a:	4288      	cmp	r0, r1
 800993c:	d3f4      	bcc.n	8009928 <L_shift+0xc>
 800993e:	bd70      	pop	{r4, r5, r6, pc}

08009940 <__match>:
 8009940:	b530      	push	{r4, r5, lr}
 8009942:	6803      	ldr	r3, [r0, #0]
 8009944:	3301      	adds	r3, #1
 8009946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994a:	b914      	cbnz	r4, 8009952 <__match+0x12>
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	2001      	movs	r0, #1
 8009950:	bd30      	pop	{r4, r5, pc}
 8009952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009956:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800995a:	2d19      	cmp	r5, #25
 800995c:	bf98      	it	ls
 800995e:	3220      	addls	r2, #32
 8009960:	42a2      	cmp	r2, r4
 8009962:	d0f0      	beq.n	8009946 <__match+0x6>
 8009964:	2000      	movs	r0, #0
 8009966:	e7f3      	b.n	8009950 <__match+0x10>

08009968 <__hexnan>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	2500      	movs	r5, #0
 800996e:	680b      	ldr	r3, [r1, #0]
 8009970:	4682      	mov	sl, r0
 8009972:	115e      	asrs	r6, r3, #5
 8009974:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009978:	f013 031f 	ands.w	r3, r3, #31
 800997c:	bf18      	it	ne
 800997e:	3604      	addne	r6, #4
 8009980:	1f37      	subs	r7, r6, #4
 8009982:	46b9      	mov	r9, r7
 8009984:	463c      	mov	r4, r7
 8009986:	46ab      	mov	fp, r5
 8009988:	b087      	sub	sp, #28
 800998a:	4690      	mov	r8, r2
 800998c:	6802      	ldr	r2, [r0, #0]
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	f846 5c04 	str.w	r5, [r6, #-4]
 8009994:	9502      	str	r5, [sp, #8]
 8009996:	7851      	ldrb	r1, [r2, #1]
 8009998:	1c53      	adds	r3, r2, #1
 800999a:	9303      	str	r3, [sp, #12]
 800999c:	b341      	cbz	r1, 80099f0 <__hexnan+0x88>
 800999e:	4608      	mov	r0, r1
 80099a0:	9205      	str	r2, [sp, #20]
 80099a2:	9104      	str	r1, [sp, #16]
 80099a4:	f7ff fd69 	bl	800947a <__hexdig_fun>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d14f      	bne.n	8009a4c <__hexnan+0xe4>
 80099ac:	9904      	ldr	r1, [sp, #16]
 80099ae:	9a05      	ldr	r2, [sp, #20]
 80099b0:	2920      	cmp	r1, #32
 80099b2:	d818      	bhi.n	80099e6 <__hexnan+0x7e>
 80099b4:	9b02      	ldr	r3, [sp, #8]
 80099b6:	459b      	cmp	fp, r3
 80099b8:	dd13      	ble.n	80099e2 <__hexnan+0x7a>
 80099ba:	454c      	cmp	r4, r9
 80099bc:	d206      	bcs.n	80099cc <__hexnan+0x64>
 80099be:	2d07      	cmp	r5, #7
 80099c0:	dc04      	bgt.n	80099cc <__hexnan+0x64>
 80099c2:	462a      	mov	r2, r5
 80099c4:	4649      	mov	r1, r9
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7ff ffa8 	bl	800991c <L_shift>
 80099cc:	4544      	cmp	r4, r8
 80099ce:	d950      	bls.n	8009a72 <__hexnan+0x10a>
 80099d0:	2300      	movs	r3, #0
 80099d2:	f1a4 0904 	sub.w	r9, r4, #4
 80099d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099da:	461d      	mov	r5, r3
 80099dc:	464c      	mov	r4, r9
 80099de:	f8cd b008 	str.w	fp, [sp, #8]
 80099e2:	9a03      	ldr	r2, [sp, #12]
 80099e4:	e7d7      	b.n	8009996 <__hexnan+0x2e>
 80099e6:	2929      	cmp	r1, #41	; 0x29
 80099e8:	d156      	bne.n	8009a98 <__hexnan+0x130>
 80099ea:	3202      	adds	r2, #2
 80099ec:	f8ca 2000 	str.w	r2, [sl]
 80099f0:	f1bb 0f00 	cmp.w	fp, #0
 80099f4:	d050      	beq.n	8009a98 <__hexnan+0x130>
 80099f6:	454c      	cmp	r4, r9
 80099f8:	d206      	bcs.n	8009a08 <__hexnan+0xa0>
 80099fa:	2d07      	cmp	r5, #7
 80099fc:	dc04      	bgt.n	8009a08 <__hexnan+0xa0>
 80099fe:	462a      	mov	r2, r5
 8009a00:	4649      	mov	r1, r9
 8009a02:	4620      	mov	r0, r4
 8009a04:	f7ff ff8a 	bl	800991c <L_shift>
 8009a08:	4544      	cmp	r4, r8
 8009a0a:	d934      	bls.n	8009a76 <__hexnan+0x10e>
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	f1a8 0204 	sub.w	r2, r8, #4
 8009a12:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a16:	429f      	cmp	r7, r3
 8009a18:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a1c:	d2f9      	bcs.n	8009a12 <__hexnan+0xaa>
 8009a1e:	1b3b      	subs	r3, r7, r4
 8009a20:	f023 0303 	bic.w	r3, r3, #3
 8009a24:	3304      	adds	r3, #4
 8009a26:	3401      	adds	r4, #1
 8009a28:	3e03      	subs	r6, #3
 8009a2a:	42b4      	cmp	r4, r6
 8009a2c:	bf88      	it	hi
 8009a2e:	2304      	movhi	r3, #4
 8009a30:	2200      	movs	r2, #0
 8009a32:	4443      	add	r3, r8
 8009a34:	f843 2b04 	str.w	r2, [r3], #4
 8009a38:	429f      	cmp	r7, r3
 8009a3a:	d2fb      	bcs.n	8009a34 <__hexnan+0xcc>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	b91b      	cbnz	r3, 8009a48 <__hexnan+0xe0>
 8009a40:	4547      	cmp	r7, r8
 8009a42:	d127      	bne.n	8009a94 <__hexnan+0x12c>
 8009a44:	2301      	movs	r3, #1
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	2005      	movs	r0, #5
 8009a4a:	e026      	b.n	8009a9a <__hexnan+0x132>
 8009a4c:	3501      	adds	r5, #1
 8009a4e:	2d08      	cmp	r5, #8
 8009a50:	f10b 0b01 	add.w	fp, fp, #1
 8009a54:	dd06      	ble.n	8009a64 <__hexnan+0xfc>
 8009a56:	4544      	cmp	r4, r8
 8009a58:	d9c3      	bls.n	80099e2 <__hexnan+0x7a>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2501      	movs	r5, #1
 8009a5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a62:	3c04      	subs	r4, #4
 8009a64:	6822      	ldr	r2, [r4, #0]
 8009a66:	f000 000f 	and.w	r0, r0, #15
 8009a6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a6e:	6022      	str	r2, [r4, #0]
 8009a70:	e7b7      	b.n	80099e2 <__hexnan+0x7a>
 8009a72:	2508      	movs	r5, #8
 8009a74:	e7b5      	b.n	80099e2 <__hexnan+0x7a>
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0df      	beq.n	8009a3c <__hexnan+0xd4>
 8009a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a80:	f1c3 0320 	rsb	r3, r3, #32
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
 8009a88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a8c:	401a      	ands	r2, r3
 8009a8e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a92:	e7d3      	b.n	8009a3c <__hexnan+0xd4>
 8009a94:	3f04      	subs	r7, #4
 8009a96:	e7d1      	b.n	8009a3c <__hexnan+0xd4>
 8009a98:	2004      	movs	r0, #4
 8009a9a:	b007      	add	sp, #28
 8009a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009aa0 <_localeconv_r>:
 8009aa0:	4800      	ldr	r0, [pc, #0]	; (8009aa4 <_localeconv_r+0x4>)
 8009aa2:	4770      	bx	lr
 8009aa4:	200001e0 	.word	0x200001e0

08009aa8 <malloc>:
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <malloc+0xc>)
 8009aaa:	4601      	mov	r1, r0
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	f000 bd57 	b.w	800a560 <_malloc_r>
 8009ab2:	bf00      	nop
 8009ab4:	20000088 	.word	0x20000088

08009ab8 <__ascii_mbtowc>:
 8009ab8:	b082      	sub	sp, #8
 8009aba:	b901      	cbnz	r1, 8009abe <__ascii_mbtowc+0x6>
 8009abc:	a901      	add	r1, sp, #4
 8009abe:	b142      	cbz	r2, 8009ad2 <__ascii_mbtowc+0x1a>
 8009ac0:	b14b      	cbz	r3, 8009ad6 <__ascii_mbtowc+0x1e>
 8009ac2:	7813      	ldrb	r3, [r2, #0]
 8009ac4:	600b      	str	r3, [r1, #0]
 8009ac6:	7812      	ldrb	r2, [r2, #0]
 8009ac8:	1e10      	subs	r0, r2, #0
 8009aca:	bf18      	it	ne
 8009acc:	2001      	movne	r0, #1
 8009ace:	b002      	add	sp, #8
 8009ad0:	4770      	bx	lr
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	e7fb      	b.n	8009ace <__ascii_mbtowc+0x16>
 8009ad6:	f06f 0001 	mvn.w	r0, #1
 8009ada:	e7f8      	b.n	8009ace <__ascii_mbtowc+0x16>

08009adc <memchr>:
 8009adc:	4603      	mov	r3, r0
 8009ade:	b510      	push	{r4, lr}
 8009ae0:	b2c9      	uxtb	r1, r1
 8009ae2:	4402      	add	r2, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	d101      	bne.n	8009aee <memchr+0x12>
 8009aea:	2000      	movs	r0, #0
 8009aec:	e003      	b.n	8009af6 <memchr+0x1a>
 8009aee:	7804      	ldrb	r4, [r0, #0]
 8009af0:	3301      	adds	r3, #1
 8009af2:	428c      	cmp	r4, r1
 8009af4:	d1f6      	bne.n	8009ae4 <memchr+0x8>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <_Balloc>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009afc:	4604      	mov	r4, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	b976      	cbnz	r6, 8009b20 <_Balloc+0x28>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f7ff ffd0 	bl	8009aa8 <malloc>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b0c:	b920      	cbnz	r0, 8009b18 <_Balloc+0x20>
 8009b0e:	2166      	movs	r1, #102	; 0x66
 8009b10:	4b17      	ldr	r3, [pc, #92]	; (8009b70 <_Balloc+0x78>)
 8009b12:	4818      	ldr	r0, [pc, #96]	; (8009b74 <_Balloc+0x7c>)
 8009b14:	f000 ff2c 	bl	800a970 <__assert_func>
 8009b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b1c:	6006      	str	r6, [r0, #0]
 8009b1e:	60c6      	str	r6, [r0, #12]
 8009b20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b22:	68f3      	ldr	r3, [r6, #12]
 8009b24:	b183      	cbz	r3, 8009b48 <_Balloc+0x50>
 8009b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b2e:	b9b8      	cbnz	r0, 8009b60 <_Balloc+0x68>
 8009b30:	2101      	movs	r1, #1
 8009b32:	fa01 f605 	lsl.w	r6, r1, r5
 8009b36:	1d72      	adds	r2, r6, #5
 8009b38:	4620      	mov	r0, r4
 8009b3a:	0092      	lsls	r2, r2, #2
 8009b3c:	f000 fc94 	bl	800a468 <_calloc_r>
 8009b40:	b160      	cbz	r0, 8009b5c <_Balloc+0x64>
 8009b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b46:	e00e      	b.n	8009b66 <_Balloc+0x6e>
 8009b48:	2221      	movs	r2, #33	; 0x21
 8009b4a:	2104      	movs	r1, #4
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fc8b 	bl	800a468 <_calloc_r>
 8009b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b54:	60f0      	str	r0, [r6, #12]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e4      	bne.n	8009b26 <_Balloc+0x2e>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	6802      	ldr	r2, [r0, #0]
 8009b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b66:	2300      	movs	r3, #0
 8009b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b6c:	e7f7      	b.n	8009b5e <_Balloc+0x66>
 8009b6e:	bf00      	nop
 8009b70:	0800bade 	.word	0x0800bade
 8009b74:	0800bbdc 	.word	0x0800bbdc

08009b78 <_Bfree>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	b976      	cbnz	r6, 8009ba0 <_Bfree+0x28>
 8009b82:	2010      	movs	r0, #16
 8009b84:	f7ff ff90 	bl	8009aa8 <malloc>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	6268      	str	r0, [r5, #36]	; 0x24
 8009b8c:	b920      	cbnz	r0, 8009b98 <_Bfree+0x20>
 8009b8e:	218a      	movs	r1, #138	; 0x8a
 8009b90:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <_Bfree+0x3c>)
 8009b92:	4809      	ldr	r0, [pc, #36]	; (8009bb8 <_Bfree+0x40>)
 8009b94:	f000 feec 	bl	800a970 <__assert_func>
 8009b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b9c:	6006      	str	r6, [r0, #0]
 8009b9e:	60c6      	str	r6, [r0, #12]
 8009ba0:	b13c      	cbz	r4, 8009bb2 <_Bfree+0x3a>
 8009ba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ba4:	6862      	ldr	r2, [r4, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bac:	6021      	str	r1, [r4, #0]
 8009bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	0800bade 	.word	0x0800bade
 8009bb8:	0800bbdc 	.word	0x0800bbdc

08009bbc <__multadd>:
 8009bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	461e      	mov	r6, r3
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	690d      	ldr	r5, [r1, #16]
 8009bca:	f101 0c14 	add.w	ip, r1, #20
 8009bce:	f8dc 3000 	ldr.w	r3, [ip]
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	b299      	uxth	r1, r3
 8009bd6:	fb02 6101 	mla	r1, r2, r1, r6
 8009bda:	0c1e      	lsrs	r6, r3, #16
 8009bdc:	0c0b      	lsrs	r3, r1, #16
 8009bde:	fb02 3306 	mla	r3, r2, r6, r3
 8009be2:	b289      	uxth	r1, r1
 8009be4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009be8:	4285      	cmp	r5, r0
 8009bea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bee:	f84c 1b04 	str.w	r1, [ip], #4
 8009bf2:	dcec      	bgt.n	8009bce <__multadd+0x12>
 8009bf4:	b30e      	cbz	r6, 8009c3a <__multadd+0x7e>
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	dc19      	bgt.n	8009c30 <__multadd+0x74>
 8009bfc:	6861      	ldr	r1, [r4, #4]
 8009bfe:	4638      	mov	r0, r7
 8009c00:	3101      	adds	r1, #1
 8009c02:	f7ff ff79 	bl	8009af8 <_Balloc>
 8009c06:	4680      	mov	r8, r0
 8009c08:	b928      	cbnz	r0, 8009c16 <__multadd+0x5a>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	21b5      	movs	r1, #181	; 0xb5
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <__multadd+0x84>)
 8009c10:	480c      	ldr	r0, [pc, #48]	; (8009c44 <__multadd+0x88>)
 8009c12:	f000 fead 	bl	800a970 <__assert_func>
 8009c16:	6922      	ldr	r2, [r4, #16]
 8009c18:	f104 010c 	add.w	r1, r4, #12
 8009c1c:	3202      	adds	r2, #2
 8009c1e:	0092      	lsls	r2, r2, #2
 8009c20:	300c      	adds	r0, #12
 8009c22:	f7fd f825 	bl	8006c70 <memcpy>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff ffa5 	bl	8009b78 <_Bfree>
 8009c2e:	4644      	mov	r4, r8
 8009c30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c34:	3501      	adds	r5, #1
 8009c36:	615e      	str	r6, [r3, #20]
 8009c38:	6125      	str	r5, [r4, #16]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c40:	0800bb50 	.word	0x0800bb50
 8009c44:	0800bbdc 	.word	0x0800bbdc

08009c48 <__s2b>:
 8009c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c4c:	4615      	mov	r5, r2
 8009c4e:	2209      	movs	r2, #9
 8009c50:	461f      	mov	r7, r3
 8009c52:	3308      	adds	r3, #8
 8009c54:	460c      	mov	r4, r1
 8009c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	2100      	movs	r1, #0
 8009c60:	429a      	cmp	r2, r3
 8009c62:	db09      	blt.n	8009c78 <__s2b+0x30>
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff ff47 	bl	8009af8 <_Balloc>
 8009c6a:	b940      	cbnz	r0, 8009c7e <__s2b+0x36>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	21ce      	movs	r1, #206	; 0xce
 8009c70:	4b18      	ldr	r3, [pc, #96]	; (8009cd4 <__s2b+0x8c>)
 8009c72:	4819      	ldr	r0, [pc, #100]	; (8009cd8 <__s2b+0x90>)
 8009c74:	f000 fe7c 	bl	800a970 <__assert_func>
 8009c78:	0052      	lsls	r2, r2, #1
 8009c7a:	3101      	adds	r1, #1
 8009c7c:	e7f0      	b.n	8009c60 <__s2b+0x18>
 8009c7e:	9b08      	ldr	r3, [sp, #32]
 8009c80:	2d09      	cmp	r5, #9
 8009c82:	6143      	str	r3, [r0, #20]
 8009c84:	f04f 0301 	mov.w	r3, #1
 8009c88:	6103      	str	r3, [r0, #16]
 8009c8a:	dd16      	ble.n	8009cba <__s2b+0x72>
 8009c8c:	f104 0909 	add.w	r9, r4, #9
 8009c90:	46c8      	mov	r8, r9
 8009c92:	442c      	add	r4, r5
 8009c94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c98:	4601      	mov	r1, r0
 8009c9a:	220a      	movs	r2, #10
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	3b30      	subs	r3, #48	; 0x30
 8009ca0:	f7ff ff8c 	bl	8009bbc <__multadd>
 8009ca4:	45a0      	cmp	r8, r4
 8009ca6:	d1f5      	bne.n	8009c94 <__s2b+0x4c>
 8009ca8:	f1a5 0408 	sub.w	r4, r5, #8
 8009cac:	444c      	add	r4, r9
 8009cae:	1b2d      	subs	r5, r5, r4
 8009cb0:	1963      	adds	r3, r4, r5
 8009cb2:	42bb      	cmp	r3, r7
 8009cb4:	db04      	blt.n	8009cc0 <__s2b+0x78>
 8009cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cba:	2509      	movs	r5, #9
 8009cbc:	340a      	adds	r4, #10
 8009cbe:	e7f6      	b.n	8009cae <__s2b+0x66>
 8009cc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cc4:	4601      	mov	r1, r0
 8009cc6:	220a      	movs	r2, #10
 8009cc8:	4630      	mov	r0, r6
 8009cca:	3b30      	subs	r3, #48	; 0x30
 8009ccc:	f7ff ff76 	bl	8009bbc <__multadd>
 8009cd0:	e7ee      	b.n	8009cb0 <__s2b+0x68>
 8009cd2:	bf00      	nop
 8009cd4:	0800bb50 	.word	0x0800bb50
 8009cd8:	0800bbdc 	.word	0x0800bbdc

08009cdc <__hi0bits>:
 8009cdc:	0c02      	lsrs	r2, r0, #16
 8009cde:	0412      	lsls	r2, r2, #16
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	b9ca      	cbnz	r2, 8009d18 <__hi0bits+0x3c>
 8009ce4:	0403      	lsls	r3, r0, #16
 8009ce6:	2010      	movs	r0, #16
 8009ce8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009cec:	bf04      	itt	eq
 8009cee:	021b      	lsleq	r3, r3, #8
 8009cf0:	3008      	addeq	r0, #8
 8009cf2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009cf6:	bf04      	itt	eq
 8009cf8:	011b      	lsleq	r3, r3, #4
 8009cfa:	3004      	addeq	r0, #4
 8009cfc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d00:	bf04      	itt	eq
 8009d02:	009b      	lsleq	r3, r3, #2
 8009d04:	3002      	addeq	r0, #2
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	db05      	blt.n	8009d16 <__hi0bits+0x3a>
 8009d0a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009d0e:	f100 0001 	add.w	r0, r0, #1
 8009d12:	bf08      	it	eq
 8009d14:	2020      	moveq	r0, #32
 8009d16:	4770      	bx	lr
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e7e5      	b.n	8009ce8 <__hi0bits+0xc>

08009d1c <__lo0bits>:
 8009d1c:	6803      	ldr	r3, [r0, #0]
 8009d1e:	4602      	mov	r2, r0
 8009d20:	f013 0007 	ands.w	r0, r3, #7
 8009d24:	d00b      	beq.n	8009d3e <__lo0bits+0x22>
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	d421      	bmi.n	8009d6e <__lo0bits+0x52>
 8009d2a:	0798      	lsls	r0, r3, #30
 8009d2c:	bf49      	itett	mi
 8009d2e:	085b      	lsrmi	r3, r3, #1
 8009d30:	089b      	lsrpl	r3, r3, #2
 8009d32:	2001      	movmi	r0, #1
 8009d34:	6013      	strmi	r3, [r2, #0]
 8009d36:	bf5c      	itt	pl
 8009d38:	2002      	movpl	r0, #2
 8009d3a:	6013      	strpl	r3, [r2, #0]
 8009d3c:	4770      	bx	lr
 8009d3e:	b299      	uxth	r1, r3
 8009d40:	b909      	cbnz	r1, 8009d46 <__lo0bits+0x2a>
 8009d42:	2010      	movs	r0, #16
 8009d44:	0c1b      	lsrs	r3, r3, #16
 8009d46:	b2d9      	uxtb	r1, r3
 8009d48:	b909      	cbnz	r1, 8009d4e <__lo0bits+0x32>
 8009d4a:	3008      	adds	r0, #8
 8009d4c:	0a1b      	lsrs	r3, r3, #8
 8009d4e:	0719      	lsls	r1, r3, #28
 8009d50:	bf04      	itt	eq
 8009d52:	091b      	lsreq	r3, r3, #4
 8009d54:	3004      	addeq	r0, #4
 8009d56:	0799      	lsls	r1, r3, #30
 8009d58:	bf04      	itt	eq
 8009d5a:	089b      	lsreq	r3, r3, #2
 8009d5c:	3002      	addeq	r0, #2
 8009d5e:	07d9      	lsls	r1, r3, #31
 8009d60:	d403      	bmi.n	8009d6a <__lo0bits+0x4e>
 8009d62:	085b      	lsrs	r3, r3, #1
 8009d64:	f100 0001 	add.w	r0, r0, #1
 8009d68:	d003      	beq.n	8009d72 <__lo0bits+0x56>
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	4770      	bx	lr
 8009d6e:	2000      	movs	r0, #0
 8009d70:	4770      	bx	lr
 8009d72:	2020      	movs	r0, #32
 8009d74:	4770      	bx	lr
	...

08009d78 <__i2b>:
 8009d78:	b510      	push	{r4, lr}
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	f7ff febb 	bl	8009af8 <_Balloc>
 8009d82:	4602      	mov	r2, r0
 8009d84:	b928      	cbnz	r0, 8009d92 <__i2b+0x1a>
 8009d86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d8a:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <__i2b+0x24>)
 8009d8c:	4804      	ldr	r0, [pc, #16]	; (8009da0 <__i2b+0x28>)
 8009d8e:	f000 fdef 	bl	800a970 <__assert_func>
 8009d92:	2301      	movs	r3, #1
 8009d94:	6144      	str	r4, [r0, #20]
 8009d96:	6103      	str	r3, [r0, #16]
 8009d98:	bd10      	pop	{r4, pc}
 8009d9a:	bf00      	nop
 8009d9c:	0800bb50 	.word	0x0800bb50
 8009da0:	0800bbdc 	.word	0x0800bbdc

08009da4 <__multiply>:
 8009da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da8:	4691      	mov	r9, r2
 8009daa:	690a      	ldr	r2, [r1, #16]
 8009dac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009db0:	460c      	mov	r4, r1
 8009db2:	429a      	cmp	r2, r3
 8009db4:	bfbe      	ittt	lt
 8009db6:	460b      	movlt	r3, r1
 8009db8:	464c      	movlt	r4, r9
 8009dba:	4699      	movlt	r9, r3
 8009dbc:	6927      	ldr	r7, [r4, #16]
 8009dbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	6861      	ldr	r1, [r4, #4]
 8009dc6:	eb07 060a 	add.w	r6, r7, sl
 8009dca:	42b3      	cmp	r3, r6
 8009dcc:	b085      	sub	sp, #20
 8009dce:	bfb8      	it	lt
 8009dd0:	3101      	addlt	r1, #1
 8009dd2:	f7ff fe91 	bl	8009af8 <_Balloc>
 8009dd6:	b930      	cbnz	r0, 8009de6 <__multiply+0x42>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	f240 115d 	movw	r1, #349	; 0x15d
 8009dde:	4b43      	ldr	r3, [pc, #268]	; (8009eec <__multiply+0x148>)
 8009de0:	4843      	ldr	r0, [pc, #268]	; (8009ef0 <__multiply+0x14c>)
 8009de2:	f000 fdc5 	bl	800a970 <__assert_func>
 8009de6:	f100 0514 	add.w	r5, r0, #20
 8009dea:	462b      	mov	r3, r5
 8009dec:	2200      	movs	r2, #0
 8009dee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009df2:	4543      	cmp	r3, r8
 8009df4:	d321      	bcc.n	8009e3a <__multiply+0x96>
 8009df6:	f104 0314 	add.w	r3, r4, #20
 8009dfa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009dfe:	f109 0314 	add.w	r3, r9, #20
 8009e02:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e06:	9202      	str	r2, [sp, #8]
 8009e08:	1b3a      	subs	r2, r7, r4
 8009e0a:	3a15      	subs	r2, #21
 8009e0c:	f022 0203 	bic.w	r2, r2, #3
 8009e10:	3204      	adds	r2, #4
 8009e12:	f104 0115 	add.w	r1, r4, #21
 8009e16:	428f      	cmp	r7, r1
 8009e18:	bf38      	it	cc
 8009e1a:	2204      	movcc	r2, #4
 8009e1c:	9201      	str	r2, [sp, #4]
 8009e1e:	9a02      	ldr	r2, [sp, #8]
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d80c      	bhi.n	8009e40 <__multiply+0x9c>
 8009e26:	2e00      	cmp	r6, #0
 8009e28:	dd03      	ble.n	8009e32 <__multiply+0x8e>
 8009e2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d059      	beq.n	8009ee6 <__multiply+0x142>
 8009e32:	6106      	str	r6, [r0, #16]
 8009e34:	b005      	add	sp, #20
 8009e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3a:	f843 2b04 	str.w	r2, [r3], #4
 8009e3e:	e7d8      	b.n	8009df2 <__multiply+0x4e>
 8009e40:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e44:	f1ba 0f00 	cmp.w	sl, #0
 8009e48:	d023      	beq.n	8009e92 <__multiply+0xee>
 8009e4a:	46a9      	mov	r9, r5
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	f104 0e14 	add.w	lr, r4, #20
 8009e54:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e58:	f8d9 1000 	ldr.w	r1, [r9]
 8009e5c:	fa1f fb82 	uxth.w	fp, r2
 8009e60:	b289      	uxth	r1, r1
 8009e62:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e66:	4461      	add	r1, ip
 8009e68:	f8d9 c000 	ldr.w	ip, [r9]
 8009e6c:	0c12      	lsrs	r2, r2, #16
 8009e6e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e72:	fb0a c202 	mla	r2, sl, r2, ip
 8009e76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e7a:	b289      	uxth	r1, r1
 8009e7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e80:	4577      	cmp	r7, lr
 8009e82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e86:	f849 1b04 	str.w	r1, [r9], #4
 8009e8a:	d8e3      	bhi.n	8009e54 <__multiply+0xb0>
 8009e8c:	9a01      	ldr	r2, [sp, #4]
 8009e8e:	f845 c002 	str.w	ip, [r5, r2]
 8009e92:	9a03      	ldr	r2, [sp, #12]
 8009e94:	3304      	adds	r3, #4
 8009e96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e9a:	f1b9 0f00 	cmp.w	r9, #0
 8009e9e:	d020      	beq.n	8009ee2 <__multiply+0x13e>
 8009ea0:	46ae      	mov	lr, r5
 8009ea2:	f04f 0a00 	mov.w	sl, #0
 8009ea6:	6829      	ldr	r1, [r5, #0]
 8009ea8:	f104 0c14 	add.w	ip, r4, #20
 8009eac:	f8bc b000 	ldrh.w	fp, [ip]
 8009eb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009eb4:	b289      	uxth	r1, r1
 8009eb6:	fb09 220b 	mla	r2, r9, fp, r2
 8009eba:	4492      	add	sl, r2
 8009ebc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ec0:	f84e 1b04 	str.w	r1, [lr], #4
 8009ec4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ec8:	f8be 1000 	ldrh.w	r1, [lr]
 8009ecc:	0c12      	lsrs	r2, r2, #16
 8009ece:	fb09 1102 	mla	r1, r9, r2, r1
 8009ed2:	4567      	cmp	r7, ip
 8009ed4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ed8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009edc:	d8e6      	bhi.n	8009eac <__multiply+0x108>
 8009ede:	9a01      	ldr	r2, [sp, #4]
 8009ee0:	50a9      	str	r1, [r5, r2]
 8009ee2:	3504      	adds	r5, #4
 8009ee4:	e79b      	b.n	8009e1e <__multiply+0x7a>
 8009ee6:	3e01      	subs	r6, #1
 8009ee8:	e79d      	b.n	8009e26 <__multiply+0x82>
 8009eea:	bf00      	nop
 8009eec:	0800bb50 	.word	0x0800bb50
 8009ef0:	0800bbdc 	.word	0x0800bbdc

08009ef4 <__pow5mult>:
 8009ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef8:	4615      	mov	r5, r2
 8009efa:	f012 0203 	ands.w	r2, r2, #3
 8009efe:	4606      	mov	r6, r0
 8009f00:	460f      	mov	r7, r1
 8009f02:	d007      	beq.n	8009f14 <__pow5mult+0x20>
 8009f04:	4c25      	ldr	r4, [pc, #148]	; (8009f9c <__pow5mult+0xa8>)
 8009f06:	3a01      	subs	r2, #1
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f0e:	f7ff fe55 	bl	8009bbc <__multadd>
 8009f12:	4607      	mov	r7, r0
 8009f14:	10ad      	asrs	r5, r5, #2
 8009f16:	d03d      	beq.n	8009f94 <__pow5mult+0xa0>
 8009f18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f1a:	b97c      	cbnz	r4, 8009f3c <__pow5mult+0x48>
 8009f1c:	2010      	movs	r0, #16
 8009f1e:	f7ff fdc3 	bl	8009aa8 <malloc>
 8009f22:	4602      	mov	r2, r0
 8009f24:	6270      	str	r0, [r6, #36]	; 0x24
 8009f26:	b928      	cbnz	r0, 8009f34 <__pow5mult+0x40>
 8009f28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f2c:	4b1c      	ldr	r3, [pc, #112]	; (8009fa0 <__pow5mult+0xac>)
 8009f2e:	481d      	ldr	r0, [pc, #116]	; (8009fa4 <__pow5mult+0xb0>)
 8009f30:	f000 fd1e 	bl	800a970 <__assert_func>
 8009f34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f38:	6004      	str	r4, [r0, #0]
 8009f3a:	60c4      	str	r4, [r0, #12]
 8009f3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f44:	b94c      	cbnz	r4, 8009f5a <__pow5mult+0x66>
 8009f46:	f240 2171 	movw	r1, #625	; 0x271
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7ff ff14 	bl	8009d78 <__i2b>
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f58:	6003      	str	r3, [r0, #0]
 8009f5a:	f04f 0900 	mov.w	r9, #0
 8009f5e:	07eb      	lsls	r3, r5, #31
 8009f60:	d50a      	bpl.n	8009f78 <__pow5mult+0x84>
 8009f62:	4639      	mov	r1, r7
 8009f64:	4622      	mov	r2, r4
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ff1c 	bl	8009da4 <__multiply>
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	4639      	mov	r1, r7
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7ff fe01 	bl	8009b78 <_Bfree>
 8009f76:	4647      	mov	r7, r8
 8009f78:	106d      	asrs	r5, r5, #1
 8009f7a:	d00b      	beq.n	8009f94 <__pow5mult+0xa0>
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	b938      	cbnz	r0, 8009f90 <__pow5mult+0x9c>
 8009f80:	4622      	mov	r2, r4
 8009f82:	4621      	mov	r1, r4
 8009f84:	4630      	mov	r0, r6
 8009f86:	f7ff ff0d 	bl	8009da4 <__multiply>
 8009f8a:	6020      	str	r0, [r4, #0]
 8009f8c:	f8c0 9000 	str.w	r9, [r0]
 8009f90:	4604      	mov	r4, r0
 8009f92:	e7e4      	b.n	8009f5e <__pow5mult+0x6a>
 8009f94:	4638      	mov	r0, r7
 8009f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9a:	bf00      	nop
 8009f9c:	0800bd28 	.word	0x0800bd28
 8009fa0:	0800bade 	.word	0x0800bade
 8009fa4:	0800bbdc 	.word	0x0800bbdc

08009fa8 <__lshift>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	460c      	mov	r4, r1
 8009fae:	4607      	mov	r7, r0
 8009fb0:	4691      	mov	r9, r2
 8009fb2:	6923      	ldr	r3, [r4, #16]
 8009fb4:	6849      	ldr	r1, [r1, #4]
 8009fb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fba:	68a3      	ldr	r3, [r4, #8]
 8009fbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fc0:	f108 0601 	add.w	r6, r8, #1
 8009fc4:	42b3      	cmp	r3, r6
 8009fc6:	db0b      	blt.n	8009fe0 <__lshift+0x38>
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f7ff fd95 	bl	8009af8 <_Balloc>
 8009fce:	4605      	mov	r5, r0
 8009fd0:	b948      	cbnz	r0, 8009fe6 <__lshift+0x3e>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fd8:	4b29      	ldr	r3, [pc, #164]	; (800a080 <__lshift+0xd8>)
 8009fda:	482a      	ldr	r0, [pc, #168]	; (800a084 <__lshift+0xdc>)
 8009fdc:	f000 fcc8 	bl	800a970 <__assert_func>
 8009fe0:	3101      	adds	r1, #1
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	e7ee      	b.n	8009fc4 <__lshift+0x1c>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f100 0114 	add.w	r1, r0, #20
 8009fec:	f100 0210 	add.w	r2, r0, #16
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	4553      	cmp	r3, sl
 8009ff4:	db37      	blt.n	800a066 <__lshift+0xbe>
 8009ff6:	6920      	ldr	r0, [r4, #16]
 8009ff8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ffc:	f104 0314 	add.w	r3, r4, #20
 800a000:	f019 091f 	ands.w	r9, r9, #31
 800a004:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a008:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a00c:	d02f      	beq.n	800a06e <__lshift+0xc6>
 800a00e:	468a      	mov	sl, r1
 800a010:	f04f 0c00 	mov.w	ip, #0
 800a014:	f1c9 0e20 	rsb	lr, r9, #32
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	fa02 f209 	lsl.w	r2, r2, r9
 800a01e:	ea42 020c 	orr.w	r2, r2, ip
 800a022:	f84a 2b04 	str.w	r2, [sl], #4
 800a026:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02a:	4298      	cmp	r0, r3
 800a02c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a030:	d8f2      	bhi.n	800a018 <__lshift+0x70>
 800a032:	1b03      	subs	r3, r0, r4
 800a034:	3b15      	subs	r3, #21
 800a036:	f023 0303 	bic.w	r3, r3, #3
 800a03a:	3304      	adds	r3, #4
 800a03c:	f104 0215 	add.w	r2, r4, #21
 800a040:	4290      	cmp	r0, r2
 800a042:	bf38      	it	cc
 800a044:	2304      	movcc	r3, #4
 800a046:	f841 c003 	str.w	ip, [r1, r3]
 800a04a:	f1bc 0f00 	cmp.w	ip, #0
 800a04e:	d001      	beq.n	800a054 <__lshift+0xac>
 800a050:	f108 0602 	add.w	r6, r8, #2
 800a054:	3e01      	subs	r6, #1
 800a056:	4638      	mov	r0, r7
 800a058:	4621      	mov	r1, r4
 800a05a:	612e      	str	r6, [r5, #16]
 800a05c:	f7ff fd8c 	bl	8009b78 <_Bfree>
 800a060:	4628      	mov	r0, r5
 800a062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a066:	f842 0f04 	str.w	r0, [r2, #4]!
 800a06a:	3301      	adds	r3, #1
 800a06c:	e7c1      	b.n	8009ff2 <__lshift+0x4a>
 800a06e:	3904      	subs	r1, #4
 800a070:	f853 2b04 	ldr.w	r2, [r3], #4
 800a074:	4298      	cmp	r0, r3
 800a076:	f841 2f04 	str.w	r2, [r1, #4]!
 800a07a:	d8f9      	bhi.n	800a070 <__lshift+0xc8>
 800a07c:	e7ea      	b.n	800a054 <__lshift+0xac>
 800a07e:	bf00      	nop
 800a080:	0800bb50 	.word	0x0800bb50
 800a084:	0800bbdc 	.word	0x0800bbdc

0800a088 <__mcmp>:
 800a088:	4603      	mov	r3, r0
 800a08a:	690a      	ldr	r2, [r1, #16]
 800a08c:	6900      	ldr	r0, [r0, #16]
 800a08e:	b530      	push	{r4, r5, lr}
 800a090:	1a80      	subs	r0, r0, r2
 800a092:	d10d      	bne.n	800a0b0 <__mcmp+0x28>
 800a094:	3314      	adds	r3, #20
 800a096:	3114      	adds	r1, #20
 800a098:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a09c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0a8:	4295      	cmp	r5, r2
 800a0aa:	d002      	beq.n	800a0b2 <__mcmp+0x2a>
 800a0ac:	d304      	bcc.n	800a0b8 <__mcmp+0x30>
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	bd30      	pop	{r4, r5, pc}
 800a0b2:	42a3      	cmp	r3, r4
 800a0b4:	d3f4      	bcc.n	800a0a0 <__mcmp+0x18>
 800a0b6:	e7fb      	b.n	800a0b0 <__mcmp+0x28>
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e7f8      	b.n	800a0b0 <__mcmp+0x28>
	...

0800a0c0 <__mdiff>:
 800a0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	f7ff ffdb 	bl	800a088 <__mcmp>
 800a0d2:	1e06      	subs	r6, r0, #0
 800a0d4:	d111      	bne.n	800a0fa <__mdiff+0x3a>
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff fd0d 	bl	8009af8 <_Balloc>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	b928      	cbnz	r0, 800a0ee <__mdiff+0x2e>
 800a0e2:	f240 2132 	movw	r1, #562	; 0x232
 800a0e6:	4b3a      	ldr	r3, [pc, #232]	; (800a1d0 <__mdiff+0x110>)
 800a0e8:	483a      	ldr	r0, [pc, #232]	; (800a1d4 <__mdiff+0x114>)
 800a0ea:	f000 fc41 	bl	800a970 <__assert_func>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fa:	bfa4      	itt	ge
 800a0fc:	4623      	movge	r3, r4
 800a0fe:	462c      	movge	r4, r5
 800a100:	4638      	mov	r0, r7
 800a102:	6861      	ldr	r1, [r4, #4]
 800a104:	bfa6      	itte	ge
 800a106:	461d      	movge	r5, r3
 800a108:	2600      	movge	r6, #0
 800a10a:	2601      	movlt	r6, #1
 800a10c:	f7ff fcf4 	bl	8009af8 <_Balloc>
 800a110:	4602      	mov	r2, r0
 800a112:	b918      	cbnz	r0, 800a11c <__mdiff+0x5c>
 800a114:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a118:	4b2d      	ldr	r3, [pc, #180]	; (800a1d0 <__mdiff+0x110>)
 800a11a:	e7e5      	b.n	800a0e8 <__mdiff+0x28>
 800a11c:	f102 0814 	add.w	r8, r2, #20
 800a120:	46c2      	mov	sl, r8
 800a122:	f04f 0c00 	mov.w	ip, #0
 800a126:	6927      	ldr	r7, [r4, #16]
 800a128:	60c6      	str	r6, [r0, #12]
 800a12a:	692e      	ldr	r6, [r5, #16]
 800a12c:	f104 0014 	add.w	r0, r4, #20
 800a130:	f105 0914 	add.w	r9, r5, #20
 800a134:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a138:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a13c:	3410      	adds	r4, #16
 800a13e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a142:	f859 3b04 	ldr.w	r3, [r9], #4
 800a146:	fa1f f18b 	uxth.w	r1, fp
 800a14a:	448c      	add	ip, r1
 800a14c:	b299      	uxth	r1, r3
 800a14e:	0c1b      	lsrs	r3, r3, #16
 800a150:	ebac 0101 	sub.w	r1, ip, r1
 800a154:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a158:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a15c:	b289      	uxth	r1, r1
 800a15e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a162:	454e      	cmp	r6, r9
 800a164:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a168:	f84a 3b04 	str.w	r3, [sl], #4
 800a16c:	d8e7      	bhi.n	800a13e <__mdiff+0x7e>
 800a16e:	1b73      	subs	r3, r6, r5
 800a170:	3b15      	subs	r3, #21
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	3515      	adds	r5, #21
 800a178:	3304      	adds	r3, #4
 800a17a:	42ae      	cmp	r6, r5
 800a17c:	bf38      	it	cc
 800a17e:	2304      	movcc	r3, #4
 800a180:	4418      	add	r0, r3
 800a182:	4443      	add	r3, r8
 800a184:	461e      	mov	r6, r3
 800a186:	4605      	mov	r5, r0
 800a188:	4575      	cmp	r5, lr
 800a18a:	d30e      	bcc.n	800a1aa <__mdiff+0xea>
 800a18c:	f10e 0103 	add.w	r1, lr, #3
 800a190:	1a09      	subs	r1, r1, r0
 800a192:	f021 0103 	bic.w	r1, r1, #3
 800a196:	3803      	subs	r0, #3
 800a198:	4586      	cmp	lr, r0
 800a19a:	bf38      	it	cc
 800a19c:	2100      	movcc	r1, #0
 800a19e:	4419      	add	r1, r3
 800a1a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a1a4:	b18b      	cbz	r3, 800a1ca <__mdiff+0x10a>
 800a1a6:	6117      	str	r7, [r2, #16]
 800a1a8:	e7a4      	b.n	800a0f4 <__mdiff+0x34>
 800a1aa:	f855 8b04 	ldr.w	r8, [r5], #4
 800a1ae:	fa1f f188 	uxth.w	r1, r8
 800a1b2:	4461      	add	r1, ip
 800a1b4:	140c      	asrs	r4, r1, #16
 800a1b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1ba:	b289      	uxth	r1, r1
 800a1bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a1c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a1c4:	f846 1b04 	str.w	r1, [r6], #4
 800a1c8:	e7de      	b.n	800a188 <__mdiff+0xc8>
 800a1ca:	3f01      	subs	r7, #1
 800a1cc:	e7e8      	b.n	800a1a0 <__mdiff+0xe0>
 800a1ce:	bf00      	nop
 800a1d0:	0800bb50 	.word	0x0800bb50
 800a1d4:	0800bbdc 	.word	0x0800bbdc

0800a1d8 <__ulp>:
 800a1d8:	4b11      	ldr	r3, [pc, #68]	; (800a220 <__ulp+0x48>)
 800a1da:	400b      	ands	r3, r1
 800a1dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dd02      	ble.n	800a1ea <__ulp+0x12>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4770      	bx	lr
 800a1ea:	425b      	negs	r3, r3
 800a1ec:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a1f0:	f04f 0000 	mov.w	r0, #0
 800a1f4:	f04f 0100 	mov.w	r1, #0
 800a1f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1fc:	da04      	bge.n	800a208 <__ulp+0x30>
 800a1fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a202:	fa43 f102 	asr.w	r1, r3, r2
 800a206:	4770      	bx	lr
 800a208:	f1a2 0314 	sub.w	r3, r2, #20
 800a20c:	2b1e      	cmp	r3, #30
 800a20e:	bfd6      	itet	le
 800a210:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a214:	2301      	movgt	r3, #1
 800a216:	fa22 f303 	lsrle.w	r3, r2, r3
 800a21a:	4618      	mov	r0, r3
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	7ff00000 	.word	0x7ff00000

0800a224 <__b2d>:
 800a224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a228:	6907      	ldr	r7, [r0, #16]
 800a22a:	f100 0914 	add.w	r9, r0, #20
 800a22e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a232:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a236:	f1a7 0804 	sub.w	r8, r7, #4
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7ff fd4e 	bl	8009cdc <__hi0bits>
 800a240:	f1c0 0320 	rsb	r3, r0, #32
 800a244:	280a      	cmp	r0, #10
 800a246:	600b      	str	r3, [r1, #0]
 800a248:	491f      	ldr	r1, [pc, #124]	; (800a2c8 <__b2d+0xa4>)
 800a24a:	dc17      	bgt.n	800a27c <__b2d+0x58>
 800a24c:	45c1      	cmp	r9, r8
 800a24e:	bf28      	it	cs
 800a250:	2200      	movcs	r2, #0
 800a252:	f1c0 0c0b 	rsb	ip, r0, #11
 800a256:	fa26 f30c 	lsr.w	r3, r6, ip
 800a25a:	bf38      	it	cc
 800a25c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a260:	ea43 0501 	orr.w	r5, r3, r1
 800a264:	f100 0315 	add.w	r3, r0, #21
 800a268:	fa06 f303 	lsl.w	r3, r6, r3
 800a26c:	fa22 f20c 	lsr.w	r2, r2, ip
 800a270:	ea43 0402 	orr.w	r4, r3, r2
 800a274:	4620      	mov	r0, r4
 800a276:	4629      	mov	r1, r5
 800a278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27c:	45c1      	cmp	r9, r8
 800a27e:	bf2e      	itee	cs
 800a280:	2200      	movcs	r2, #0
 800a282:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a286:	f1a7 0808 	subcc.w	r8, r7, #8
 800a28a:	f1b0 030b 	subs.w	r3, r0, #11
 800a28e:	d016      	beq.n	800a2be <__b2d+0x9a>
 800a290:	f1c3 0720 	rsb	r7, r3, #32
 800a294:	fa22 f107 	lsr.w	r1, r2, r7
 800a298:	45c8      	cmp	r8, r9
 800a29a:	fa06 f603 	lsl.w	r6, r6, r3
 800a29e:	ea46 0601 	orr.w	r6, r6, r1
 800a2a2:	bf94      	ite	ls
 800a2a4:	2100      	movls	r1, #0
 800a2a6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a2aa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a2ae:	fa02 f003 	lsl.w	r0, r2, r3
 800a2b2:	40f9      	lsrs	r1, r7
 800a2b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a2b8:	ea40 0401 	orr.w	r4, r0, r1
 800a2bc:	e7da      	b.n	800a274 <__b2d+0x50>
 800a2be:	4614      	mov	r4, r2
 800a2c0:	ea46 0501 	orr.w	r5, r6, r1
 800a2c4:	e7d6      	b.n	800a274 <__b2d+0x50>
 800a2c6:	bf00      	nop
 800a2c8:	3ff00000 	.word	0x3ff00000

0800a2cc <__d2b>:
 800a2cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a2d6:	4690      	mov	r8, r2
 800a2d8:	461d      	mov	r5, r3
 800a2da:	f7ff fc0d 	bl	8009af8 <_Balloc>
 800a2de:	4604      	mov	r4, r0
 800a2e0:	b930      	cbnz	r0, 800a2f0 <__d2b+0x24>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	f240 310a 	movw	r1, #778	; 0x30a
 800a2e8:	4b24      	ldr	r3, [pc, #144]	; (800a37c <__d2b+0xb0>)
 800a2ea:	4825      	ldr	r0, [pc, #148]	; (800a380 <__d2b+0xb4>)
 800a2ec:	f000 fb40 	bl	800a970 <__assert_func>
 800a2f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a2f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a2f8:	bb2d      	cbnz	r5, 800a346 <__d2b+0x7a>
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	f1b8 0300 	subs.w	r3, r8, #0
 800a300:	d026      	beq.n	800a350 <__d2b+0x84>
 800a302:	4668      	mov	r0, sp
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	f7ff fd09 	bl	8009d1c <__lo0bits>
 800a30a:	9900      	ldr	r1, [sp, #0]
 800a30c:	b1f0      	cbz	r0, 800a34c <__d2b+0x80>
 800a30e:	9a01      	ldr	r2, [sp, #4]
 800a310:	f1c0 0320 	rsb	r3, r0, #32
 800a314:	fa02 f303 	lsl.w	r3, r2, r3
 800a318:	430b      	orrs	r3, r1
 800a31a:	40c2      	lsrs	r2, r0
 800a31c:	6163      	str	r3, [r4, #20]
 800a31e:	9201      	str	r2, [sp, #4]
 800a320:	9b01      	ldr	r3, [sp, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	bf14      	ite	ne
 800a326:	2102      	movne	r1, #2
 800a328:	2101      	moveq	r1, #1
 800a32a:	61a3      	str	r3, [r4, #24]
 800a32c:	6121      	str	r1, [r4, #16]
 800a32e:	b1c5      	cbz	r5, 800a362 <__d2b+0x96>
 800a330:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a334:	4405      	add	r5, r0
 800a336:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a33a:	603d      	str	r5, [r7, #0]
 800a33c:	6030      	str	r0, [r6, #0]
 800a33e:	4620      	mov	r0, r4
 800a340:	b002      	add	sp, #8
 800a342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a34a:	e7d6      	b.n	800a2fa <__d2b+0x2e>
 800a34c:	6161      	str	r1, [r4, #20]
 800a34e:	e7e7      	b.n	800a320 <__d2b+0x54>
 800a350:	a801      	add	r0, sp, #4
 800a352:	f7ff fce3 	bl	8009d1c <__lo0bits>
 800a356:	2101      	movs	r1, #1
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	6121      	str	r1, [r4, #16]
 800a35c:	6163      	str	r3, [r4, #20]
 800a35e:	3020      	adds	r0, #32
 800a360:	e7e5      	b.n	800a32e <__d2b+0x62>
 800a362:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a366:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a36a:	6038      	str	r0, [r7, #0]
 800a36c:	6918      	ldr	r0, [r3, #16]
 800a36e:	f7ff fcb5 	bl	8009cdc <__hi0bits>
 800a372:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a376:	6031      	str	r1, [r6, #0]
 800a378:	e7e1      	b.n	800a33e <__d2b+0x72>
 800a37a:	bf00      	nop
 800a37c:	0800bb50 	.word	0x0800bb50
 800a380:	0800bbdc 	.word	0x0800bbdc

0800a384 <__ratio>:
 800a384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	4688      	mov	r8, r1
 800a38a:	4669      	mov	r1, sp
 800a38c:	4681      	mov	r9, r0
 800a38e:	f7ff ff49 	bl	800a224 <__b2d>
 800a392:	460f      	mov	r7, r1
 800a394:	4604      	mov	r4, r0
 800a396:	460d      	mov	r5, r1
 800a398:	4640      	mov	r0, r8
 800a39a:	a901      	add	r1, sp, #4
 800a39c:	f7ff ff42 	bl	800a224 <__b2d>
 800a3a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a3a8:	468b      	mov	fp, r1
 800a3aa:	eba3 0c02 	sub.w	ip, r3, r2
 800a3ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfd5      	itete	le
 800a3bc:	460a      	movle	r2, r1
 800a3be:	462a      	movgt	r2, r5
 800a3c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3c4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3c8:	bfd8      	it	le
 800a3ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a3ce:	465b      	mov	r3, fp
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f7f6 f9a9 	bl	800072c <__aeabi_ddiv>
 800a3da:	b003      	add	sp, #12
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3e0 <__copybits>:
 800a3e0:	3901      	subs	r1, #1
 800a3e2:	b570      	push	{r4, r5, r6, lr}
 800a3e4:	1149      	asrs	r1, r1, #5
 800a3e6:	6914      	ldr	r4, [r2, #16]
 800a3e8:	3101      	adds	r1, #1
 800a3ea:	f102 0314 	add.w	r3, r2, #20
 800a3ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3f6:	1f05      	subs	r5, r0, #4
 800a3f8:	42a3      	cmp	r3, r4
 800a3fa:	d30c      	bcc.n	800a416 <__copybits+0x36>
 800a3fc:	1aa3      	subs	r3, r4, r2
 800a3fe:	3b11      	subs	r3, #17
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	3211      	adds	r2, #17
 800a406:	42a2      	cmp	r2, r4
 800a408:	bf88      	it	hi
 800a40a:	2300      	movhi	r3, #0
 800a40c:	4418      	add	r0, r3
 800a40e:	2300      	movs	r3, #0
 800a410:	4288      	cmp	r0, r1
 800a412:	d305      	bcc.n	800a420 <__copybits+0x40>
 800a414:	bd70      	pop	{r4, r5, r6, pc}
 800a416:	f853 6b04 	ldr.w	r6, [r3], #4
 800a41a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a41e:	e7eb      	b.n	800a3f8 <__copybits+0x18>
 800a420:	f840 3b04 	str.w	r3, [r0], #4
 800a424:	e7f4      	b.n	800a410 <__copybits+0x30>

0800a426 <__any_on>:
 800a426:	f100 0214 	add.w	r2, r0, #20
 800a42a:	6900      	ldr	r0, [r0, #16]
 800a42c:	114b      	asrs	r3, r1, #5
 800a42e:	4298      	cmp	r0, r3
 800a430:	b510      	push	{r4, lr}
 800a432:	db11      	blt.n	800a458 <__any_on+0x32>
 800a434:	dd0a      	ble.n	800a44c <__any_on+0x26>
 800a436:	f011 011f 	ands.w	r1, r1, #31
 800a43a:	d007      	beq.n	800a44c <__any_on+0x26>
 800a43c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a440:	fa24 f001 	lsr.w	r0, r4, r1
 800a444:	fa00 f101 	lsl.w	r1, r0, r1
 800a448:	428c      	cmp	r4, r1
 800a44a:	d10b      	bne.n	800a464 <__any_on+0x3e>
 800a44c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a450:	4293      	cmp	r3, r2
 800a452:	d803      	bhi.n	800a45c <__any_on+0x36>
 800a454:	2000      	movs	r0, #0
 800a456:	bd10      	pop	{r4, pc}
 800a458:	4603      	mov	r3, r0
 800a45a:	e7f7      	b.n	800a44c <__any_on+0x26>
 800a45c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a460:	2900      	cmp	r1, #0
 800a462:	d0f5      	beq.n	800a450 <__any_on+0x2a>
 800a464:	2001      	movs	r0, #1
 800a466:	e7f6      	b.n	800a456 <__any_on+0x30>

0800a468 <_calloc_r>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	fba1 5402 	umull	r5, r4, r1, r2
 800a46e:	b934      	cbnz	r4, 800a47e <_calloc_r+0x16>
 800a470:	4629      	mov	r1, r5
 800a472:	f000 f875 	bl	800a560 <_malloc_r>
 800a476:	4606      	mov	r6, r0
 800a478:	b928      	cbnz	r0, 800a486 <_calloc_r+0x1e>
 800a47a:	4630      	mov	r0, r6
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	220c      	movs	r2, #12
 800a480:	2600      	movs	r6, #0
 800a482:	6002      	str	r2, [r0, #0]
 800a484:	e7f9      	b.n	800a47a <_calloc_r+0x12>
 800a486:	462a      	mov	r2, r5
 800a488:	4621      	mov	r1, r4
 800a48a:	f7fc fbff 	bl	8006c8c <memset>
 800a48e:	e7f4      	b.n	800a47a <_calloc_r+0x12>

0800a490 <_free_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4605      	mov	r5, r0
 800a494:	2900      	cmp	r1, #0
 800a496:	d040      	beq.n	800a51a <_free_r+0x8a>
 800a498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a49c:	1f0c      	subs	r4, r1, #4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bfb8      	it	lt
 800a4a2:	18e4      	addlt	r4, r4, r3
 800a4a4:	f000 faae 	bl	800aa04 <__malloc_lock>
 800a4a8:	4a1c      	ldr	r2, [pc, #112]	; (800a51c <_free_r+0x8c>)
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	b933      	cbnz	r3, 800a4bc <_free_r+0x2c>
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	6014      	str	r4, [r2, #0]
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4b8:	f000 baaa 	b.w	800aa10 <__malloc_unlock>
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d908      	bls.n	800a4d2 <_free_r+0x42>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	1821      	adds	r1, r4, r0
 800a4c4:	428b      	cmp	r3, r1
 800a4c6:	bf01      	itttt	eq
 800a4c8:	6819      	ldreq	r1, [r3, #0]
 800a4ca:	685b      	ldreq	r3, [r3, #4]
 800a4cc:	1809      	addeq	r1, r1, r0
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	e7ed      	b.n	800a4ae <_free_r+0x1e>
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	b10b      	cbz	r3, 800a4dc <_free_r+0x4c>
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	d9fa      	bls.n	800a4d2 <_free_r+0x42>
 800a4dc:	6811      	ldr	r1, [r2, #0]
 800a4de:	1850      	adds	r0, r2, r1
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	d10b      	bne.n	800a4fc <_free_r+0x6c>
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	1850      	adds	r0, r2, r1
 800a4ea:	4283      	cmp	r3, r0
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	d1e0      	bne.n	800a4b2 <_free_r+0x22>
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	4401      	add	r1, r0
 800a4f6:	6011      	str	r1, [r2, #0]
 800a4f8:	6053      	str	r3, [r2, #4]
 800a4fa:	e7da      	b.n	800a4b2 <_free_r+0x22>
 800a4fc:	d902      	bls.n	800a504 <_free_r+0x74>
 800a4fe:	230c      	movs	r3, #12
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	e7d6      	b.n	800a4b2 <_free_r+0x22>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	1821      	adds	r1, r4, r0
 800a508:	428b      	cmp	r3, r1
 800a50a:	bf01      	itttt	eq
 800a50c:	6819      	ldreq	r1, [r3, #0]
 800a50e:	685b      	ldreq	r3, [r3, #4]
 800a510:	1809      	addeq	r1, r1, r0
 800a512:	6021      	streq	r1, [r4, #0]
 800a514:	6063      	str	r3, [r4, #4]
 800a516:	6054      	str	r4, [r2, #4]
 800a518:	e7cb      	b.n	800a4b2 <_free_r+0x22>
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	200004d8 	.word	0x200004d8

0800a520 <sbrk_aligned>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	4e0e      	ldr	r6, [pc, #56]	; (800a55c <sbrk_aligned+0x3c>)
 800a524:	460c      	mov	r4, r1
 800a526:	6831      	ldr	r1, [r6, #0]
 800a528:	4605      	mov	r5, r0
 800a52a:	b911      	cbnz	r1, 800a532 <sbrk_aligned+0x12>
 800a52c:	f000 f9ee 	bl	800a90c <_sbrk_r>
 800a530:	6030      	str	r0, [r6, #0]
 800a532:	4621      	mov	r1, r4
 800a534:	4628      	mov	r0, r5
 800a536:	f000 f9e9 	bl	800a90c <_sbrk_r>
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	d00a      	beq.n	800a554 <sbrk_aligned+0x34>
 800a53e:	1cc4      	adds	r4, r0, #3
 800a540:	f024 0403 	bic.w	r4, r4, #3
 800a544:	42a0      	cmp	r0, r4
 800a546:	d007      	beq.n	800a558 <sbrk_aligned+0x38>
 800a548:	1a21      	subs	r1, r4, r0
 800a54a:	4628      	mov	r0, r5
 800a54c:	f000 f9de 	bl	800a90c <_sbrk_r>
 800a550:	3001      	adds	r0, #1
 800a552:	d101      	bne.n	800a558 <sbrk_aligned+0x38>
 800a554:	f04f 34ff 	mov.w	r4, #4294967295
 800a558:	4620      	mov	r0, r4
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	200004dc 	.word	0x200004dc

0800a560 <_malloc_r>:
 800a560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a564:	1ccd      	adds	r5, r1, #3
 800a566:	f025 0503 	bic.w	r5, r5, #3
 800a56a:	3508      	adds	r5, #8
 800a56c:	2d0c      	cmp	r5, #12
 800a56e:	bf38      	it	cc
 800a570:	250c      	movcc	r5, #12
 800a572:	2d00      	cmp	r5, #0
 800a574:	4607      	mov	r7, r0
 800a576:	db01      	blt.n	800a57c <_malloc_r+0x1c>
 800a578:	42a9      	cmp	r1, r5
 800a57a:	d905      	bls.n	800a588 <_malloc_r+0x28>
 800a57c:	230c      	movs	r3, #12
 800a57e:	2600      	movs	r6, #0
 800a580:	603b      	str	r3, [r7, #0]
 800a582:	4630      	mov	r0, r6
 800a584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a588:	4e2e      	ldr	r6, [pc, #184]	; (800a644 <_malloc_r+0xe4>)
 800a58a:	f000 fa3b 	bl	800aa04 <__malloc_lock>
 800a58e:	6833      	ldr	r3, [r6, #0]
 800a590:	461c      	mov	r4, r3
 800a592:	bb34      	cbnz	r4, 800a5e2 <_malloc_r+0x82>
 800a594:	4629      	mov	r1, r5
 800a596:	4638      	mov	r0, r7
 800a598:	f7ff ffc2 	bl	800a520 <sbrk_aligned>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	4604      	mov	r4, r0
 800a5a0:	d14d      	bne.n	800a63e <_malloc_r+0xde>
 800a5a2:	6834      	ldr	r4, [r6, #0]
 800a5a4:	4626      	mov	r6, r4
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	d140      	bne.n	800a62c <_malloc_r+0xcc>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	eb04 0803 	add.w	r8, r4, r3
 800a5b4:	f000 f9aa 	bl	800a90c <_sbrk_r>
 800a5b8:	4580      	cmp	r8, r0
 800a5ba:	d13a      	bne.n	800a632 <_malloc_r+0xd2>
 800a5bc:	6821      	ldr	r1, [r4, #0]
 800a5be:	3503      	adds	r5, #3
 800a5c0:	1a6d      	subs	r5, r5, r1
 800a5c2:	f025 0503 	bic.w	r5, r5, #3
 800a5c6:	3508      	adds	r5, #8
 800a5c8:	2d0c      	cmp	r5, #12
 800a5ca:	bf38      	it	cc
 800a5cc:	250c      	movcc	r5, #12
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7ff ffa5 	bl	800a520 <sbrk_aligned>
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d02b      	beq.n	800a632 <_malloc_r+0xd2>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	442b      	add	r3, r5
 800a5de:	6023      	str	r3, [r4, #0]
 800a5e0:	e00e      	b.n	800a600 <_malloc_r+0xa0>
 800a5e2:	6822      	ldr	r2, [r4, #0]
 800a5e4:	1b52      	subs	r2, r2, r5
 800a5e6:	d41e      	bmi.n	800a626 <_malloc_r+0xc6>
 800a5e8:	2a0b      	cmp	r2, #11
 800a5ea:	d916      	bls.n	800a61a <_malloc_r+0xba>
 800a5ec:	1961      	adds	r1, r4, r5
 800a5ee:	42a3      	cmp	r3, r4
 800a5f0:	6025      	str	r5, [r4, #0]
 800a5f2:	bf18      	it	ne
 800a5f4:	6059      	strne	r1, [r3, #4]
 800a5f6:	6863      	ldr	r3, [r4, #4]
 800a5f8:	bf08      	it	eq
 800a5fa:	6031      	streq	r1, [r6, #0]
 800a5fc:	5162      	str	r2, [r4, r5]
 800a5fe:	604b      	str	r3, [r1, #4]
 800a600:	4638      	mov	r0, r7
 800a602:	f104 060b 	add.w	r6, r4, #11
 800a606:	f000 fa03 	bl	800aa10 <__malloc_unlock>
 800a60a:	f026 0607 	bic.w	r6, r6, #7
 800a60e:	1d23      	adds	r3, r4, #4
 800a610:	1af2      	subs	r2, r6, r3
 800a612:	d0b6      	beq.n	800a582 <_malloc_r+0x22>
 800a614:	1b9b      	subs	r3, r3, r6
 800a616:	50a3      	str	r3, [r4, r2]
 800a618:	e7b3      	b.n	800a582 <_malloc_r+0x22>
 800a61a:	6862      	ldr	r2, [r4, #4]
 800a61c:	42a3      	cmp	r3, r4
 800a61e:	bf0c      	ite	eq
 800a620:	6032      	streq	r2, [r6, #0]
 800a622:	605a      	strne	r2, [r3, #4]
 800a624:	e7ec      	b.n	800a600 <_malloc_r+0xa0>
 800a626:	4623      	mov	r3, r4
 800a628:	6864      	ldr	r4, [r4, #4]
 800a62a:	e7b2      	b.n	800a592 <_malloc_r+0x32>
 800a62c:	4634      	mov	r4, r6
 800a62e:	6876      	ldr	r6, [r6, #4]
 800a630:	e7b9      	b.n	800a5a6 <_malloc_r+0x46>
 800a632:	230c      	movs	r3, #12
 800a634:	4638      	mov	r0, r7
 800a636:	603b      	str	r3, [r7, #0]
 800a638:	f000 f9ea 	bl	800aa10 <__malloc_unlock>
 800a63c:	e7a1      	b.n	800a582 <_malloc_r+0x22>
 800a63e:	6025      	str	r5, [r4, #0]
 800a640:	e7de      	b.n	800a600 <_malloc_r+0xa0>
 800a642:	bf00      	nop
 800a644:	200004d8 	.word	0x200004d8

0800a648 <__ssputs_r>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	688e      	ldr	r6, [r1, #8]
 800a64e:	4682      	mov	sl, r0
 800a650:	429e      	cmp	r6, r3
 800a652:	460c      	mov	r4, r1
 800a654:	4690      	mov	r8, r2
 800a656:	461f      	mov	r7, r3
 800a658:	d838      	bhi.n	800a6cc <__ssputs_r+0x84>
 800a65a:	898a      	ldrh	r2, [r1, #12]
 800a65c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a660:	d032      	beq.n	800a6c8 <__ssputs_r+0x80>
 800a662:	6825      	ldr	r5, [r4, #0]
 800a664:	6909      	ldr	r1, [r1, #16]
 800a666:	3301      	adds	r3, #1
 800a668:	eba5 0901 	sub.w	r9, r5, r1
 800a66c:	6965      	ldr	r5, [r4, #20]
 800a66e:	444b      	add	r3, r9
 800a670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a678:	106d      	asrs	r5, r5, #1
 800a67a:	429d      	cmp	r5, r3
 800a67c:	bf38      	it	cc
 800a67e:	461d      	movcc	r5, r3
 800a680:	0553      	lsls	r3, r2, #21
 800a682:	d531      	bpl.n	800a6e8 <__ssputs_r+0xa0>
 800a684:	4629      	mov	r1, r5
 800a686:	f7ff ff6b 	bl	800a560 <_malloc_r>
 800a68a:	4606      	mov	r6, r0
 800a68c:	b950      	cbnz	r0, 800a6a4 <__ssputs_r+0x5c>
 800a68e:	230c      	movs	r3, #12
 800a690:	f04f 30ff 	mov.w	r0, #4294967295
 800a694:	f8ca 3000 	str.w	r3, [sl]
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69e:	81a3      	strh	r3, [r4, #12]
 800a6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a4:	464a      	mov	r2, r9
 800a6a6:	6921      	ldr	r1, [r4, #16]
 800a6a8:	f7fc fae2 	bl	8006c70 <memcpy>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	6126      	str	r6, [r4, #16]
 800a6ba:	444e      	add	r6, r9
 800a6bc:	6026      	str	r6, [r4, #0]
 800a6be:	463e      	mov	r6, r7
 800a6c0:	6165      	str	r5, [r4, #20]
 800a6c2:	eba5 0509 	sub.w	r5, r5, r9
 800a6c6:	60a5      	str	r5, [r4, #8]
 800a6c8:	42be      	cmp	r6, r7
 800a6ca:	d900      	bls.n	800a6ce <__ssputs_r+0x86>
 800a6cc:	463e      	mov	r6, r7
 800a6ce:	4632      	mov	r2, r6
 800a6d0:	4641      	mov	r1, r8
 800a6d2:	6820      	ldr	r0, [r4, #0]
 800a6d4:	f000 f97c 	bl	800a9d0 <memmove>
 800a6d8:	68a3      	ldr	r3, [r4, #8]
 800a6da:	2000      	movs	r0, #0
 800a6dc:	1b9b      	subs	r3, r3, r6
 800a6de:	60a3      	str	r3, [r4, #8]
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	4433      	add	r3, r6
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	e7db      	b.n	800a6a0 <__ssputs_r+0x58>
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	f000 f997 	bl	800aa1c <_realloc_r>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d1e1      	bne.n	800a6b8 <__ssputs_r+0x70>
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	6921      	ldr	r1, [r4, #16]
 800a6f8:	f7ff feca 	bl	800a490 <_free_r>
 800a6fc:	e7c7      	b.n	800a68e <__ssputs_r+0x46>
	...

0800a700 <_svfiprintf_r>:
 800a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	4698      	mov	r8, r3
 800a706:	898b      	ldrh	r3, [r1, #12]
 800a708:	4607      	mov	r7, r0
 800a70a:	061b      	lsls	r3, r3, #24
 800a70c:	460d      	mov	r5, r1
 800a70e:	4614      	mov	r4, r2
 800a710:	b09d      	sub	sp, #116	; 0x74
 800a712:	d50e      	bpl.n	800a732 <_svfiprintf_r+0x32>
 800a714:	690b      	ldr	r3, [r1, #16]
 800a716:	b963      	cbnz	r3, 800a732 <_svfiprintf_r+0x32>
 800a718:	2140      	movs	r1, #64	; 0x40
 800a71a:	f7ff ff21 	bl	800a560 <_malloc_r>
 800a71e:	6028      	str	r0, [r5, #0]
 800a720:	6128      	str	r0, [r5, #16]
 800a722:	b920      	cbnz	r0, 800a72e <_svfiprintf_r+0x2e>
 800a724:	230c      	movs	r3, #12
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	e0d1      	b.n	800a8d2 <_svfiprintf_r+0x1d2>
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	616b      	str	r3, [r5, #20]
 800a732:	2300      	movs	r3, #0
 800a734:	9309      	str	r3, [sp, #36]	; 0x24
 800a736:	2320      	movs	r3, #32
 800a738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a73c:	2330      	movs	r3, #48	; 0x30
 800a73e:	f04f 0901 	mov.w	r9, #1
 800a742:	f8cd 800c 	str.w	r8, [sp, #12]
 800a746:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8ec <_svfiprintf_r+0x1ec>
 800a74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a74e:	4623      	mov	r3, r4
 800a750:	469a      	mov	sl, r3
 800a752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a756:	b10a      	cbz	r2, 800a75c <_svfiprintf_r+0x5c>
 800a758:	2a25      	cmp	r2, #37	; 0x25
 800a75a:	d1f9      	bne.n	800a750 <_svfiprintf_r+0x50>
 800a75c:	ebba 0b04 	subs.w	fp, sl, r4
 800a760:	d00b      	beq.n	800a77a <_svfiprintf_r+0x7a>
 800a762:	465b      	mov	r3, fp
 800a764:	4622      	mov	r2, r4
 800a766:	4629      	mov	r1, r5
 800a768:	4638      	mov	r0, r7
 800a76a:	f7ff ff6d 	bl	800a648 <__ssputs_r>
 800a76e:	3001      	adds	r0, #1
 800a770:	f000 80aa 	beq.w	800a8c8 <_svfiprintf_r+0x1c8>
 800a774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a776:	445a      	add	r2, fp
 800a778:	9209      	str	r2, [sp, #36]	; 0x24
 800a77a:	f89a 3000 	ldrb.w	r3, [sl]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80a2 	beq.w	800a8c8 <_svfiprintf_r+0x1c8>
 800a784:	2300      	movs	r3, #0
 800a786:	f04f 32ff 	mov.w	r2, #4294967295
 800a78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a78e:	f10a 0a01 	add.w	sl, sl, #1
 800a792:	9304      	str	r3, [sp, #16]
 800a794:	9307      	str	r3, [sp, #28]
 800a796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a79a:	931a      	str	r3, [sp, #104]	; 0x68
 800a79c:	4654      	mov	r4, sl
 800a79e:	2205      	movs	r2, #5
 800a7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a4:	4851      	ldr	r0, [pc, #324]	; (800a8ec <_svfiprintf_r+0x1ec>)
 800a7a6:	f7ff f999 	bl	8009adc <memchr>
 800a7aa:	9a04      	ldr	r2, [sp, #16]
 800a7ac:	b9d8      	cbnz	r0, 800a7e6 <_svfiprintf_r+0xe6>
 800a7ae:	06d0      	lsls	r0, r2, #27
 800a7b0:	bf44      	itt	mi
 800a7b2:	2320      	movmi	r3, #32
 800a7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b8:	0711      	lsls	r1, r2, #28
 800a7ba:	bf44      	itt	mi
 800a7bc:	232b      	movmi	r3, #43	; 0x2b
 800a7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c8:	d015      	beq.n	800a7f6 <_svfiprintf_r+0xf6>
 800a7ca:	4654      	mov	r4, sl
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f04f 0c0a 	mov.w	ip, #10
 800a7d2:	9a07      	ldr	r2, [sp, #28]
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7da:	3b30      	subs	r3, #48	; 0x30
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d94e      	bls.n	800a87e <_svfiprintf_r+0x17e>
 800a7e0:	b1b0      	cbz	r0, 800a810 <_svfiprintf_r+0x110>
 800a7e2:	9207      	str	r2, [sp, #28]
 800a7e4:	e014      	b.n	800a810 <_svfiprintf_r+0x110>
 800a7e6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	46a2      	mov	sl, r4
 800a7f2:	9304      	str	r3, [sp, #16]
 800a7f4:	e7d2      	b.n	800a79c <_svfiprintf_r+0x9c>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d19      	adds	r1, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9103      	str	r1, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfbb      	ittet	lt
 800a802:	425b      	neglt	r3, r3
 800a804:	f042 0202 	orrlt.w	r2, r2, #2
 800a808:	9307      	strge	r3, [sp, #28]
 800a80a:	9307      	strlt	r3, [sp, #28]
 800a80c:	bfb8      	it	lt
 800a80e:	9204      	strlt	r2, [sp, #16]
 800a810:	7823      	ldrb	r3, [r4, #0]
 800a812:	2b2e      	cmp	r3, #46	; 0x2e
 800a814:	d10c      	bne.n	800a830 <_svfiprintf_r+0x130>
 800a816:	7863      	ldrb	r3, [r4, #1]
 800a818:	2b2a      	cmp	r3, #42	; 0x2a
 800a81a:	d135      	bne.n	800a888 <_svfiprintf_r+0x188>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	3402      	adds	r4, #2
 800a820:	1d1a      	adds	r2, r3, #4
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	9203      	str	r2, [sp, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	bfb8      	it	lt
 800a82a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a8f0 <_svfiprintf_r+0x1f0>
 800a834:	2203      	movs	r2, #3
 800a836:	4650      	mov	r0, sl
 800a838:	7821      	ldrb	r1, [r4, #0]
 800a83a:	f7ff f94f 	bl	8009adc <memchr>
 800a83e:	b140      	cbz	r0, 800a852 <_svfiprintf_r+0x152>
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	eba0 000a 	sub.w	r0, r0, sl
 800a846:	fa03 f000 	lsl.w	r0, r3, r0
 800a84a:	9b04      	ldr	r3, [sp, #16]
 800a84c:	3401      	adds	r4, #1
 800a84e:	4303      	orrs	r3, r0
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a856:	2206      	movs	r2, #6
 800a858:	4826      	ldr	r0, [pc, #152]	; (800a8f4 <_svfiprintf_r+0x1f4>)
 800a85a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a85e:	f7ff f93d 	bl	8009adc <memchr>
 800a862:	2800      	cmp	r0, #0
 800a864:	d038      	beq.n	800a8d8 <_svfiprintf_r+0x1d8>
 800a866:	4b24      	ldr	r3, [pc, #144]	; (800a8f8 <_svfiprintf_r+0x1f8>)
 800a868:	bb1b      	cbnz	r3, 800a8b2 <_svfiprintf_r+0x1b2>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	3307      	adds	r3, #7
 800a86e:	f023 0307 	bic.w	r3, r3, #7
 800a872:	3308      	adds	r3, #8
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	4433      	add	r3, r6
 800a87a:	9309      	str	r3, [sp, #36]	; 0x24
 800a87c:	e767      	b.n	800a74e <_svfiprintf_r+0x4e>
 800a87e:	460c      	mov	r4, r1
 800a880:	2001      	movs	r0, #1
 800a882:	fb0c 3202 	mla	r2, ip, r2, r3
 800a886:	e7a5      	b.n	800a7d4 <_svfiprintf_r+0xd4>
 800a888:	2300      	movs	r3, #0
 800a88a:	f04f 0c0a 	mov.w	ip, #10
 800a88e:	4619      	mov	r1, r3
 800a890:	3401      	adds	r4, #1
 800a892:	9305      	str	r3, [sp, #20]
 800a894:	4620      	mov	r0, r4
 800a896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89a:	3a30      	subs	r2, #48	; 0x30
 800a89c:	2a09      	cmp	r2, #9
 800a89e:	d903      	bls.n	800a8a8 <_svfiprintf_r+0x1a8>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0c5      	beq.n	800a830 <_svfiprintf_r+0x130>
 800a8a4:	9105      	str	r1, [sp, #20]
 800a8a6:	e7c3      	b.n	800a830 <_svfiprintf_r+0x130>
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b0:	e7f0      	b.n	800a894 <_svfiprintf_r+0x194>
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	4b10      	ldr	r3, [pc, #64]	; (800a8fc <_svfiprintf_r+0x1fc>)
 800a8bc:	a904      	add	r1, sp, #16
 800a8be:	f7fc fa8b 	bl	8006dd8 <_printf_float>
 800a8c2:	1c42      	adds	r2, r0, #1
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	d1d6      	bne.n	800a876 <_svfiprintf_r+0x176>
 800a8c8:	89ab      	ldrh	r3, [r5, #12]
 800a8ca:	065b      	lsls	r3, r3, #25
 800a8cc:	f53f af2c 	bmi.w	800a728 <_svfiprintf_r+0x28>
 800a8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d2:	b01d      	add	sp, #116	; 0x74
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	ab03      	add	r3, sp, #12
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	4638      	mov	r0, r7
 800a8e0:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <_svfiprintf_r+0x1fc>)
 800a8e2:	a904      	add	r1, sp, #16
 800a8e4:	f7fc fd14 	bl	8007310 <_printf_i>
 800a8e8:	e7eb      	b.n	800a8c2 <_svfiprintf_r+0x1c2>
 800a8ea:	bf00      	nop
 800a8ec:	0800bd34 	.word	0x0800bd34
 800a8f0:	0800bd3a 	.word	0x0800bd3a
 800a8f4:	0800bd3e 	.word	0x0800bd3e
 800a8f8:	08006dd9 	.word	0x08006dd9
 800a8fc:	0800a649 	.word	0x0800a649

0800a900 <nan>:
 800a900:	2000      	movs	r0, #0
 800a902:	4901      	ldr	r1, [pc, #4]	; (800a908 <nan+0x8>)
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	7ff80000 	.word	0x7ff80000

0800a90c <_sbrk_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	2300      	movs	r3, #0
 800a910:	4d05      	ldr	r5, [pc, #20]	; (800a928 <_sbrk_r+0x1c>)
 800a912:	4604      	mov	r4, r0
 800a914:	4608      	mov	r0, r1
 800a916:	602b      	str	r3, [r5, #0]
 800a918:	f7f7 f922 	bl	8001b60 <_sbrk>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_sbrk_r+0x1a>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_sbrk_r+0x1a>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	200004e0 	.word	0x200004e0

0800a92c <strncmp>:
 800a92c:	4603      	mov	r3, r0
 800a92e:	b510      	push	{r4, lr}
 800a930:	b172      	cbz	r2, 800a950 <strncmp+0x24>
 800a932:	3901      	subs	r1, #1
 800a934:	1884      	adds	r4, r0, r2
 800a936:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a93a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a93e:	4290      	cmp	r0, r2
 800a940:	d101      	bne.n	800a946 <strncmp+0x1a>
 800a942:	42a3      	cmp	r3, r4
 800a944:	d101      	bne.n	800a94a <strncmp+0x1e>
 800a946:	1a80      	subs	r0, r0, r2
 800a948:	bd10      	pop	{r4, pc}
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d1f3      	bne.n	800a936 <strncmp+0xa>
 800a94e:	e7fa      	b.n	800a946 <strncmp+0x1a>
 800a950:	4610      	mov	r0, r2
 800a952:	e7f9      	b.n	800a948 <strncmp+0x1c>

0800a954 <__ascii_wctomb>:
 800a954:	4603      	mov	r3, r0
 800a956:	4608      	mov	r0, r1
 800a958:	b141      	cbz	r1, 800a96c <__ascii_wctomb+0x18>
 800a95a:	2aff      	cmp	r2, #255	; 0xff
 800a95c:	d904      	bls.n	800a968 <__ascii_wctomb+0x14>
 800a95e:	228a      	movs	r2, #138	; 0x8a
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	4770      	bx	lr
 800a968:	2001      	movs	r0, #1
 800a96a:	700a      	strb	r2, [r1, #0]
 800a96c:	4770      	bx	lr
	...

0800a970 <__assert_func>:
 800a970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a972:	4614      	mov	r4, r2
 800a974:	461a      	mov	r2, r3
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <__assert_func+0x2c>)
 800a978:	4605      	mov	r5, r0
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68d8      	ldr	r0, [r3, #12]
 800a97e:	b14c      	cbz	r4, 800a994 <__assert_func+0x24>
 800a980:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <__assert_func+0x30>)
 800a982:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a986:	9100      	str	r1, [sp, #0]
 800a988:	462b      	mov	r3, r5
 800a98a:	4906      	ldr	r1, [pc, #24]	; (800a9a4 <__assert_func+0x34>)
 800a98c:	f000 f80e 	bl	800a9ac <fiprintf>
 800a990:	f000 fa8a 	bl	800aea8 <abort>
 800a994:	4b04      	ldr	r3, [pc, #16]	; (800a9a8 <__assert_func+0x38>)
 800a996:	461c      	mov	r4, r3
 800a998:	e7f3      	b.n	800a982 <__assert_func+0x12>
 800a99a:	bf00      	nop
 800a99c:	20000088 	.word	0x20000088
 800a9a0:	0800bd45 	.word	0x0800bd45
 800a9a4:	0800bd52 	.word	0x0800bd52
 800a9a8:	0800bd80 	.word	0x0800bd80

0800a9ac <fiprintf>:
 800a9ac:	b40e      	push	{r1, r2, r3}
 800a9ae:	b503      	push	{r0, r1, lr}
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	ab03      	add	r3, sp, #12
 800a9b4:	4805      	ldr	r0, [pc, #20]	; (800a9cc <fiprintf+0x20>)
 800a9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ba:	6800      	ldr	r0, [r0, #0]
 800a9bc:	9301      	str	r3, [sp, #4]
 800a9be:	f000 f883 	bl	800aac8 <_vfiprintf_r>
 800a9c2:	b002      	add	sp, #8
 800a9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c8:	b003      	add	sp, #12
 800a9ca:	4770      	bx	lr
 800a9cc:	20000088 	.word	0x20000088

0800a9d0 <memmove>:
 800a9d0:	4288      	cmp	r0, r1
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	eb01 0402 	add.w	r4, r1, r2
 800a9d8:	d902      	bls.n	800a9e0 <memmove+0x10>
 800a9da:	4284      	cmp	r4, r0
 800a9dc:	4623      	mov	r3, r4
 800a9de:	d807      	bhi.n	800a9f0 <memmove+0x20>
 800a9e0:	1e43      	subs	r3, r0, #1
 800a9e2:	42a1      	cmp	r1, r4
 800a9e4:	d008      	beq.n	800a9f8 <memmove+0x28>
 800a9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ee:	e7f8      	b.n	800a9e2 <memmove+0x12>
 800a9f0:	4601      	mov	r1, r0
 800a9f2:	4402      	add	r2, r0
 800a9f4:	428a      	cmp	r2, r1
 800a9f6:	d100      	bne.n	800a9fa <memmove+0x2a>
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa02:	e7f7      	b.n	800a9f4 <memmove+0x24>

0800aa04 <__malloc_lock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__malloc_lock+0x8>)
 800aa06:	f000 bc0b 	b.w	800b220 <__retarget_lock_acquire_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	200004e4 	.word	0x200004e4

0800aa10 <__malloc_unlock>:
 800aa10:	4801      	ldr	r0, [pc, #4]	; (800aa18 <__malloc_unlock+0x8>)
 800aa12:	f000 bc06 	b.w	800b222 <__retarget_lock_release_recursive>
 800aa16:	bf00      	nop
 800aa18:	200004e4 	.word	0x200004e4

0800aa1c <_realloc_r>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	4680      	mov	r8, r0
 800aa22:	4614      	mov	r4, r2
 800aa24:	460e      	mov	r6, r1
 800aa26:	b921      	cbnz	r1, 800aa32 <_realloc_r+0x16>
 800aa28:	4611      	mov	r1, r2
 800aa2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2e:	f7ff bd97 	b.w	800a560 <_malloc_r>
 800aa32:	b92a      	cbnz	r2, 800aa40 <_realloc_r+0x24>
 800aa34:	f7ff fd2c 	bl	800a490 <_free_r>
 800aa38:	4625      	mov	r5, r4
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa40:	f000 fc56 	bl	800b2f0 <_malloc_usable_size_r>
 800aa44:	4284      	cmp	r4, r0
 800aa46:	4607      	mov	r7, r0
 800aa48:	d802      	bhi.n	800aa50 <_realloc_r+0x34>
 800aa4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa4e:	d812      	bhi.n	800aa76 <_realloc_r+0x5a>
 800aa50:	4621      	mov	r1, r4
 800aa52:	4640      	mov	r0, r8
 800aa54:	f7ff fd84 	bl	800a560 <_malloc_r>
 800aa58:	4605      	mov	r5, r0
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d0ed      	beq.n	800aa3a <_realloc_r+0x1e>
 800aa5e:	42bc      	cmp	r4, r7
 800aa60:	4622      	mov	r2, r4
 800aa62:	4631      	mov	r1, r6
 800aa64:	bf28      	it	cs
 800aa66:	463a      	movcs	r2, r7
 800aa68:	f7fc f902 	bl	8006c70 <memcpy>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7ff fd0e 	bl	800a490 <_free_r>
 800aa74:	e7e1      	b.n	800aa3a <_realloc_r+0x1e>
 800aa76:	4635      	mov	r5, r6
 800aa78:	e7df      	b.n	800aa3a <_realloc_r+0x1e>

0800aa7a <__sfputc_r>:
 800aa7a:	6893      	ldr	r3, [r2, #8]
 800aa7c:	b410      	push	{r4}
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	6093      	str	r3, [r2, #8]
 800aa84:	da07      	bge.n	800aa96 <__sfputc_r+0x1c>
 800aa86:	6994      	ldr	r4, [r2, #24]
 800aa88:	42a3      	cmp	r3, r4
 800aa8a:	db01      	blt.n	800aa90 <__sfputc_r+0x16>
 800aa8c:	290a      	cmp	r1, #10
 800aa8e:	d102      	bne.n	800aa96 <__sfputc_r+0x1c>
 800aa90:	bc10      	pop	{r4}
 800aa92:	f000 b949 	b.w	800ad28 <__swbuf_r>
 800aa96:	6813      	ldr	r3, [r2, #0]
 800aa98:	1c58      	adds	r0, r3, #1
 800aa9a:	6010      	str	r0, [r2, #0]
 800aa9c:	7019      	strb	r1, [r3, #0]
 800aa9e:	4608      	mov	r0, r1
 800aaa0:	bc10      	pop	{r4}
 800aaa2:	4770      	bx	lr

0800aaa4 <__sfputs_r>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	460f      	mov	r7, r1
 800aaaa:	4614      	mov	r4, r2
 800aaac:	18d5      	adds	r5, r2, r3
 800aaae:	42ac      	cmp	r4, r5
 800aab0:	d101      	bne.n	800aab6 <__sfputs_r+0x12>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e007      	b.n	800aac6 <__sfputs_r+0x22>
 800aab6:	463a      	mov	r2, r7
 800aab8:	4630      	mov	r0, r6
 800aaba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aabe:	f7ff ffdc 	bl	800aa7a <__sfputc_r>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	d1f3      	bne.n	800aaae <__sfputs_r+0xa>
 800aac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aac8 <_vfiprintf_r>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	460d      	mov	r5, r1
 800aace:	4614      	mov	r4, r2
 800aad0:	4698      	mov	r8, r3
 800aad2:	4606      	mov	r6, r0
 800aad4:	b09d      	sub	sp, #116	; 0x74
 800aad6:	b118      	cbz	r0, 800aae0 <_vfiprintf_r+0x18>
 800aad8:	6983      	ldr	r3, [r0, #24]
 800aada:	b90b      	cbnz	r3, 800aae0 <_vfiprintf_r+0x18>
 800aadc:	f000 fb02 	bl	800b0e4 <__sinit>
 800aae0:	4b89      	ldr	r3, [pc, #548]	; (800ad08 <_vfiprintf_r+0x240>)
 800aae2:	429d      	cmp	r5, r3
 800aae4:	d11b      	bne.n	800ab1e <_vfiprintf_r+0x56>
 800aae6:	6875      	ldr	r5, [r6, #4]
 800aae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaea:	07d9      	lsls	r1, r3, #31
 800aaec:	d405      	bmi.n	800aafa <_vfiprintf_r+0x32>
 800aaee:	89ab      	ldrh	r3, [r5, #12]
 800aaf0:	059a      	lsls	r2, r3, #22
 800aaf2:	d402      	bmi.n	800aafa <_vfiprintf_r+0x32>
 800aaf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaf6:	f000 fb93 	bl	800b220 <__retarget_lock_acquire_recursive>
 800aafa:	89ab      	ldrh	r3, [r5, #12]
 800aafc:	071b      	lsls	r3, r3, #28
 800aafe:	d501      	bpl.n	800ab04 <_vfiprintf_r+0x3c>
 800ab00:	692b      	ldr	r3, [r5, #16]
 800ab02:	b9eb      	cbnz	r3, 800ab40 <_vfiprintf_r+0x78>
 800ab04:	4629      	mov	r1, r5
 800ab06:	4630      	mov	r0, r6
 800ab08:	f000 f960 	bl	800adcc <__swsetup_r>
 800ab0c:	b1c0      	cbz	r0, 800ab40 <_vfiprintf_r+0x78>
 800ab0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab10:	07dc      	lsls	r4, r3, #31
 800ab12:	d50e      	bpl.n	800ab32 <_vfiprintf_r+0x6a>
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	b01d      	add	sp, #116	; 0x74
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	4b7b      	ldr	r3, [pc, #492]	; (800ad0c <_vfiprintf_r+0x244>)
 800ab20:	429d      	cmp	r5, r3
 800ab22:	d101      	bne.n	800ab28 <_vfiprintf_r+0x60>
 800ab24:	68b5      	ldr	r5, [r6, #8]
 800ab26:	e7df      	b.n	800aae8 <_vfiprintf_r+0x20>
 800ab28:	4b79      	ldr	r3, [pc, #484]	; (800ad10 <_vfiprintf_r+0x248>)
 800ab2a:	429d      	cmp	r5, r3
 800ab2c:	bf08      	it	eq
 800ab2e:	68f5      	ldreq	r5, [r6, #12]
 800ab30:	e7da      	b.n	800aae8 <_vfiprintf_r+0x20>
 800ab32:	89ab      	ldrh	r3, [r5, #12]
 800ab34:	0598      	lsls	r0, r3, #22
 800ab36:	d4ed      	bmi.n	800ab14 <_vfiprintf_r+0x4c>
 800ab38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab3a:	f000 fb72 	bl	800b222 <__retarget_lock_release_recursive>
 800ab3e:	e7e9      	b.n	800ab14 <_vfiprintf_r+0x4c>
 800ab40:	2300      	movs	r3, #0
 800ab42:	9309      	str	r3, [sp, #36]	; 0x24
 800ab44:	2320      	movs	r3, #32
 800ab46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab4a:	2330      	movs	r3, #48	; 0x30
 800ab4c:	f04f 0901 	mov.w	r9, #1
 800ab50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ad14 <_vfiprintf_r+0x24c>
 800ab58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab5c:	4623      	mov	r3, r4
 800ab5e:	469a      	mov	sl, r3
 800ab60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab64:	b10a      	cbz	r2, 800ab6a <_vfiprintf_r+0xa2>
 800ab66:	2a25      	cmp	r2, #37	; 0x25
 800ab68:	d1f9      	bne.n	800ab5e <_vfiprintf_r+0x96>
 800ab6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab6e:	d00b      	beq.n	800ab88 <_vfiprintf_r+0xc0>
 800ab70:	465b      	mov	r3, fp
 800ab72:	4622      	mov	r2, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	4630      	mov	r0, r6
 800ab78:	f7ff ff94 	bl	800aaa4 <__sfputs_r>
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f000 80aa 	beq.w	800acd6 <_vfiprintf_r+0x20e>
 800ab82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab84:	445a      	add	r2, fp
 800ab86:	9209      	str	r2, [sp, #36]	; 0x24
 800ab88:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 80a2 	beq.w	800acd6 <_vfiprintf_r+0x20e>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f04f 32ff 	mov.w	r2, #4294967295
 800ab98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab9c:	f10a 0a01 	add.w	sl, sl, #1
 800aba0:	9304      	str	r3, [sp, #16]
 800aba2:	9307      	str	r3, [sp, #28]
 800aba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aba8:	931a      	str	r3, [sp, #104]	; 0x68
 800abaa:	4654      	mov	r4, sl
 800abac:	2205      	movs	r2, #5
 800abae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb2:	4858      	ldr	r0, [pc, #352]	; (800ad14 <_vfiprintf_r+0x24c>)
 800abb4:	f7fe ff92 	bl	8009adc <memchr>
 800abb8:	9a04      	ldr	r2, [sp, #16]
 800abba:	b9d8      	cbnz	r0, 800abf4 <_vfiprintf_r+0x12c>
 800abbc:	06d1      	lsls	r1, r2, #27
 800abbe:	bf44      	itt	mi
 800abc0:	2320      	movmi	r3, #32
 800abc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc6:	0713      	lsls	r3, r2, #28
 800abc8:	bf44      	itt	mi
 800abca:	232b      	movmi	r3, #43	; 0x2b
 800abcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abd0:	f89a 3000 	ldrb.w	r3, [sl]
 800abd4:	2b2a      	cmp	r3, #42	; 0x2a
 800abd6:	d015      	beq.n	800ac04 <_vfiprintf_r+0x13c>
 800abd8:	4654      	mov	r4, sl
 800abda:	2000      	movs	r0, #0
 800abdc:	f04f 0c0a 	mov.w	ip, #10
 800abe0:	9a07      	ldr	r2, [sp, #28]
 800abe2:	4621      	mov	r1, r4
 800abe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abe8:	3b30      	subs	r3, #48	; 0x30
 800abea:	2b09      	cmp	r3, #9
 800abec:	d94e      	bls.n	800ac8c <_vfiprintf_r+0x1c4>
 800abee:	b1b0      	cbz	r0, 800ac1e <_vfiprintf_r+0x156>
 800abf0:	9207      	str	r2, [sp, #28]
 800abf2:	e014      	b.n	800ac1e <_vfiprintf_r+0x156>
 800abf4:	eba0 0308 	sub.w	r3, r0, r8
 800abf8:	fa09 f303 	lsl.w	r3, r9, r3
 800abfc:	4313      	orrs	r3, r2
 800abfe:	46a2      	mov	sl, r4
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	e7d2      	b.n	800abaa <_vfiprintf_r+0xe2>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	1d19      	adds	r1, r3, #4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	9103      	str	r1, [sp, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bfbb      	ittet	lt
 800ac10:	425b      	neglt	r3, r3
 800ac12:	f042 0202 	orrlt.w	r2, r2, #2
 800ac16:	9307      	strge	r3, [sp, #28]
 800ac18:	9307      	strlt	r3, [sp, #28]
 800ac1a:	bfb8      	it	lt
 800ac1c:	9204      	strlt	r2, [sp, #16]
 800ac1e:	7823      	ldrb	r3, [r4, #0]
 800ac20:	2b2e      	cmp	r3, #46	; 0x2e
 800ac22:	d10c      	bne.n	800ac3e <_vfiprintf_r+0x176>
 800ac24:	7863      	ldrb	r3, [r4, #1]
 800ac26:	2b2a      	cmp	r3, #42	; 0x2a
 800ac28:	d135      	bne.n	800ac96 <_vfiprintf_r+0x1ce>
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	3402      	adds	r4, #2
 800ac2e:	1d1a      	adds	r2, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9203      	str	r2, [sp, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfb8      	it	lt
 800ac38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac3c:	9305      	str	r3, [sp, #20]
 800ac3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ad18 <_vfiprintf_r+0x250>
 800ac42:	2203      	movs	r2, #3
 800ac44:	4650      	mov	r0, sl
 800ac46:	7821      	ldrb	r1, [r4, #0]
 800ac48:	f7fe ff48 	bl	8009adc <memchr>
 800ac4c:	b140      	cbz	r0, 800ac60 <_vfiprintf_r+0x198>
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	eba0 000a 	sub.w	r0, r0, sl
 800ac54:	fa03 f000 	lsl.w	r0, r3, r0
 800ac58:	9b04      	ldr	r3, [sp, #16]
 800ac5a:	3401      	adds	r4, #1
 800ac5c:	4303      	orrs	r3, r0
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac64:	2206      	movs	r2, #6
 800ac66:	482d      	ldr	r0, [pc, #180]	; (800ad1c <_vfiprintf_r+0x254>)
 800ac68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac6c:	f7fe ff36 	bl	8009adc <memchr>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d03f      	beq.n	800acf4 <_vfiprintf_r+0x22c>
 800ac74:	4b2a      	ldr	r3, [pc, #168]	; (800ad20 <_vfiprintf_r+0x258>)
 800ac76:	bb1b      	cbnz	r3, 800acc0 <_vfiprintf_r+0x1f8>
 800ac78:	9b03      	ldr	r3, [sp, #12]
 800ac7a:	3307      	adds	r3, #7
 800ac7c:	f023 0307 	bic.w	r3, r3, #7
 800ac80:	3308      	adds	r3, #8
 800ac82:	9303      	str	r3, [sp, #12]
 800ac84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac86:	443b      	add	r3, r7
 800ac88:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8a:	e767      	b.n	800ab5c <_vfiprintf_r+0x94>
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	2001      	movs	r0, #1
 800ac90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac94:	e7a5      	b.n	800abe2 <_vfiprintf_r+0x11a>
 800ac96:	2300      	movs	r3, #0
 800ac98:	f04f 0c0a 	mov.w	ip, #10
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	3401      	adds	r4, #1
 800aca0:	9305      	str	r3, [sp, #20]
 800aca2:	4620      	mov	r0, r4
 800aca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca8:	3a30      	subs	r2, #48	; 0x30
 800acaa:	2a09      	cmp	r2, #9
 800acac:	d903      	bls.n	800acb6 <_vfiprintf_r+0x1ee>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0c5      	beq.n	800ac3e <_vfiprintf_r+0x176>
 800acb2:	9105      	str	r1, [sp, #20]
 800acb4:	e7c3      	b.n	800ac3e <_vfiprintf_r+0x176>
 800acb6:	4604      	mov	r4, r0
 800acb8:	2301      	movs	r3, #1
 800acba:	fb0c 2101 	mla	r1, ip, r1, r2
 800acbe:	e7f0      	b.n	800aca2 <_vfiprintf_r+0x1da>
 800acc0:	ab03      	add	r3, sp, #12
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	462a      	mov	r2, r5
 800acc6:	4630      	mov	r0, r6
 800acc8:	4b16      	ldr	r3, [pc, #88]	; (800ad24 <_vfiprintf_r+0x25c>)
 800acca:	a904      	add	r1, sp, #16
 800accc:	f7fc f884 	bl	8006dd8 <_printf_float>
 800acd0:	4607      	mov	r7, r0
 800acd2:	1c78      	adds	r0, r7, #1
 800acd4:	d1d6      	bne.n	800ac84 <_vfiprintf_r+0x1bc>
 800acd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd8:	07d9      	lsls	r1, r3, #31
 800acda:	d405      	bmi.n	800ace8 <_vfiprintf_r+0x220>
 800acdc:	89ab      	ldrh	r3, [r5, #12]
 800acde:	059a      	lsls	r2, r3, #22
 800ace0:	d402      	bmi.n	800ace8 <_vfiprintf_r+0x220>
 800ace2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ace4:	f000 fa9d 	bl	800b222 <__retarget_lock_release_recursive>
 800ace8:	89ab      	ldrh	r3, [r5, #12]
 800acea:	065b      	lsls	r3, r3, #25
 800acec:	f53f af12 	bmi.w	800ab14 <_vfiprintf_r+0x4c>
 800acf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acf2:	e711      	b.n	800ab18 <_vfiprintf_r+0x50>
 800acf4:	ab03      	add	r3, sp, #12
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	462a      	mov	r2, r5
 800acfa:	4630      	mov	r0, r6
 800acfc:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <_vfiprintf_r+0x25c>)
 800acfe:	a904      	add	r1, sp, #16
 800ad00:	f7fc fb06 	bl	8007310 <_printf_i>
 800ad04:	e7e4      	b.n	800acd0 <_vfiprintf_r+0x208>
 800ad06:	bf00      	nop
 800ad08:	0800bda4 	.word	0x0800bda4
 800ad0c:	0800bdc4 	.word	0x0800bdc4
 800ad10:	0800bd84 	.word	0x0800bd84
 800ad14:	0800bd34 	.word	0x0800bd34
 800ad18:	0800bd3a 	.word	0x0800bd3a
 800ad1c:	0800bd3e 	.word	0x0800bd3e
 800ad20:	08006dd9 	.word	0x08006dd9
 800ad24:	0800aaa5 	.word	0x0800aaa5

0800ad28 <__swbuf_r>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	460e      	mov	r6, r1
 800ad2c:	4614      	mov	r4, r2
 800ad2e:	4605      	mov	r5, r0
 800ad30:	b118      	cbz	r0, 800ad3a <__swbuf_r+0x12>
 800ad32:	6983      	ldr	r3, [r0, #24]
 800ad34:	b90b      	cbnz	r3, 800ad3a <__swbuf_r+0x12>
 800ad36:	f000 f9d5 	bl	800b0e4 <__sinit>
 800ad3a:	4b21      	ldr	r3, [pc, #132]	; (800adc0 <__swbuf_r+0x98>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d12b      	bne.n	800ad98 <__swbuf_r+0x70>
 800ad40:	686c      	ldr	r4, [r5, #4]
 800ad42:	69a3      	ldr	r3, [r4, #24]
 800ad44:	60a3      	str	r3, [r4, #8]
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	071a      	lsls	r2, r3, #28
 800ad4a:	d52f      	bpl.n	800adac <__swbuf_r+0x84>
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	b36b      	cbz	r3, 800adac <__swbuf_r+0x84>
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	6820      	ldr	r0, [r4, #0]
 800ad54:	b2f6      	uxtb	r6, r6
 800ad56:	1ac0      	subs	r0, r0, r3
 800ad58:	6963      	ldr	r3, [r4, #20]
 800ad5a:	4637      	mov	r7, r6
 800ad5c:	4283      	cmp	r3, r0
 800ad5e:	dc04      	bgt.n	800ad6a <__swbuf_r+0x42>
 800ad60:	4621      	mov	r1, r4
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 f92a 	bl	800afbc <_fflush_r>
 800ad68:	bb30      	cbnz	r0, 800adb8 <__swbuf_r+0x90>
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	60a3      	str	r3, [r4, #8]
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	6022      	str	r2, [r4, #0]
 800ad78:	701e      	strb	r6, [r3, #0]
 800ad7a:	6963      	ldr	r3, [r4, #20]
 800ad7c:	4283      	cmp	r3, r0
 800ad7e:	d004      	beq.n	800ad8a <__swbuf_r+0x62>
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	07db      	lsls	r3, r3, #31
 800ad84:	d506      	bpl.n	800ad94 <__swbuf_r+0x6c>
 800ad86:	2e0a      	cmp	r6, #10
 800ad88:	d104      	bne.n	800ad94 <__swbuf_r+0x6c>
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 f915 	bl	800afbc <_fflush_r>
 800ad92:	b988      	cbnz	r0, 800adb8 <__swbuf_r+0x90>
 800ad94:	4638      	mov	r0, r7
 800ad96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad98:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <__swbuf_r+0x9c>)
 800ad9a:	429c      	cmp	r4, r3
 800ad9c:	d101      	bne.n	800ada2 <__swbuf_r+0x7a>
 800ad9e:	68ac      	ldr	r4, [r5, #8]
 800ada0:	e7cf      	b.n	800ad42 <__swbuf_r+0x1a>
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <__swbuf_r+0xa0>)
 800ada4:	429c      	cmp	r4, r3
 800ada6:	bf08      	it	eq
 800ada8:	68ec      	ldreq	r4, [r5, #12]
 800adaa:	e7ca      	b.n	800ad42 <__swbuf_r+0x1a>
 800adac:	4621      	mov	r1, r4
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 f80c 	bl	800adcc <__swsetup_r>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d0cb      	beq.n	800ad50 <__swbuf_r+0x28>
 800adb8:	f04f 37ff 	mov.w	r7, #4294967295
 800adbc:	e7ea      	b.n	800ad94 <__swbuf_r+0x6c>
 800adbe:	bf00      	nop
 800adc0:	0800bda4 	.word	0x0800bda4
 800adc4:	0800bdc4 	.word	0x0800bdc4
 800adc8:	0800bd84 	.word	0x0800bd84

0800adcc <__swsetup_r>:
 800adcc:	4b32      	ldr	r3, [pc, #200]	; (800ae98 <__swsetup_r+0xcc>)
 800adce:	b570      	push	{r4, r5, r6, lr}
 800add0:	681d      	ldr	r5, [r3, #0]
 800add2:	4606      	mov	r6, r0
 800add4:	460c      	mov	r4, r1
 800add6:	b125      	cbz	r5, 800ade2 <__swsetup_r+0x16>
 800add8:	69ab      	ldr	r3, [r5, #24]
 800adda:	b913      	cbnz	r3, 800ade2 <__swsetup_r+0x16>
 800addc:	4628      	mov	r0, r5
 800adde:	f000 f981 	bl	800b0e4 <__sinit>
 800ade2:	4b2e      	ldr	r3, [pc, #184]	; (800ae9c <__swsetup_r+0xd0>)
 800ade4:	429c      	cmp	r4, r3
 800ade6:	d10f      	bne.n	800ae08 <__swsetup_r+0x3c>
 800ade8:	686c      	ldr	r4, [r5, #4]
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adf0:	0719      	lsls	r1, r3, #28
 800adf2:	d42c      	bmi.n	800ae4e <__swsetup_r+0x82>
 800adf4:	06dd      	lsls	r5, r3, #27
 800adf6:	d411      	bmi.n	800ae1c <__swsetup_r+0x50>
 800adf8:	2309      	movs	r3, #9
 800adfa:	6033      	str	r3, [r6, #0]
 800adfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae00:	f04f 30ff 	mov.w	r0, #4294967295
 800ae04:	81a3      	strh	r3, [r4, #12]
 800ae06:	e03e      	b.n	800ae86 <__swsetup_r+0xba>
 800ae08:	4b25      	ldr	r3, [pc, #148]	; (800aea0 <__swsetup_r+0xd4>)
 800ae0a:	429c      	cmp	r4, r3
 800ae0c:	d101      	bne.n	800ae12 <__swsetup_r+0x46>
 800ae0e:	68ac      	ldr	r4, [r5, #8]
 800ae10:	e7eb      	b.n	800adea <__swsetup_r+0x1e>
 800ae12:	4b24      	ldr	r3, [pc, #144]	; (800aea4 <__swsetup_r+0xd8>)
 800ae14:	429c      	cmp	r4, r3
 800ae16:	bf08      	it	eq
 800ae18:	68ec      	ldreq	r4, [r5, #12]
 800ae1a:	e7e6      	b.n	800adea <__swsetup_r+0x1e>
 800ae1c:	0758      	lsls	r0, r3, #29
 800ae1e:	d512      	bpl.n	800ae46 <__swsetup_r+0x7a>
 800ae20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae22:	b141      	cbz	r1, 800ae36 <__swsetup_r+0x6a>
 800ae24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae28:	4299      	cmp	r1, r3
 800ae2a:	d002      	beq.n	800ae32 <__swsetup_r+0x66>
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff fb2f 	bl	800a490 <_free_r>
 800ae32:	2300      	movs	r3, #0
 800ae34:	6363      	str	r3, [r4, #52]	; 0x34
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	6063      	str	r3, [r4, #4]
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	89a3      	ldrh	r3, [r4, #12]
 800ae48:	f043 0308 	orr.w	r3, r3, #8
 800ae4c:	81a3      	strh	r3, [r4, #12]
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	b94b      	cbnz	r3, 800ae66 <__swsetup_r+0x9a>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae5c:	d003      	beq.n	800ae66 <__swsetup_r+0x9a>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 fa05 	bl	800b270 <__smakebuf_r>
 800ae66:	89a0      	ldrh	r0, [r4, #12]
 800ae68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae6c:	f010 0301 	ands.w	r3, r0, #1
 800ae70:	d00a      	beq.n	800ae88 <__swsetup_r+0xbc>
 800ae72:	2300      	movs	r3, #0
 800ae74:	60a3      	str	r3, [r4, #8]
 800ae76:	6963      	ldr	r3, [r4, #20]
 800ae78:	425b      	negs	r3, r3
 800ae7a:	61a3      	str	r3, [r4, #24]
 800ae7c:	6923      	ldr	r3, [r4, #16]
 800ae7e:	b943      	cbnz	r3, 800ae92 <__swsetup_r+0xc6>
 800ae80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae84:	d1ba      	bne.n	800adfc <__swsetup_r+0x30>
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	0781      	lsls	r1, r0, #30
 800ae8a:	bf58      	it	pl
 800ae8c:	6963      	ldrpl	r3, [r4, #20]
 800ae8e:	60a3      	str	r3, [r4, #8]
 800ae90:	e7f4      	b.n	800ae7c <__swsetup_r+0xb0>
 800ae92:	2000      	movs	r0, #0
 800ae94:	e7f7      	b.n	800ae86 <__swsetup_r+0xba>
 800ae96:	bf00      	nop
 800ae98:	20000088 	.word	0x20000088
 800ae9c:	0800bda4 	.word	0x0800bda4
 800aea0:	0800bdc4 	.word	0x0800bdc4
 800aea4:	0800bd84 	.word	0x0800bd84

0800aea8 <abort>:
 800aea8:	2006      	movs	r0, #6
 800aeaa:	b508      	push	{r3, lr}
 800aeac:	f000 fa50 	bl	800b350 <raise>
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	f7f6 fde2 	bl	8001a7a <_exit>
	...

0800aeb8 <__sflush_r>:
 800aeb8:	898a      	ldrh	r2, [r1, #12]
 800aeba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebc:	4605      	mov	r5, r0
 800aebe:	0710      	lsls	r0, r2, #28
 800aec0:	460c      	mov	r4, r1
 800aec2:	d457      	bmi.n	800af74 <__sflush_r+0xbc>
 800aec4:	684b      	ldr	r3, [r1, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dc04      	bgt.n	800aed4 <__sflush_r+0x1c>
 800aeca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dc01      	bgt.n	800aed4 <__sflush_r+0x1c>
 800aed0:	2000      	movs	r0, #0
 800aed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	d0fa      	beq.n	800aed0 <__sflush_r+0x18>
 800aeda:	2300      	movs	r3, #0
 800aedc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aee0:	682f      	ldr	r7, [r5, #0]
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	d032      	beq.n	800af4c <__sflush_r+0x94>
 800aee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	075a      	lsls	r2, r3, #29
 800aeec:	d505      	bpl.n	800aefa <__sflush_r+0x42>
 800aeee:	6863      	ldr	r3, [r4, #4]
 800aef0:	1ac0      	subs	r0, r0, r3
 800aef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aef4:	b10b      	cbz	r3, 800aefa <__sflush_r+0x42>
 800aef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aef8:	1ac0      	subs	r0, r0, r3
 800aefa:	2300      	movs	r3, #0
 800aefc:	4602      	mov	r2, r0
 800aefe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af00:	4628      	mov	r0, r5
 800af02:	6a21      	ldr	r1, [r4, #32]
 800af04:	47b0      	blx	r6
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	d106      	bne.n	800af1a <__sflush_r+0x62>
 800af0c:	6829      	ldr	r1, [r5, #0]
 800af0e:	291d      	cmp	r1, #29
 800af10:	d82c      	bhi.n	800af6c <__sflush_r+0xb4>
 800af12:	4a29      	ldr	r2, [pc, #164]	; (800afb8 <__sflush_r+0x100>)
 800af14:	40ca      	lsrs	r2, r1
 800af16:	07d6      	lsls	r6, r2, #31
 800af18:	d528      	bpl.n	800af6c <__sflush_r+0xb4>
 800af1a:	2200      	movs	r2, #0
 800af1c:	6062      	str	r2, [r4, #4]
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	04d9      	lsls	r1, r3, #19
 800af22:	6022      	str	r2, [r4, #0]
 800af24:	d504      	bpl.n	800af30 <__sflush_r+0x78>
 800af26:	1c42      	adds	r2, r0, #1
 800af28:	d101      	bne.n	800af2e <__sflush_r+0x76>
 800af2a:	682b      	ldr	r3, [r5, #0]
 800af2c:	b903      	cbnz	r3, 800af30 <__sflush_r+0x78>
 800af2e:	6560      	str	r0, [r4, #84]	; 0x54
 800af30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af32:	602f      	str	r7, [r5, #0]
 800af34:	2900      	cmp	r1, #0
 800af36:	d0cb      	beq.n	800aed0 <__sflush_r+0x18>
 800af38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af3c:	4299      	cmp	r1, r3
 800af3e:	d002      	beq.n	800af46 <__sflush_r+0x8e>
 800af40:	4628      	mov	r0, r5
 800af42:	f7ff faa5 	bl	800a490 <_free_r>
 800af46:	2000      	movs	r0, #0
 800af48:	6360      	str	r0, [r4, #52]	; 0x34
 800af4a:	e7c2      	b.n	800aed2 <__sflush_r+0x1a>
 800af4c:	6a21      	ldr	r1, [r4, #32]
 800af4e:	2301      	movs	r3, #1
 800af50:	4628      	mov	r0, r5
 800af52:	47b0      	blx	r6
 800af54:	1c41      	adds	r1, r0, #1
 800af56:	d1c7      	bne.n	800aee8 <__sflush_r+0x30>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0c4      	beq.n	800aee8 <__sflush_r+0x30>
 800af5e:	2b1d      	cmp	r3, #29
 800af60:	d001      	beq.n	800af66 <__sflush_r+0xae>
 800af62:	2b16      	cmp	r3, #22
 800af64:	d101      	bne.n	800af6a <__sflush_r+0xb2>
 800af66:	602f      	str	r7, [r5, #0]
 800af68:	e7b2      	b.n	800aed0 <__sflush_r+0x18>
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af70:	81a3      	strh	r3, [r4, #12]
 800af72:	e7ae      	b.n	800aed2 <__sflush_r+0x1a>
 800af74:	690f      	ldr	r7, [r1, #16]
 800af76:	2f00      	cmp	r7, #0
 800af78:	d0aa      	beq.n	800aed0 <__sflush_r+0x18>
 800af7a:	0793      	lsls	r3, r2, #30
 800af7c:	bf18      	it	ne
 800af7e:	2300      	movne	r3, #0
 800af80:	680e      	ldr	r6, [r1, #0]
 800af82:	bf08      	it	eq
 800af84:	694b      	ldreq	r3, [r1, #20]
 800af86:	1bf6      	subs	r6, r6, r7
 800af88:	600f      	str	r7, [r1, #0]
 800af8a:	608b      	str	r3, [r1, #8]
 800af8c:	2e00      	cmp	r6, #0
 800af8e:	dd9f      	ble.n	800aed0 <__sflush_r+0x18>
 800af90:	4633      	mov	r3, r6
 800af92:	463a      	mov	r2, r7
 800af94:	4628      	mov	r0, r5
 800af96:	6a21      	ldr	r1, [r4, #32]
 800af98:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800af9c:	47e0      	blx	ip
 800af9e:	2800      	cmp	r0, #0
 800afa0:	dc06      	bgt.n	800afb0 <__sflush_r+0xf8>
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	e790      	b.n	800aed2 <__sflush_r+0x1a>
 800afb0:	4407      	add	r7, r0
 800afb2:	1a36      	subs	r6, r6, r0
 800afb4:	e7ea      	b.n	800af8c <__sflush_r+0xd4>
 800afb6:	bf00      	nop
 800afb8:	20400001 	.word	0x20400001

0800afbc <_fflush_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	690b      	ldr	r3, [r1, #16]
 800afc0:	4605      	mov	r5, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b913      	cbnz	r3, 800afcc <_fflush_r+0x10>
 800afc6:	2500      	movs	r5, #0
 800afc8:	4628      	mov	r0, r5
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	b118      	cbz	r0, 800afd6 <_fflush_r+0x1a>
 800afce:	6983      	ldr	r3, [r0, #24]
 800afd0:	b90b      	cbnz	r3, 800afd6 <_fflush_r+0x1a>
 800afd2:	f000 f887 	bl	800b0e4 <__sinit>
 800afd6:	4b14      	ldr	r3, [pc, #80]	; (800b028 <_fflush_r+0x6c>)
 800afd8:	429c      	cmp	r4, r3
 800afda:	d11b      	bne.n	800b014 <_fflush_r+0x58>
 800afdc:	686c      	ldr	r4, [r5, #4]
 800afde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0ef      	beq.n	800afc6 <_fflush_r+0xa>
 800afe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afe8:	07d0      	lsls	r0, r2, #31
 800afea:	d404      	bmi.n	800aff6 <_fflush_r+0x3a>
 800afec:	0599      	lsls	r1, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_fflush_r+0x3a>
 800aff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aff2:	f000 f915 	bl	800b220 <__retarget_lock_acquire_recursive>
 800aff6:	4628      	mov	r0, r5
 800aff8:	4621      	mov	r1, r4
 800affa:	f7ff ff5d 	bl	800aeb8 <__sflush_r>
 800affe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b000:	4605      	mov	r5, r0
 800b002:	07da      	lsls	r2, r3, #31
 800b004:	d4e0      	bmi.n	800afc8 <_fflush_r+0xc>
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	059b      	lsls	r3, r3, #22
 800b00a:	d4dd      	bmi.n	800afc8 <_fflush_r+0xc>
 800b00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b00e:	f000 f908 	bl	800b222 <__retarget_lock_release_recursive>
 800b012:	e7d9      	b.n	800afc8 <_fflush_r+0xc>
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <_fflush_r+0x70>)
 800b016:	429c      	cmp	r4, r3
 800b018:	d101      	bne.n	800b01e <_fflush_r+0x62>
 800b01a:	68ac      	ldr	r4, [r5, #8]
 800b01c:	e7df      	b.n	800afde <_fflush_r+0x22>
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <_fflush_r+0x74>)
 800b020:	429c      	cmp	r4, r3
 800b022:	bf08      	it	eq
 800b024:	68ec      	ldreq	r4, [r5, #12]
 800b026:	e7da      	b.n	800afde <_fflush_r+0x22>
 800b028:	0800bda4 	.word	0x0800bda4
 800b02c:	0800bdc4 	.word	0x0800bdc4
 800b030:	0800bd84 	.word	0x0800bd84

0800b034 <std>:
 800b034:	2300      	movs	r3, #0
 800b036:	b510      	push	{r4, lr}
 800b038:	4604      	mov	r4, r0
 800b03a:	e9c0 3300 	strd	r3, r3, [r0]
 800b03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b042:	6083      	str	r3, [r0, #8]
 800b044:	8181      	strh	r1, [r0, #12]
 800b046:	6643      	str	r3, [r0, #100]	; 0x64
 800b048:	81c2      	strh	r2, [r0, #14]
 800b04a:	6183      	str	r3, [r0, #24]
 800b04c:	4619      	mov	r1, r3
 800b04e:	2208      	movs	r2, #8
 800b050:	305c      	adds	r0, #92	; 0x5c
 800b052:	f7fb fe1b 	bl	8006c8c <memset>
 800b056:	4b05      	ldr	r3, [pc, #20]	; (800b06c <std+0x38>)
 800b058:	6224      	str	r4, [r4, #32]
 800b05a:	6263      	str	r3, [r4, #36]	; 0x24
 800b05c:	4b04      	ldr	r3, [pc, #16]	; (800b070 <std+0x3c>)
 800b05e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b060:	4b04      	ldr	r3, [pc, #16]	; (800b074 <std+0x40>)
 800b062:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b064:	4b04      	ldr	r3, [pc, #16]	; (800b078 <std+0x44>)
 800b066:	6323      	str	r3, [r4, #48]	; 0x30
 800b068:	bd10      	pop	{r4, pc}
 800b06a:	bf00      	nop
 800b06c:	0800b389 	.word	0x0800b389
 800b070:	0800b3ab 	.word	0x0800b3ab
 800b074:	0800b3e3 	.word	0x0800b3e3
 800b078:	0800b407 	.word	0x0800b407

0800b07c <_cleanup_r>:
 800b07c:	4901      	ldr	r1, [pc, #4]	; (800b084 <_cleanup_r+0x8>)
 800b07e:	f000 b8af 	b.w	800b1e0 <_fwalk_reent>
 800b082:	bf00      	nop
 800b084:	0800afbd 	.word	0x0800afbd

0800b088 <__sfmoreglue>:
 800b088:	2268      	movs	r2, #104	; 0x68
 800b08a:	b570      	push	{r4, r5, r6, lr}
 800b08c:	1e4d      	subs	r5, r1, #1
 800b08e:	4355      	muls	r5, r2
 800b090:	460e      	mov	r6, r1
 800b092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b096:	f7ff fa63 	bl	800a560 <_malloc_r>
 800b09a:	4604      	mov	r4, r0
 800b09c:	b140      	cbz	r0, 800b0b0 <__sfmoreglue+0x28>
 800b09e:	2100      	movs	r1, #0
 800b0a0:	e9c0 1600 	strd	r1, r6, [r0]
 800b0a4:	300c      	adds	r0, #12
 800b0a6:	60a0      	str	r0, [r4, #8]
 800b0a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0ac:	f7fb fdee 	bl	8006c8c <memset>
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}

0800b0b4 <__sfp_lock_acquire>:
 800b0b4:	4801      	ldr	r0, [pc, #4]	; (800b0bc <__sfp_lock_acquire+0x8>)
 800b0b6:	f000 b8b3 	b.w	800b220 <__retarget_lock_acquire_recursive>
 800b0ba:	bf00      	nop
 800b0bc:	200004e5 	.word	0x200004e5

0800b0c0 <__sfp_lock_release>:
 800b0c0:	4801      	ldr	r0, [pc, #4]	; (800b0c8 <__sfp_lock_release+0x8>)
 800b0c2:	f000 b8ae 	b.w	800b222 <__retarget_lock_release_recursive>
 800b0c6:	bf00      	nop
 800b0c8:	200004e5 	.word	0x200004e5

0800b0cc <__sinit_lock_acquire>:
 800b0cc:	4801      	ldr	r0, [pc, #4]	; (800b0d4 <__sinit_lock_acquire+0x8>)
 800b0ce:	f000 b8a7 	b.w	800b220 <__retarget_lock_acquire_recursive>
 800b0d2:	bf00      	nop
 800b0d4:	200004e6 	.word	0x200004e6

0800b0d8 <__sinit_lock_release>:
 800b0d8:	4801      	ldr	r0, [pc, #4]	; (800b0e0 <__sinit_lock_release+0x8>)
 800b0da:	f000 b8a2 	b.w	800b222 <__retarget_lock_release_recursive>
 800b0de:	bf00      	nop
 800b0e0:	200004e6 	.word	0x200004e6

0800b0e4 <__sinit>:
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	f7ff fff0 	bl	800b0cc <__sinit_lock_acquire>
 800b0ec:	69a3      	ldr	r3, [r4, #24]
 800b0ee:	b11b      	cbz	r3, 800b0f8 <__sinit+0x14>
 800b0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f4:	f7ff bff0 	b.w	800b0d8 <__sinit_lock_release>
 800b0f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0fc:	6523      	str	r3, [r4, #80]	; 0x50
 800b0fe:	4b13      	ldr	r3, [pc, #76]	; (800b14c <__sinit+0x68>)
 800b100:	4a13      	ldr	r2, [pc, #76]	; (800b150 <__sinit+0x6c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	62a2      	str	r2, [r4, #40]	; 0x28
 800b106:	42a3      	cmp	r3, r4
 800b108:	bf08      	it	eq
 800b10a:	2301      	moveq	r3, #1
 800b10c:	4620      	mov	r0, r4
 800b10e:	bf08      	it	eq
 800b110:	61a3      	streq	r3, [r4, #24]
 800b112:	f000 f81f 	bl	800b154 <__sfp>
 800b116:	6060      	str	r0, [r4, #4]
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 f81b 	bl	800b154 <__sfp>
 800b11e:	60a0      	str	r0, [r4, #8]
 800b120:	4620      	mov	r0, r4
 800b122:	f000 f817 	bl	800b154 <__sfp>
 800b126:	2200      	movs	r2, #0
 800b128:	2104      	movs	r1, #4
 800b12a:	60e0      	str	r0, [r4, #12]
 800b12c:	6860      	ldr	r0, [r4, #4]
 800b12e:	f7ff ff81 	bl	800b034 <std>
 800b132:	2201      	movs	r2, #1
 800b134:	2109      	movs	r1, #9
 800b136:	68a0      	ldr	r0, [r4, #8]
 800b138:	f7ff ff7c 	bl	800b034 <std>
 800b13c:	2202      	movs	r2, #2
 800b13e:	2112      	movs	r1, #18
 800b140:	68e0      	ldr	r0, [r4, #12]
 800b142:	f7ff ff77 	bl	800b034 <std>
 800b146:	2301      	movs	r3, #1
 800b148:	61a3      	str	r3, [r4, #24]
 800b14a:	e7d1      	b.n	800b0f0 <__sinit+0xc>
 800b14c:	0800b93c 	.word	0x0800b93c
 800b150:	0800b07d 	.word	0x0800b07d

0800b154 <__sfp>:
 800b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b156:	4607      	mov	r7, r0
 800b158:	f7ff ffac 	bl	800b0b4 <__sfp_lock_acquire>
 800b15c:	4b1e      	ldr	r3, [pc, #120]	; (800b1d8 <__sfp+0x84>)
 800b15e:	681e      	ldr	r6, [r3, #0]
 800b160:	69b3      	ldr	r3, [r6, #24]
 800b162:	b913      	cbnz	r3, 800b16a <__sfp+0x16>
 800b164:	4630      	mov	r0, r6
 800b166:	f7ff ffbd 	bl	800b0e4 <__sinit>
 800b16a:	3648      	adds	r6, #72	; 0x48
 800b16c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b170:	3b01      	subs	r3, #1
 800b172:	d503      	bpl.n	800b17c <__sfp+0x28>
 800b174:	6833      	ldr	r3, [r6, #0]
 800b176:	b30b      	cbz	r3, 800b1bc <__sfp+0x68>
 800b178:	6836      	ldr	r6, [r6, #0]
 800b17a:	e7f7      	b.n	800b16c <__sfp+0x18>
 800b17c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b180:	b9d5      	cbnz	r5, 800b1b8 <__sfp+0x64>
 800b182:	4b16      	ldr	r3, [pc, #88]	; (800b1dc <__sfp+0x88>)
 800b184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b188:	60e3      	str	r3, [r4, #12]
 800b18a:	6665      	str	r5, [r4, #100]	; 0x64
 800b18c:	f000 f847 	bl	800b21e <__retarget_lock_init_recursive>
 800b190:	f7ff ff96 	bl	800b0c0 <__sfp_lock_release>
 800b194:	2208      	movs	r2, #8
 800b196:	4629      	mov	r1, r5
 800b198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b19c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1a0:	6025      	str	r5, [r4, #0]
 800b1a2:	61a5      	str	r5, [r4, #24]
 800b1a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1a8:	f7fb fd70 	bl	8006c8c <memset>
 800b1ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b8:	3468      	adds	r4, #104	; 0x68
 800b1ba:	e7d9      	b.n	800b170 <__sfp+0x1c>
 800b1bc:	2104      	movs	r1, #4
 800b1be:	4638      	mov	r0, r7
 800b1c0:	f7ff ff62 	bl	800b088 <__sfmoreglue>
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	6030      	str	r0, [r6, #0]
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d1d5      	bne.n	800b178 <__sfp+0x24>
 800b1cc:	f7ff ff78 	bl	800b0c0 <__sfp_lock_release>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	e7ee      	b.n	800b1b4 <__sfp+0x60>
 800b1d6:	bf00      	nop
 800b1d8:	0800b93c 	.word	0x0800b93c
 800b1dc:	ffff0001 	.word	0xffff0001

0800b1e0 <_fwalk_reent>:
 800b1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	4688      	mov	r8, r1
 800b1e8:	2700      	movs	r7, #0
 800b1ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b1f6:	d505      	bpl.n	800b204 <_fwalk_reent+0x24>
 800b1f8:	6824      	ldr	r4, [r4, #0]
 800b1fa:	2c00      	cmp	r4, #0
 800b1fc:	d1f7      	bne.n	800b1ee <_fwalk_reent+0xe>
 800b1fe:	4638      	mov	r0, r7
 800b200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b204:	89ab      	ldrh	r3, [r5, #12]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d907      	bls.n	800b21a <_fwalk_reent+0x3a>
 800b20a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b20e:	3301      	adds	r3, #1
 800b210:	d003      	beq.n	800b21a <_fwalk_reent+0x3a>
 800b212:	4629      	mov	r1, r5
 800b214:	4630      	mov	r0, r6
 800b216:	47c0      	blx	r8
 800b218:	4307      	orrs	r7, r0
 800b21a:	3568      	adds	r5, #104	; 0x68
 800b21c:	e7e9      	b.n	800b1f2 <_fwalk_reent+0x12>

0800b21e <__retarget_lock_init_recursive>:
 800b21e:	4770      	bx	lr

0800b220 <__retarget_lock_acquire_recursive>:
 800b220:	4770      	bx	lr

0800b222 <__retarget_lock_release_recursive>:
 800b222:	4770      	bx	lr

0800b224 <__swhatbuf_r>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	460e      	mov	r6, r1
 800b228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b22c:	4614      	mov	r4, r2
 800b22e:	2900      	cmp	r1, #0
 800b230:	461d      	mov	r5, r3
 800b232:	b096      	sub	sp, #88	; 0x58
 800b234:	da08      	bge.n	800b248 <__swhatbuf_r+0x24>
 800b236:	2200      	movs	r2, #0
 800b238:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b23c:	602a      	str	r2, [r5, #0]
 800b23e:	061a      	lsls	r2, r3, #24
 800b240:	d410      	bmi.n	800b264 <__swhatbuf_r+0x40>
 800b242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b246:	e00e      	b.n	800b266 <__swhatbuf_r+0x42>
 800b248:	466a      	mov	r2, sp
 800b24a:	f000 f903 	bl	800b454 <_fstat_r>
 800b24e:	2800      	cmp	r0, #0
 800b250:	dbf1      	blt.n	800b236 <__swhatbuf_r+0x12>
 800b252:	9a01      	ldr	r2, [sp, #4]
 800b254:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b258:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b25c:	425a      	negs	r2, r3
 800b25e:	415a      	adcs	r2, r3
 800b260:	602a      	str	r2, [r5, #0]
 800b262:	e7ee      	b.n	800b242 <__swhatbuf_r+0x1e>
 800b264:	2340      	movs	r3, #64	; 0x40
 800b266:	2000      	movs	r0, #0
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	b016      	add	sp, #88	; 0x58
 800b26c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b270 <__smakebuf_r>:
 800b270:	898b      	ldrh	r3, [r1, #12]
 800b272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b274:	079d      	lsls	r5, r3, #30
 800b276:	4606      	mov	r6, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	d507      	bpl.n	800b28c <__smakebuf_r+0x1c>
 800b27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	6123      	str	r3, [r4, #16]
 800b284:	2301      	movs	r3, #1
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	b002      	add	sp, #8
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	466a      	mov	r2, sp
 800b28e:	ab01      	add	r3, sp, #4
 800b290:	f7ff ffc8 	bl	800b224 <__swhatbuf_r>
 800b294:	9900      	ldr	r1, [sp, #0]
 800b296:	4605      	mov	r5, r0
 800b298:	4630      	mov	r0, r6
 800b29a:	f7ff f961 	bl	800a560 <_malloc_r>
 800b29e:	b948      	cbnz	r0, 800b2b4 <__smakebuf_r+0x44>
 800b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a4:	059a      	lsls	r2, r3, #22
 800b2a6:	d4ef      	bmi.n	800b288 <__smakebuf_r+0x18>
 800b2a8:	f023 0303 	bic.w	r3, r3, #3
 800b2ac:	f043 0302 	orr.w	r3, r3, #2
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	e7e3      	b.n	800b27c <__smakebuf_r+0xc>
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <__smakebuf_r+0x7c>)
 800b2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	6020      	str	r0, [r4, #0]
 800b2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c0:	81a3      	strh	r3, [r4, #12]
 800b2c2:	9b00      	ldr	r3, [sp, #0]
 800b2c4:	6120      	str	r0, [r4, #16]
 800b2c6:	6163      	str	r3, [r4, #20]
 800b2c8:	9b01      	ldr	r3, [sp, #4]
 800b2ca:	b15b      	cbz	r3, 800b2e4 <__smakebuf_r+0x74>
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2d2:	f000 f8d1 	bl	800b478 <_isatty_r>
 800b2d6:	b128      	cbz	r0, 800b2e4 <__smakebuf_r+0x74>
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	f023 0303 	bic.w	r3, r3, #3
 800b2de:	f043 0301 	orr.w	r3, r3, #1
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	89a0      	ldrh	r0, [r4, #12]
 800b2e6:	4305      	orrs	r5, r0
 800b2e8:	81a5      	strh	r5, [r4, #12]
 800b2ea:	e7cd      	b.n	800b288 <__smakebuf_r+0x18>
 800b2ec:	0800b07d 	.word	0x0800b07d

0800b2f0 <_malloc_usable_size_r>:
 800b2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f4:	1f18      	subs	r0, r3, #4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfbc      	itt	lt
 800b2fa:	580b      	ldrlt	r3, [r1, r0]
 800b2fc:	18c0      	addlt	r0, r0, r3
 800b2fe:	4770      	bx	lr

0800b300 <_raise_r>:
 800b300:	291f      	cmp	r1, #31
 800b302:	b538      	push	{r3, r4, r5, lr}
 800b304:	4604      	mov	r4, r0
 800b306:	460d      	mov	r5, r1
 800b308:	d904      	bls.n	800b314 <_raise_r+0x14>
 800b30a:	2316      	movs	r3, #22
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	f04f 30ff 	mov.w	r0, #4294967295
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b316:	b112      	cbz	r2, 800b31e <_raise_r+0x1e>
 800b318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b31c:	b94b      	cbnz	r3, 800b332 <_raise_r+0x32>
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 f830 	bl	800b384 <_getpid_r>
 800b324:	462a      	mov	r2, r5
 800b326:	4601      	mov	r1, r0
 800b328:	4620      	mov	r0, r4
 800b32a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b32e:	f000 b817 	b.w	800b360 <_kill_r>
 800b332:	2b01      	cmp	r3, #1
 800b334:	d00a      	beq.n	800b34c <_raise_r+0x4c>
 800b336:	1c59      	adds	r1, r3, #1
 800b338:	d103      	bne.n	800b342 <_raise_r+0x42>
 800b33a:	2316      	movs	r3, #22
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	2001      	movs	r0, #1
 800b340:	e7e7      	b.n	800b312 <_raise_r+0x12>
 800b342:	2400      	movs	r4, #0
 800b344:	4628      	mov	r0, r5
 800b346:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b34a:	4798      	blx	r3
 800b34c:	2000      	movs	r0, #0
 800b34e:	e7e0      	b.n	800b312 <_raise_r+0x12>

0800b350 <raise>:
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <raise+0xc>)
 800b352:	4601      	mov	r1, r0
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f7ff bfd3 	b.w	800b300 <_raise_r>
 800b35a:	bf00      	nop
 800b35c:	20000088 	.word	0x20000088

0800b360 <_kill_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	2300      	movs	r3, #0
 800b364:	4d06      	ldr	r5, [pc, #24]	; (800b380 <_kill_r+0x20>)
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	4611      	mov	r1, r2
 800b36c:	602b      	str	r3, [r5, #0]
 800b36e:	f7f6 fb74 	bl	8001a5a <_kill>
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	d102      	bne.n	800b37c <_kill_r+0x1c>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	b103      	cbz	r3, 800b37c <_kill_r+0x1c>
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	bd38      	pop	{r3, r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	200004e0 	.word	0x200004e0

0800b384 <_getpid_r>:
 800b384:	f7f6 bb62 	b.w	8001a4c <_getpid>

0800b388 <__sread>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	460c      	mov	r4, r1
 800b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b390:	f000 f894 	bl	800b4bc <_read_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	bfab      	itete	ge
 800b398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b39a:	89a3      	ldrhlt	r3, [r4, #12]
 800b39c:	181b      	addge	r3, r3, r0
 800b39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3a2:	bfac      	ite	ge
 800b3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3a6:	81a3      	strhlt	r3, [r4, #12]
 800b3a8:	bd10      	pop	{r4, pc}

0800b3aa <__swrite>:
 800b3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ae:	461f      	mov	r7, r3
 800b3b0:	898b      	ldrh	r3, [r1, #12]
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	05db      	lsls	r3, r3, #23
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	4616      	mov	r6, r2
 800b3ba:	d505      	bpl.n	800b3c8 <__swrite+0x1e>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c4:	f000 f868 	bl	800b498 <_lseek_r>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3de:	f000 b817 	b.w	800b410 <_write_r>

0800b3e2 <__sseek>:
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ea:	f000 f855 	bl	800b498 <_lseek_r>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	bf15      	itete	ne
 800b3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3fe:	81a3      	strheq	r3, [r4, #12]
 800b400:	bf18      	it	ne
 800b402:	81a3      	strhne	r3, [r4, #12]
 800b404:	bd10      	pop	{r4, pc}

0800b406 <__sclose>:
 800b406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40a:	f000 b813 	b.w	800b434 <_close_r>
	...

0800b410 <_write_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	2200      	movs	r2, #0
 800b41a:	4d05      	ldr	r5, [pc, #20]	; (800b430 <_write_r+0x20>)
 800b41c:	602a      	str	r2, [r5, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	f7f6 fb52 	bl	8001ac8 <_write>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_write_r+0x1e>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_write_r+0x1e>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	200004e0 	.word	0x200004e0

0800b434 <_close_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	2300      	movs	r3, #0
 800b438:	4d05      	ldr	r5, [pc, #20]	; (800b450 <_close_r+0x1c>)
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f6 fb5e 	bl	8001b00 <_close>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_close_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_close_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	200004e0 	.word	0x200004e0

0800b454 <_fstat_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	2300      	movs	r3, #0
 800b458:	4d06      	ldr	r5, [pc, #24]	; (800b474 <_fstat_r+0x20>)
 800b45a:	4604      	mov	r4, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	4611      	mov	r1, r2
 800b460:	602b      	str	r3, [r5, #0]
 800b462:	f7f6 fb58 	bl	8001b16 <_fstat>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	d102      	bne.n	800b470 <_fstat_r+0x1c>
 800b46a:	682b      	ldr	r3, [r5, #0]
 800b46c:	b103      	cbz	r3, 800b470 <_fstat_r+0x1c>
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	bd38      	pop	{r3, r4, r5, pc}
 800b472:	bf00      	nop
 800b474:	200004e0 	.word	0x200004e0

0800b478 <_isatty_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	2300      	movs	r3, #0
 800b47c:	4d05      	ldr	r5, [pc, #20]	; (800b494 <_isatty_r+0x1c>)
 800b47e:	4604      	mov	r4, r0
 800b480:	4608      	mov	r0, r1
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	f7f6 fb56 	bl	8001b34 <_isatty>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_isatty_r+0x1a>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_isatty_r+0x1a>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200004e0 	.word	0x200004e0

0800b498 <_lseek_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4d05      	ldr	r5, [pc, #20]	; (800b4b8 <_lseek_r+0x20>)
 800b4a4:	602a      	str	r2, [r5, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f7f6 fb4e 	bl	8001b48 <_lseek>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_lseek_r+0x1e>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_lseek_r+0x1e>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	200004e0 	.word	0x200004e0

0800b4bc <_read_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4604      	mov	r4, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4d05      	ldr	r5, [pc, #20]	; (800b4dc <_read_r+0x20>)
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f7f6 fadf 	bl	8001a8e <_read>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_read_r+0x1e>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_read_r+0x1e>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	200004e0 	.word	0x200004e0

0800b4e0 <log10f>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	f000 f824 	bl	800b530 <__ieee754_log10f>
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7f5 fe0f 	bl	8001110 <__aeabi_fcmpun>
 800b4f2:	b970      	cbnz	r0, 800b512 <log10f+0x32>
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7f5 fdec 	bl	80010d4 <__aeabi_fcmple>
 800b4fc:	b148      	cbz	r0, 800b512 <log10f+0x32>
 800b4fe:	2100      	movs	r1, #0
 800b500:	4620      	mov	r0, r4
 800b502:	f7f5 fdd3 	bl	80010ac <__aeabi_fcmpeq>
 800b506:	b130      	cbz	r0, 800b516 <log10f+0x36>
 800b508:	f7fb fb78 	bl	8006bfc <__errno>
 800b50c:	2322      	movs	r3, #34	; 0x22
 800b50e:	4d06      	ldr	r5, [pc, #24]	; (800b528 <log10f+0x48>)
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	4628      	mov	r0, r5
 800b514:	bd38      	pop	{r3, r4, r5, pc}
 800b516:	f7fb fb71 	bl	8006bfc <__errno>
 800b51a:	2321      	movs	r3, #33	; 0x21
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	4803      	ldr	r0, [pc, #12]	; (800b52c <log10f+0x4c>)
 800b520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b524:	f7fc ba28 	b.w	8007978 <nanf>
 800b528:	ff800000 	.word	0xff800000
 800b52c:	0800bd80 	.word	0x0800bd80

0800b530 <__ieee754_log10f>:
 800b530:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800b534:	4601      	mov	r1, r0
 800b536:	4603      	mov	r3, r0
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	d105      	bne.n	800b548 <__ieee754_log10f+0x18>
 800b53c:	2100      	movs	r1, #0
 800b53e:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800b542:	f7f5 fcd3 	bl	8000eec <__aeabi_fdiv>
 800b546:	bd70      	pop	{r4, r5, r6, pc}
 800b548:	2800      	cmp	r0, #0
 800b54a:	da03      	bge.n	800b554 <__ieee754_log10f+0x24>
 800b54c:	f7f5 fb10 	bl	8000b70 <__aeabi_fsub>
 800b550:	2100      	movs	r1, #0
 800b552:	e7f6      	b.n	800b542 <__ieee754_log10f+0x12>
 800b554:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b558:	db02      	blt.n	800b560 <__ieee754_log10f+0x30>
 800b55a:	f7f5 fb0b 	bl	8000b74 <__addsf3>
 800b55e:	e7f2      	b.n	800b546 <__ieee754_log10f+0x16>
 800b560:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800b564:	da2d      	bge.n	800b5c2 <__ieee754_log10f+0x92>
 800b566:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b56a:	f7f5 fc0b 	bl	8000d84 <__aeabi_fmul>
 800b56e:	f06f 0218 	mvn.w	r2, #24
 800b572:	4603      	mov	r3, r0
 800b574:	15d8      	asrs	r0, r3, #23
 800b576:	387f      	subs	r0, #127	; 0x7f
 800b578:	4410      	add	r0, r2
 800b57a:	0fc6      	lsrs	r6, r0, #31
 800b57c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b580:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800b584:	f7f5 fbaa 	bl	8000cdc <__aeabi_i2f>
 800b588:	4605      	mov	r5, r0
 800b58a:	f1c6 007f 	rsb	r0, r6, #127	; 0x7f
 800b58e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800b592:	f000 f81f 	bl	800b5d4 <__ieee754_logf>
 800b596:	490c      	ldr	r1, [pc, #48]	; (800b5c8 <__ieee754_log10f+0x98>)
 800b598:	4606      	mov	r6, r0
 800b59a:	4628      	mov	r0, r5
 800b59c:	f7f5 fbf2 	bl	8000d84 <__aeabi_fmul>
 800b5a0:	490a      	ldr	r1, [pc, #40]	; (800b5cc <__ieee754_log10f+0x9c>)
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7f5 fbed 	bl	8000d84 <__aeabi_fmul>
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7f5 fae1 	bl	8000b74 <__addsf3>
 800b5b2:	4907      	ldr	r1, [pc, #28]	; (800b5d0 <__ieee754_log10f+0xa0>)
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f7f5 fbe4 	bl	8000d84 <__aeabi_fmul>
 800b5bc:	4601      	mov	r1, r0
 800b5be:	4620      	mov	r0, r4
 800b5c0:	e7cb      	b.n	800b55a <__ieee754_log10f+0x2a>
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	e7d6      	b.n	800b574 <__ieee754_log10f+0x44>
 800b5c6:	bf00      	nop
 800b5c8:	355427db 	.word	0x355427db
 800b5cc:	3ede5bd9 	.word	0x3ede5bd9
 800b5d0:	3e9a2080 	.word	0x3e9a2080

0800b5d4 <__ieee754_logf>:
 800b5d4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800b5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	4601      	mov	r1, r0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	d106      	bne.n	800b5f0 <__ieee754_logf+0x1c>
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800b5e8:	f7f5 fc80 	bl	8000eec <__aeabi_fdiv>
 800b5ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	da03      	bge.n	800b5fc <__ieee754_logf+0x28>
 800b5f4:	f7f5 fabc 	bl	8000b70 <__aeabi_fsub>
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	e7f5      	b.n	800b5e8 <__ieee754_logf+0x14>
 800b5fc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b600:	db02      	blt.n	800b608 <__ieee754_logf+0x34>
 800b602:	f7f5 fab7 	bl	8000b74 <__addsf3>
 800b606:	e7f1      	b.n	800b5ec <__ieee754_logf+0x18>
 800b608:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800b60c:	da35      	bge.n	800b67a <__ieee754_logf+0xa6>
 800b60e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b612:	f7f5 fbb7 	bl	8000d84 <__aeabi_fmul>
 800b616:	f06f 0218 	mvn.w	r2, #24
 800b61a:	4603      	mov	r3, r0
 800b61c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800b620:	15de      	asrs	r6, r3, #23
 800b622:	4b71      	ldr	r3, [pc, #452]	; (800b7e8 <__ieee754_logf+0x214>)
 800b624:	3e7f      	subs	r6, #127	; 0x7f
 800b626:	4423      	add	r3, r4
 800b628:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 800b62c:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 800b630:	4416      	add	r6, r2
 800b632:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b636:	4320      	orrs	r0, r4
 800b638:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 800b63c:	f7f5 fa98 	bl	8000b70 <__aeabi_fsub>
 800b640:	4b6a      	ldr	r3, [pc, #424]	; (800b7ec <__ieee754_logf+0x218>)
 800b642:	f104 020f 	add.w	r2, r4, #15
 800b646:	4013      	ands	r3, r2
 800b648:	4605      	mov	r5, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d13a      	bne.n	800b6c4 <__ieee754_logf+0xf0>
 800b64e:	2100      	movs	r1, #0
 800b650:	f7f5 fd2c 	bl	80010ac <__aeabi_fcmpeq>
 800b654:	b198      	cbz	r0, 800b67e <__ieee754_logf+0xaa>
 800b656:	2e00      	cmp	r6, #0
 800b658:	f000 80c4 	beq.w	800b7e4 <__ieee754_logf+0x210>
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7f5 fb3d 	bl	8000cdc <__aeabi_i2f>
 800b662:	4963      	ldr	r1, [pc, #396]	; (800b7f0 <__ieee754_logf+0x21c>)
 800b664:	4605      	mov	r5, r0
 800b666:	f7f5 fb8d 	bl	8000d84 <__aeabi_fmul>
 800b66a:	4962      	ldr	r1, [pc, #392]	; (800b7f4 <__ieee754_logf+0x220>)
 800b66c:	4604      	mov	r4, r0
 800b66e:	4628      	mov	r0, r5
 800b670:	f7f5 fb88 	bl	8000d84 <__aeabi_fmul>
 800b674:	4601      	mov	r1, r0
 800b676:	4620      	mov	r0, r4
 800b678:	e7c3      	b.n	800b602 <__ieee754_logf+0x2e>
 800b67a:	2200      	movs	r2, #0
 800b67c:	e7ce      	b.n	800b61c <__ieee754_logf+0x48>
 800b67e:	495e      	ldr	r1, [pc, #376]	; (800b7f8 <__ieee754_logf+0x224>)
 800b680:	4628      	mov	r0, r5
 800b682:	f7f5 fb7f 	bl	8000d84 <__aeabi_fmul>
 800b686:	4601      	mov	r1, r0
 800b688:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800b68c:	f7f5 fa70 	bl	8000b70 <__aeabi_fsub>
 800b690:	4629      	mov	r1, r5
 800b692:	4604      	mov	r4, r0
 800b694:	4628      	mov	r0, r5
 800b696:	f7f5 fb75 	bl	8000d84 <__aeabi_fmul>
 800b69a:	4601      	mov	r1, r0
 800b69c:	4620      	mov	r0, r4
 800b69e:	f7f5 fb71 	bl	8000d84 <__aeabi_fmul>
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	b90e      	cbnz	r6, 800b6aa <__ieee754_logf+0xd6>
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	e06f      	b.n	800b78a <__ieee754_logf+0x1b6>
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7f5 fb16 	bl	8000cdc <__aeabi_i2f>
 800b6b0:	494f      	ldr	r1, [pc, #316]	; (800b7f0 <__ieee754_logf+0x21c>)
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	f7f5 fb66 	bl	8000d84 <__aeabi_fmul>
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	494d      	ldr	r1, [pc, #308]	; (800b7f4 <__ieee754_logf+0x220>)
 800b6be:	f7f5 fb61 	bl	8000d84 <__aeabi_fmul>
 800b6c2:	e072      	b.n	800b7aa <__ieee754_logf+0x1d6>
 800b6c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b6c8:	f7f5 fa54 	bl	8000b74 <__addsf3>
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7f5 fc0c 	bl	8000eec <__aeabi_fdiv>
 800b6d4:	4681      	mov	r9, r0
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7f5 fb00 	bl	8000cdc <__aeabi_i2f>
 800b6dc:	4649      	mov	r1, r9
 800b6de:	4680      	mov	r8, r0
 800b6e0:	4648      	mov	r0, r9
 800b6e2:	f7f5 fb4f 	bl	8000d84 <__aeabi_fmul>
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	4683      	mov	fp, r0
 800b6ea:	f7f5 fb4b 	bl	8000d84 <__aeabi_fmul>
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	4942      	ldr	r1, [pc, #264]	; (800b7fc <__ieee754_logf+0x228>)
 800b6f2:	f7f5 fb47 	bl	8000d84 <__aeabi_fmul>
 800b6f6:	4942      	ldr	r1, [pc, #264]	; (800b800 <__ieee754_logf+0x22c>)
 800b6f8:	f7f5 fa3c 	bl	8000b74 <__addsf3>
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f5 fb41 	bl	8000d84 <__aeabi_fmul>
 800b702:	4940      	ldr	r1, [pc, #256]	; (800b804 <__ieee754_logf+0x230>)
 800b704:	f7f5 fa36 	bl	8000b74 <__addsf3>
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f5 fb3b 	bl	8000d84 <__aeabi_fmul>
 800b70e:	493e      	ldr	r1, [pc, #248]	; (800b808 <__ieee754_logf+0x234>)
 800b710:	f7f5 fa30 	bl	8000b74 <__addsf3>
 800b714:	4659      	mov	r1, fp
 800b716:	f7f5 fb35 	bl	8000d84 <__aeabi_fmul>
 800b71a:	493c      	ldr	r1, [pc, #240]	; (800b80c <__ieee754_logf+0x238>)
 800b71c:	4683      	mov	fp, r0
 800b71e:	4638      	mov	r0, r7
 800b720:	f7f5 fb30 	bl	8000d84 <__aeabi_fmul>
 800b724:	493a      	ldr	r1, [pc, #232]	; (800b810 <__ieee754_logf+0x23c>)
 800b726:	f7f5 fa25 	bl	8000b74 <__addsf3>
 800b72a:	4639      	mov	r1, r7
 800b72c:	f7f5 fb2a 	bl	8000d84 <__aeabi_fmul>
 800b730:	4938      	ldr	r1, [pc, #224]	; (800b814 <__ieee754_logf+0x240>)
 800b732:	f7f5 fa1f 	bl	8000b74 <__addsf3>
 800b736:	4639      	mov	r1, r7
 800b738:	f7f5 fb24 	bl	8000d84 <__aeabi_fmul>
 800b73c:	4601      	mov	r1, r0
 800b73e:	4658      	mov	r0, fp
 800b740:	f7f5 fa18 	bl	8000b74 <__addsf3>
 800b744:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800b818 <__ieee754_logf+0x244>
 800b748:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 800b74c:	44a2      	add	sl, r4
 800b74e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b752:	ea43 030a 	orr.w	r3, r3, sl
 800b756:	2b00      	cmp	r3, #0
 800b758:	4607      	mov	r7, r0
 800b75a:	dd30      	ble.n	800b7be <__ieee754_logf+0x1ea>
 800b75c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b760:	4628      	mov	r0, r5
 800b762:	f7f5 fb0f 	bl	8000d84 <__aeabi_fmul>
 800b766:	4629      	mov	r1, r5
 800b768:	f7f5 fb0c 	bl	8000d84 <__aeabi_fmul>
 800b76c:	4601      	mov	r1, r0
 800b76e:	4604      	mov	r4, r0
 800b770:	4638      	mov	r0, r7
 800b772:	f7f5 f9ff 	bl	8000b74 <__addsf3>
 800b776:	4649      	mov	r1, r9
 800b778:	f7f5 fb04 	bl	8000d84 <__aeabi_fmul>
 800b77c:	4607      	mov	r7, r0
 800b77e:	b946      	cbnz	r6, 800b792 <__ieee754_logf+0x1be>
 800b780:	4601      	mov	r1, r0
 800b782:	4620      	mov	r0, r4
 800b784:	f7f5 f9f4 	bl	8000b70 <__aeabi_fsub>
 800b788:	4601      	mov	r1, r0
 800b78a:	4628      	mov	r0, r5
 800b78c:	f7f5 f9f0 	bl	8000b70 <__aeabi_fsub>
 800b790:	e72c      	b.n	800b5ec <__ieee754_logf+0x18>
 800b792:	4917      	ldr	r1, [pc, #92]	; (800b7f0 <__ieee754_logf+0x21c>)
 800b794:	4640      	mov	r0, r8
 800b796:	f7f5 faf5 	bl	8000d84 <__aeabi_fmul>
 800b79a:	4916      	ldr	r1, [pc, #88]	; (800b7f4 <__ieee754_logf+0x220>)
 800b79c:	4606      	mov	r6, r0
 800b79e:	4640      	mov	r0, r8
 800b7a0:	f7f5 faf0 	bl	8000d84 <__aeabi_fmul>
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	f7f5 f9e5 	bl	8000b74 <__addsf3>
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f7f5 f9df 	bl	8000b70 <__aeabi_fsub>
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7f5 f9dc 	bl	8000b70 <__aeabi_fsub>
 800b7b8:	4601      	mov	r1, r0
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	e7e6      	b.n	800b78c <__ieee754_logf+0x1b8>
 800b7be:	4601      	mov	r1, r0
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f7f5 f9d5 	bl	8000b70 <__aeabi_fsub>
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	f7f5 fadc 	bl	8000d84 <__aeabi_fmul>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	2e00      	cmp	r6, #0
 800b7d0:	f43f af69 	beq.w	800b6a6 <__ieee754_logf+0xd2>
 800b7d4:	4906      	ldr	r1, [pc, #24]	; (800b7f0 <__ieee754_logf+0x21c>)
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f7f5 fad4 	bl	8000d84 <__aeabi_fmul>
 800b7dc:	4905      	ldr	r1, [pc, #20]	; (800b7f4 <__ieee754_logf+0x220>)
 800b7de:	4606      	mov	r6, r0
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	e76c      	b.n	800b6be <__ieee754_logf+0xea>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e701      	b.n	800b5ec <__ieee754_logf+0x18>
 800b7e8:	004afb20 	.word	0x004afb20
 800b7ec:	007ffff0 	.word	0x007ffff0
 800b7f0:	3f317180 	.word	0x3f317180
 800b7f4:	3717f7d1 	.word	0x3717f7d1
 800b7f8:	3eaaaaab 	.word	0x3eaaaaab
 800b7fc:	3e178897 	.word	0x3e178897
 800b800:	3e3a3325 	.word	0x3e3a3325
 800b804:	3e924925 	.word	0x3e924925
 800b808:	3f2aaaab 	.word	0x3f2aaaab
 800b80c:	3e1cd04f 	.word	0x3e1cd04f
 800b810:	3e638e29 	.word	0x3e638e29
 800b814:	3ecccccd 	.word	0x3ecccccd
 800b818:	ffcf5c30 	.word	0xffcf5c30

0800b81c <_init>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	bf00      	nop
 800b820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b822:	bc08      	pop	{r3}
 800b824:	469e      	mov	lr, r3
 800b826:	4770      	bx	lr

0800b828 <_fini>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	bf00      	nop
 800b82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82e:	bc08      	pop	{r3}
 800b830:	469e      	mov	lr, r3
 800b832:	4770      	bx	lr
