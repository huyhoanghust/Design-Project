
RTLS_UWB_TAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c714  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800c828  0800c828  0001c828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdbc  0800cdbc  00020268  2**0
                  CONTENTS
  4 .ARM          00000000  0800cdbc  0800cdbc  00020268  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cdbc  0800cdbc  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc0  0800cdc0  0001cdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800cdc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000268  0800d02c  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  0800d02c  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137ce  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f09  00000000  00000000  00033a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00036968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00037c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa2e  00000000  00000000  00038e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015426  00000000  00000000  00053866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d76  00000000  00000000  00068c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9a02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000666c  00000000  00000000  000f9a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c80c 	.word	0x0800c80c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	0800c80c 	.word	0x0800c80c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4605      	mov	r5, r0
 800118c:	460c      	mov	r4, r1
 800118e:	2200      	movs	r2, #0
 8001190:	2300      	movs	r3, #0
 8001192:	4628      	mov	r0, r5
 8001194:	4621      	mov	r1, r4
 8001196:	f7ff fc11 	bl	80009bc <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f908 	bl	80003e4 <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f97e 	bl	80004d8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7fe ffc0 	bl	8000168 <__aeabi_dsub>
 80011e8:	f7ff fc4e 	bl	8000a88 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <MX_GPIO_Init+0xc8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <MX_GPIO_Init+0xc8>)
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_GPIO_Init+0xc8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MX_GPIO_Init+0xc8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <MX_GPIO_Init+0xc8>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_GPIO_Init+0xc8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MX_GPIO_Init+0xc8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <MX_GPIO_Init+0xc8>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_GPIO_Init+0xc8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2110      	movs	r1, #16
 8001258:	481a      	ldr	r0, [pc, #104]	; (80012c4 <MX_GPIO_Init+0xcc>)
 800125a:	f003 ffeb 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|LED_ACT_Pin|LED_ERR_Pin|LED_SYS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	213a      	movs	r1, #58	; 0x3a
 8001262:	4819      	ldr	r0, [pc, #100]	; (80012c8 <MX_GPIO_Init+0xd0>)
 8001264:	f003 ffe6 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001268:	2310      	movs	r3, #16
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_GPIO_Init+0xcc>)
 8001280:	f003 fe54 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001284:	2301      	movs	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_GPIO_Init+0xd0>)
 8001298:	f003 fe48 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_ACT_Pin|LED_ERR_Pin|LED_SYS_Pin;
 800129c:	233a      	movs	r3, #58	; 0x3a
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_GPIO_Init+0xd0>)
 80012b4:	f003 fe3a 	bl	8004f2c <HAL_GPIO_Init>

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40010c00 	.word	0x40010c00

080012cc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_IWDG_Init+0x2c>)
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <MX_IWDG_Init+0x30>)
 80012d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_IWDG_Init+0x2c>)
 80012d8:	2204      	movs	r2, #4
 80012da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 624;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_IWDG_Init+0x2c>)
 80012de:	f44f 721c 	mov.w	r2, #624	; 0x270
 80012e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_IWDG_Init+0x2c>)
 80012e6:	f003 ffbd 	bl	8005264 <HAL_IWDG_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80012f0:	f000 fe23 	bl	8001f3a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000284 	.word	0x20000284
 80012fc:	40003000 	.word	0x40003000

08001300 <dwInteruptHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dwInteruptHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  dwReadSystemEventStatusRegister(&device);
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <dwInteruptHandler+0x80>)
 8001306:	f001 fbba 	bl	8002a7e <dwReadSystemEventStatusRegister>
  if (dwIsTransmitDone(&device))
 800130a:	481d      	ldr	r0, [pc, #116]	; (8001380 <dwInteruptHandler+0x80>)
 800130c:	f002 fa92 	bl	8003834 <dwIsTransmitDone>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <dwInteruptHandler+0x22>
  {
    dwClearTransmitStatus(&device);
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <dwInteruptHandler+0x80>)
 8001318:	f002 fb5e 	bl	80039d8 <dwClearTransmitStatus>
    sentAck = true;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <dwInteruptHandler+0x84>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
  }
  if (dwIsReceiveDone(&device))
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <dwInteruptHandler+0x80>)
 8001324:	f002 faa6 	bl	8003874 <dwIsReceiveDone>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <dwInteruptHandler+0x3a>
  {
    dwClearReceiveStatus(&device);
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <dwInteruptHandler+0x80>)
 8001330:	f002 fb40 	bl	80039b4 <dwClearReceiveStatus>
    recievedAck = true;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <dwInteruptHandler+0x88>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
  }
  if (dwIsReceiveTimestampAvailable(&device))
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <dwInteruptHandler+0x80>)
 800133c:	f002 fa8a 	bl	8003854 <dwIsReceiveTimestampAvailable>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <dwInteruptHandler+0x4c>
  {
    dwClearReceiveTimestampAvailableStatus(&device);
 8001346:	480e      	ldr	r0, [pc, #56]	; (8001380 <dwInteruptHandler+0x80>)
 8001348:	f002 fb18 	bl	800397c <dwClearReceiveTimestampAvailableStatus>
  }
  if (dwIsReceiveFailed(&device))
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <dwInteruptHandler+0x80>)
 800134e:	f002 faaf 	bl	80038b0 <dwIsReceiveFailed>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <dwInteruptHandler+0x64>
  {
    dwClearReceiveStatus(&device);
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <dwInteruptHandler+0x80>)
 800135a:	f002 fb2b 	bl	80039b4 <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <dwInteruptHandler+0x80>)
 8001360:	f001 fb3e 	bl	80029e0 <dwRxSoftReset>
  }
  if (dwIsReceiveTimeout(&device))
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <dwInteruptHandler+0x80>)
 8001366:	f002 faf9 	bl	800395c <dwIsReceiveTimeout>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <dwInteruptHandler+0x7c>
  {
    dwClearReceiveStatus(&device);
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <dwInteruptHandler+0x80>)
 8001372:	f002 fb1f 	bl	80039b4 <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 8001376:	4802      	ldr	r0, [pc, #8]	; (8001380 <dwInteruptHandler+0x80>)
 8001378:	f001 fb32 	bl	80029e0 <dwRxSoftReset>
  }
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000010 	.word	0x20000010
 8001384:	2000040c 	.word	0x2000040c
 8001388:	2000040d 	.word	0x2000040d

0800138c <log_data>:

void log_data(char *string)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7fe fedb 	bl	8000150 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <log_data+0x28>)
 80013a6:	f005 fe4f 	bl	8007048 <HAL_UART_Transmit>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200004b4 	.word	0x200004b4

080013b8 <cal_location>:

void cal_location(float x1, float y1, float x2, float y2, float x3, float y3)
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  float A, B, C, D, E, F;
  A = 2 * (x2 - x1);
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fbd1 	bl	8000b70 <__aeabi_fsub>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fbce 	bl	8000b74 <__addsf3>
 80013d8:	4603      	mov	r3, r0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  B = 2 * (y2 - y1);
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f7ff fbc6 	bl	8000b70 <__aeabi_fsub>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fbc3 	bl	8000b74 <__addsf3>
 80013ee:	4603      	mov	r3, r0
 80013f0:	623b      	str	r3, [r7, #32]
  C = arr_distance[0] * arr_distance[0] - arr_distance[1] * arr_distance[1] - x1 * x1 + x2 * x2 - y1 * y1 + y2 * y2;
 80013f2:	4ba0      	ldr	r3, [pc, #640]	; (8001674 <cal_location+0x2bc>)
 80013f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f8:	4b9e      	ldr	r3, [pc, #632]	; (8001674 <cal_location+0x2bc>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f86b 	bl	80004d8 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	4b9a      	ldr	r3, [pc, #616]	; (8001674 <cal_location+0x2bc>)
 800140c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001410:	4b98      	ldr	r3, [pc, #608]	; (8001674 <cal_location+0x2bc>)
 8001412:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001416:	f7ff f85f 	bl	80004d8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4620      	mov	r0, r4
 8001420:	4629      	mov	r1, r5
 8001422:	f7fe fea1 	bl	8000168 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4614      	mov	r4, r2
 800142c:	461d      	mov	r5, r3
 800142e:	68f9      	ldr	r1, [r7, #12]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff fca7 	bl	8000d84 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fff5 	bl	8000428 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe fe8f 	bl	8000168 <__aeabi_dsub>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fc95 	bl	8000d84 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ffe3 	bl	8000428 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7fe fe7f 	bl	800016c <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4614      	mov	r4, r2
 8001474:	461d      	mov	r5, r3
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	68b8      	ldr	r0, [r7, #8]
 800147a:	f7ff fc83 	bl	8000d84 <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe ffd1 	bl	8000428 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe fe6b 	bl	8000168 <__aeabi_dsub>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4614      	mov	r4, r2
 8001498:	461d      	mov	r5, r3
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f7ff fc71 	bl	8000d84 <__aeabi_fmul>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe ffbf 	bl	8000428 <__aeabi_f2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f7fe fe5b 	bl	800016c <__adddf3>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fb03 	bl	8000ac8 <__aeabi_d2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	61fb      	str	r3, [r7, #28]
  D = 2 * (x3 - x1);
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014ca:	f7ff fb51 	bl	8000b70 <__aeabi_fsub>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb4e 	bl	8000b74 <__addsf3>
 80014d8:	4603      	mov	r3, r0
 80014da:	61bb      	str	r3, [r7, #24]
  E = 2 * (y3 - y1);
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014e0:	f7ff fb46 	bl	8000b70 <__aeabi_fsub>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fb43 	bl	8000b74 <__addsf3>
 80014ee:	4603      	mov	r3, r0
 80014f0:	617b      	str	r3, [r7, #20]
  F = arr_distance[0] * arr_distance[0] - arr_distance[2] * arr_distance[2] - x1 * x1 + x3 * x3 - y1 * y1 + y3 * y3;
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <cal_location+0x2bc>)
 80014f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f8:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <cal_location+0x2bc>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7fe ffeb 	bl	80004d8 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4614      	mov	r4, r2
 8001508:	461d      	mov	r5, r3
 800150a:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <cal_location+0x2bc>)
 800150c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001510:	4b58      	ldr	r3, [pc, #352]	; (8001674 <cal_location+0x2bc>)
 8001512:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001516:	f7fe ffdf 	bl	80004d8 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7fe fe21 	bl	8000168 <__aeabi_dsub>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fc27 	bl	8000d84 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff75 	bl	8000428 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7fe fe0f 	bl	8000168 <__aeabi_dsub>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4614      	mov	r4, r2
 8001550:	461d      	mov	r5, r3
 8001552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001556:	f7ff fc15 	bl	8000d84 <__aeabi_fmul>
 800155a:	4603      	mov	r3, r0
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff63 	bl	8000428 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4620      	mov	r0, r4
 8001568:	4629      	mov	r1, r5
 800156a:	f7fe fdff 	bl	800016c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f7ff fc03 	bl	8000d84 <__aeabi_fmul>
 800157e:	4603      	mov	r3, r0
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ff51 	bl	8000428 <__aeabi_f2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7fe fdeb 	bl	8000168 <__aeabi_dsub>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4614      	mov	r4, r2
 8001598:	461d      	mov	r5, r3
 800159a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800159c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800159e:	f7ff fbf1 	bl	8000d84 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff3f 	bl	8000428 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7fe fddb 	bl	800016c <__adddf3>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fa83 	bl	8000ac8 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	613b      	str	r3, [r7, #16]
  coor_x = (C * E - F * B) / (E * A - B * D);
 80015c6:	6979      	ldr	r1, [r7, #20]
 80015c8:	69f8      	ldr	r0, [r7, #28]
 80015ca:	f7ff fbdb 	bl	8000d84 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461c      	mov	r4, r3
 80015d2:	6a39      	ldr	r1, [r7, #32]
 80015d4:	6938      	ldr	r0, [r7, #16]
 80015d6:	f7ff fbd5 	bl	8000d84 <__aeabi_fmul>
 80015da:	4603      	mov	r3, r0
 80015dc:	4619      	mov	r1, r3
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fac6 	bl	8000b70 <__aeabi_fsub>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461c      	mov	r4, r3
 80015e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff fbca 	bl	8000d84 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461d      	mov	r5, r3
 80015f4:	69b9      	ldr	r1, [r7, #24]
 80015f6:	6a38      	ldr	r0, [r7, #32]
 80015f8:	f7ff fbc4 	bl	8000d84 <__aeabi_fmul>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4619      	mov	r1, r3
 8001600:	4628      	mov	r0, r5
 8001602:	f7ff fab5 	bl	8000b70 <__aeabi_fsub>
 8001606:	4603      	mov	r3, r0
 8001608:	4619      	mov	r1, r3
 800160a:	4620      	mov	r0, r4
 800160c:	f7ff fc6e 	bl	8000eec <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <cal_location+0x2c0>)
 8001616:	601a      	str	r2, [r3, #0]
  coor_y = (C * D - A * F) / (B * D - A * E);
 8001618:	69b9      	ldr	r1, [r7, #24]
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f7ff fbb2 	bl	8000d84 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	461c      	mov	r4, r3
 8001624:	6939      	ldr	r1, [r7, #16]
 8001626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001628:	f7ff fbac 	bl	8000d84 <__aeabi_fmul>
 800162c:	4603      	mov	r3, r0
 800162e:	4619      	mov	r1, r3
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fa9d 	bl	8000b70 <__aeabi_fsub>
 8001636:	4603      	mov	r3, r0
 8001638:	461c      	mov	r4, r3
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	6a38      	ldr	r0, [r7, #32]
 800163e:	f7ff fba1 	bl	8000d84 <__aeabi_fmul>
 8001642:	4603      	mov	r3, r0
 8001644:	461d      	mov	r5, r3
 8001646:	6979      	ldr	r1, [r7, #20]
 8001648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800164a:	f7ff fb9b 	bl	8000d84 <__aeabi_fmul>
 800164e:	4603      	mov	r3, r0
 8001650:	4619      	mov	r1, r3
 8001652:	4628      	mov	r0, r5
 8001654:	f7ff fa8c 	bl	8000b70 <__aeabi_fsub>
 8001658:	4603      	mov	r3, r0
 800165a:	4619      	mov	r1, r3
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fc45 	bl	8000eec <__aeabi_fdiv>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <cal_location+0x2c4>)
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bdb0      	pop	{r4, r5, r7, pc}
 8001672:	bf00      	nop
 8001674:	200003d8 	.word	0x200003d8
 8001678:	20000400 	.word	0x20000400
 800167c:	20000404 	.word	0x20000404

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001684:	b0d2      	sub	sp, #328	; 0x148
 8001686:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f003 fa0a 	bl	8004aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168c:	f000 fc0e 	bl	8001eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f7ff fdb2 	bl	80011f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001694:	f000 fc56 	bl	8001f44 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001698:	f000 fe92 	bl	80023c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800169c:	f000 fe18 	bl	80022d0 <MX_TIM1_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  log_data("[TAG START]\r\n");
 80016a0:	487c      	ldr	r0, [pc, #496]	; (8001894 <main+0x214>)
 80016a2:	f7ff fe73 	bl	800138c <log_data>
  MAC80215_PACKET_INIT(txPacket, MAC802154_TYPE_DATA);
 80016a6:	497c      	ldr	r1, [pc, #496]	; (8001898 <main+0x218>)
 80016a8:	780b      	ldrb	r3, [r1, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f362 0302 	bfi	r3, r2, #0, #3
 80016b0:	700b      	strb	r3, [r1, #0]
 80016b2:	4a79      	ldr	r2, [pc, #484]	; (8001898 <main+0x218>)
 80016b4:	7813      	ldrb	r3, [r2, #0]
 80016b6:	f36f 03c3 	bfc	r3, #3, #1
 80016ba:	7013      	strb	r3, [r2, #0]
 80016bc:	4a76      	ldr	r2, [pc, #472]	; (8001898 <main+0x218>)
 80016be:	7813      	ldrb	r3, [r2, #0]
 80016c0:	f36f 1304 	bfc	r3, #4, #1
 80016c4:	7013      	strb	r3, [r2, #0]
 80016c6:	4a74      	ldr	r2, [pc, #464]	; (8001898 <main+0x218>)
 80016c8:	7813      	ldrb	r3, [r2, #0]
 80016ca:	f36f 1345 	bfc	r3, #5, #1
 80016ce:	7013      	strb	r3, [r2, #0]
 80016d0:	4a71      	ldr	r2, [pc, #452]	; (8001898 <main+0x218>)
 80016d2:	7813      	ldrb	r3, [r2, #0]
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	7013      	strb	r3, [r2, #0]
 80016da:	496f      	ldr	r1, [pc, #444]	; (8001898 <main+0x218>)
 80016dc:	784b      	ldrb	r3, [r1, #1]
 80016de:	2202      	movs	r2, #2
 80016e0:	f362 0383 	bfi	r3, r2, #2, #2
 80016e4:	704b      	strb	r3, [r1, #1]
 80016e6:	496c      	ldr	r1, [pc, #432]	; (8001898 <main+0x218>)
 80016e8:	784b      	ldrb	r3, [r1, #1]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f362 1305 	bfi	r3, r2, #4, #2
 80016f0:	704b      	strb	r3, [r1, #1]
 80016f2:	4969      	ldr	r1, [pc, #420]	; (8001898 <main+0x218>)
 80016f4:	784b      	ldrb	r3, [r1, #1]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f362 1387 	bfi	r3, r2, #6, #2
 80016fc:	704b      	strb	r3, [r1, #1]
 80016fe:	4a66      	ldr	r2, [pc, #408]	; (8001898 <main+0x218>)
 8001700:	2300      	movs	r3, #0
 8001702:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001706:	70d3      	strb	r3, [r2, #3]
 8001708:	2300      	movs	r3, #0
 800170a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800170e:	7113      	strb	r3, [r2, #4]
  MAC80215_PACKET_INIT(rxPacket, MAC802154_TYPE_DATA);
 8001710:	4962      	ldr	r1, [pc, #392]	; (800189c <main+0x21c>)
 8001712:	780b      	ldrb	r3, [r1, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	f362 0302 	bfi	r3, r2, #0, #3
 800171a:	700b      	strb	r3, [r1, #0]
 800171c:	4a5f      	ldr	r2, [pc, #380]	; (800189c <main+0x21c>)
 800171e:	7813      	ldrb	r3, [r2, #0]
 8001720:	f36f 03c3 	bfc	r3, #3, #1
 8001724:	7013      	strb	r3, [r2, #0]
 8001726:	4a5d      	ldr	r2, [pc, #372]	; (800189c <main+0x21c>)
 8001728:	7813      	ldrb	r3, [r2, #0]
 800172a:	f36f 1304 	bfc	r3, #4, #1
 800172e:	7013      	strb	r3, [r2, #0]
 8001730:	4a5a      	ldr	r2, [pc, #360]	; (800189c <main+0x21c>)
 8001732:	7813      	ldrb	r3, [r2, #0]
 8001734:	f36f 1345 	bfc	r3, #5, #1
 8001738:	7013      	strb	r3, [r2, #0]
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <main+0x21c>)
 800173c:	7813      	ldrb	r3, [r2, #0]
 800173e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001742:	7013      	strb	r3, [r2, #0]
 8001744:	4955      	ldr	r1, [pc, #340]	; (800189c <main+0x21c>)
 8001746:	784b      	ldrb	r3, [r1, #1]
 8001748:	2202      	movs	r2, #2
 800174a:	f362 0383 	bfi	r3, r2, #2, #2
 800174e:	704b      	strb	r3, [r1, #1]
 8001750:	4952      	ldr	r1, [pc, #328]	; (800189c <main+0x21c>)
 8001752:	784b      	ldrb	r3, [r1, #1]
 8001754:	2201      	movs	r2, #1
 8001756:	f362 1305 	bfi	r3, r2, #4, #2
 800175a:	704b      	strb	r3, [r1, #1]
 800175c:	494f      	ldr	r1, [pc, #316]	; (800189c <main+0x21c>)
 800175e:	784b      	ldrb	r3, [r1, #1]
 8001760:	2202      	movs	r2, #2
 8001762:	f362 1387 	bfi	r3, r2, #6, #2
 8001766:	704b      	strb	r3, [r1, #1]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <main+0x21c>)
 800176a:	2300      	movs	r3, #0
 800176c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001770:	70d3      	strb	r3, [r2, #3]
 8001772:	2300      	movs	r3, #0
 8001774:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001778:	7113      	strb	r3, [r2, #4]
  // init DW1000
  dwInit(&device);
 800177a:	4849      	ldr	r0, [pc, #292]	; (80018a0 <main+0x220>)
 800177c:	f000 ff86 	bl	800268c <dwInit>
  if (dwConfigure(&device) == DW_ERROR_OK)
 8001780:	4847      	ldr	r0, [pc, #284]	; (80018a0 <main+0x220>)
 8001782:	f000 ffa5 	bl	80026d0 <dwConfigure>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10e      	bne.n	80017aa <main+0x12a>
  {
    dwEnableAllLeds(&device);
 800178c:	4844      	ldr	r0, [pc, #272]	; (80018a0 <main+0x220>)
 800178e:	f001 f872 	bl	8002876 <dwEnableAllLeds>
  {
    log_data("[Configure failed]\r\n");
    while (1)
      ;
  }
  dwNewConfiguration(&device);
 8001792:	4843      	ldr	r0, [pc, #268]	; (80018a0 <main+0x220>)
 8001794:	f001 fc02 	bl	8002f9c <dwNewConfiguration>
  dwSetDefaults(&device);
 8001798:	4841      	ldr	r0, [pc, #260]	; (80018a0 <main+0x220>)
 800179a:	f001 fdf8 	bl	800338e <dwSetDefaults>
  dwCommitConfiguration(&device);
 800179e:	4840      	ldr	r0, [pc, #256]	; (80018a0 <main+0x220>)
 80017a0:	f001 fc16 	bl	8002fd0 <dwCommitConfiguration>

  //set_timer(1000);
  //HAL_TIM_Base_Start_IT(&htim1);

  MX_IWDG_Init();
 80017a4:	f7ff fd92 	bl	80012cc <MX_IWDG_Init>
 80017a8:	e003      	b.n	80017b2 <main+0x132>
    log_data("[Configure failed]\r\n");
 80017aa:	483e      	ldr	r0, [pc, #248]	; (80018a4 <main+0x224>)
 80017ac:	f7ff fdee 	bl	800138c <log_data>
    while (1)
 80017b0:	e7fe      	b.n	80017b0 <main+0x130>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // dwInteruptHandler();
    //  init ranging
    if (initAck)
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <main+0x228>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d04a      	beq.n	8001852 <main+0x1d2>
    {
      initAck = false;
 80017bc:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <main+0x228>)
 80017be:	2300      	movs	r3, #0
 80017c0:	7013      	strb	r3, [r2, #0]
      char buf[10] = {0};
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80017cc:	2300      	movs	r3, #0
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	8093      	strh	r3, [r2, #4]
      sprintf(buf, "####SEQ: %ld\r\n", seq_mess);
 80017d2:	4b36      	ldr	r3, [pc, #216]	; (80018ac <main+0x22c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80017da:	461a      	mov	r2, r3
 80017dc:	4934      	ldr	r1, [pc, #208]	; (80018b0 <main+0x230>)
 80017de:	f007 f8c9 	bl	8008974 <siprintf>
      // log_data(buf);
      // memset(&txHandle, 0, sizeof(txHandle));
      // txHandle.typemess = POLL;
      // txHandle.seq = ++curr_seq; // poll message has seq = 1; answer is 2;..
      memset(&txPacket, 0, sizeof(txPacket));
 80017e2:	2289      	movs	r2, #137	; 0x89
 80017e4:	2100      	movs	r1, #0
 80017e6:	482c      	ldr	r0, [pc, #176]	; (8001898 <main+0x218>)
 80017e8:	f006 fa4a 	bl	8007c80 <memset>
      memset(&rxPacket, 0, sizeof(rxPacket));
 80017ec:	2289      	movs	r2, #137	; 0x89
 80017ee:	2100      	movs	r1, #0
 80017f0:	482a      	ldr	r0, [pc, #168]	; (800189c <main+0x21c>)
 80017f2:	f006 fa45 	bl	8007c80 <memset>
      txPacket.payload[TYPE] = POLL;
 80017f6:	4a28      	ldr	r2, [pc, #160]	; (8001898 <main+0x218>)
 80017f8:	2301      	movs	r3, #1
 80017fa:	7253      	strb	r3, [r2, #9]
      txPacket.payload[SEQ] = 1;
 80017fc:	4a26      	ldr	r2, [pc, #152]	; (8001898 <main+0x218>)
 80017fe:	2301      	movs	r3, #1
 8001800:	7293      	strb	r3, [r2, #10]
      memcpy(txPacket.destAddress, anchorAddress + 2 * anchor_th, 2);
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <main+0x234>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	461a      	mov	r2, r3
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <main+0x238>)
 800180c:	4413      	add	r3, r2
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <main+0x218>)
 8001814:	f8a2 3005 	strh.w	r3, [r2, #5]
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <main+0x23c>)
 800181a:	881b      	ldrh	r3, [r3, #0]
      memcpy(txPacket.sourceAddress, tagBaseAddr, 2);
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <main+0x218>)
 800181e:	f8a2 3007 	strh.w	r3, [r2, #7]
      // memcpy(txPacket.payload, &txHandle, sizeof(txHandle));
      //  transmision
      dwNewTransmit(&device);
 8001822:	481f      	ldr	r0, [pc, #124]	; (80018a0 <main+0x220>)
 8001824:	f001 fb54 	bl	8002ed0 <dwNewTransmit>
      dwSetDefaults(&device);
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <main+0x220>)
 800182a:	f001 fdb0 	bl	800338e <dwSetDefaults>
      dwSetData(&device, (uint8_t *)&txPacket, MAC802154_HEADER_LENGTH + 2); // 2 is length of payload
 800182e:	220b      	movs	r2, #11
 8001830:	4919      	ldr	r1, [pc, #100]	; (8001898 <main+0x218>)
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <main+0x220>)
 8001834:	f001 fdf6 	bl	8003424 <dwSetData>
      dwStartTransmit(&device);
 8001838:	4819      	ldr	r0, [pc, #100]	; (80018a0 <main+0x220>)
 800183a:	f001 fb61 	bl	8002f00 <dwStartTransmit>
      do
      {
        dwReadSystemEventStatusRegister(&device);
 800183e:	4818      	ldr	r0, [pc, #96]	; (80018a0 <main+0x220>)
 8001840:	f001 f91d 	bl	8002a7e <dwReadSystemEventStatusRegister>
      } while (!(device.sysstatus[0] & (1 << TXFRS_BIT))); // if check TXRFS bit is 1, transmist OKE
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <main+0x220>)
 8001846:	7e5b      	ldrb	r3, [r3, #25]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	daf7      	bge.n	800183e <main+0x1be>
      dwInteruptHandler();
 800184e:	f7ff fd57 	bl	8001300 <dwInteruptHandler>
    }
    if (sentAck)
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <main+0x240>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80f6 	beq.w	8001a4a <main+0x3ca>
    {
      // clear flag
      sentAck = false;
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <main+0x240>)
 8001860:	2300      	movs	r3, #0
 8001862:	7013      	strb	r3, [r2, #0]
      dwTimestamp_t departure;
      dwGetTransmitTimestamp(&device, &departure);
 8001864:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <main+0x220>)
 800186c:	f001 fe6a 	bl	8003544 <dwGetTransmitTimestamp>
      departure.timeFull += ANTENNA_DELAY;
 8001870:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001874:	f244 0155 	movw	r1, #16469	; 0x4055
 8001878:	eb12 0801 	adds.w	r8, r2, r1
 800187c:	f143 0900 	adc.w	r9, r3, #0
 8001880:	e9c7 8938 	strd	r8, r9, [r7, #224]	; 0xe0
      // log_data("TxCallBack\r\n");
      switch (txPacket.payload[TYPE])
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <main+0x218>)
 8001886:	7a5b      	ldrb	r3, [r3, #9]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d01b      	beq.n	80018c4 <main+0x244>
 800188c:	2b03      	cmp	r3, #3
 800188e:	f000 80a1 	beq.w	80019d4 <main+0x354>
 8001892:	e0da      	b.n	8001a4a <main+0x3ca>
 8001894:	0800c828 	.word	0x0800c828
 8001898:	2000034c 	.word	0x2000034c
 800189c:	200002c0 	.word	0x200002c0
 80018a0:	20000010 	.word	0x20000010
 80018a4:	0800c838 	.word	0x0800c838
 80018a8:	20000072 	.word	0x20000072
 80018ac:	20000008 	.word	0x20000008
 80018b0:	0800c850 	.word	0x0800c850
 80018b4:	20000408 	.word	0x20000408
 80018b8:	2000006c 	.word	0x2000006c
 80018bc:	20000068 	.word	0x20000068
 80018c0:	2000040c 	.word	0x2000040c
      {
      case POLL:
        poll_tx = departure;
 80018c4:	4bb1      	ldr	r3, [pc, #708]	; (8001b8c <main+0x50c>)
 80018c6:	461a      	mov	r2, r3
 80018c8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d0:	e882 0003 	stmia.w	r2, {r0, r1}
        // log_data("POLL\r\n");
        dwNewReceive(&device);
 80018d4:	48ae      	ldr	r0, [pc, #696]	; (8001b90 <main+0x510>)
 80018d6:	f001 fab7 	bl	8002e48 <dwNewReceive>
        dwSetDefaults(&device);
 80018da:	48ad      	ldr	r0, [pc, #692]	; (8001b90 <main+0x510>)
 80018dc:	f001 fd57 	bl	800338e <dwSetDefaults>
        dwStartReceive(&device);
 80018e0:	48ab      	ldr	r0, [pc, #684]	; (8001b90 <main+0x510>)
 80018e2:	f001 fac9 	bl	8002e78 <dwStartReceive>
        uint32_t time = HAL_GetTick();
 80018e6:	f003 f933 	bl	8004b50 <HAL_GetTick>
 80018ea:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        do
        {
          if (HAL_GetTick() - time > 10)
 80018ee:	f003 f92f 	bl	8004b50 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	d958      	bls.n	80019b0 <main+0x330>
          {
            // log_data("TIMEOUT POLL AGAIN\r\n");
            memset(&txPacket, 0, sizeof(txPacket));
 80018fe:	2289      	movs	r2, #137	; 0x89
 8001900:	2100      	movs	r1, #0
 8001902:	48a4      	ldr	r0, [pc, #656]	; (8001b94 <main+0x514>)
 8001904:	f006 f9bc 	bl	8007c80 <memset>
            txPacket.payload[TYPE] = POLL;
 8001908:	4aa2      	ldr	r2, [pc, #648]	; (8001b94 <main+0x514>)
 800190a:	2301      	movs	r3, #1
 800190c:	7253      	strb	r3, [r2, #9]
            txPacket.payload[SEQ] = 1;
 800190e:	4aa1      	ldr	r2, [pc, #644]	; (8001b94 <main+0x514>)
 8001910:	2301      	movs	r3, #1
 8001912:	7293      	strb	r3, [r2, #10]
            memcpy(txPacket.destAddress, anchorAddress + 2 * anchor_th, 2);
 8001914:	4ba0      	ldr	r3, [pc, #640]	; (8001b98 <main+0x518>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	461a      	mov	r2, r3
 800191c:	4b9f      	ldr	r3, [pc, #636]	; (8001b9c <main+0x51c>)
 800191e:	4413      	add	r3, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4a9b      	ldr	r2, [pc, #620]	; (8001b94 <main+0x514>)
 8001926:	f8a2 3005 	strh.w	r3, [r2, #5]
 800192a:	4b9d      	ldr	r3, [pc, #628]	; (8001ba0 <main+0x520>)
 800192c:	881b      	ldrh	r3, [r3, #0]
            memcpy(txPacket.sourceAddress, tagBaseAddr, 2);
 800192e:	4a99      	ldr	r2, [pc, #612]	; (8001b94 <main+0x514>)
 8001930:	f8a2 3007 	strh.w	r3, [r2, #7]
            //  transmision
            dwNewTransmit(&device);
 8001934:	4896      	ldr	r0, [pc, #600]	; (8001b90 <main+0x510>)
 8001936:	f001 facb 	bl	8002ed0 <dwNewTransmit>
            dwSetDefaults(&device);
 800193a:	4895      	ldr	r0, [pc, #596]	; (8001b90 <main+0x510>)
 800193c:	f001 fd27 	bl	800338e <dwSetDefaults>
            dwSetData(&device, (uint8_t *)&txPacket, MAC802154_HEADER_LENGTH + 2); // 2 is length of payload
 8001940:	220b      	movs	r2, #11
 8001942:	4994      	ldr	r1, [pc, #592]	; (8001b94 <main+0x514>)
 8001944:	4892      	ldr	r0, [pc, #584]	; (8001b90 <main+0x510>)
 8001946:	f001 fd6d 	bl	8003424 <dwSetData>
            dwStartTransmit(&device);
 800194a:	4891      	ldr	r0, [pc, #580]	; (8001b90 <main+0x510>)
 800194c:	f001 fad8 	bl	8002f00 <dwStartTransmit>
            do
            {
              dwReadSystemEventStatusRegister(&device);
 8001950:	488f      	ldr	r0, [pc, #572]	; (8001b90 <main+0x510>)
 8001952:	f001 f894 	bl	8002a7e <dwReadSystemEventStatusRegister>
            } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 8001956:	4b8e      	ldr	r3, [pc, #568]	; (8001b90 <main+0x510>)
 8001958:	7e5b      	ldrb	r3, [r3, #25]
 800195a:	b25b      	sxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	daf7      	bge.n	8001950 <main+0x2d0>
            dwClearTransmitStatus(&device);
 8001960:	488b      	ldr	r0, [pc, #556]	; (8001b90 <main+0x510>)
 8001962:	f002 f839 	bl	80039d8 <dwClearTransmitStatus>

            dwGetTransmitTimestamp(&device, &departure);
 8001966:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800196a:	4619      	mov	r1, r3
 800196c:	4888      	ldr	r0, [pc, #544]	; (8001b90 <main+0x510>)
 800196e:	f001 fde9 	bl	8003544 <dwGetTransmitTimestamp>
            departure.timeFull += ANTENNA_DELAY;
 8001972:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001976:	f244 0155 	movw	r1, #16469	; 0x4055
 800197a:	eb12 0a01 	adds.w	sl, r2, r1
 800197e:	f143 0b00 	adc.w	fp, r3, #0
 8001982:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
            poll_tx = departure;
 8001986:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <main+0x50c>)
 8001988:	461a      	mov	r2, r3
 800198a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800198e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001992:	e882 0003 	stmia.w	r2, {r0, r1}

            // log_data("TXOKE POLL AGAIN\r\n");
            // receive ANWSER
            dwNewReceive(&device);
 8001996:	487e      	ldr	r0, [pc, #504]	; (8001b90 <main+0x510>)
 8001998:	f001 fa56 	bl	8002e48 <dwNewReceive>
            dwSetDefaults(&device);
 800199c:	487c      	ldr	r0, [pc, #496]	; (8001b90 <main+0x510>)
 800199e:	f001 fcf6 	bl	800338e <dwSetDefaults>
            dwStartReceive(&device);
 80019a2:	487b      	ldr	r0, [pc, #492]	; (8001b90 <main+0x510>)
 80019a4:	f001 fa68 	bl	8002e78 <dwStartReceive>

            time = HAL_GetTick();
 80019a8:	f003 f8d2 	bl	8004b50 <HAL_GetTick>
 80019ac:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
            // break;
          }
          dwReadSystemEventStatusRegister(&device);
 80019b0:	4877      	ldr	r0, [pc, #476]	; (8001b90 <main+0x510>)
 80019b2:	f001 f864 	bl	8002a7e <dwReadSystemEventStatusRegister>
        } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <main+0x510>)
 80019b8:	7e9b      	ldrb	r3, [r3, #26]
 80019ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <main+0x34e>
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <main+0x510>)
 80019c4:	7edb      	ldrb	r3, [r3, #27]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d08f      	beq.n	80018ee <main+0x26e>
        dwInteruptHandler();
 80019ce:	f7ff fc97 	bl	8001300 <dwInteruptHandler>
        break;
 80019d2:	e03a      	b.n	8001a4a <main+0x3ca>
      case FINAL:
        final_tx = departure;
 80019d4:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <main+0x524>)
 80019d6:	461a      	mov	r2, r3
 80019d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e0:	e882 0003 	stmia.w	r2, {r0, r1}
        // log_data("FINAL\r\n");
        dwNewReceive(&device);
 80019e4:	486a      	ldr	r0, [pc, #424]	; (8001b90 <main+0x510>)
 80019e6:	f001 fa2f 	bl	8002e48 <dwNewReceive>
        dwSetDefaults(&device);
 80019ea:	4869      	ldr	r0, [pc, #420]	; (8001b90 <main+0x510>)
 80019ec:	f001 fccf 	bl	800338e <dwSetDefaults>
        dwStartReceive(&device);
 80019f0:	4867      	ldr	r0, [pc, #412]	; (8001b90 <main+0x510>)
 80019f2:	f001 fa41 	bl	8002e78 <dwStartReceive>
        uint32_t time1 = HAL_GetTick();
 80019f6:	f003 f8ab 	bl	8004b50 <HAL_GetTick>
 80019fa:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        do
        {
          if (HAL_GetTick() - time1 > 10)
 80019fe:	f003 f8a7 	bl	8004b50 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	d903      	bls.n	8001a16 <main+0x396>
          {
            // log_data("TIMEOUT FINAL\r\n");
            initAck = true;
 8001a0e:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <main+0x528>)
 8001a10:	2301      	movs	r3, #1
 8001a12:	7013      	strb	r3, [r2, #0]
            break;
 8001a14:	e016      	b.n	8001a44 <main+0x3c4>
          }
          dwReadSystemEventStatusRegister(&device);
 8001a16:	485e      	ldr	r0, [pc, #376]	; (8001b90 <main+0x510>)
 8001a18:	f001 f831 	bl	8002a7e <dwReadSystemEventStatusRegister>
        } while ((HAL_GetTick() - time1 < 100) || (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16)))));
 8001a1c:	f003 f898 	bl	8004b50 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b63      	cmp	r3, #99	; 0x63
 8001a2a:	d9e8      	bls.n	80019fe <main+0x37e>
 8001a2c:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <main+0x510>)
 8001a2e:	7e9b      	ldrb	r3, [r3, #26]
 8001a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <main+0x3c4>
 8001a38:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <main+0x510>)
 8001a3a:	7edb      	ldrb	r3, [r3, #27]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0dc      	beq.n	80019fe <main+0x37e>

        dwInteruptHandler();
 8001a44:	f7ff fc5c 	bl	8001300 <dwInteruptHandler>
        break;
 8001a48:	bf00      	nop
      }
    }

    if (recievedAck)
 8001a4a:	4b58      	ldr	r3, [pc, #352]	; (8001bac <main+0x52c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f43f aeae 	beq.w	80017b2 <main+0x132>
    {
      recievedAck = false;
 8001a56:	4a55      	ldr	r2, [pc, #340]	; (8001bac <main+0x52c>)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	7013      	strb	r3, [r2, #0]
      // log_data("RxCallback\r\n");
      dwTimestamp_t arival;
      // check data length
      int dataLenght = dwGetDataLength(&device);
 8001a5c:	484c      	ldr	r0, [pc, #304]	; (8001b90 <main+0x510>)
 8001a5e:	f001 fd23 	bl	80034a8 <dwGetDataLength>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      if (dataLenght == 0)
 8001a68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <main+0x3f4>
      {
        return 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e1dc      	b.n	8001e2e <main+0x7ae>
      }
      memset(&rxPacket, 0, sizeof(rxPacket));
 8001a74:	2289      	movs	r2, #137	; 0x89
 8001a76:	2100      	movs	r1, #0
 8001a78:	484d      	ldr	r0, [pc, #308]	; (8001bb0 <main+0x530>)
 8001a7a:	f006 f901 	bl	8007c80 <memset>
      // get data from anchor and put in rxPacket
      dwGetData(&device, (uint8_t *)&rxPacket, dataLenght);
 8001a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a82:	461a      	mov	r2, r3
 8001a84:	494a      	ldr	r1, [pc, #296]	; (8001bb0 <main+0x530>)
 8001a86:	4842      	ldr	r0, [pc, #264]	; (8001b90 <main+0x510>)
 8001a88:	f001 fd46 	bl	8003518 <dwGetData>
      // check address of tag due to anchor send
      // correct return 0
      if (memcmp(rxPacket.destAddress, tagBaseAddr, 2))
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4944      	ldr	r1, [pc, #272]	; (8001ba0 <main+0x520>)
 8001a90:	4848      	ldr	r0, [pc, #288]	; (8001bb4 <main+0x534>)
 8001a92:	f006 f8d7 	bl	8007c44 <memcmp>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <main+0x438>
      {
        // wrong address and repeat receive
        log_data("error address\r\n");
 8001a9c:	4846      	ldr	r0, [pc, #280]	; (8001bb8 <main+0x538>)
 8001a9e:	f7ff fc75 	bl	800138c <log_data>
        dwNewReceive(&device);
 8001aa2:	483b      	ldr	r0, [pc, #236]	; (8001b90 <main+0x510>)
 8001aa4:	f001 f9d0 	bl	8002e48 <dwNewReceive>
        dwSetDefaults(&device);
 8001aa8:	4839      	ldr	r0, [pc, #228]	; (8001b90 <main+0x510>)
 8001aaa:	f001 fc70 	bl	800338e <dwSetDefaults>
        dwStartReceive(&device);
 8001aae:	4838      	ldr	r0, [pc, #224]	; (8001b90 <main+0x510>)
 8001ab0:	f001 f9e2 	bl	8002e78 <dwStartReceive>
        return 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e1ba      	b.n	8001e2e <main+0x7ae>
      }
      else
      {
        // oke address
        switch (rxPacket.payload[TYPE])
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <main+0x530>)
 8001aba:	7a5b      	ldrb	r3, [r3, #9]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d002      	beq.n	8001ac6 <main+0x446>
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d057      	beq.n	8001b74 <main+0x4f4>
 8001ac4:	e1b2      	b.n	8001e2c <main+0x7ac>
        {
        case ANSWER:
          // log_data("ANSWER\r\n");
          if (rxPacket.payload[SEQ] != 2) // 2
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <main+0x530>)
 8001ac8:	7a9b      	ldrb	r3, [r3, #10]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d004      	beq.n	8001ad8 <main+0x458>
          {
            log_data("wrong sequence number\r\n");
 8001ace:	483b      	ldr	r0, [pc, #236]	; (8001bbc <main+0x53c>)
 8001ad0:	f7ff fc5c 	bl	800138c <log_data>
            return 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e1aa      	b.n	8001e2e <main+0x7ae>
          }
          dwGetReceiveTimestamp(&device, &arival);
 8001ad8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001adc:	4619      	mov	r1, r3
 8001ade:	482c      	ldr	r0, [pc, #176]	; (8001b90 <main+0x510>)
 8001ae0:	f001 fd41 	bl	8003566 <dwGetReceiveTimestamp>
          arival.timeFull -= ANTENNA_DELAY;
 8001ae4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <main+0x540>)
 8001aea:	1851      	adds	r1, r2, r1
 8001aec:	61b9      	str	r1, [r7, #24]
 8001aee:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001af8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
          answer_rx = arival;
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <main+0x544>)
 8001afe:	461a      	mov	r2, r3
 8001b00:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b08:	e882 0003 	stmia.w	r2, {r0, r1}
          // clear txpacket
          memset(&txPacket, 0, sizeof(txPacket));
 8001b0c:	2289      	movs	r2, #137	; 0x89
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4820      	ldr	r0, [pc, #128]	; (8001b94 <main+0x514>)
 8001b12:	f006 f8b5 	bl	8007c80 <memset>
          txPacket.payload[TYPE] = FINAL;
 8001b16:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <main+0x514>)
 8001b18:	2303      	movs	r3, #3
 8001b1a:	7253      	strb	r3, [r2, #9]
          txPacket.payload[SEQ] = 3; // 3
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <main+0x514>)
 8001b1e:	2303      	movs	r3, #3
 8001b20:	7293      	strb	r3, [r2, #10]
          memcpy(txPacket.destAddress, anchorAddress + 2 * anchor_th, 2);
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <main+0x518>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <main+0x51c>)
 8001b2c:	4413      	add	r3, r2
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <main+0x514>)
 8001b34:	f8a2 3005 	strh.w	r3, [r2, #5]
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <main+0x520>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
          memcpy(txPacket.sourceAddress, tagBaseAddr, 2);
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <main+0x514>)
 8001b3e:	f8a2 3007 	strh.w	r3, [r2, #7]
          dwNewTransmit(&device);
 8001b42:	4813      	ldr	r0, [pc, #76]	; (8001b90 <main+0x510>)
 8001b44:	f001 f9c4 	bl	8002ed0 <dwNewTransmit>
          dwSetDefaults(&device);
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <main+0x510>)
 8001b4a:	f001 fc20 	bl	800338e <dwSetDefaults>
          dwSetData(&device, (uint8_t *)&txPacket, MAC802154_HEADER_LENGTH + 2); // 2 is length of payload
 8001b4e:	220b      	movs	r2, #11
 8001b50:	4910      	ldr	r1, [pc, #64]	; (8001b94 <main+0x514>)
 8001b52:	480f      	ldr	r0, [pc, #60]	; (8001b90 <main+0x510>)
 8001b54:	f001 fc66 	bl	8003424 <dwSetData>
          dwStartTransmit(&device);
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <main+0x510>)
 8001b5a:	f001 f9d1 	bl	8002f00 <dwStartTransmit>
          do
          {
            dwReadSystemEventStatusRegister(&device);
 8001b5e:	480c      	ldr	r0, [pc, #48]	; (8001b90 <main+0x510>)
 8001b60:	f000 ff8d 	bl	8002a7e <dwReadSystemEventStatusRegister>
          } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <main+0x510>)
 8001b66:	7e5b      	ldrb	r3, [r3, #25]
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	daf7      	bge.n	8001b5e <main+0x4de>
          dwInteruptHandler();
 8001b6e:	f7ff fbc7 	bl	8001300 <dwInteruptHandler>
          break;
 8001b72:	e15b      	b.n	8001e2c <main+0x7ac>
        case REPORT:
          // log_data("REPORT\r\n");
          {
            // reportpayload to receive timestamp of anchor send to tag to calculate
            // able truy cap cac phan tu trong payload thong qua con tro
            reportPayload_t *reportmess = (reportPayload_t *)(rxPacket.payload + 2);
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <main+0x548>)
 8001b76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            double tround1, treply1, tround2, treply2, tprop_ctn, tprop, distance;
            if (rxPacket.payload[SEQ] != 4) // 4
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <main+0x530>)
 8001b7c:	7a9b      	ldrb	r3, [r3, #10]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d024      	beq.n	8001bcc <main+0x54c>
            {
              log_data("wrong sequence number\r\n");
 8001b82:	480e      	ldr	r0, [pc, #56]	; (8001bbc <main+0x53c>)
 8001b84:	f7ff fc02 	bl	800138c <log_data>
              return 0;
 8001b88:	2300      	movs	r3, #0
        return 0;
 8001b8a:	e150      	b.n	8001e2e <main+0x7ae>
 8001b8c:	20000290 	.word	0x20000290
 8001b90:	20000010 	.word	0x20000010
 8001b94:	2000034c 	.word	0x2000034c
 8001b98:	20000408 	.word	0x20000408
 8001b9c:	2000006c 	.word	0x2000006c
 8001ba0:	20000068 	.word	0x20000068
 8001ba4:	200002b0 	.word	0x200002b0
 8001ba8:	20000072 	.word	0x20000072
 8001bac:	2000040d 	.word	0x2000040d
 8001bb0:	200002c0 	.word	0x200002c0
 8001bb4:	200002c5 	.word	0x200002c5
 8001bb8:	0800c860 	.word	0x0800c860
 8001bbc:	0800c870 	.word	0x0800c870
 8001bc0:	ffffbfab 	.word	0xffffbfab
 8001bc4:	200002a8 	.word	0x200002a8
 8001bc8:	200002cb 	.word	0x200002cb
            }
            memcpy(&poll_rx, &reportmess->pollRx, 5);
 8001bcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	489e      	ldr	r0, [pc, #632]	; (8001e50 <main+0x7d0>)
 8001bd6:	f006 f845 	bl	8007c64 <memcpy>
            memcpy(&answer_tx, &reportmess->answerTx, 5);
 8001bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bde:	3305      	adds	r3, #5
 8001be0:	2205      	movs	r2, #5
 8001be2:	4619      	mov	r1, r3
 8001be4:	489b      	ldr	r0, [pc, #620]	; (8001e54 <main+0x7d4>)
 8001be6:	f006 f83d 	bl	8007c64 <memcpy>
            memcpy(&final_rx, &reportmess->finalRx, 5);
 8001bea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bee:	330a      	adds	r3, #10
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4898      	ldr	r0, [pc, #608]	; (8001e58 <main+0x7d8>)
 8001bf6:	f006 f835 	bl	8007c64 <memcpy>

            poll_rx.timeFull -= ANTENNA_DELAY;
 8001bfa:	4b95      	ldr	r3, [pc, #596]	; (8001e50 <main+0x7d0>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	4996      	ldr	r1, [pc, #600]	; (8001e5c <main+0x7dc>)
 8001c02:	1851      	adds	r1, r2, r1
 8001c04:	6139      	str	r1, [r7, #16]
 8001c06:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	4b90      	ldr	r3, [pc, #576]	; (8001e50 <main+0x7d0>)
 8001c0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001c12:	e9c3 1200 	strd	r1, r2, [r3]
            answer_tx.timeFull += ANTENNA_DELAY;
 8001c16:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <main+0x7d4>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f244 0155 	movw	r1, #16469	; 0x4055
 8001c20:	1851      	adds	r1, r2, r1
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	f143 0300 	adc.w	r3, r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <main+0x7d4>)
 8001c2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c30:	e9c3 1200 	strd	r1, r2, [r3]
            final_rx.timeFull -= ANTENNA_DELAY;
 8001c34:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <main+0x7d8>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	4988      	ldr	r1, [pc, #544]	; (8001e5c <main+0x7dc>)
 8001c3c:	1851      	adds	r1, r2, r1
 8001c3e:	6039      	str	r1, [r7, #0]
 8001c40:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b84      	ldr	r3, [pc, #528]	; (8001e58 <main+0x7d8>)
 8001c48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001c4c:	e9c3 1200 	strd	r1, r2, [r3]

            tround1 = answer_rx.timeLow32 - poll_tx.timeLow32;
 8001c50:	4b83      	ldr	r3, [pc, #524]	; (8001e60 <main+0x7e0>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <main+0x7e4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fbc2 	bl	80003e4 <__aeabi_ui2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
            treply1 = answer_tx.timeLow32 - poll_rx.timeLow32;
 8001c68:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <main+0x7d4>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <main+0x7d0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fbb6 	bl	80003e4 <__aeabi_ui2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
            tround2 = final_rx.timeLow32 - answer_tx.timeLow32;
 8001c80:	4b75      	ldr	r3, [pc, #468]	; (8001e58 <main+0x7d8>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <main+0x7d4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fbaa 	bl	80003e4 <__aeabi_ui2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
            treply2 = final_tx.timeLow32 - answer_rx.timeLow32;
 8001c98:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <main+0x7e8>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <main+0x7e0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fb9e 	bl	80003e4 <__aeabi_ui2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

            // printf("tround1: %f   treply2: %f\r\r\n", tround1, treply2);
            // printf("tround2: %f   treply1: %f\r\r\n", tround2, treply1);

            // tprop_ctn is value of resigter timer
            tprop_ctn = ((tround1 * tround2) - (treply1 * treply2)) / (tround1 + tround2 + treply1 + treply2);
 8001cb0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001cb4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001cb8:	f7fe fc0e 	bl	80004d8 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001cc8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001ccc:	f7fe fc04 	bl	80004d8 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fa46 	bl	8000168 <__aeabi_dsub>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4614      	mov	r4, r2
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ce8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001cec:	f7fe fa3e 	bl	800016c <__adddf3>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cfc:	f7fe fa36 	bl	800016c <__adddf3>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d0c:	f7fe fa2e 	bl	800016c <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fd08 	bl	800072c <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
            // printf("TProp (ctn): %d\r\r\n", (unsigned int)tprop_ctn);

            // tprop is value unit sencond
            tprop = tprop_ctn / tsfreq;
 8001d24:	a346      	add	r3, pc, #280	; (adr r3, 8001e40 <main+0x7c0>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001d2e:	f7fe fcfd 	bl	800072c <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
            distance = C * tprop * 100; // unit cm
 8001d3a:	a143      	add	r1, pc, #268	; (adr r1, 8001e48 <main+0x7c8>)
 8001d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d40:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001d44:	f7fe fbc8 	bl	80004d8 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <main+0x7ec>)
 8001d56:	f7fe fbbf 	bl	80004d8 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
            // printf("distance of anchor %d is: %5d(mm)", (int)rxPacket.sourceAddress, (unsigned int)distance * 1000);
            char buf1[50], buf2[30], buf3[30], buf4[30];

            // sprintf(buf3, "time of flight: %.2f(ns)\r\n", tprop * 1000000000000);
            // log_data(buf3);
            if (distance > 0 && distance < 2000)
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001d6e:	f7fe fe43 	bl	80009f8 <__aeabi_dcmpgt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d04e      	beq.n	8001e16 <main+0x796>
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <main+0x7f0>)
 8001d7e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001d82:	f7fe fe1b 	bl	80009bc <__aeabi_dcmplt>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d044      	beq.n	8001e16 <main+0x796>
            {
              arr_distance[anchor_th] = distance;
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <main+0x7f4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a39      	ldr	r2, [pc, #228]	; (8001e78 <main+0x7f8>)
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	18d1      	adds	r1, r2, r3
 8001d96:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001d9a:	e9c1 2300 	strd	r2, r3, [r1]
              //   count_aver = 0;
              //   aver = aver / 30;
              //   sprintf(buf2, "aver: %.1f\r\n", aver);
              //   log_data(buf2);
              // }
              anchor_th++;
 8001d9e:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <main+0x7f4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	4a33      	ldr	r2, [pc, #204]	; (8001e74 <main+0x7f4>)
 8001da6:	6013      	str	r3, [r2, #0]
              // enough 3 anchor
              if (anchor_th == 3)
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <main+0x7f4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d132      	bne.n	8001e16 <main+0x796>
              {
                //log_data("Enough 3 anchor\r\n");
                cal_location(x_anchor1, y_anchor1, x_anchor2, y_anchor2, x_anchor3, y_anchor3);
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <main+0x7fc>)
 8001db2:	681d      	ldr	r5, [r3, #0]
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <main+0x800>)
 8001db6:	681c      	ldr	r4, [r3, #0]
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <main+0x804>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <main+0x808>)
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <main+0x80c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <main+0x810>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	9200      	str	r2, [sp, #0]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f7ff faf0 	bl	80013b8 <cal_location>
                char buf_coor[30];
                sprintf(buf_coor, "%.1f, %.1f\r\n", coor_x, coor_y);
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <main+0x814>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fb23 	bl	8000428 <__aeabi_f2d>
 8001de2:	4604      	mov	r4, r0
 8001de4:	460d      	mov	r5, r1
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <main+0x818>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb1c 	bl	8000428 <__aeabi_f2d>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001df8:	e9cd 2300 	strd	r2, r3, [sp]
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	462b      	mov	r3, r5
 8001e00:	4926      	ldr	r1, [pc, #152]	; (8001e9c <main+0x81c>)
 8001e02:	f006 fdb7 	bl	8008974 <siprintf>
                log_data(buf_coor);
 8001e06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fabe 	bl	800138c <log_data>
                anchor_th = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <main+0x7f4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
            // totaltime = (arival.timeLow32 - poll_tx.timeLow32) / tsfreq;
            // sprintf(buf2, "total time: %.2f(ms)\r\n", totaltime*1000);
            // log_data(buf2);


            initAck = true;
 8001e16:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <main+0x820>)
 8001e18:	2301      	movs	r3, #1
 8001e1a:	7013      	strb	r3, [r2, #0]
            seq_mess++;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <main+0x824>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <main+0x824>)
 8001e24:	6013      	str	r3, [r2, #0]
            
            HAL_IWDG_Refresh(&hiwdg);
 8001e26:	4820      	ldr	r0, [pc, #128]	; (8001ea8 <main+0x828>)
 8001e28:	f003 fa5e 	bl	80052e8 <HAL_IWDG_Refresh>
    if (initAck)
 8001e2c:	e4c1      	b.n	80017b2 <main+0x132>
        }
      }
    }
  }
  /* USER CODE END 3 */
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	00000000 	.word	0x00000000
 8001e44:	422dc130 	.word	0x422dc130
 8001e48:	13000000 	.word	0x13000000
 8001e4c:	41b1dd19 	.word	0x41b1dd19
 8001e50:	20000298 	.word	0x20000298
 8001e54:	200002a0 	.word	0x200002a0
 8001e58:	200002b8 	.word	0x200002b8
 8001e5c:	ffffbfab 	.word	0xffffbfab
 8001e60:	200002a8 	.word	0x200002a8
 8001e64:	20000290 	.word	0x20000290
 8001e68:	200002b0 	.word	0x200002b0
 8001e6c:	40590000 	.word	0x40590000
 8001e70:	409f4000 	.word	0x409f4000
 8001e74:	20000408 	.word	0x20000408
 8001e78:	200003d8 	.word	0x200003d8
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	200003f0 	.word	0x200003f0
 8001e84:	200003f4 	.word	0x200003f4
 8001e88:	200003f8 	.word	0x200003f8
 8001e8c:	200003fc 	.word	0x200003fc
 8001e90:	20000004 	.word	0x20000004
 8001e94:	20000400 	.word	0x20000400
 8001e98:	20000404 	.word	0x20000404
 8001e9c:	0800c888 	.word	0x0800c888
 8001ea0:	20000072 	.word	0x20000072
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000284 	.word	0x20000284

08001eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b090      	sub	sp, #64	; 0x40
 8001eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	2228      	movs	r2, #40	; 0x28
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fee0 	bl	8007c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ece:	2309      	movs	r3, #9
 8001ed0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001edc:	2301      	movs	r3, #1
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef4:	f107 0318 	add.w	r3, r7, #24
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fa05 	bl	8005308 <HAL_RCC_OscConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001f04:	f000 f819 	bl	8001f3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f08:	230f      	movs	r3, #15
 8001f0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2102      	movs	r1, #2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fc72 	bl	800580c <HAL_RCC_ClockConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001f2e:	f000 f804 	bl	8001f3a <Error_Handler>
  }
}
 8001f32:	bf00      	nop
 8001f34:	3740      	adds	r7, #64	; 0x40
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3e:	b672      	cpsid	i
}
 8001f40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <Error_Handler+0x8>

08001f44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f4a:	4a18      	ldr	r2, [pc, #96]	; (8001fac <MX_SPI1_Init+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f78:	2208      	movs	r2, #8
 8001f7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f90:	220a      	movs	r2, #10
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_SPI1_Init+0x64>)
 8001f96:	f003 fdc7 	bl	8005b28 <HAL_SPI_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fa0:	f7ff ffcb 	bl	8001f3a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000410 	.word	0x20000410
 8001fac:	40013000 	.word	0x40013000

08001fb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_SPI_MspInit+0x98>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d137      	bne.n	8002040 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_SPI_MspInit+0x9c>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_SPI_MspInit+0x9c>)
 8001fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_SPI_MspInit+0x9c>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_SPI_MspInit+0x9c>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_SPI_MspInit+0x9c>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_SPI_MspInit+0x9c>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002000:	23a0      	movs	r3, #160	; 0xa0
 8002002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4619      	mov	r1, r3
 8002012:	480f      	ldr	r0, [pc, #60]	; (8002050 <HAL_SPI_MspInit+0xa0>)
 8002014:	f002 ff8a 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002018:	2340      	movs	r3, #64	; 0x40
 800201a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <HAL_SPI_MspInit+0xa0>)
 800202c:	f002 ff7e 	bl	8004f2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2023      	movs	r0, #35	; 0x23
 8002036:	f002 fe90 	bl	8004d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800203a:	2023      	movs	r0, #35	; 0x23
 800203c:	f002 fea9 	bl	8004d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40013000 	.word	0x40013000
 800204c:	40021000 	.word	0x40021000
 8002050:	40010800 	.word	0x40010800

08002054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_MspInit+0x5c>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_MspInit+0x5c>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6193      	str	r3, [r2, #24]
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_MspInit+0x5c>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_MspInit+0x5c>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_MspInit+0x5c>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_MspInit+0x5c>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_MspInit+0x60>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_MspInit+0x60>)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <NMI_Handler+0x4>

080020be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <MemManage_Handler+0x4>

080020ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fe:	f002 fd15 	bl	8004b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM1_UP_IRQHandler+0x10>)
 800210e:	f004 fbe6 	bl	80068de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000046c 	.word	0x2000046c

0800211c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <SPI1_IRQHandler+0x10>)
 8002122:	f004 f991 	bl	8006448 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000410 	.word	0x20000410

08002130 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <USART1_IRQHandler+0x10>)
 8002136:	f005 f80b 	bl	8007150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004b4 	.word	0x200004b4

08002144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_kill>:

int _kill(int pid, int sig)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800215c:	f005 fd48 	bl	8007bf0 <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	2216      	movs	r2, #22
 8002164:	601a      	str	r2, [r3, #0]
  return -1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_exit>:

void _exit (int status)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800217a:	f04f 31ff 	mov.w	r1, #4294967295
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffe7 	bl	8002152 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002184:	e7fe      	b.n	8002184 <_exit+0x12>

08002186 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e00a      	b.n	80021ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002198:	f3af 8000 	nop.w
 800219c:	4601      	mov	r1, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	60ba      	str	r2, [r7, #8]
 80021a4:	b2ca      	uxtb	r2, r1
 80021a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbf0      	blt.n	8002198 <_read+0x12>
  }

  return len;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e009      	b.n	80021e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	60ba      	str	r2, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbf1      	blt.n	80021d2 <_write+0x12>
  }
  return len;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_close>:

int _close(int file)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800221e:	605a      	str	r2, [r3, #4]
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <_isatty>:

int _isatty(int file)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f005 fcb2 	bl	8007bf0 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20005000 	.word	0x20005000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	20000468 	.word	0x20000468
 80022c0:	20000590 	.word	0x20000590

080022c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e4:	463b      	mov	r3, r7
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_TIM1_Init+0x9c>)
 80022ee:	4a20      	ldr	r2, [pc, #128]	; (8002370 <MX_TIM1_Init+0xa0>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <MX_TIM1_Init+0x9c>)
 80022f4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_TIM1_Init+0x9c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_TIM1_Init+0x9c>)
 8002302:	f242 7210 	movw	r2, #10000	; 0x2710
 8002306:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <MX_TIM1_Init+0x9c>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <MX_TIM1_Init+0x9c>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_TIM1_Init+0x9c>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <MX_TIM1_Init+0x9c>)
 800231c:	f004 fa90 	bl	8006840 <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002326:	f7ff fe08 	bl	8001f3a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4619      	mov	r1, r3
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_TIM1_Init+0x9c>)
 8002338:	f004 fbd9 	bl	8006aee <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002342:	f7ff fdfa 	bl	8001f3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <MX_TIM1_Init+0x9c>)
 8002354:	f004 fdb8 	bl	8006ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800235e:	f7ff fdec 	bl	8001f3a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000046c 	.word	0x2000046c
 8002370:	40012c00 	.word	0x40012c00

08002374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_TIM_Base_MspInit+0x44>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d113      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_TIM_Base_MspInit+0x48>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_TIM_Base_MspInit+0x48>)
 800238c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002390:	6193      	str	r3, [r2, #24]
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_TIM_Base_MspInit+0x48>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2019      	movs	r0, #25
 80023a4:	f002 fcd9 	bl	8004d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023a8:	2019      	movs	r0, #25
 80023aa:	f002 fcf2 	bl	8004d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40021000 	.word	0x40021000

080023c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <MX_USART1_UART_Init+0x50>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_USART1_UART_Init+0x4c>)
 80023f8:	f004 fdd6 	bl	8006fa8 <HAL_UART_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002402:	f7ff fd9a 	bl	8001f3a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200004b4 	.word	0x200004b4
 8002410:	40013800 	.word	0x40013800

08002414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_UART_MspInit+0x9c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d139      	bne.n	80024a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 800243a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_UART_MspInit+0xa0>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4619      	mov	r1, r3
 8002478:	480f      	ldr	r0, [pc, #60]	; (80024b8 <HAL_UART_MspInit+0xa4>)
 800247a:	f002 fd57 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4619      	mov	r1, r3
 8002492:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_UART_MspInit+0xa4>)
 8002494:	f002 fd4a 	bl	8004f2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2025      	movs	r0, #37	; 0x25
 800249e:	f002 fc5c 	bl	8004d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024a2:	2025      	movs	r0, #37	; 0x25
 80024a4:	f002 fc75 	bl	8004d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010800 	.word	0x40010800

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff ff02 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024c2:	490c      	ldr	r1, [pc, #48]	; (80024f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024d8:	4c09      	ldr	r4, [pc, #36]	; (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f005 fb89 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7ff f8c9 	bl	8001680 <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80024f8:	0800cdc4 	.word	0x0800cdc4
  ldr r2, =_sbss
 80024fc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8002500:	20000590 	.word	0x20000590

08002504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>

08002506 <setBit>:
static const uint8_t BIAS_900_16[] = {137, 122, 105, 88, 69, 47, 25, 0, 21, 48, 79, 105, 127, 147, 160, 169, 178, 197};
static const uint8_t BIAS_900_64[] = {147, 133, 117, 99, 75, 50, 29, 0, 24, 45, 63, 76, 87, 98, 116, 122, 132, 142};

// Utility functions
static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val)
{
 8002506:	b480      	push	{r7}
 8002508:	b089      	sub	sp, #36	; 0x24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	70fb      	strb	r3, [r7, #3]
    unsigned int idx;
    unsigned int shift;
    idx = bit / 8;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	08db      	lsrs	r3, r3, #3
 8002518:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	429a      	cmp	r2, r3
 8002520:	d228      	bcs.n	8002574 <setBit+0x6e>
        return; // TODO proper error handling: out of bounds
    uint8_t *targetByte = &data[idx];
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
    shift = bit % 8;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	617b      	str	r3, [r7, #20]
    if (val)
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <setBit+0x4e>
        *targetByte |= (1 << shift);
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b25a      	sxtb	r2, r3
 800253e:	2101      	movs	r1, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	b25b      	sxtb	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	b25b      	sxtb	r3, r3
 800254c:	b2da      	uxtb	r2, r3
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e010      	b.n	8002576 <setBit+0x70>
    else
        *targetByte &= ~(1 << shift);
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b25a      	sxtb	r2, r3
 800255a:	2101      	movs	r1, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	b25b      	sxtb	r3, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	b25b      	sxtb	r3, r3
 8002568:	4013      	ands	r3, r2
 800256a:	b25b      	sxtb	r3, r3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e000      	b.n	8002576 <setBit+0x70>
        return; // TODO proper error handling: out of bounds
 8002574:	bf00      	nop
}
 8002576:	3724      	adds	r7, #36	; 0x24
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit)
{
 800257e:	b480      	push	{r7}
 8002580:	b089      	sub	sp, #36	; 0x24
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
    unsigned int idx;
    unsigned int shift;

    idx = bit / 8;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d301      	bcc.n	800259c <getBit+0x1e>
        return false; // TODO proper error handling: out of bounds
 8002598:	2300      	movs	r3, #0
 800259a:	e013      	b.n	80025c4 <getBit+0x46>
    uint8_t targetByte = data[idx];
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	76fb      	strb	r3, [r7, #27]
    shift = bit % 8;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	617b      	str	r3, [r7, #20]
    return (targetByte >> shift) & 0x01;
 80025ae:	7efa      	ldrb	r2, [r7, #27]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa42 f303 	asr.w	r3, r2, r3
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3724      	adds	r7, #36	; 0x24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
    unsigned int i;
    for (i = 0; i < n; i++)
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e00c      	b.n	80025fa <writeValueToBytes+0x2c>
    {
        data[i] = ((val >> (i * 8)) & 0xFF);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	fa42 f103 	asr.w	r1, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4413      	add	r3, r2
 80025f0:	b2ca      	uxtb	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3ee      	bcc.n	80025e0 <writeValueToBytes+0x12>
    }
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <readBytesOTP>:

static void readBytesOTP(dwDeviceTypes_t *dev, uint16_t address, uint8_t data[])
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b088      	sub	sp, #32
 8002612:	af02      	add	r7, sp, #8
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	460b      	mov	r3, r1
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	817b      	strh	r3, [r7, #10]
    uint8_t addressBytes[LEN_OTP_ADDR];
    addressBytes[0] = (address & 0xFF);
 800261c:	897b      	ldrh	r3, [r7, #10]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	753b      	strb	r3, [r7, #20]
    addressBytes[1] = ((address >> 8) & 0xFF);
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	b29b      	uxth	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	757b      	strb	r3, [r7, #21]
    // set address
    dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2202      	movs	r2, #2
 8002632:	9200      	str	r2, [sp, #0]
 8002634:	2204      	movs	r2, #4
 8002636:	212d      	movs	r1, #45	; 0x2d
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f002 f9c3 	bl	80049c4 <dwSpiWrite>
    // switch into read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 800263e:	2303      	movs	r3, #3
 8002640:	2206      	movs	r2, #6
 8002642:	212d      	movs	r1, #45	; 0x2d
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f002 fa00 	bl	8004a4a <dwSpiWrite8>
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 800264a:	2301      	movs	r3, #1
 800264c:	2206      	movs	r2, #6
 800264e:	212d      	movs	r1, #45	; 0x2d
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f002 f9fa 	bl	8004a4a <dwSpiWrite8>
    // read value/block - 4 bytes
    dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8002656:	2304      	movs	r3, #4
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	220a      	movs	r2, #10
 800265e:	212d      	movs	r1, #45	; 0x2d
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f002 f947 	bl	80048f4 <dwSpiRead>
    // end read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8002666:	2300      	movs	r3, #0
 8002668:	2206      	movs	r2, #6
 800266a:	212d      	movs	r1, #45	; 0x2d
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f002 f9ec 	bl	8004a4a <dwSpiWrite8>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <dummyHandler>:

void dummyHandler(dwDeviceTypes_t *dev)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
    ;
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <dwInit>:

void dwInit(dwDeviceTypes_t *dev)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    dev->func = &dwFunc;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <dwInit+0x3c>)
 8002698:	601a      	str	r2, [r3, #0]
    dev->handleSent = dummyHandler;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <dwInit+0x40>)
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
	dev->handleError = dummyHandler;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <dwInit+0x40>)
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c
	dev->handleReceived = dummyHandler;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a08      	ldr	r2, [pc, #32]	; (80026cc <dwInit+0x40>)
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
	dev->handleReceiveTimeout = dummyHandler;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <dwInit+0x40>)
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
	dev->handleReceiveFailed = dummyHandler;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a05      	ldr	r2, [pc, #20]	; (80026cc <dwInit+0x40>)
 80026b6:	649a      	str	r2, [r3, #72]	; 0x48
	dev->handleReceiveTimestampAvailable = dummyHandler;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <dwInit+0x40>)
 80026bc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000078 	.word	0x20000078
 80026cc:	0800267b 	.word	0x0800267b

080026d0 <dwConfigure>:

int dwConfigure(dwDeviceTypes_t *dev)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	6078      	str	r0, [r7, #4]
    dwEnableClock(dev, dwClockAuto);
 80026d8:	2100      	movs	r1, #0
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f91c 	bl	8002918 <dwEnableClock>
    dev->func->delayms(dev, 5);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2105      	movs	r1, #5
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
	dev->func->reset(dev);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
    dev->func->delayms(dev, 5);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2105      	movs	r1, #5
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
    uint32_t deviceID = dwGetDeviceId(dev);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8a9 	bl	800285a <dwGetDeviceId>
 8002708:	60f8      	str	r0, [r7, #12]
    if (deviceID != 0xdeca0130)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <dwConfigure+0xdc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d001      	beq.n	8002716 <dwConfigure+0x46>
    {
        return DW_ERROR_WRONG_ID;
 8002712:	2301      	movs	r3, #1
 8002714:	e045      	b.n	80027a2 <dwConfigure+0xd2>
    }

    memset(dev->networkAndAddress, 0x38, LEN_PANADR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3309      	adds	r3, #9
 800271a:	2204      	movs	r2, #4
 800271c:	2138      	movs	r1, #56	; 0x38
 800271e:	4618      	mov	r0, r3
 8002720:	f005 faae 	bl	8007c80 <memset>
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3309      	adds	r3, #9
 8002728:	2204      	movs	r2, #4
 800272a:	9200      	str	r2, [sp, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	2103      	movs	r1, #3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f002 f947 	bl	80049c4 <dwSpiWrite>

    memset(dev->syscfg, 0, LEN_SYS_CFG);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	330d      	adds	r3, #13
 800273a:	2204      	movs	r2, #4
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f005 fa9e 	bl	8007c80 <memset>
    dwSetDoubleBuffering(dev, false);
 8002744:	2100      	movs	r1, #0
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa68 	bl	8002c1c <dwSetDoubleBuffering>
    dwSetInterruptPolarity(dev, true);
 800274c:	2101      	movs	r1, #1
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa81 	bl	8002c56 <dwSetInterruptPolarity>
    dwWriteSystemConfigurationRegister(dev);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f981 	bl	8002a5c <dwWriteSystemConfigurationRegister>

    dwClearInterrupts(dev);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fb43 	bl	8002de6 <dwClearInterrupts>
    dwWriteSystemEventMaskRegister(dev);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f9d0 	bl	8002b06 <dwWriteSystemEventMaskRegister>

    dwEnableClock(dev, dwClockXti);
 8002766:	2101      	movs	r1, #1
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8d5 	bl	8002918 <dwEnableClock>
    dev->func->delayms(dev, 5);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2105      	movs	r1, #5
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
    dwManageLDE(dev);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f818 	bl	80027b0 <dwManageLDE>
    dev->func->delayms(dev, 5);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2105      	movs	r1, #5
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
    dwEnableClock(dev, dwClockPll);
 800278c:	2102      	movs	r1, #2
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8c2 	bl	8002918 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2105      	movs	r1, #5
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
//    dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
//    dev->func->delayms(dev, 5);
    return DW_ERROR_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	deca0130 	.word	0xdeca0130

080027b0 <dwManageLDE>:

void dwManageLDE(dwDeviceTypes_t *dev)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    uint8_t otpctrl[LEN_OTP_CTRL];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	2204      	movs	r2, #4
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f005 fa5d 	bl	8007c80 <memset>
    memset(otpctrl, 0, LEN_OTP_CTRL);
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	2202      	movs	r2, #2
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 fa56 	bl	8007c80 <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	2204      	movs	r2, #4
 80027da:	9200      	str	r2, [sp, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	2136      	movs	r1, #54	; 0x36
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f002 f887 	bl	80048f4 <dwSpiRead>
    dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	2202      	movs	r2, #2
 80027ec:	9200      	str	r2, [sp, #0]
 80027ee:	2206      	movs	r2, #6
 80027f0:	212d      	movs	r1, #45	; 0x2d
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f002 f87e 	bl	80048f4 <dwSpiRead>
    pmscctrl0[0] = 0x01;
 80027f8:	2301      	movs	r3, #1
 80027fa:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x03;
 80027fc:	2303      	movs	r3, #3
 80027fe:	737b      	strb	r3, [r7, #13]
    otpctrl[0] = 0x00;
 8002800:	2300      	movs	r3, #0
 8002802:	723b      	strb	r3, [r7, #8]
    otpctrl[1] = 0x80;
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	727b      	strb	r3, [r7, #9]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	2204      	movs	r2, #4
 800280e:	9200      	str	r2, [sp, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	2136      	movs	r1, #54	; 0x36
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f002 f8d5 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	2202      	movs	r2, #2
 8002820:	9200      	str	r2, [sp, #0]
 8002822:	2206      	movs	r2, #6
 8002824:	212d      	movs	r1, #45	; 0x2d
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f002 f8cc 	bl	80049c4 <dwSpiWrite>
    dev->func->delayms(dev, 5);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2105      	movs	r1, #5
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
    pmscctrl0[0] = 0x00;
 8002838:	2300      	movs	r3, #0
 800283a:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x02;
 800283c:	2302      	movs	r3, #2
 800283e:	737b      	strb	r3, [r7, #13]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	2204      	movs	r2, #4
 8002846:	9200      	str	r2, [sp, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	2136      	movs	r1, #54	; 0x36
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f002 f8b9 	bl	80049c4 <dwSpiWrite>
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <dwGetDeviceId>:

uint32_t dwGetDeviceId(dwDeviceTypes_t *dev)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
    return dwSpiRead32(dev, DEV_ID, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f002 f897 	bl	800499a <dwSpiRead32>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDeviceTypes_t *dev)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
    uint32_t reg;
    // Set all 4 GPIO in LED mode
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 800287e:	2200      	movs	r2, #0
 8002880:	2126      	movs	r1, #38	; 0x26
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f002 f889 	bl	800499a <dwSpiRead32>
 8002888:	60f8      	str	r0, [r7, #12]
    reg &= ~0x00003FC0ul;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002890:	60fb      	str	r3, [r7, #12]
    reg |= 0x00001540ul;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 8002898:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	2126      	movs	r1, #38	; 0x26
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f002 f8e9 	bl	8004a78 <dwSpiWrite32>
    reg = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2126      	movs	r1, #38	; 0x26
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f002 f873 	bl	800499a <dwSpiRead32>
 80028b4:	60f8      	str	r0, [r7, #12]
    // Enable debounce clock (used to clock the LED blinking)
    reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2136      	movs	r1, #54	; 0x36
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f002 f86d 	bl	800499a <dwSpiRead32>
 80028c0:	60f8      	str	r0, [r7, #12]
    reg |= 0x00840000ul;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 80028c8:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2136      	movs	r1, #54	; 0x36
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f002 f8d1 	bl	8004a78 <dwSpiWrite32>

    // Enable LED blinking and set the rate
    reg = 0x00000110ul;
 80028d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80028da:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2228      	movs	r2, #40	; 0x28
 80028e0:	2136      	movs	r1, #54	; 0x36
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f002 f8c8 	bl	8004a78 <dwSpiWrite32>

    // Trigger a manual blink of the LEDs for test
    reg |= 0x000f0000ul;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80028ee:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2228      	movs	r2, #40	; 0x28
 80028f4:	2136      	movs	r1, #54	; 0x36
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f002 f8be 	bl	8004a78 <dwSpiWrite32>
    reg &= ~0x000f0000ul;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002902:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2228      	movs	r2, #40	; 0x28
 8002908:	2136      	movs	r1, #54	; 0x36
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f002 f8b4 	bl	8004a78 <dwSpiWrite32>
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <dwEnableClock>:

void dwEnableClock(dwDeviceTypes_t *dev, dwClock_t clock)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	70fb      	strb	r3, [r7, #3]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	2204      	movs	r2, #4
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f005 f9a7 	bl	8007c80 <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	2204      	movs	r2, #4
 8002938:	9200      	str	r2, [sp, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	2136      	movs	r1, #54	; 0x36
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f001 ffd8 	bl	80048f4 <dwSpiRead>
    if (clock == dwClockAuto)
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <dwEnableClock+0x4e>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2100      	movs	r1, #0
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4798      	blx	r3
        pmscctrl0[0] = dwClockAuto;
 8002956:	2300      	movs	r3, #0
 8002958:	733b      	strb	r3, [r7, #12]
        pmscctrl0[1] &= 0xFE;
 800295a:	7b7b      	ldrb	r3, [r7, #13]
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	737b      	strb	r3, [r7, #13]
 8002964:	e026      	b.n	80029b4 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockXti)
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d110      	bne.n	800298e <dwEnableClock+0x76>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2100      	movs	r1, #0
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 8002978:	7b3b      	ldrb	r3, [r7, #12]
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockXti;
 8002982:	7b3b      	ldrb	r3, [r7, #12]
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	733b      	strb	r3, [r7, #12]
 800298c:	e012      	b.n	80029b4 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockPll)
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d10f      	bne.n	80029b4 <dwEnableClock+0x9c>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2101      	movs	r1, #1
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 80029a0:	7b3b      	ldrb	r3, [r7, #12]
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockPll;
 80029aa:	7b3b      	ldrb	r3, [r7, #12]
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	733b      	strb	r3, [r7, #12]
    }
    else
    {
        // TODO deliver proper warning
    }
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	2201      	movs	r2, #1
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	2200      	movs	r2, #0
 80029be:	2136      	movs	r1, #54	; 0x36
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f001 ffff 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	2204      	movs	r2, #4
 80029cc:	9200      	str	r2, [sp, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2136      	movs	r1, #54	; 0x36
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f001 fff6 	bl	80049c4 <dwSpiWrite>
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <dwRxSoftReset>:
/**
    Reset the receiver. Needed after errors or timeouts.
    From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDeviceTypes_t *dev)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	2204      	movs	r2, #4
 80029ee:	9200      	str	r2, [sp, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2136      	movs	r1, #54	; 0x36
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f001 ff7d 	bl	80048f4 <dwSpiRead>
    pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	f023 0310 	bic.w	r3, r3, #16
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	2204      	movs	r2, #4
 8002a0a:	9200      	str	r2, [sp, #0]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2136      	movs	r1, #54	; 0x36
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f001 ffd7 	bl	80049c4 <dwSpiWrite>
    pmscctrl0[3] = pmscctrl0[3] | 0x10;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2204      	movs	r2, #4
 8002a26:	9200      	str	r2, [sp, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2136      	movs	r1, #54	; 0x36
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f001 ffc9 	bl	80049c4 <dwSpiWrite>
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */
void dwReadSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af02      	add	r7, sp, #8
 8002a40:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	330d      	adds	r3, #13
 8002a46:	2204      	movs	r2, #4
 8002a48:	9200      	str	r2, [sp, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f001 ff50 	bl	80048f4 <dwSpiRead>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	330d      	adds	r3, #13
 8002a68:	2204      	movs	r2, #4
 8002a6a:	9200      	str	r2, [sp, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2104      	movs	r1, #4
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 ffa7 	bl	80049c4 <dwSpiWrite>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDeviceTypes_t *dev)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3319      	adds	r3, #25
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	210f      	movs	r1, #15
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f001 ff2e 	bl	80048f4 <dwSpiRead>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3309      	adds	r3, #9
 8002aac:	2204      	movs	r2, #4
 8002aae:	9200      	str	r2, [sp, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f001 ff1d 	bl	80048f4 <dwSpiRead>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3309      	adds	r3, #9
 8002ace:	2204      	movs	r2, #4
 8002ad0:	9200      	str	r2, [sp, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 ff74 	bl	80049c4 <dwSpiWrite>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3311      	adds	r3, #17
 8002af0:	2204      	movs	r2, #4
 8002af2:	9200      	str	r2, [sp, #0]
 8002af4:	2200      	movs	r2, #0
 8002af6:	210e      	movs	r1, #14
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 fefb 	bl	80048f4 <dwSpiRead>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af02      	add	r7, sp, #8
 8002b0c:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3311      	adds	r3, #17
 8002b12:	2204      	movs	r2, #4
 8002b14:	9200      	str	r2, [sp, #0]
 8002b16:	2200      	movs	r2, #0
 8002b18:	210e      	movs	r1, #14
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f001 ff52 	bl	80049c4 <dwSpiWrite>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDeviceTypes_t *dev)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3315      	adds	r3, #21
 8002b34:	2204      	movs	r2, #4
 8002b36:	9200      	str	r2, [sp, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	211f      	movs	r1, #31
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 fed9 	bl	80048f4 <dwSpiRead>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDeviceTypes_t *dev)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af02      	add	r7, sp, #8
 8002b50:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3315      	adds	r3, #21
 8002b56:	2204      	movs	r2, #4
 8002b58:	9200      	str	r2, [sp, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	211f      	movs	r1, #31
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f001 ff30 	bl	80049c4 <dwSpiWrite>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	331e      	adds	r3, #30
 8002b78:	2205      	movs	r2, #5
 8002b7a:	9200      	str	r2, [sp, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2108      	movs	r1, #8
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f001 feb7 	bl	80048f4 <dwSpiRead>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af02      	add	r7, sp, #8
 8002b94:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	331e      	adds	r3, #30
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2108      	movs	r1, #8
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 ff0e 	bl	80049c4 <dwSpiWrite>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <dwSetFrameFilter>:
    dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
    setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout != 0);
}

void dwSetFrameFilter(dwDeviceTypes_t *dev, bool val)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f103 000d 	add.w	r0, r3, #13
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	f7ff fc9d 	bl	8002506 <setBit>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <dwSetFrameFilterAllowData>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDeviceTypes_t *dev, bool val)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 000d 	add.w	r0, r3, #13
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	2203      	movs	r2, #3
 8002bea:	2104      	movs	r1, #4
 8002bec:	f7ff fc8b 	bl	8002506 <setBit>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <dwSetFrameFilterAllowReserved>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDeviceTypes_t *dev, bool val)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f103 000d 	add.w	r0, r3, #13
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	2206      	movs	r2, #6
 8002c0e:	2104      	movs	r1, #4
 8002c10:	f7ff fc79 	bl	8002506 <setBit>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDeviceTypes_t *dev, bool val)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f103 000d 	add.w	r0, r3, #13
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f083 0301 	eor.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	220c      	movs	r2, #12
 8002c48:	2104      	movs	r1, #4
 8002c4a:	f7ff fc5c 	bl	8002506 <setBit>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDeviceTypes_t *dev, bool val)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f103 000d 	add.w	r0, r3, #13
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	2209      	movs	r2, #9
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	f7ff fc4a 	bl	8002506 <setBit>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDeviceTypes_t *dev, bool val)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f103 000d 	add.w	r0, r3, #13
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	221d      	movs	r2, #29
 8002c90:	2104      	movs	r1, #4
 8002c92:	f7ff fc38 	bl	8002506 <setBit>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <dwInterruptOnSent>:

void dwInterruptOnSent(dwDeviceTypes_t *dev, bool val)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f103 0011 	add.w	r0, r3, #17
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	f7ff fc26 	bl	8002506 <setBit>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDeviceTypes_t *dev, bool val)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 0011 	add.w	r0, r3, #17
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	220d      	movs	r2, #13
 8002cd8:	2104      	movs	r1, #4
 8002cda:	f7ff fc14 	bl	8002506 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f103 0011 	add.w	r0, r3, #17
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	220e      	movs	r2, #14
 8002ce8:	2104      	movs	r1, #4
 8002cea:	f7ff fc0c 	bl	8002506 <setBit>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDeviceTypes_t *dev, bool val)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0011 	add.w	r0, r3, #17
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	2212      	movs	r2, #18
 8002d0c:	2105      	movs	r1, #5
 8002d0e:	f7ff fbfa 	bl	8002506 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f103 0011 	add.w	r0, r3, #17
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	2105      	movs	r1, #5
 8002d1e:	f7ff fbf2 	bl	8002506 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f103 0011 	add.w	r0, r3, #17
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	f7ff fbea 	bl	8002506 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f103 0011 	add.w	r0, r3, #17
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	2105      	movs	r1, #5
 8002d3e:	f7ff fbe2 	bl	8002506 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f103 0011 	add.w	r0, r3, #17
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	221a      	movs	r2, #26
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	f7ff fbda 	bl	8002506 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f103 0011 	add.w	r0, r3, #17
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	221d      	movs	r2, #29
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	f7ff fbd2 	bl	8002506 <setBit>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDeviceTypes_t *dev, bool val)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f103 0011 	add.w	r0, r3, #17
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	2211      	movs	r2, #17
 8002d80:	2104      	movs	r1, #4
 8002d82:	f7ff fbc0 	bl	8002506 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f103 0011 	add.w	r0, r3, #17
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	2215      	movs	r2, #21
 8002d90:	2104      	movs	r1, #4
 8002d92:	f7ff fbb8 	bl	8002506 <setBit>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDeviceTypes_t *dev, bool val)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f103 0011 	add.w	r0, r3, #17
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	220a      	movs	r2, #10
 8002db4:	2104      	movs	r1, #4
 8002db6:	f7ff fba6 	bl	8002506 <setBit>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDeviceTypes_t *dev, bool val)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f103 0011 	add.w	r0, r3, #17
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	2104      	movs	r1, #4
 8002dda:	f7ff fb94 	bl	8002506 <setBit>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <dwClearInterrupts>:

void dwClearInterrupts(dwDeviceTypes_t *dev)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
    memset(dev->sysmask, 0, LEN_SYS_MASK);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3311      	adds	r3, #17
 8002df2:	2204      	movs	r2, #4
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 ff42 	bl	8007c80 <memset>
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <dwIdle>:

void dwIdle(dwDeviceTypes_t *dev)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	6078      	str	r0, [r7, #4]
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	2204      	movs	r2, #4
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 ff33 	bl	8007c80 <memset>
    dev->sysctrl[0] |= 1 << TRXOFF_BIT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	791b      	ldrb	r3, [r3, #4]
 8002e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	711a      	strb	r2, [r3, #4]
    dev->deviceMode = IDLE_MODE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	721a      	strb	r2, [r3, #8]
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2204      	movs	r2, #4
 8002e34:	9200      	str	r2, [sp, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	210d      	movs	r1, #13
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 fdc2 	bl	80049c4 <dwSpiWrite>
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <dwNewReceive>:
    else regval &= DRX_CARRIER_INT_MASK ;                               // make sure upper bits are clear if not sign extending
    return (int32_t) regval ; // cast unsigned value to signed quantity.
}

void dwNewReceive(dwDeviceTypes_t *dev)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ffd7 	bl	8002e04 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 ff0e 	bl	8007c80 <memset>
    dwClearReceiveStatus(dev);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fda5 	bl	80039b4 <dwClearReceiveStatus>
    dev->deviceMode = RX_MODE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	721a      	strb	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <dwStartReceive>:

void dwStartReceive(dwDeviceTypes_t *dev)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	1d18      	adds	r0, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f083 0301 	eor.w	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2104      	movs	r1, #4
 8002ea4:	f7ff fb2f 	bl	8002506 <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1d18      	adds	r0, r3, #4
 8002eac:	2301      	movs	r3, #1
 8002eae:	2208      	movs	r2, #8
 8002eb0:	2104      	movs	r1, #4
 8002eb2:	f7ff fb28 	bl	8002506 <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2204      	movs	r2, #4
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	210d      	movs	r1, #13
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f001 fd7e 	bl	80049c4 <dwSpiWrite>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <dwNewTransmit>:

void dwNewTransmit(dwDeviceTypes_t *dev)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff93 	bl	8002e04 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 feca 	bl	8007c80 <memset>
    dwClearTransmitStatus(dev);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fd73 	bl	80039d8 <dwClearTransmitStatus>
    dev->deviceMode = TX_MODE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	721a      	strb	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <dwStartTransmit>:

void dwStartTransmit(dwDeviceTypes_t *dev)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	6078      	str	r0, [r7, #4]
    dwWriteTransmitFrameControlRegister(dev);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fe40 	bl	8002b8e <dwWriteTransmitFrameControlRegister>
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	1d18      	adds	r0, r3, #4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f083 0301 	eor.w	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2104      	movs	r1, #4
 8002f32:	f7ff fae8 	bl	8002506 <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	1d18      	adds	r0, r3, #4
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2104      	movs	r1, #4
 8002f40:	f7ff fae1 	bl	8002506 <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2204      	movs	r2, #4
 8002f4a:	9200      	str	r2, [sp, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	210d      	movs	r1, #13
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f001 fd37 	bl	80049c4 <dwSpiWrite>
    if (dev->permanentReceive)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <dwStartTransmit+0x7c>
    {
        memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2204      	movs	r2, #4
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fe89 	bl	8007c80 <memset>
        dev->deviceMode = RX_MODE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	721a      	strb	r2, [r3, #8]
        dwStartReceive(dev);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff7f 	bl	8002e78 <dwStartReceive>
    }
    else
    {
        dev->deviceMode = IDLE_MODE;
    }
}
 8002f7a:	e00b      	b.n	8002f94 <dwStartTransmit+0x94>
    else if (dev->wait4resp)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <dwStartTransmit+0x8e>
        dev->deviceMode = RX_MODE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	721a      	strb	r2, [r3, #8]
}
 8002f8c:	e002      	b.n	8002f94 <dwStartTransmit+0x94>
        dev->deviceMode = IDLE_MODE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	721a      	strb	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <dwNewConfiguration>:

void dwNewConfiguration(dwDeviceTypes_t *dev)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff2d 	bl	8002e04 <dwIdle>
    dwReadNetworkIdAndDeviceAddress(dev);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fd78 	bl	8002aa0 <dwReadNetworkIdAndDeviceAddress>
    dwReadSystemConfigurationRegister(dev);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fd42 	bl	8002a3a <dwReadSystemConfigurationRegister>
    dwReadChannelControlRegister(dev);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fdb6 	bl	8002b28 <dwReadChannelControlRegister>
    dwReadTransmitFrameControlRegister(dev);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fdd5 	bl	8002b6c <dwReadTransmitFrameControlRegister>
    dwReadSystemEventMaskRegister(dev);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fd8e 	bl	8002ae4 <dwReadSystemEventMaskRegister>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDeviceTypes_t *dev)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]
    // write all configurations back to device
    dwWriteNetworkIdAndDeviceAddress(dev);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fd72 	bl	8002ac2 <dwWriteNetworkIdAndDeviceAddress>
    dwWriteSystemConfigurationRegister(dev);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fd3c 	bl	8002a5c <dwWriteSystemConfigurationRegister>
    dwWriteChannelControlRegister(dev);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fdb0 	bl	8002b4a <dwWriteChannelControlRegister>
    dwWriteTransmitFrameControlRegister(dev);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fdcf 	bl	8002b8e <dwWriteTransmitFrameControlRegister>
    dwWriteSystemEventMaskRegister(dev);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fd88 	bl	8002b06 <dwWriteSystemEventMaskRegister>
    // tune according to configuration
    dwTune(dev);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fdc6 	bl	8003b88 <dwTune>
    // uint8_t antennaDelayBytes[LEN_STAMP];
    // writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
    // dev->antennaDelay.setTimestamp(antennaDelayBytes);
    // dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
    // dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
    dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.timeRaw, LEN_TX_ANTD);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3330      	adds	r3, #48	; 0x30
 8003000:	2202      	movs	r2, #2
 8003002:	9200      	str	r2, [sp, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	2118      	movs	r1, #24
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f001 fcdb 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.timeRaw, LEN_LDE_RXANTD);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3330      	adds	r3, #48	; 0x30
 8003012:	2202      	movs	r2, #2
 8003014:	9200      	str	r2, [sp, #0]
 8003016:	f641 0204 	movw	r2, #6148	; 0x1804
 800301a:	212e      	movs	r1, #46	; 0x2e
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f001 fcd1 	bl	80049c4 <dwSpiWrite>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <dwSuppressFrameCheck>:
    dev->wait4resp = val;
    setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDeviceTypes_t *dev, bool val)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	70fb      	strb	r3, [r7, #3]
    dev->frameCheck = !val;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <dwUseSmartPower>:

void dwUseSmartPower(dwDeviceTypes_t *dev, bool smartPower)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
    dev->smartPower = smartPower;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 000d 	add.w	r0, r3, #13
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2212      	movs	r2, #18
 8003092:	2104      	movs	r1, #4
 8003094:	f7ff fa37 	bl	8002506 <setBit>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <dwSetDataRate>:
    delayBytes[1] &= 0xFE;
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}

void dwSetDataRate(dwDeviceTypes_t *dev, uint8_t rate)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
    rate &= 0x03;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[1] &= 0x83;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7fdb      	ldrb	r3, [r3, #31]
 80030b8:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7fda      	ldrb	r2, [r3, #31]
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	015b      	lsls	r3, r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	77da      	strb	r2, [r3, #31]
    // special 110kbps flag
    if (rate == TRX_RATE_110KBPS)
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <dwSetDataRate+0x4c>
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f103 000d 	add.w	r0, r3, #13
 80030e0:	2301      	movs	r3, #1
 80030e2:	2216      	movs	r2, #22
 80030e4:	2104      	movs	r1, #4
 80030e6:	f7ff fa0e 	bl	8002506 <setBit>
 80030ea:	e007      	b.n	80030fc <dwSetDataRate+0x5c>
    }
    else
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f103 000d 	add.w	r0, r3, #13
 80030f2:	2300      	movs	r3, #0
 80030f4:	2216      	movs	r2, #22
 80030f6:	2104      	movs	r1, #4
 80030f8:	f7ff fa05 	bl	8002506 <setBit>
    }
    // SFD mode and type (non-configurable, as in Table )
    if (rate == TRX_RATE_6800KBPS)
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d118      	bne.n	8003134 <dwSetDataRate+0x94>
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f103 0015 	add.w	r0, r3, #21
 8003108:	2300      	movs	r3, #0
 800310a:	2211      	movs	r2, #17
 800310c:	2104      	movs	r1, #4
 800310e:	f7ff f9fa 	bl	8002506 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f103 0015 	add.w	r0, r3, #21
 8003118:	2300      	movs	r3, #0
 800311a:	2214      	movs	r2, #20
 800311c:	2104      	movs	r1, #4
 800311e:	f7ff f9f2 	bl	8002506 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f103 0015 	add.w	r0, r3, #21
 8003128:	2300      	movs	r3, #0
 800312a:	2215      	movs	r2, #21
 800312c:	2104      	movs	r1, #4
 800312e:	f7ff f9ea 	bl	8002506 <setBit>
 8003132:	e017      	b.n	8003164 <dwSetDataRate+0xc4>
    }
    else
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f103 0015 	add.w	r0, r3, #21
 800313a:	2301      	movs	r3, #1
 800313c:	2211      	movs	r2, #17
 800313e:	2104      	movs	r1, #4
 8003140:	f7ff f9e1 	bl	8002506 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f103 0015 	add.w	r0, r3, #21
 800314a:	2301      	movs	r3, #1
 800314c:	2214      	movs	r2, #20
 800314e:	2104      	movs	r1, #4
 8003150:	f7ff f9d9 	bl	8002506 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f103 0015 	add.w	r0, r3, #21
 800315a:	2301      	movs	r3, #1
 800315c:	2215      	movs	r2, #21
 800315e:	2104      	movs	r1, #4
 8003160:	f7ff f9d1 	bl	8002506 <setBit>
    }
    uint8_t sfdLength;
    if (rate == TRX_RATE_6800KBPS)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d102      	bne.n	8003170 <dwSetDataRate+0xd0>
    {
        sfdLength = 0x08;
 800316a:	2308      	movs	r3, #8
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	e007      	b.n	8003180 <dwSetDataRate+0xe0>
    }
    else if (rate == TRX_RATE_850KBPS)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <dwSetDataRate+0xdc>
    {
        sfdLength = 0x10;
 8003176:	2310      	movs	r3, #16
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	e001      	b.n	8003180 <dwSetDataRate+0xe0>
    }
    else
    {
        sfdLength = 0x40;
 800317c:	2340      	movs	r3, #64	; 0x40
 800317e:	73fb      	strb	r3, [r7, #15]
    }
    dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8003180:	f107 030f 	add.w	r3, r7, #15
 8003184:	2201      	movs	r2, #1
 8003186:	9200      	str	r2, [sp, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	2121      	movs	r1, #33	; 0x21
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f001 fc19 	bl	80049c4 <dwSpiWrite>
    dev->dataRate = rate;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDeviceTypes_t *dev, uint8_t freq)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
    freq &= 0x03;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xFC;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031bc:	f023 0303 	bic.w	r3, r3, #3
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 2020 	ldrb.w	r2, [r3, #32]
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f883 2020 	strb.w	r2, [r3, #32]
    dev->chanctrl[2] &= 0xF3;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7ddb      	ldrb	r3, [r3, #23]
 80031de:	f023 030c 	bic.w	r3, r3, #12
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7dda      	ldrb	r2, [r3, #23]
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	75da      	strb	r2, [r3, #23]
    dev->pulseFrequency = freq;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <dwSetPreambleLength>:
{
    return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDeviceTypes_t *dev, uint8_t prealen)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
    prealen &= 0x0F;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xC3;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003226:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 800322a:	b2da      	uxtb	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b2da      	uxtb	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f883 2020 	strb.w	r2, [r3, #32]
    if (prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d002      	beq.n	8003254 <dwSetPreambleLength+0x48>
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d104      	bne.n	800325e <dwSetPreambleLength+0x52>
    {
        dev->pacSize = PAC_SIZE_8;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2208      	movs	r2, #8
 8003258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800325c:	e016      	b.n	800328c <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512)
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	2b09      	cmp	r3, #9
 8003262:	d002      	beq.n	800326a <dwSetPreambleLength+0x5e>
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	2b0d      	cmp	r3, #13
 8003268:	d104      	bne.n	8003274 <dwSetPreambleLength+0x68>
    {
        dev->pacSize = PAC_SIZE_16;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2210      	movs	r2, #16
 800326e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003272:	e00b      	b.n	800328c <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_1024)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d104      	bne.n	8003284 <dwSetPreambleLength+0x78>
    {
        dev->pacSize = PAC_SIZE_32;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003282:	e003      	b.n	800328c <dwSetPreambleLength+0x80>
    }
    else
    {
        dev->pacSize = PAC_SIZE_64;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    dev->preambleLength = prealen;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDeviceTypes_t *dev, bool val)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	70fb      	strb	r3, [r7, #3]
    dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <dwUseExtendedFrameLength+0x16>
 80032b0:	2203      	movs	r2, #3
 80032b2:	e000      	b.n	80032b6 <dwUseExtendedFrameLength+0x18>
 80032b4:	2200      	movs	r2, #0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    dev->syscfg[2] &= 0xFC;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7bdb      	ldrb	r3, [r3, #15]
 80032c0:	f023 0303 	bic.w	r3, r3, #3
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	73da      	strb	r2, [r3, #15]
    dev->syscfg[2] |= dev->extendedFrameLength;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7bda      	ldrb	r2, [r3, #15]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80032d4:	4313      	orrs	r3, r2
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	73da      	strb	r2, [r3, #15]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <dwSetChannel>:
{
    dev->permanentReceive = val;
}

void dwSetChannel(dwDeviceTypes_t *dev, uint8_t channel)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
    channel &= 0xF;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	b25a      	sxtb	r2, r3
 8003300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003304:	4313      	orrs	r3, r2
 8003306:	b25b      	sxtb	r3, r3
 8003308:	b2da      	uxtb	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	755a      	strb	r2, [r3, #21]
    dev->channel = channel;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <dwSetPreambleCode>:

void dwSetPreambleCode(dwDeviceTypes_t *dev, uint8_t preacode)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
    preacode &= 0x1F;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[2] &= 0x3F;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7ddb      	ldrb	r3, [r3, #23]
 8003338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333c:	b2da      	uxtb	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7ddb      	ldrb	r3, [r3, #23]
 8003346:	b25a      	sxtb	r2, r3
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	019b      	lsls	r3, r3, #6
 800334c:	b25b      	sxtb	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b25b      	sxtb	r3, r3
 8003352:	b2da      	uxtb	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[3] = 0x00;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	761a      	strb	r2, [r3, #24]
    dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	b2db      	uxtb	r3, r3
 8003364:	b25b      	sxtb	r3, r3
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	b25a      	sxtb	r2, r3
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	b25b      	sxtb	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b25b      	sxtb	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	761a      	strb	r2, [r3, #24]
    dev->preambleCode = preacode;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <dwSetDefaults>:

void dwSetDefaults(dwDeviceTypes_t *dev)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
    if (dev->deviceMode == TX_MODE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7a1b      	ldrb	r3, [r3, #8]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d03e      	beq.n	800341c <dwSetDefaults+0x8e>
    {
    }
    else if (dev->deviceMode == RX_MODE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7a1b      	ldrb	r3, [r3, #8]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d03a      	beq.n	800341c <dwSetDefaults+0x8e>
    {
    }
    else if (dev->deviceMode == IDLE_MODE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7a1b      	ldrb	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d136      	bne.n	800341c <dwSetDefaults+0x8e>
    {
        dwUseExtendedFrameLength(dev, false);
 80033ae:	2100      	movs	r1, #0
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff74 	bl	800329e <dwUseExtendedFrameLength>
        dwUseSmartPower(dev, true);
 80033b6:	2101      	movs	r1, #1
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fe50 	bl	800305e <dwUseSmartPower>
        dwSuppressFrameCheck(dev, false);
 80033be:	2100      	movs	r1, #0
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fe32 	bl	800302a <dwSuppressFrameCheck>
        // for global frame filtering
        dwSetFrameFilter(dev, false);
 80033c6:	2100      	movs	r1, #0
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fbf1 	bl	8002bb0 <dwSetFrameFilter>
        // for data frame (poll, poll_ack, range, range report, range failed) filtering
        dwSetFrameFilterAllowData(dev, false);
 80033ce:	2100      	movs	r1, #0
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fbff 	bl	8002bd4 <dwSetFrameFilterAllowData>
        // for reserved (blink) frame filtering
        dwSetFrameFilterAllowReserved(dev, false);
 80033d6:	2100      	movs	r1, #0
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fc0d 	bl	8002bf8 <dwSetFrameFilterAllowReserved>
        // setFrameFilterAllowMAC(true);
        // setFrameFilterAllowBeacon(true);
        // setFrameFilterAllowAcknowledgement(true);
        dwInterruptOnSent(dev, true);
 80033de:	2101      	movs	r1, #1
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fc5c 	bl	8002c9e <dwInterruptOnSent>
        dwInterruptOnReceived(dev, true);
 80033e6:	2101      	movs	r1, #1
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fc6a 	bl	8002cc2 <dwInterruptOnReceived>
        dwInterruptOnReceiveTimeout(dev, true);
 80033ee:	2101      	movs	r1, #1
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fcba 	bl	8002d6a <dwInterruptOnReceiveTimeout>
        dwInterruptOnReceiveFailed(dev, false);
 80033f6:	2100      	movs	r1, #0
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fc7c 	bl	8002cf6 <dwInterruptOnReceiveFailed>
        dwInterruptOnReceiveTimestampAvailable(dev, false);
 80033fe:	2100      	movs	r1, #0
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fccc 	bl	8002d9e <dwInterruptOnReceiveTimestampAvailable>
        dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8003406:	2100      	movs	r1, #0
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fcda 	bl	8002dc2 <dwInterruptOnAutomaticAcknowledgeTrigger>
        dwSetReceiverAutoReenable(dev, true);
 800340e:	2101      	movs	r1, #1
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fc32 	bl	8002c7a <dwSetReceiverAutoReenable>
        // default mode when powering up the chip
        // still explicitly selected for later tuning
        dwSetMode(dev);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb8a 	bl	8003b30 <dwSetMode>
    }
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <dwSetData>:

void dwSetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
    if (dev->frameCheck)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <dwSetData+0x1c>
    {
        n += 2; // two bytes CRC-16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3302      	adds	r3, #2
 800343e:	607b      	str	r3, [r7, #4]
    }
    if (n > LEN_EXT_UWB_FRAMES)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d229      	bcs.n	800349c <dwSetData+0x78>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    if (n > LEN_UWB_FRAMES && !dev->extendedFrameLength)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b7f      	cmp	r3, #127	; 0x7f
 800344c:	d904      	bls.n	8003458 <dwSetData+0x34>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003454:	2b00      	cmp	r3, #0
 8003456:	d023      	beq.n	80034a0 <dwSetData+0x7c>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    // transmit data and length
    dwSpiWrite(dev, TX_BUFFER, NO_SUB, data, n);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	2109      	movs	r1, #9
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f001 faae 	bl	80049c4 <dwSpiWrite>
    dev->txfctrl[0] = (uint8_t)(n & 0xFF); // 1 byte (regular length + 1 bit)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	779a      	strb	r2, [r3, #30]
    dev->txfctrl[1] &= 0xE0;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	7fdb      	ldrb	r3, [r3, #31]
 8003474:	f023 031f 	bic.w	r3, r3, #31
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((n >> 8) & 0x03); // 2 added bits if extended length
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	7fdb      	ldrb	r3, [r3, #31]
 8003482:	b25a      	sxtb	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b25b      	sxtb	r3, r3
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	b25b      	sxtb	r3, r3
 8003490:	4313      	orrs	r3, r2
 8003492:	b25b      	sxtb	r3, r3
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	77da      	strb	r2, [r3, #31]
 800349a:	e002      	b.n	80034a2 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 800349c:	bf00      	nop
 800349e:	e000      	b.n	80034a2 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 80034a0:	bf00      	nop
}
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <dwGetDataLength>:

unsigned int dwGetDataLength(dwDeviceTypes_t *dev)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
    unsigned int len = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
    if (dev->deviceMode == TX_MODE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7a1b      	ldrb	r3, [r3, #8]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d109      	bne.n	80034d0 <dwGetDataLength+0x28>
    {
        // 10 bits of TX frame control register
        len = ((((unsigned int)dev->txfctrl[1] << 8) | (unsigned int)dev->txfctrl[0]) & 0x03FF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7fdb      	ldrb	r3, [r3, #31]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	7f92      	ldrb	r2, [r2, #30]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e013      	b.n	80034f8 <dwGetDataLength+0x50>
    }
    else if (dev->deviceMode == RX_MODE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7a1b      	ldrb	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10f      	bne.n	80034f8 <dwGetDataLength+0x50>
    {
        // 10 bits of RX frame control register
        uint8_t rxFrameInfo[LEN_RX_FINFO];
        dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	2204      	movs	r2, #4
 80034de:	9200      	str	r2, [sp, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2110      	movs	r1, #16
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f001 fa05 	bl	80048f4 <dwSpiRead>
        len = ((((unsigned int)rxFrameInfo[1] << 8) | (unsigned int)rxFrameInfo[0]) & 0x03FF);
 80034ea:	7a7b      	ldrb	r3, [r7, #9]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	7a3a      	ldrb	r2, [r7, #8]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f6:	60fb      	str	r3, [r7, #12]
    }
    if (dev->frameCheck && len > 2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <dwGetDataLength+0x66>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d902      	bls.n	800350e <dwGetDataLength+0x66>
    {
        return len - 2;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b02      	subs	r3, #2
 800350c:	e000      	b.n	8003510 <dwGetDataLength+0x68>
    }
    return len;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <dwGetData>:

void dwGetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
    if (n <= 0)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <dwGetData+0x24>
    {
        return;
    }
    dwSpiRead(dev, RX_BUFFER, NO_SUB, data, n);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	2111      	movs	r1, #17
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f001 f9dd 	bl	80048f4 <dwSpiRead>
 800353a:	e000      	b.n	800353e <dwGetData+0x26>
        return;
 800353c:	bf00      	nop
}
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <dwGetTransmitTimestamp>:

void dwGetTransmitTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af02      	add	r7, sp, #8
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    dwSpiRead(dev, TX_TIME, TX_STAMP_SUB, time->timeRaw, LEN_TX_STAMP);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2205      	movs	r2, #5
 8003552:	9200      	str	r2, [sp, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	2117      	movs	r1, #23
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f001 f9cb 	bl	80048f4 <dwSpiRead>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <dwGetReceiveTimestamp>:

void dwGetReceiveTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af02      	add	r7, sp, #8
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
    time->timeFull = 0;
 8003570:	6839      	ldr	r1, [r7, #0]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9c1 2300 	strd	r2, r3, [r1]
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2205      	movs	r2, #5
 8003582:	9200      	str	r2, [sp, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	2115      	movs	r1, #21
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f001 f9b3 	bl	80048f4 <dwSpiRead>
    // correct timestamp (i.e. consider range bias)
    dwCorrectTimestamp(dev, time);
 800358e:	6839      	ldr	r1, [r7, #0]
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f805 	bl	80035a0 <dwCorrectTimestamp>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <dwCorrectTimestamp>:
    time->timeFull = 0;
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
}

void dwCorrectTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *timestamp)
{
 80035a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a4:	b08a      	sub	sp, #40	; 0x28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
    // base line dBm, which is -61, 2 dBm steps, total 18 data points (down to -95 dBm)
    float rxPowerBase = -(dwGetReceivePower(dev) + 61.0f) * 0.5f;
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa97 	bl	8003ae0 <dwGetReceivePower>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4997      	ldr	r1, [pc, #604]	; (8003814 <dwCorrectTimestamp+0x274>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fadc 	bl	8000b74 <__addsf3>
 80035bc:	4603      	mov	r3, r0
 80035be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035c2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fbdc 	bl	8000d84 <__aeabi_fmul>
 80035cc:	4603      	mov	r3, r0
 80035ce:	617b      	str	r3, [r7, #20]

    if (!isfinite(rxPowerBase))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80035d6:	4990      	ldr	r1, [pc, #576]	; (8003818 <dwCorrectTimestamp+0x278>)
 80035d8:	4630      	mov	r0, r6
 80035da:	f7fd fd99 	bl	8001110 <__aeabi_fcmpun>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8111 	bne.w	8003808 <dwCorrectTimestamp+0x268>
 80035e6:	498c      	ldr	r1, [pc, #560]	; (8003818 <dwCorrectTimestamp+0x278>)
 80035e8:	4630      	mov	r0, r6
 80035ea:	f7fd fd87 	bl	80010fc <__aeabi_fcmpgt>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f040 8109 	bne.w	8003808 <dwCorrectTimestamp+0x268>
    {
        return;
    }
    int rxPowerBaseLow = (int)rxPowerBase;
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7fd fda0 	bl	800113c <__aeabi_f2iz>
 80035fc:	4603      	mov	r3, r0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
    int rxPowerBaseHigh = rxPowerBaseLow + 1;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	3301      	adds	r3, #1
 8003604:	623b      	str	r3, [r7, #32]
    if (rxPowerBaseLow <= 0)
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	dc04      	bgt.n	8003616 <dwCorrectTimestamp+0x76>
    {
        rxPowerBaseLow = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	e006      	b.n	8003624 <dwCorrectTimestamp+0x84>
    }
    else if (rxPowerBaseHigh >= 17)
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	2b10      	cmp	r3, #16
 800361a:	dd03      	ble.n	8003624 <dwCorrectTimestamp+0x84>
    {
        rxPowerBaseLow = 17;
 800361c:	2311      	movs	r3, #17
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 17;
 8003620:	2311      	movs	r3, #17
 8003622:	623b      	str	r3, [r7, #32]
    }
    // select range low/high values from corresponding table
    int rangeBiasHigh = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
    int rangeBiasLow = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]
    if (dev->channel == CHANNEL_4 || dev->channel == CHANNEL_7)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003632:	2b04      	cmp	r3, #4
 8003634:	d004      	beq.n	8003640 <dwCorrectTimestamp+0xa0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800363c:	2b07      	cmp	r3, #7
 800363e:	d157      	bne.n	80036f0 <dwCorrectTimestamp+0x150>
    {
        // 900 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003646:	2b01      	cmp	r3, #1
 8003648:	d126      	bne.n	8003698 <dwCorrectTimestamp+0xf8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseHigh] : BIAS_900_16[rxPowerBaseHigh]);
 800364a:	2307      	movs	r3, #7
 800364c:	461a      	mov	r2, r3
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	4293      	cmp	r3, r2
 8003652:	da05      	bge.n	8003660 <dwCorrectTimestamp+0xc0>
 8003654:	4a71      	ldr	r2, [pc, #452]	; (800381c <dwCorrectTimestamp+0x27c>)
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	4413      	add	r3, r2
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	425b      	negs	r3, r3
 800365e:	e003      	b.n	8003668 <dwCorrectTimestamp+0xc8>
 8003660:	4a6e      	ldr	r2, [pc, #440]	; (800381c <dwCorrectTimestamp+0x27c>)
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	4413      	add	r3, r2
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseLow] : BIAS_900_16[rxPowerBaseLow]);
 8003670:	2307      	movs	r3, #7
 8003672:	461a      	mov	r2, r3
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	4293      	cmp	r3, r2
 8003678:	da05      	bge.n	8003686 <dwCorrectTimestamp+0xe6>
 800367a:	4a68      	ldr	r2, [pc, #416]	; (800381c <dwCorrectTimestamp+0x27c>)
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	4413      	add	r3, r2
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	425b      	negs	r3, r3
 8003684:	e003      	b.n	800368e <dwCorrectTimestamp+0xee>
 8003686:	4a65      	ldr	r2, [pc, #404]	; (800381c <dwCorrectTimestamp+0x27c>)
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	4413      	add	r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003696:	e077      	b.n	8003788 <dwCorrectTimestamp+0x1e8>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d172      	bne.n	8003788 <dwCorrectTimestamp+0x1e8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseHigh] : BIAS_900_64[rxPowerBaseHigh]);
 80036a2:	2307      	movs	r3, #7
 80036a4:	461a      	mov	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	da05      	bge.n	80036b8 <dwCorrectTimestamp+0x118>
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <dwCorrectTimestamp+0x280>)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	425b      	negs	r3, r3
 80036b6:	e003      	b.n	80036c0 <dwCorrectTimestamp+0x120>
 80036b8:	4a59      	ldr	r2, [pc, #356]	; (8003820 <dwCorrectTimestamp+0x280>)
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	4413      	add	r3, r2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseLow] : BIAS_900_64[rxPowerBaseLow]);
 80036c8:	2307      	movs	r3, #7
 80036ca:	461a      	mov	r2, r3
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	4293      	cmp	r3, r2
 80036d0:	da05      	bge.n	80036de <dwCorrectTimestamp+0x13e>
 80036d2:	4a53      	ldr	r2, [pc, #332]	; (8003820 <dwCorrectTimestamp+0x280>)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	425b      	negs	r3, r3
 80036dc:	e003      	b.n	80036e6 <dwCorrectTimestamp+0x146>
 80036de:	4a50      	ldr	r2, [pc, #320]	; (8003820 <dwCorrectTimestamp+0x280>)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80036ee:	e04b      	b.n	8003788 <dwCorrectTimestamp+0x1e8>
        }
    }
    else
    {
        // 500 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d120      	bne.n	800373c <dwCorrectTimestamp+0x19c>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseHigh] : BIAS_500_16[rxPowerBaseHigh]);
 80036fa:	230a      	movs	r3, #10
 80036fc:	461a      	mov	r2, r3
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	4293      	cmp	r3, r2
 8003702:	da05      	bge.n	8003710 <dwCorrectTimestamp+0x170>
 8003704:	4a47      	ldr	r2, [pc, #284]	; (8003824 <dwCorrectTimestamp+0x284>)
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	4413      	add	r3, r2
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	425b      	negs	r3, r3
 800370e:	e003      	b.n	8003718 <dwCorrectTimestamp+0x178>
 8003710:	4a44      	ldr	r2, [pc, #272]	; (8003824 <dwCorrectTimestamp+0x284>)
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseLow] : BIAS_500_16[rxPowerBaseLow]);
 800371a:	230a      	movs	r3, #10
 800371c:	461a      	mov	r2, r3
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	4293      	cmp	r3, r2
 8003722:	da05      	bge.n	8003730 <dwCorrectTimestamp+0x190>
 8003724:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <dwCorrectTimestamp+0x284>)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	4413      	add	r3, r2
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	425b      	negs	r3, r3
 800372e:	e003      	b.n	8003738 <dwCorrectTimestamp+0x198>
 8003730:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <dwCorrectTimestamp+0x284>)
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	4413      	add	r3, r2
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	e026      	b.n	800378a <dwCorrectTimestamp+0x1ea>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003742:	2b02      	cmp	r3, #2
 8003744:	d121      	bne.n	800378a <dwCorrectTimestamp+0x1ea>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseHigh] : BIAS_500_64[rxPowerBaseHigh]);
 8003746:	2308      	movs	r3, #8
 8003748:	461a      	mov	r2, r3
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	4293      	cmp	r3, r2
 800374e:	da05      	bge.n	800375c <dwCorrectTimestamp+0x1bc>
 8003750:	4a35      	ldr	r2, [pc, #212]	; (8003828 <dwCorrectTimestamp+0x288>)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	4413      	add	r3, r2
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	425b      	negs	r3, r3
 800375a:	e003      	b.n	8003764 <dwCorrectTimestamp+0x1c4>
 800375c:	4a32      	ldr	r2, [pc, #200]	; (8003828 <dwCorrectTimestamp+0x288>)
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	4413      	add	r3, r2
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseLow] : BIAS_500_64[rxPowerBaseLow]);
 8003766:	2308      	movs	r3, #8
 8003768:	461a      	mov	r2, r3
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	4293      	cmp	r3, r2
 800376e:	da05      	bge.n	800377c <dwCorrectTimestamp+0x1dc>
 8003770:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <dwCorrectTimestamp+0x288>)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	4413      	add	r3, r2
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	425b      	negs	r3, r3
 800377a:	e003      	b.n	8003784 <dwCorrectTimestamp+0x1e4>
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <dwCorrectTimestamp+0x288>)
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	e000      	b.n	800378a <dwCorrectTimestamp+0x1ea>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003788:	bf00      	nop
        {
            // TODO proper error handling
        }
    }
    // linear interpolation of bias values
    float rangeBias = rangeBiasLow + (rxPowerBase - rxPowerBaseLow) * (rangeBiasHigh - rangeBiasLow);
 800378a:	69b8      	ldr	r0, [r7, #24]
 800378c:	f7fd faa6 	bl	8000cdc <__aeabi_i2f>
 8003790:	4606      	mov	r6, r0
 8003792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003794:	f7fd faa2 	bl	8000cdc <__aeabi_i2f>
 8003798:	4603      	mov	r3, r0
 800379a:	4619      	mov	r1, r3
 800379c:	6978      	ldr	r0, [r7, #20]
 800379e:	f7fd f9e7 	bl	8000b70 <__aeabi_fsub>
 80037a2:	4603      	mov	r3, r0
 80037a4:	469a      	mov	sl, r3
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fa95 	bl	8000cdc <__aeabi_i2f>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4619      	mov	r1, r3
 80037b6:	4650      	mov	r0, sl
 80037b8:	f7fd fae4 	bl	8000d84 <__aeabi_fmul>
 80037bc:	4603      	mov	r3, r0
 80037be:	4619      	mov	r1, r3
 80037c0:	4630      	mov	r0, r6
 80037c2:	f7fd f9d7 	bl	8000b74 <__addsf3>
 80037c6:	4603      	mov	r3, r0
 80037c8:	613b      	str	r3, [r7, #16]
    // range bias [mm] to timestamp modification value conversion
    dwTimestamp_t adjustmentTime;
    adjustmentTime.timeFull = (int)(rangeBias * DISTANCE_OF_RADIO_INV * 0.001f);
 80037ca:	4918      	ldr	r1, [pc, #96]	; (800382c <dwCorrectTimestamp+0x28c>)
 80037cc:	6938      	ldr	r0, [r7, #16]
 80037ce:	f7fd fad9 	bl	8000d84 <__aeabi_fmul>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4916      	ldr	r1, [pc, #88]	; (8003830 <dwCorrectTimestamp+0x290>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fad4 	bl	8000d84 <__aeabi_fmul>
 80037dc:	4603      	mov	r3, r0
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fcac 	bl	800113c <__aeabi_f2iz>
 80037e4:	4603      	mov	r3, r0
 80037e6:	17da      	asrs	r2, r3, #31
 80037e8:	4698      	mov	r8, r3
 80037ea:	4691      	mov	r9, r2
 80037ec:	e9c7 8902 	strd	r8, r9, [r7, #8]
    // apply correction
    timestamp->timeFull -= adjustmentTime.timeFull;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037fa:	1a84      	subs	r4, r0, r2
 80037fc:	eb61 0503 	sbc.w	r5, r1, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	e9c3 4500 	strd	r4, r5, [r3]
 8003806:	e000      	b.n	800380a <dwCorrectTimestamp+0x26a>
        return;
 8003808:	bf00      	nop
}
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003812:	bf00      	nop
 8003814:	42740000 	.word	0x42740000
 8003818:	7f7fffff 	.word	0x7f7fffff
 800381c:	0800c8d8 	.word	0x0800c8d8
 8003820:	0800c8ec 	.word	0x0800c8ec
 8003824:	0800c8b0 	.word	0x0800c8b0
 8003828:	0800c8c4 	.word	0x0800c8c4
 800382c:	435523b3 	.word	0x435523b3
 8003830:	3a83126f 	.word	0x3a83126f

08003834 <dwIsTransmitDone>:
{
    dwSpiRead(dev, SYS_TIME, NO_SUB, time->timeRaw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDeviceTypes_t *dev)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3319      	adds	r3, #25
 8003840:	2207      	movs	r2, #7
 8003842:	2105      	movs	r1, #5
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fe9a 	bl	800257e <getBit>
 800384a:	4603      	mov	r3, r0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDeviceTypes_t *dev)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3319      	adds	r3, #25
 8003860:	220a      	movs	r2, #10
 8003862:	2105      	movs	r1, #5
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fe8a 	bl	800257e <getBit>
 800386a:	4603      	mov	r3, r0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDeviceTypes_t *dev)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    if (dev->frameCheck)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <dwIsReceiveDone+0x24>
    {
        return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3319      	adds	r3, #25
 800388a:	220e      	movs	r2, #14
 800388c:	2105      	movs	r1, #5
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fe75 	bl	800257e <getBit>
 8003894:	4603      	mov	r3, r0
 8003896:	e007      	b.n	80038a8 <dwIsReceiveDone+0x34>
    }
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3319      	adds	r3, #25
 800389c:	220d      	movs	r2, #13
 800389e:	2105      	movs	r1, #5
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fe6c 	bl	800257e <getBit>
 80038a6:	4603      	mov	r3, r0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDeviceTypes_t *dev)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3319      	adds	r3, #25
 80038bc:	2212      	movs	r2, #18
 80038be:	2105      	movs	r1, #5
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fe5c 	bl	800257e <getBit>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
    bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3319      	adds	r3, #25
 80038ce:	220f      	movs	r2, #15
 80038d0:	2105      	movs	r1, #5
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fe53 	bl	800257e <getBit>
 80038d8:	4603      	mov	r3, r0
 80038da:	73bb      	strb	r3, [r7, #14]
    bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3319      	adds	r3, #25
 80038e0:	220c      	movs	r2, #12
 80038e2:	2105      	movs	r1, #5
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe fe4a 	bl	800257e <getBit>
 80038ea:	4603      	mov	r3, r0
 80038ec:	737b      	strb	r3, [r7, #13]
    bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3319      	adds	r3, #25
 80038f2:	2210      	movs	r2, #16
 80038f4:	2105      	movs	r1, #5
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fe41 	bl	800257e <getBit>
 80038fc:	4603      	mov	r3, r0
 80038fe:	733b      	strb	r3, [r7, #12]

    bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3319      	adds	r3, #25
 8003904:	221a      	movs	r2, #26
 8003906:	2105      	movs	r1, #5
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fe38 	bl	800257e <getBit>
 800390e:	4603      	mov	r3, r0
 8003910:	72fb      	strb	r3, [r7, #11]
    bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3319      	adds	r3, #25
 8003916:	221d      	movs	r2, #29
 8003918:	2105      	movs	r1, #5
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fe2f 	bl	800257e <getBit>
 8003920:	4603      	mov	r3, r0
 8003922:	72bb      	strb	r3, [r7, #10]

    return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <dwIsReceiveFailed+0x98>
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <dwIsReceiveFailed+0x98>
 8003930:	7b7b      	ldrb	r3, [r7, #13]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <dwIsReceiveFailed+0x98>
 8003936:	7b3b      	ldrb	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <dwIsReceiveFailed+0x98>
 800393c:	7afb      	ldrb	r3, [r7, #11]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <dwIsReceiveFailed+0x98>
 8003942:	7abb      	ldrb	r3, [r7, #10]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <dwIsReceiveFailed+0x9c>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <dwIsReceiveFailed+0x9e>
 800394c:	2300      	movs	r3, #0
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	b2db      	uxtb	r3, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDeviceTypes_t *dev)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3319      	adds	r3, #25
 8003968:	2211      	movs	r2, #17
 800396a:	2105      	movs	r1, #5
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fe06 	bl	800257e <getBit>
 8003972:	4603      	mov	r3, r0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <dwClearReceiveTimestampAvailableStatus>:
    uint32_t reg = 0xffffffff;
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDeviceTypes_t *dev)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
    uint8_t reg[LEN_SYS_STATUS] = {0};
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	2300      	movs	r3, #0
 800398a:	733b      	strb	r3, [r7, #12]
    setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 800398c:	f107 0008 	add.w	r0, r7, #8
 8003990:	2301      	movs	r3, #1
 8003992:	220a      	movs	r2, #10
 8003994:	2105      	movs	r1, #5
 8003996:	f7fe fdb6 	bl	8002506 <setBit>
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	2205      	movs	r2, #5
 80039a0:	9200      	str	r2, [sp, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	210f      	movs	r1, #15
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f001 f80c 	bl	80049c4 <dwSpiWrite>
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDeviceTypes_t *dev)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
    // clear latched RX bits (i.e. write 1 to clear)
    uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <dwClearReceiveStatus+0x20>)
 80039be:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	210f      	movs	r1, #15
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f001 f856 	bl	8004a78 <dwSpiWrite32>
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	2427ff00 	.word	0x2427ff00

080039d8 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDeviceTypes_t *dev)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    // clear latched TX bits
    uint32_t regData = SYS_STATUS_ALL_TX;
 80039e0:	23f8      	movs	r3, #248	; 0xf8
 80039e2:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	210f      	movs	r1, #15
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f001 f844 	bl	8004a78 <dwSpiWrite32>
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <spiReadRxInfo>:
    f2 = (unsigned int)fpAmpl2Bytes[0] | ((unsigned int)fpAmpl2Bytes[1] << 8);
    return (float)f2 / noise;
}

static float spiReadRxInfo(dwDeviceTypes_t *dev)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
    uint8_t rxFrameInfo[LEN_RX_FINFO];
    dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	2204      	movs	r2, #4
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 ff71 	bl	80048f4 <dwSpiRead>
    return (float)((((unsigned int)rxFrameInfo[2] >> 4) & 0xFF) | ((unsigned int)rxFrameInfo[3] << 4));
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd f957 	bl	8000cd4 <__aeabi_ui2f>
 8003a26:	4603      	mov	r3, r0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <calculatePower>:

static float calculatePower(float base, float N, uint8_t pulseFrequency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	71fb      	strb	r3, [r7, #7]
    float A, corrFac;

    if (TX_PULSE_FREQ_16MHZ == pulseFrequency)
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d104      	bne.n	8003a4e <calculatePower+0x1e>
    {
        A = 113.77f;
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <calculatePower+0x94>)
 8003a46:	61fb      	str	r3, [r7, #28]
        corrFac = 2.3334f;
 8003a48:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <calculatePower+0x98>)
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	e003      	b.n	8003a56 <calculatePower+0x26>
    }
    else
    {
        A = 121.74f;
 8003a4e:	4b1f      	ldr	r3, [pc, #124]	; (8003acc <calculatePower+0x9c>)
 8003a50:	61fb      	str	r3, [r7, #28]
        corrFac = 1.1667f;
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <calculatePower+0xa0>)
 8003a54:	61bb      	str	r3, [r7, #24]
    }

    float estFpPwr = 10.0f * log10f(base / (N * N)) - A;
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	68b8      	ldr	r0, [r7, #8]
 8003a5a:	f7fd f993 	bl	8000d84 <__aeabi_fmul>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4619      	mov	r1, r3
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7fd fa42 	bl	8000eec <__aeabi_fdiv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f008 fd30 	bl	800c4d0 <log10f>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4918      	ldr	r1, [pc, #96]	; (8003ad4 <calculatePower+0xa4>)
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd f985 	bl	8000d84 <__aeabi_fmul>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	69f9      	ldr	r1, [r7, #28]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd f876 	bl	8000b70 <__aeabi_fsub>
 8003a84:	4603      	mov	r3, r0
 8003a86:	617b      	str	r3, [r7, #20]

    if (estFpPwr <= -88)
 8003a88:	4913      	ldr	r1, [pc, #76]	; (8003ad8 <calculatePower+0xa8>)
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7fd fb22 	bl	80010d4 <__aeabi_fcmple>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <calculatePower+0x6a>
    {
        return estFpPwr;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	e010      	b.n	8003abc <calculatePower+0x8c>
    }
    else
    {
        // approximation of Fig. 22 in user manual for dbm correction
        estFpPwr += (estFpPwr + 88) * corrFac;
 8003a9a:	4910      	ldr	r1, [pc, #64]	; (8003adc <calculatePower+0xac>)
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f7fd f869 	bl	8000b74 <__addsf3>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd f96c 	bl	8000d84 <__aeabi_fmul>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f7fd f85f 	bl	8000b74 <__addsf3>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	617b      	str	r3, [r7, #20]
    }

    return estFpPwr;
 8003aba:	697b      	ldr	r3, [r7, #20]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	42e38a3d 	.word	0x42e38a3d
 8003ac8:	4015566d 	.word	0x4015566d
 8003acc:	42f37ae1 	.word	0x42f37ae1
 8003ad0:	3f95566d 	.word	0x3f95566d
 8003ad4:	41200000 	.word	0x41200000
 8003ad8:	c2b00000 	.word	0xc2b00000
 8003adc:	42b00000 	.word	0x42b00000

08003ae0 <dwGetReceivePower>:

    return calculatePower(f1 * f1 + f2 * f2 + f3 * f3, N, dev->pulseFrequency);
}

float dwGetReceivePower(dwDeviceTypes_t *dev)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    float C = (float)dwSpiRead16(dev, RX_FQUAL, CIR_PWR_SUB);
 8003ae8:	2206      	movs	r2, #6
 8003aea:	2112      	movs	r1, #18
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 ff3f 	bl	8004970 <dwSpiRead16>
 8003af2:	4603      	mov	r3, r0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f8ed 	bl	8000cd4 <__aeabi_ui2f>
 8003afa:	4603      	mov	r3, r0
 8003afc:	617b      	str	r3, [r7, #20]
    float N = spiReadRxInfo(dev);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff7a 	bl	80039f8 <spiReadRxInfo>
 8003b04:	6138      	str	r0, [r7, #16]

    float twoPower17 = 131072.0f;
 8003b06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b0a:	60fb      	str	r3, [r7, #12]

    return calculatePower(C * twoPower17, N, dev->pulseFrequency);
 8003b0c:	68f9      	ldr	r1, [r7, #12]
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7fd f938 	bl	8000d84 <__aeabi_fmul>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4618      	mov	r0, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	f7ff ff85 	bl	8003a30 <calculatePower>
 8003b26:	4603      	mov	r3, r0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <dwSetMode>:
    dwSetChannel(dev, dev->channel);
    dwSetPreambleCode(dev, dev->preambleCode);
}

void dwSetMode(dwDeviceTypes_t *dev)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
    dwSetDataRate(dev, dev->dataRate);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff faad 	bl	80030a0 <dwSetDataRate>
    dwSetPulseFrequency(dev, dev->pulseFrequency);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fb27 	bl	80031a2 <dwSetPulseFrequency>
    dwSetPreambleLength(dev, dev->preambleLength);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fb55 	bl	800320c <dwSetPreambleLength>
    // TODO add channel and code to mode tuples
    // TODO add channel and code settings with checks (see Table 58)
    dwSetChannel(dev, dev->channel);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fbbb 	bl	80032e6 <dwSetChannel>
    dwSetPreambleCode(dev, dev->preambleCode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fbd1 	bl	8003320 <dwSetPreambleCode>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <dwTune>:

void dwTune(dwDeviceTypes_t *dev)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b098      	sub	sp, #96	; 0x60
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
    uint8_t tcpgdelay[LEN_TC_PGDELAY];
    uint8_t fspllcfg[LEN_FS_PLLCFG];
    uint8_t fsplltune[LEN_FS_PLLTUNE];
    uint8_t fsxtalt[LEN_FS_XTALT];
    // AGC_TUNE1
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d108      	bne.n	8003bac <dwTune+0x24>
    {
        writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 8003b9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f648 0170 	movw	r1, #34928	; 0x8870
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fd12 	bl	80025ce <writeValueToBytes>
 8003baa:	e00c      	b.n	8003bc6 <dwTune+0x3e>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d107      	bne.n	8003bc6 <dwTune+0x3e>
    {
        writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 8003bb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f648 019b 	movw	r1, #34971	; 0x889b
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fd04 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // AGC_TUNE2
    writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 8003bc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bca:	2204      	movs	r2, #4
 8003bcc:	49b9      	ldr	r1, [pc, #740]	; (8003eb4 <dwTune+0x32c>)
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fcfd 	bl	80025ce <writeValueToBytes>
    // AGC_TUNE3
    writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8003bd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bd8:	2202      	movs	r2, #2
 8003bda:	2135      	movs	r1, #53	; 0x35
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fcf6 	bl	80025ce <writeValueToBytes>
    // DRX_TUNE0b (already optimized according to Table 20 of user manual)
    if (dev->dataRate == TRX_RATE_110KBPS)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <dwTune+0x74>
    {
        writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8003bec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	2116      	movs	r1, #22
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fcea 	bl	80025ce <writeValueToBytes>
 8003bfa:	e018      	b.n	8003c2e <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_850KBPS)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <dwTune+0x8e>
    {
        writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8003c06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	2106      	movs	r1, #6
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fcdd 	bl	80025ce <writeValueToBytes>
 8003c14:	e00b      	b.n	8003c2e <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_6800KBPS)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d106      	bne.n	8003c2e <dwTune+0xa6>
    {
        writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8003c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c24:	2202      	movs	r2, #2
 8003c26:	2101      	movs	r1, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fcd0 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1a
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d107      	bne.n	8003c48 <dwTune+0xc0>
    {
        writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8003c38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	2187      	movs	r1, #135	; 0x87
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fcc4 	bl	80025ce <writeValueToBytes>
 8003c46:	e00b      	b.n	8003c60 <dwTune+0xd8>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d106      	bne.n	8003c60 <dwTune+0xd8>
    {
        writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 8003c52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c56:	2202      	movs	r2, #2
 8003c58:	218d      	movs	r1, #141	; 0x8d
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fcb7 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1b
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d009      	beq.n	8003c7e <dwTune+0xf6>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c70:	2b0a      	cmp	r3, #10
 8003c72:	d004      	beq.n	8003c7e <dwTune+0xf6>
        dev->preambleLength == TX_PREAMBLE_LEN_4096)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d10c      	bne.n	8003c98 <dwTune+0x110>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d12a      	bne.n	8003cde <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 8003c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	2164      	movs	r1, #100	; 0x64
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fc9c 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003c96:	e022      	b.n	8003cde <dwTune+0x156>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->preambleLength != TX_PREAMBLE_LEN_64)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d011      	beq.n	8003cc6 <dwTune+0x13e>
    {
        if (dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d004      	beq.n	8003cb6 <dwTune+0x12e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d113      	bne.n	8003cde <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 8003cb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cba:	2202      	movs	r2, #2
 8003cbc:	2120      	movs	r1, #32
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fc85 	bl	80025ce <writeValueToBytes>
 8003cc4:	e00b      	b.n	8003cde <dwTune+0x156>
            // TODO proper error/warning handling
        }
    }
    else
    {
        if (dev->dataRate == TRX_RATE_6800KBPS)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d106      	bne.n	8003cde <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 8003cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	2110      	movs	r1, #16
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fc78 	bl	80025ce <writeValueToBytes>
        {
            // TODO proper error/warning handling
        }
    }
    // DRX_TUNE2
    if (dev->pacSize == PAC_SIZE_8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d119      	bne.n	8003d1c <dwTune+0x194>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <dwTune+0x17a>
        {
            writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 8003cf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	496f      	ldr	r1, [pc, #444]	; (8003eb8 <dwTune+0x330>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fc67 	bl	80025ce <writeValueToBytes>
 8003d00:	e068      	b.n	8003dd4 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d163      	bne.n	8003dd4 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8003d0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d10:	2204      	movs	r2, #4
 8003d12:	496a      	ldr	r1, [pc, #424]	; (8003ebc <dwTune+0x334>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fc5a 	bl	80025ce <writeValueToBytes>
 8003d1a:	e05b      	b.n	8003dd4 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_16)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d119      	bne.n	8003d5a <dwTune+0x1d2>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <dwTune+0x1b8>
        {
            writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 8003d30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d34:	2204      	movs	r2, #4
 8003d36:	4962      	ldr	r1, [pc, #392]	; (8003ec0 <dwTune+0x338>)
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fc48 	bl	80025ce <writeValueToBytes>
 8003d3e:	e049      	b.n	8003dd4 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d144      	bne.n	8003dd4 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8003d4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d4e:	2204      	movs	r2, #4
 8003d50:	495c      	ldr	r1, [pc, #368]	; (8003ec4 <dwTune+0x33c>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fc3b 	bl	80025ce <writeValueToBytes>
 8003d58:	e03c      	b.n	8003dd4 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_32)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d119      	bne.n	8003d98 <dwTune+0x210>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <dwTune+0x1f6>
        {
            writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 8003d6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d72:	2204      	movs	r2, #4
 8003d74:	4954      	ldr	r1, [pc, #336]	; (8003ec8 <dwTune+0x340>)
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fc29 	bl	80025ce <writeValueToBytes>
 8003d7c:	e02a      	b.n	8003dd4 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d125      	bne.n	8003dd4 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 8003d88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	494f      	ldr	r1, [pc, #316]	; (8003ecc <dwTune+0x344>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe fc1c 	bl	80025ce <writeValueToBytes>
 8003d96:	e01d      	b.n	8003dd4 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_64)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d118      	bne.n	8003dd4 <dwTune+0x24c>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <dwTune+0x234>
        {
            writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 8003dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003db0:	2204      	movs	r2, #4
 8003db2:	4947      	ldr	r1, [pc, #284]	; (8003ed0 <dwTune+0x348>)
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fc0a 	bl	80025ce <writeValueToBytes>
 8003dba:	e00b      	b.n	8003dd4 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d106      	bne.n	8003dd4 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 8003dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4941      	ldr	r1, [pc, #260]	; (8003ed4 <dwTune+0x34c>)
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fbfd 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE4H
    if (dev->preambleLength == TX_PREAMBLE_LEN_64)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <dwTune+0x266>
    {
        writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 8003dde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003de2:	2202      	movs	r2, #2
 8003de4:	2110      	movs	r1, #16
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fbf1 	bl	80025ce <writeValueToBytes>
 8003dec:	e006      	b.n	8003dfc <dwTune+0x274>
    }
    else
    {
        writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 8003dee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003df2:	2202      	movs	r2, #2
 8003df4:	2128      	movs	r1, #40	; 0x28
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fbe9 	bl	80025ce <writeValueToBytes>
    }
    // RF_RXCTRLH
    if (dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d00c      	beq.n	8003e20 <dwTune+0x298>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e0c:	2b07      	cmp	r3, #7
 8003e0e:	d007      	beq.n	8003e20 <dwTune+0x298>
    {
        writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 8003e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e14:	2201      	movs	r2, #1
 8003e16:	21d8      	movs	r1, #216	; 0xd8
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fbd8 	bl	80025ce <writeValueToBytes>
 8003e1e:	e006      	b.n	8003e2e <dwTune+0x2a6>
    }
    else
    {
        writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 8003e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e24:	2201      	movs	r2, #1
 8003e26:	21bc      	movs	r1, #188	; 0xbc
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe fbd0 	bl	80025ce <writeValueToBytes>
    }
    // RX_TXCTRL
    if (dev->channel == CHANNEL_1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d108      	bne.n	8003e4a <dwTune+0x2c2>
    {
        writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8003e38:	f107 0320 	add.w	r3, r7, #32
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	f645 4140 	movw	r1, #23616	; 0x5c40
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fbc3 	bl	80025ce <writeValueToBytes>
 8003e48:	e05a      	b.n	8003f00 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d107      	bne.n	8003e64 <dwTune+0x2dc>
    {
        writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8003e54:	f107 0320 	add.w	r3, r7, #32
 8003e58:	2204      	movs	r2, #4
 8003e5a:	491f      	ldr	r1, [pc, #124]	; (8003ed8 <dwTune+0x350>)
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fbb6 	bl	80025ce <writeValueToBytes>
 8003e62:	e04d      	b.n	8003f00 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_3)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <dwTune+0x2f6>
    {
        writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 8003e6e:	f107 0320 	add.w	r3, r7, #32
 8003e72:	2204      	movs	r2, #4
 8003e74:	4919      	ldr	r1, [pc, #100]	; (8003edc <dwTune+0x354>)
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fba9 	bl	80025ce <writeValueToBytes>
 8003e7c:	e040      	b.n	8003f00 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_4)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d107      	bne.n	8003e98 <dwTune+0x310>
    {
        writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 8003e88:	f107 0320 	add.w	r3, r7, #32
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	4914      	ldr	r1, [pc, #80]	; (8003ee0 <dwTune+0x358>)
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fb9c 	bl	80025ce <writeValueToBytes>
 8003e96:	e033      	b.n	8003f00 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_5)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d122      	bne.n	8003ee8 <dwTune+0x360>
    {
        writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 8003ea2:	f107 0320 	add.w	r3, r7, #32
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <dwTune+0x35c>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fb8f 	bl	80025ce <writeValueToBytes>
 8003eb0:	e026      	b.n	8003f00 <dwTune+0x378>
 8003eb2:	bf00      	nop
 8003eb4:	2502a907 	.word	0x2502a907
 8003eb8:	311a002d 	.word	0x311a002d
 8003ebc:	313b006b 	.word	0x313b006b
 8003ec0:	331a0052 	.word	0x331a0052
 8003ec4:	333b00be 	.word	0x333b00be
 8003ec8:	351a009a 	.word	0x351a009a
 8003ecc:	353b015e 	.word	0x353b015e
 8003ed0:	371a011d 	.word	0x371a011d
 8003ed4:	373b0296 	.word	0x373b0296
 8003ed8:	00045ca0 	.word	0x00045ca0
 8003edc:	00086cc0 	.word	0x00086cc0
 8003ee0:	00045c80 	.word	0x00045c80
 8003ee4:	001e3fe0 	.word	0x001e3fe0
    }
    else if (dev->channel == CHANNEL_7)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d106      	bne.n	8003f00 <dwTune+0x378>
    {
        writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 8003ef2:	f107 0320 	add.w	r3, r7, #32
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	49be      	ldr	r1, [pc, #760]	; (80041f4 <dwTune+0x66c>)
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fb67 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TC_PGDELAY
    if (dev->channel == CHANNEL_1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d107      	bne.n	8003f1a <dwTune+0x392>
    {
        writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8003f0a:	f107 031c 	add.w	r3, r7, #28
 8003f0e:	2201      	movs	r2, #1
 8003f10:	21c9      	movs	r1, #201	; 0xc9
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fb5b 	bl	80025ce <writeValueToBytes>
 8003f18:	e03f      	b.n	8003f9a <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d107      	bne.n	8003f34 <dwTune+0x3ac>
    {
        writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8003f24:	f107 031c 	add.w	r3, r7, #28
 8003f28:	2201      	movs	r2, #1
 8003f2a:	21c2      	movs	r1, #194	; 0xc2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fb4e 	bl	80025ce <writeValueToBytes>
 8003f32:	e032      	b.n	8003f9a <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_3)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d107      	bne.n	8003f4e <dwTune+0x3c6>
    {
        writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 8003f3e:	f107 031c 	add.w	r3, r7, #28
 8003f42:	2201      	movs	r2, #1
 8003f44:	21c5      	movs	r1, #197	; 0xc5
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fb41 	bl	80025ce <writeValueToBytes>
 8003f4c:	e025      	b.n	8003f9a <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_4)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d107      	bne.n	8003f68 <dwTune+0x3e0>
    {
        writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2195      	movs	r1, #149	; 0x95
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fb34 	bl	80025ce <writeValueToBytes>
 8003f66:	e018      	b.n	8003f9a <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_5)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d107      	bne.n	8003f82 <dwTune+0x3fa>
    {
        writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 8003f72:	f107 031c 	add.w	r3, r7, #28
 8003f76:	2201      	movs	r2, #1
 8003f78:	21c0      	movs	r1, #192	; 0xc0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fb27 	bl	80025ce <writeValueToBytes>
 8003f80:	e00b      	b.n	8003f9a <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_7)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d106      	bne.n	8003f9a <dwTune+0x412>
    {
        writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 8003f8c:	f107 031c 	add.w	r3, r7, #28
 8003f90:	2201      	movs	r2, #1
 8003f92:	2193      	movs	r1, #147	; 0x93
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fb1a 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // FS_PLLCFG and FS_PLLTUNE
    if (dev->channel == CHANNEL_1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10e      	bne.n	8003fc2 <dwTune+0x43a>
    {
        writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 8003fa4:	f107 0318 	add.w	r3, r7, #24
 8003fa8:	2204      	movs	r2, #4
 8003faa:	4993      	ldr	r1, [pc, #588]	; (80041f8 <dwTune+0x670>)
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe fb0e 	bl	80025ce <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 8003fb2:	f107 0314 	add.w	r3, r7, #20
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	211e      	movs	r1, #30
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fb07 	bl	80025ce <writeValueToBytes>
 8003fc0:	e044      	b.n	800404c <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d004      	beq.n	8003fd6 <dwTune+0x44e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d10e      	bne.n	8003ff4 <dwTune+0x46c>
    {
        writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8003fd6:	f107 0318 	add.w	r3, r7, #24
 8003fda:	2204      	movs	r2, #4
 8003fdc:	4987      	ldr	r1, [pc, #540]	; (80041fc <dwTune+0x674>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe faf5 	bl	80025ce <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2126      	movs	r1, #38	; 0x26
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe faee 	bl	80025ce <writeValueToBytes>
 8003ff2:	e02b      	b.n	800404c <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d10e      	bne.n	800401c <dwTune+0x494>
    {
        writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 8003ffe:	f107 0318 	add.w	r3, r7, #24
 8004002:	2204      	movs	r2, #4
 8004004:	497e      	ldr	r1, [pc, #504]	; (8004200 <dwTune+0x678>)
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fae1 	bl	80025ce <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	2201      	movs	r2, #1
 8004012:	2156      	movs	r1, #86	; 0x56
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fada 	bl	80025ce <writeValueToBytes>
 800401a:	e017      	b.n	800404c <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004022:	2b05      	cmp	r3, #5
 8004024:	d004      	beq.n	8004030 <dwTune+0x4a8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800402c:	2b07      	cmp	r3, #7
 800402e:	d10d      	bne.n	800404c <dwTune+0x4c4>
    {
        writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 8004030:	f107 0318 	add.w	r3, r7, #24
 8004034:	2204      	movs	r2, #4
 8004036:	4973      	ldr	r1, [pc, #460]	; (8004204 <dwTune+0x67c>)
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fac8 	bl	80025ce <writeValueToBytes>
        writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	2201      	movs	r2, #1
 8004044:	21a6      	movs	r1, #166	; 0xa6
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fac1 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_CFG1
    writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 800404c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004050:	2201      	movs	r2, #1
 8004052:	210d      	movs	r1, #13
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe faba 	bl	80025ce <writeValueToBytes>
    // LDE_CFG2
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004060:	2b01      	cmp	r3, #1
 8004062:	d108      	bne.n	8004076 <dwTune+0x4ee>
    {
        writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8004064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004068:	2202      	movs	r2, #2
 800406a:	f241 6107 	movw	r1, #5639	; 0x1607
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe faad 	bl	80025ce <writeValueToBytes>
 8004074:	e00c      	b.n	8004090 <dwTune+0x508>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800407c:	2b02      	cmp	r3, #2
 800407e:	d107      	bne.n	8004090 <dwTune+0x508>
    {
        writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 8004080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004084:	2202      	movs	r2, #2
 8004086:	f240 6107 	movw	r1, #1543	; 0x607
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fa9f 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_REPC
    if (dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004096:	2b01      	cmp	r3, #1
 8004098:	d004      	beq.n	80040a4 <dwTune+0x51c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d116      	bne.n	80040d2 <dwTune+0x54a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <dwTune+0x538>
        {
            writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80040ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b2:	2202      	movs	r2, #2
 80040b4:	f640 3133 	movw	r1, #2867	; 0xb33
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fa88 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80040be:	e154      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 80040c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c4:	2202      	movs	r2, #2
 80040c6:	f645 1198 	movw	r1, #22936	; 0x5998
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fa7f 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80040d0:	e14b      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d004      	beq.n	80040e6 <dwTune+0x55e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d116      	bne.n	8004114 <dwTune+0x58c>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d108      	bne.n	8004102 <dwTune+0x57a>
        {
            writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 80040f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f4:	2202      	movs	r2, #2
 80040f6:	f640 213d 	movw	r1, #2621	; 0xa3d
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fa67 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004100:	e133      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 8004102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004106:	2202      	movs	r2, #2
 8004108:	f245 11ea 	movw	r1, #20970	; 0x51ea
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe fa5e 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004112:	e12a      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_4)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800411a:	2b04      	cmp	r3, #4
 800411c:	d116      	bne.n	800414c <dwTune+0x5c4>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <dwTune+0x5b2>
        {
            writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800412c:	2202      	movs	r2, #2
 800412e:	f640 0151 	movw	r1, #2129	; 0x851
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fa4b 	bl	80025ce <writeValueToBytes>
 8004138:	e117      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 800413a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800413e:	2202      	movs	r2, #2
 8004140:	f244 218e 	movw	r1, #17038	; 0x428e
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fa42 	bl	80025ce <writeValueToBytes>
 800414a:	e10e      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_5)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004152:	2b05      	cmp	r3, #5
 8004154:	d116      	bne.n	8004184 <dwTune+0x5fc>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <dwTune+0x5ea>
        {
            writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004164:	2202      	movs	r2, #2
 8004166:	f640 01a3 	movw	r1, #2211	; 0x8a3
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fa2f 	bl	80025ce <writeValueToBytes>
 8004170:	e0fb      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 8004172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004176:	2202      	movs	r2, #2
 8004178:	f244 511e 	movw	r1, #17694	; 0x451e
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fa26 	bl	80025ce <writeValueToBytes>
 8004182:	e0f2      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_6)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418a:	2b06      	cmp	r3, #6
 800418c:	d116      	bne.n	80041bc <dwTune+0x634>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <dwTune+0x622>
        {
            writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800419c:	2202      	movs	r2, #2
 800419e:	f240 51c2 	movw	r1, #1474	; 0x5c2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fa13 	bl	80025ce <writeValueToBytes>
 80041a8:	e0df      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 80041aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ae:	2202      	movs	r2, #2
 80041b0:	f642 6114 	movw	r1, #11796	; 0x2e14
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fa0a 	bl	80025ce <writeValueToBytes>
 80041ba:	e0d6      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_7)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c2:	2b07      	cmp	r3, #7
 80041c4:	d120      	bne.n	8004208 <dwTune+0x680>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d108      	bne.n	80041e2 <dwTune+0x65a>
        {
            writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80041d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041d4:	2202      	movs	r2, #2
 80041d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe f9f7 	bl	80025ce <writeValueToBytes>
 80041e0:	e0c3      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 80041e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041e6:	2202      	movs	r2, #2
 80041e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe f9ee 	bl	80025ce <writeValueToBytes>
 80041f2:	e0ba      	b.n	800436a <dwTune+0x7e2>
 80041f4:	001e7de0 	.word	0x001e7de0
 80041f8:	09000407 	.word	0x09000407
 80041fc:	08400508 	.word	0x08400508
 8004200:	08401009 	.word	0x08401009
 8004204:	0800041d 	.word	0x0800041d
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_9)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800420e:	2b09      	cmp	r3, #9
 8004210:	d116      	bne.n	8004240 <dwTune+0x6b8>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004218:	2b00      	cmp	r3, #0
 800421a:	d108      	bne.n	800422e <dwTune+0x6a6>
        {
            writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800421c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004220:	2202      	movs	r2, #2
 8004222:	f240 511e 	movw	r1, #1310	; 0x51e
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe f9d1 	bl	80025ce <writeValueToBytes>
 800422c:	e09d      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 800422e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004232:	2202      	movs	r2, #2
 8004234:	f642 01f4 	movw	r1, #10484	; 0x28f4
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe f9c8 	bl	80025ce <writeValueToBytes>
 800423e:	e094      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004246:	2b0a      	cmp	r3, #10
 8004248:	d004      	beq.n	8004254 <dwTune+0x6cc>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004250:	2b11      	cmp	r3, #17
 8004252:	d116      	bne.n	8004282 <dwTune+0x6fa>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <dwTune+0x6e8>
        {
            writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800425e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004262:	2202      	movs	r2, #2
 8004264:	f240 6166 	movw	r1, #1638	; 0x666
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe f9b0 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 800426e:	e07c      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 8004270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004274:	2202      	movs	r2, #2
 8004276:	f243 3132 	movw	r1, #13106	; 0x3332
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe f9a7 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004280:	e073      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_11)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004288:	2b0b      	cmp	r3, #11
 800428a:	d116      	bne.n	80042ba <dwTune+0x732>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <dwTune+0x720>
        {
            writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800429a:	2202      	movs	r2, #2
 800429c:	f240 715c 	movw	r1, #1884	; 0x75c
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe f994 	bl	80025ce <writeValueToBytes>
 80042a6:	e060      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 80042a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ac:	2202      	movs	r2, #2
 80042ae:	f643 21e0 	movw	r1, #15072	; 0x3ae0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe f98b 	bl	80025ce <writeValueToBytes>
 80042b8:	e057      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_12)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d116      	bne.n	80042f2 <dwTune+0x76a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d108      	bne.n	80042e0 <dwTune+0x758>
        {
            writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80042ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042d2:	2202      	movs	r2, #2
 80042d4:	f240 71ae 	movw	r1, #1966	; 0x7ae
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe f978 	bl	80025ce <writeValueToBytes>
 80042de:	e044      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 80042e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e4:	2202      	movs	r2, #2
 80042e6:	f643 5170 	movw	r1, #15728	; 0x3d70
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe f96f 	bl	80025ce <writeValueToBytes>
 80042f0:	e03b      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d004      	beq.n	8004306 <dwTune+0x77e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004302:	2b13      	cmp	r3, #19
 8004304:	d116      	bne.n	8004334 <dwTune+0x7ac>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <dwTune+0x79a>
        {
            writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004314:	2202      	movs	r2, #2
 8004316:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f957 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004320:	e023      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 8004322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004326:	2202      	movs	r2, #2
 8004328:	f243 51c2 	movw	r1, #13762	; 0x35c2
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe f94e 	bl	80025ce <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004332:	e01a      	b.n	800436a <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_20)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433a:	2b14      	cmp	r3, #20
 800433c:	d115      	bne.n	800436a <dwTune+0x7e2>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <dwTune+0x7d2>
        {
            writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800434c:	2202      	movs	r2, #2
 800434e:	f640 01f5 	movw	r1, #2293	; 0x8f5
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe f93b 	bl	80025ce <writeValueToBytes>
 8004358:	e007      	b.n	800436a <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 800435a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800435e:	2202      	movs	r2, #2
 8004360:	f244 71ae 	movw	r1, #18350	; 0x47ae
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe f932 	bl	80025ce <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TX_POWER (enabled smart transmit power control)
    if (dev->forceTxPower)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <dwTune+0x800>
    {
        writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	4619      	mov	r1, r3
 800437a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800437e:	2204      	movs	r2, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe f924 	bl	80025ce <writeValueToBytes>
 8004386:	e12f      	b.n	80045e8 <dwTune+0xa60>
    }
    else if (dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800438e:	2b01      	cmp	r3, #1
 8004390:	d004      	beq.n	800439c <dwTune+0x814>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004398:	2b02      	cmp	r3, #2
 800439a:	d136      	bne.n	800440a <dwTune+0x882>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d115      	bne.n	80043d2 <dwTune+0x84a>
        {
            if (dev->smartPower)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <dwTune+0x838>
            {
                writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 80043b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043b4:	2204      	movs	r2, #4
 80043b6:	4995      	ldr	r1, [pc, #596]	; (800460c <dwTune+0xa84>)
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe f908 	bl	80025ce <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80043be:	e112      	b.n	80045e6 <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 80043c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043c4:	2204      	movs	r2, #4
 80043c6:	f04f 3175 	mov.w	r1, #1970632053	; 0x75757575
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe f8ff 	bl	80025ce <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80043d0:	e109      	b.n	80045e6 <dwTune+0xa5e>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043d8:	2b02      	cmp	r3, #2
 80043da:	f040 8104 	bne.w	80045e6 <dwTune+0xa5e>
        {
            if (dev->smartPower)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <dwTune+0x870>
            {
                writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 80043e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ec:	2204      	movs	r2, #4
 80043ee:	4988      	ldr	r1, [pc, #544]	; (8004610 <dwTune+0xa88>)
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe f8ec 	bl	80025ce <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80043f6:	e0f6      	b.n	80045e6 <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 80043f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043fc:	2204      	movs	r2, #4
 80043fe:	f04f 3167 	mov.w	r1, #1734829927	; 0x67676767
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe f8e3 	bl	80025ce <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004408:	e0ed      	b.n	80045e6 <dwTune+0xa5e>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_3)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004410:	2b03      	cmp	r3, #3
 8004412:	d136      	bne.n	8004482 <dwTune+0x8fa>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800441a:	2b01      	cmp	r3, #1
 800441c:	d115      	bne.n	800444a <dwTune+0x8c2>
        {
            if (dev->smartPower)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <dwTune+0x8b0>
            {
                writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8004428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800442c:	2204      	movs	r2, #4
 800442e:	4979      	ldr	r1, [pc, #484]	; (8004614 <dwTune+0xa8c>)
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe f8cc 	bl	80025ce <writeValueToBytes>
 8004436:	e0d7      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8004438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800443c:	2204      	movs	r2, #4
 800443e:	f04f 316f 	mov.w	r1, #1869573999	; 0x6f6f6f6f
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f8c3 	bl	80025ce <writeValueToBytes>
 8004448:	e0ce      	b.n	80045e8 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004450:	2b02      	cmp	r3, #2
 8004452:	f040 80c9 	bne.w	80045e8 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <dwTune+0x8e8>
            {
                writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8004460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004464:	2204      	movs	r2, #4
 8004466:	496c      	ldr	r1, [pc, #432]	; (8004618 <dwTune+0xa90>)
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe f8b0 	bl	80025ce <writeValueToBytes>
 800446e:	e0bb      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8004470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004474:	2204      	movs	r2, #4
 8004476:	f04f 318b 	mov.w	r1, #2341178251	; 0x8b8b8b8b
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe f8a7 	bl	80025ce <writeValueToBytes>
 8004480:	e0b2      	b.n	80045e8 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_4)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004488:	2b04      	cmp	r3, #4
 800448a:	d136      	bne.n	80044fa <dwTune+0x972>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004492:	2b01      	cmp	r3, #1
 8004494:	d115      	bne.n	80044c2 <dwTune+0x93a>
        {
            if (dev->smartPower)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <dwTune+0x928>
            {
                writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 80044a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a4:	2204      	movs	r2, #4
 80044a6:	495d      	ldr	r1, [pc, #372]	; (800461c <dwTune+0xa94>)
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe f890 	bl	80025ce <writeValueToBytes>
 80044ae:	e09b      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 80044b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044b4:	2204      	movs	r2, #4
 80044b6:	f04f 315f 	mov.w	r1, #1600085855	; 0x5f5f5f5f
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe f887 	bl	80025ce <writeValueToBytes>
 80044c0:	e092      	b.n	80045e8 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f040 808d 	bne.w	80045e8 <dwTune+0xa60>
        {
            if (dev->smartPower)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <dwTune+0x960>
            {
                writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 80044d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044dc:	2204      	movs	r2, #4
 80044de:	4950      	ldr	r1, [pc, #320]	; (8004620 <dwTune+0xa98>)
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe f874 	bl	80025ce <writeValueToBytes>
 80044e6:	e07f      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 80044e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ec:	2204      	movs	r2, #4
 80044ee:	f04f 319a 	mov.w	r1, #2593823386	; 0x9a9a9a9a
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe f86b 	bl	80025ce <writeValueToBytes>
 80044f8:	e076      	b.n	80045e8 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_5)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004500:	2b05      	cmp	r3, #5
 8004502:	d135      	bne.n	8004570 <dwTune+0x9e8>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800450a:	2b01      	cmp	r3, #1
 800450c:	d115      	bne.n	800453a <dwTune+0x9b2>
        {
            if (dev->smartPower)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <dwTune+0x9a0>
            {
                writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8004518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800451c:	2204      	movs	r2, #4
 800451e:	4941      	ldr	r1, [pc, #260]	; (8004624 <dwTune+0xa9c>)
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe f854 	bl	80025ce <writeValueToBytes>
 8004526:	e05f      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8004528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800452c:	2204      	movs	r2, #4
 800452e:	f04f 3148 	mov.w	r1, #1212696648	; 0x48484848
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe f84b 	bl	80025ce <writeValueToBytes>
 8004538:	e056      	b.n	80045e8 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004540:	2b02      	cmp	r3, #2
 8004542:	d151      	bne.n	80045e8 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <dwTune+0x9d6>
            {
                writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 800454e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004552:	2204      	movs	r2, #4
 8004554:	4934      	ldr	r1, [pc, #208]	; (8004628 <dwTune+0xaa0>)
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe f839 	bl	80025ce <writeValueToBytes>
 800455c:	e044      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 800455e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004562:	2204      	movs	r2, #4
 8004564:	f04f 3185 	mov.w	r1, #2240120197	; 0x85858585
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe f830 	bl	80025ce <writeValueToBytes>
 800456e:	e03b      	b.n	80045e8 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_7)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004576:	2b07      	cmp	r3, #7
 8004578:	d136      	bne.n	80045e8 <dwTune+0xa60>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004580:	2b01      	cmp	r3, #1
 8004582:	d115      	bne.n	80045b0 <dwTune+0xa28>
        {
            if (dev->smartPower)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <dwTune+0xa16>
            {
                writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 800458e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004592:	2204      	movs	r2, #4
 8004594:	4925      	ldr	r1, [pc, #148]	; (800462c <dwTune+0xaa4>)
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe f819 	bl	80025ce <writeValueToBytes>
 800459c:	e024      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 800459e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045a2:	2204      	movs	r2, #4
 80045a4:	f04f 3192 	mov.w	r1, #2459079314	; 0x92929292
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe f810 	bl	80025ce <writeValueToBytes>
 80045ae:	e01b      	b.n	80045e8 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d116      	bne.n	80045e8 <dwTune+0xa60>
        {
            if (dev->smartPower)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <dwTune+0xa4c>
            {
                writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 80045c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045c8:	2204      	movs	r2, #4
 80045ca:	4919      	ldr	r1, [pc, #100]	; (8004630 <dwTune+0xaa8>)
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fd fffe 	bl	80025ce <writeValueToBytes>
 80045d2:	e009      	b.n	80045e8 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 80045d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045d8:	2204      	movs	r2, #4
 80045da:	f04f 31d1 	mov.w	r1, #3520188881	; 0xd1d1d1d1
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd fff5 	bl	80025ce <writeValueToBytes>
 80045e4:	e000      	b.n	80045e8 <dwTune+0xa60>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80045e6:	bf00      	nop
    {
        // TODO proper error/warning handling
    }
    // Crystal calibration from OTP (if available)
    uint8_t buf_otp[4];
    readBytesOTP(dev, 0x01E, buf_otp);
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	461a      	mov	r2, r3
 80045ee:	211e      	movs	r1, #30
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fe f80c 	bl	800260e <readBytesOTP>
    if (buf_otp[0] == 0)
 80045f6:	7b3b      	ldrb	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11b      	bne.n	8004634 <dwTune+0xaac>
    {
        // No trim value available from OTP, use midrange value of 0x10
        writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	2201      	movs	r2, #1
 8004602:	2170      	movs	r1, #112	; 0x70
 8004604:	4618      	mov	r0, r3
 8004606:	f7fd ffe2 	bl	80025ce <writeValueToBytes>
 800460a:	e01e      	b.n	800464a <dwTune+0xac2>
 800460c:	15355575 	.word	0x15355575
 8004610:	07274767 	.word	0x07274767
 8004614:	0f2f4f6f 	.word	0x0f2f4f6f
 8004618:	2b4b6b8b 	.word	0x2b4b6b8b
 800461c:	1f1f3f5f 	.word	0x1f1f3f5f
 8004620:	3a5a7a9a 	.word	0x3a5a7a9a
 8004624:	0e082848 	.word	0x0e082848
 8004628:	25456585 	.word	0x25456585
 800462c:	32527292 	.word	0x32527292
 8004630:	5171b1d1 	.word	0x5171b1d1
    }
    else
    {
        writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8004634:	7b3b      	ldrb	r3, [r7, #12]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	f043 0160 	orr.w	r1, r3, #96	; 0x60
 800463e:	f107 0310 	add.w	r3, r7, #16
 8004642:	2201      	movs	r2, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f7fd ffc2 	bl	80025ce <writeValueToBytes>
    }
    // write configuration back to chip
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 800464a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800464e:	2202      	movs	r2, #2
 8004650:	9200      	str	r2, [sp, #0]
 8004652:	2204      	movs	r2, #4
 8004654:	2123      	movs	r1, #35	; 0x23
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f9b4 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 800465c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004660:	2204      	movs	r2, #4
 8004662:	9200      	str	r2, [sp, #0]
 8004664:	220c      	movs	r2, #12
 8004666:	2123      	movs	r1, #35	; 0x23
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f9ab 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 800466e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004672:	2202      	movs	r2, #2
 8004674:	9200      	str	r2, [sp, #0]
 8004676:	2212      	movs	r2, #18
 8004678:	2123      	movs	r1, #35	; 0x23
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f9a2 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8004680:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004684:	2202      	movs	r2, #2
 8004686:	9200      	str	r2, [sp, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	2127      	movs	r1, #39	; 0x27
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f999 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8004692:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004696:	2202      	movs	r2, #2
 8004698:	9200      	str	r2, [sp, #0]
 800469a:	2204      	movs	r2, #4
 800469c:	2127      	movs	r1, #39	; 0x27
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f990 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 80046a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046a8:	2202      	movs	r2, #2
 80046aa:	9200      	str	r2, [sp, #0]
 80046ac:	2206      	movs	r2, #6
 80046ae:	2127      	movs	r1, #39	; 0x27
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f987 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 80046b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046ba:	2204      	movs	r2, #4
 80046bc:	9200      	str	r2, [sp, #0]
 80046be:	2208      	movs	r2, #8
 80046c0:	2127      	movs	r1, #39	; 0x27
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f97e 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 80046c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046cc:	2202      	movs	r2, #2
 80046ce:	9200      	str	r2, [sp, #0]
 80046d0:	2226      	movs	r2, #38	; 0x26
 80046d2:	2127      	movs	r1, #39	; 0x27
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f975 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 80046da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046de:	2201      	movs	r2, #1
 80046e0:	9200      	str	r2, [sp, #0]
 80046e2:	f640 0206 	movw	r2, #2054	; 0x806
 80046e6:	212e      	movs	r1, #46	; 0x2e
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f96b 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 80046ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046f2:	2202      	movs	r2, #2
 80046f4:	9200      	str	r2, [sp, #0]
 80046f6:	f641 0206 	movw	r2, #6150	; 0x1806
 80046fa:	212e      	movs	r1, #46	; 0x2e
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f961 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8004702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004706:	2202      	movs	r2, #2
 8004708:	9200      	str	r2, [sp, #0]
 800470a:	f642 0204 	movw	r2, #10244	; 0x2804
 800470e:	212e      	movs	r1, #46	; 0x2e
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f957 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8004716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471a:	2204      	movs	r2, #4
 800471c:	9200      	str	r2, [sp, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	211e      	movs	r1, #30
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f94e 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8004728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800472c:	2201      	movs	r2, #1
 800472e:	9200      	str	r2, [sp, #0]
 8004730:	220b      	movs	r2, #11
 8004732:	2128      	movs	r1, #40	; 0x28
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f945 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 800473a:	f107 0320 	add.w	r3, r7, #32
 800473e:	2204      	movs	r2, #4
 8004740:	9200      	str	r2, [sp, #0]
 8004742:	220c      	movs	r2, #12
 8004744:	2128      	movs	r1, #40	; 0x28
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f93c 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 800474c:	f107 031c 	add.w	r3, r7, #28
 8004750:	2201      	movs	r2, #1
 8004752:	9200      	str	r2, [sp, #0]
 8004754:	220b      	movs	r2, #11
 8004756:	212a      	movs	r1, #42	; 0x2a
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f933 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	2201      	movs	r2, #1
 8004764:	9200      	str	r2, [sp, #0]
 8004766:	220b      	movs	r2, #11
 8004768:	212b      	movs	r1, #43	; 0x2b
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f92a 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8004770:	f107 0318 	add.w	r3, r7, #24
 8004774:	2204      	movs	r2, #4
 8004776:	9200      	str	r2, [sp, #0]
 8004778:	2207      	movs	r2, #7
 800477a:	212b      	movs	r1, #43	; 0x2b
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f921 	bl	80049c4 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	2201      	movs	r2, #1
 8004788:	9200      	str	r2, [sp, #0]
 800478a:	220e      	movs	r2, #14
 800478c:	212b      	movs	r1, #43	; 0x2b
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f918 	bl	80049c4 <dwSpiWrite>
}
 8004794:	bf00      	nop
 8004796:	3758      	adds	r7, #88	; 0x58
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <spiWrite>:

uint16_t buffer[64];

static void spiWrite(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                     const void *data, size_t dataLength)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80047aa:	2200      	movs	r2, #0
 80047ac:	2110      	movs	r1, #16
 80047ae:	4813      	ldr	r0, [pc, #76]	; (80047fc <spiWrite+0x60>)
 80047b0:	f000 fd40 	bl	8005234 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	4811      	ldr	r0, [pc, #68]	; (8004800 <spiWrite+0x64>)
 80047ba:	f003 fa53 	bl	8007c64 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	490e      	ldr	r1, [pc, #56]	; (8004800 <spiWrite+0x64>)
 80047c8:	480e      	ldr	r0, [pc, #56]	; (8004804 <spiWrite+0x68>)
 80047ca:	f001 fa31 	bl	8005c30 <HAL_SPI_Transmit>
    memcpy(buffer, data, dataLength);
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	480b      	ldr	r0, [pc, #44]	; (8004800 <spiWrite+0x64>)
 80047d4:	f003 fa46 	bl	8007c64 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <spiWrite+0x64>)
 80047e2:	4808      	ldr	r0, [pc, #32]	; (8004804 <spiWrite+0x68>)
 80047e4:	f001 fa24 	bl	8005c30 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80047e8:	2201      	movs	r2, #1
 80047ea:	2110      	movs	r1, #16
 80047ec:	4803      	ldr	r0, [pc, #12]	; (80047fc <spiWrite+0x60>)
 80047ee:	f000 fd21 	bl	8005234 <HAL_GPIO_WritePin>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40010800 	.word	0x40010800
 8004800:	200004fc 	.word	0x200004fc
 8004804:	20000410 	.word	0x20000410

08004808 <spiRead>:

static void spiRead(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                    void *data, size_t dataLength)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2110      	movs	r1, #16
 800481a:	4813      	ldr	r0, [pc, #76]	; (8004868 <spiRead+0x60>)
 800481c:	f000 fd0a 	bl	8005234 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4811      	ldr	r0, [pc, #68]	; (800486c <spiRead+0x64>)
 8004826:	f003 fa1d 	bl	8007c64 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	b29a      	uxth	r2, r3
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
 8004832:	490e      	ldr	r1, [pc, #56]	; (800486c <spiRead+0x64>)
 8004834:	480e      	ldr	r0, [pc, #56]	; (8004870 <spiRead+0x68>)
 8004836:	f001 f9fb 	bl	8005c30 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	b29a      	uxth	r2, r3
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <spiRead+0x64>)
 8004844:	480a      	ldr	r0, [pc, #40]	; (8004870 <spiRead+0x68>)
 8004846:	f001 fb36 	bl	8005eb6 <HAL_SPI_Receive>
    memcpy(data, buffer, dataLength);
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4907      	ldr	r1, [pc, #28]	; (800486c <spiRead+0x64>)
 800484e:	6838      	ldr	r0, [r7, #0]
 8004850:	f003 fa08 	bl	8007c64 <memcpy>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8004854:	2201      	movs	r2, #1
 8004856:	2110      	movs	r1, #16
 8004858:	4803      	ldr	r0, [pc, #12]	; (8004868 <spiRead+0x60>)
 800485a:	f000 fceb 	bl	8005234 <HAL_GPIO_WritePin>
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40010800 	.word	0x40010800
 800486c:	200004fc 	.word	0x200004fc
 8004870:	20000410 	.word	0x20000410

08004874 <spiSetSpeed>:

static void spiSetSpeed(dwDeviceTypes_t *dev, dwSpiSpeed_t speed)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
    if (speed == dwSpiSpeedLow)
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <spiSetSpeed+0x20>
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <spiSetSpeed+0x34>)
 8004888:	2220      	movs	r2, #32
 800488a:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 800488c:	4806      	ldr	r0, [pc, #24]	; (80048a8 <spiSetSpeed+0x34>)
 800488e:	f001 f94b 	bl	8005b28 <HAL_SPI_Init>
    else
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
        HAL_SPI_Init(&hspi1);
    }
}
 8004892:	e005      	b.n	80048a0 <spiSetSpeed+0x2c>
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <spiSetSpeed+0x34>)
 8004896:	2208      	movs	r2, #8
 8004898:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 800489a:	4803      	ldr	r0, [pc, #12]	; (80048a8 <spiSetSpeed+0x34>)
 800489c:	f001 f944 	bl	8005b28 <HAL_SPI_Init>
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000410 	.word	0x20000410

080048ac <reset>:

static void reset(dwDeviceTypes_t *dev)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80048b4:	2200      	movs	r2, #0
 80048b6:	2102      	movs	r1, #2
 80048b8:	4807      	ldr	r0, [pc, #28]	; (80048d8 <reset+0x2c>)
 80048ba:	f000 fcbb 	bl	8005234 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80048be:	200a      	movs	r0, #10
 80048c0:	f000 f950 	bl	8004b64 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80048c4:	2201      	movs	r2, #1
 80048c6:	2102      	movs	r1, #2
 80048c8:	4803      	ldr	r0, [pc, #12]	; (80048d8 <reset+0x2c>)
 80048ca:	f000 fcb3 	bl	8005234 <HAL_GPIO_WritePin>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40010c00 	.word	0x40010c00

080048dc <delayms>:
    HAL_Delay(2);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
}

static void delayms(dwDeviceTypes_t *dev, unsigned int delay)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
    HAL_Delay(delay);
 80048e6:	6838      	ldr	r0, [r7, #0]
 80048e8:	f000 f93c 	bl	8004b64 <HAL_Delay>
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <dwSpiRead>:
#include "dw_spi.h"

void dwSpiRead(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, void *data, size_t length)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	460b      	mov	r3, r1
 8004902:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 8004908:	7afb      	ldrb	r3, [r7, #11]
 800490a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490e:	b2db      	uxtb	r3, r3
 8004910:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01c      	beq.n	8004952 <dwSpiRead+0x5e>
    {
        header[0] |= 0x40;
 8004918:	7c3b      	ldrb	r3, [r7, #16]
 800491a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491e:	b2db      	uxtb	r3, r3
 8004920:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492a:	b2db      	uxtb	r3, r3
 800492c:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	09db      	lsrs	r3, r3, #7
 8004932:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 8004934:	2302      	movs	r3, #2
 8004936:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <dwSpiRead+0x5e>
        {
            header[1] |= 0x80;
 800493e:	7c7b      	ldrb	r3, [r7, #17]
 8004940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004944:	b2db      	uxtb	r3, r3
 8004946:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 800494e:	2303      	movs	r3, #3
 8004950:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiRead(dev, header, headerLength, data, length);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681c      	ldr	r4, [r3, #0]
 8004958:	f107 0110 	add.w	r1, r7, #16
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	47a0      	blx	r4
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd90      	pop	{r4, r7, pc}

08004970 <dwSpiRead16>:

uint16_t dwSpiRead16(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	460b      	mov	r3, r1
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	72fb      	strb	r3, [r7, #11]
    uint16_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 800497e:	f107 0316 	add.w	r3, r7, #22
 8004982:	7af9      	ldrb	r1, [r7, #11]
 8004984:	2202      	movs	r2, #2
 8004986:	9200      	str	r2, [sp, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff ffb2 	bl	80048f4 <dwSpiRead>
    return data;
 8004990:	8afb      	ldrh	r3, [r7, #22]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <dwSpiRead32>:

uint32_t dwSpiRead32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b088      	sub	sp, #32
 800499e:	af02      	add	r7, sp, #8
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	460b      	mov	r3, r1
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	72fb      	strb	r3, [r7, #11]
    uint32_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	7af9      	ldrb	r1, [r7, #11]
 80049ae:	2204      	movs	r2, #4
 80049b0:	9200      	str	r2, [sp, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff9d 	bl	80048f4 <dwSpiRead>
    return data;
 80049ba:	697b      	ldr	r3, [r7, #20]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <dwSpiWrite>:

void dwSpiWrite(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, const void *data, size_t length)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	460b      	mov	r3, r1
 80049d2:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 80049d4:	2301      	movs	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 80049d8:	7afb      	ldrb	r3, [r7, #11]
 80049da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	743b      	strb	r3, [r7, #16]
    header[0] |= 0x80;
 80049e2:	7c3b      	ldrb	r3, [r7, #16]
 80049e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01c      	beq.n	8004a2c <dwSpiWrite+0x68>
    {
        header[0] |= 0x40;
 80049f2:	7c3b      	ldrb	r3, [r7, #16]
 80049f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	09db      	lsrs	r3, r3, #7
 8004a0c:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <dwSpiWrite+0x68>
        {
            header[1] |= 0x80;
 8004a18:	7c7b      	ldrb	r3, [r7, #17]
 8004a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiWrite(dev, header, headerLength, data, length);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685c      	ldr	r4, [r3, #4]
 8004a32:	f107 0110 	add.w	r1, r7, #16
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	47a0      	blx	r4
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd90      	pop	{r4, r7, pc}

08004a4a <dwSpiWrite8>:

void dwSpiWrite8(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint8_t data)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af02      	add	r7, sp, #8
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	461a      	mov	r2, r3
 8004a56:	460b      	mov	r3, r1
 8004a58:	72fb      	strb	r3, [r7, #11]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	72bb      	strb	r3, [r7, #10]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8004a5e:	f107 030a 	add.w	r3, r7, #10
 8004a62:	7af9      	ldrb	r1, [r7, #11]
 8004a64:	2201      	movs	r2, #1
 8004a66:	9200      	str	r2, [sp, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff ffaa 	bl	80049c4 <dwSpiWrite>
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <dwSpiWrite32>:

void dwSpiWrite32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint32_t data)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	460b      	mov	r3, r1
 8004a86:	72fb      	strb	r3, [r7, #11]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8004a88:	463b      	mov	r3, r7
 8004a8a:	7af9      	ldrb	r1, [r7, #11]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	9200      	str	r2, [sp, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff ff96 	bl	80049c4 <dwSpiWrite>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_Init+0x28>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <HAL_Init+0x28>)
 8004aaa:	f043 0310 	orr.w	r3, r3, #16
 8004aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ab0:	2003      	movs	r0, #3
 8004ab2:	f000 f947 	bl	8004d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ab6:	200f      	movs	r0, #15
 8004ab8:	f000 f808 	bl	8004acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004abc:	f7fd faca 	bl	8002054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40022000 	.word	0x40022000

08004acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ad4:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <HAL_InitTick+0x54>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_InitTick+0x58>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	4619      	mov	r1, r3
 8004ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f95f 	bl	8004dae <HAL_SYSTICK_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e00e      	b.n	8004b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b0f      	cmp	r3, #15
 8004afe:	d80a      	bhi.n	8004b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b00:	2200      	movs	r2, #0
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	f000 f927 	bl	8004d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b0c:	4a06      	ldr	r2, [pc, #24]	; (8004b28 <HAL_InitTick+0x5c>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000074 	.word	0x20000074
 8004b24:	20000090 	.word	0x20000090
 8004b28:	2000008c 	.word	0x2000008c

08004b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_IncTick+0x1c>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_IncTick+0x20>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	4a03      	ldr	r2, [pc, #12]	; (8004b4c <HAL_IncTick+0x20>)
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	20000090 	.word	0x20000090
 8004b4c:	2000057c 	.word	0x2000057c

08004b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return uwTick;
 8004b54:	4b02      	ldr	r3, [pc, #8]	; (8004b60 <HAL_GetTick+0x10>)
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	2000057c 	.word	0x2000057c

08004b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7ff fff0 	bl	8004b50 <HAL_GetTick>
 8004b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d005      	beq.n	8004b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_Delay+0x44>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b8a:	bf00      	nop
 8004b8c:	f7ff ffe0 	bl	8004b50 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d8f7      	bhi.n	8004b8c <HAL_Delay+0x28>
  {
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000090 	.word	0x20000090

08004bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bde:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	60d3      	str	r3, [r2, #12]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <__NVIC_GetPriorityGrouping+0x18>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	f003 0307 	and.w	r3, r3, #7
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	db0b      	blt.n	8004c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	4906      	ldr	r1, [pc, #24]	; (8004c44 <__NVIC_EnableIRQ+0x34>)
 8004c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2001      	movs	r0, #1
 8004c32:	fa00 f202 	lsl.w	r2, r0, r2
 8004c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100

08004c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	6039      	str	r1, [r7, #0]
 8004c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db0a      	blt.n	8004c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	490c      	ldr	r1, [pc, #48]	; (8004c94 <__NVIC_SetPriority+0x4c>)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c70:	e00a      	b.n	8004c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	4908      	ldr	r1, [pc, #32]	; (8004c98 <__NVIC_SetPriority+0x50>)
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	0112      	lsls	r2, r2, #4
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	440b      	add	r3, r1
 8004c86:	761a      	strb	r2, [r3, #24]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000e100 	.word	0xe000e100
 8004c98:	e000ed00 	.word	0xe000ed00

08004c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	; 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f1c3 0307 	rsb	r3, r3, #7
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	bf28      	it	cs
 8004cba:	2304      	movcs	r3, #4
 8004cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d902      	bls.n	8004ccc <NVIC_EncodePriority+0x30>
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3b03      	subs	r3, #3
 8004cca:	e000      	b.n	8004cce <NVIC_EncodePriority+0x32>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	401a      	ands	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	43d9      	mvns	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf4:	4313      	orrs	r3, r2
         );
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3724      	adds	r7, #36	; 0x24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d10:	d301      	bcc.n	8004d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00f      	b.n	8004d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <SysTick_Config+0x40>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d1e:	210f      	movs	r1, #15
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	f7ff ff90 	bl	8004c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <SysTick_Config+0x40>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d2e:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <SysTick_Config+0x40>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	e000e010 	.word	0xe000e010

08004d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff2d 	bl	8004bac <__NVIC_SetPriorityGrouping>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d6c:	f7ff ff42 	bl	8004bf4 <__NVIC_GetPriorityGrouping>
 8004d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	6978      	ldr	r0, [r7, #20]
 8004d78:	f7ff ff90 	bl	8004c9c <NVIC_EncodePriority>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff5f 	bl	8004c48 <__NVIC_SetPriority>
}
 8004d8a:	bf00      	nop
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	4603      	mov	r3, r0
 8004d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff35 	bl	8004c10 <__NVIC_EnableIRQ>
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ffa2 	bl	8004d00 <SysTick_Config>
 8004dbc:	4603      	mov	r3, r0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d008      	beq.n	8004df0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2204      	movs	r2, #4
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e020      	b.n	8004e32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 020e 	bic.w	r2, r2, #14
 8004dfe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	2101      	movs	r1, #1
 8004e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d005      	beq.n	8004e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	e051      	b.n	8004f04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 020e 	bic.w	r2, r2, #14
 8004e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <HAL_DMA_Abort_IT+0xd4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d029      	beq.n	8004ede <HAL_DMA_Abort_IT+0xa2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <HAL_DMA_Abort_IT+0xd8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMA_Abort_IT+0x9e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <HAL_DMA_Abort_IT+0xdc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01a      	beq.n	8004ed4 <HAL_DMA_Abort_IT+0x98>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <HAL_DMA_Abort_IT+0xe0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d012      	beq.n	8004ece <HAL_DMA_Abort_IT+0x92>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <HAL_DMA_Abort_IT+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_DMA_Abort_IT+0x8c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <HAL_DMA_Abort_IT+0xe8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d102      	bne.n	8004ec2 <HAL_DMA_Abort_IT+0x86>
 8004ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ec0:	e00e      	b.n	8004ee0 <HAL_DMA_Abort_IT+0xa4>
 8004ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ec6:	e00b      	b.n	8004ee0 <HAL_DMA_Abort_IT+0xa4>
 8004ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ecc:	e008      	b.n	8004ee0 <HAL_DMA_Abort_IT+0xa4>
 8004ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed2:	e005      	b.n	8004ee0 <HAL_DMA_Abort_IT+0xa4>
 8004ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ed8:	e002      	b.n	8004ee0 <HAL_DMA_Abort_IT+0xa4>
 8004eda:	2310      	movs	r3, #16
 8004edc:	e000      	b.n	8004ee0 <HAL_DMA_Abort_IT+0xa4>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <HAL_DMA_Abort_IT+0xec>)
 8004ee2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
    } 
  }
  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40020008 	.word	0x40020008
 8004f14:	4002001c 	.word	0x4002001c
 8004f18:	40020030 	.word	0x40020030
 8004f1c:	40020044 	.word	0x40020044
 8004f20:	40020058 	.word	0x40020058
 8004f24:	4002006c 	.word	0x4002006c
 8004f28:	40020000 	.word	0x40020000

08004f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b08b      	sub	sp, #44	; 0x2c
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f36:	2300      	movs	r3, #0
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f3e:	e169      	b.n	8005214 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004f40:	2201      	movs	r2, #1
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	f040 8158 	bne.w	800520e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4a9a      	ldr	r2, [pc, #616]	; (80051cc <HAL_GPIO_Init+0x2a0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d05e      	beq.n	8005026 <HAL_GPIO_Init+0xfa>
 8004f68:	4a98      	ldr	r2, [pc, #608]	; (80051cc <HAL_GPIO_Init+0x2a0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d875      	bhi.n	800505a <HAL_GPIO_Init+0x12e>
 8004f6e:	4a98      	ldr	r2, [pc, #608]	; (80051d0 <HAL_GPIO_Init+0x2a4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d058      	beq.n	8005026 <HAL_GPIO_Init+0xfa>
 8004f74:	4a96      	ldr	r2, [pc, #600]	; (80051d0 <HAL_GPIO_Init+0x2a4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d86f      	bhi.n	800505a <HAL_GPIO_Init+0x12e>
 8004f7a:	4a96      	ldr	r2, [pc, #600]	; (80051d4 <HAL_GPIO_Init+0x2a8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d052      	beq.n	8005026 <HAL_GPIO_Init+0xfa>
 8004f80:	4a94      	ldr	r2, [pc, #592]	; (80051d4 <HAL_GPIO_Init+0x2a8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d869      	bhi.n	800505a <HAL_GPIO_Init+0x12e>
 8004f86:	4a94      	ldr	r2, [pc, #592]	; (80051d8 <HAL_GPIO_Init+0x2ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d04c      	beq.n	8005026 <HAL_GPIO_Init+0xfa>
 8004f8c:	4a92      	ldr	r2, [pc, #584]	; (80051d8 <HAL_GPIO_Init+0x2ac>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d863      	bhi.n	800505a <HAL_GPIO_Init+0x12e>
 8004f92:	4a92      	ldr	r2, [pc, #584]	; (80051dc <HAL_GPIO_Init+0x2b0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d046      	beq.n	8005026 <HAL_GPIO_Init+0xfa>
 8004f98:	4a90      	ldr	r2, [pc, #576]	; (80051dc <HAL_GPIO_Init+0x2b0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d85d      	bhi.n	800505a <HAL_GPIO_Init+0x12e>
 8004f9e:	2b12      	cmp	r3, #18
 8004fa0:	d82a      	bhi.n	8004ff8 <HAL_GPIO_Init+0xcc>
 8004fa2:	2b12      	cmp	r3, #18
 8004fa4:	d859      	bhi.n	800505a <HAL_GPIO_Init+0x12e>
 8004fa6:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <HAL_GPIO_Init+0x80>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08005027 	.word	0x08005027
 8004fb0:	08005001 	.word	0x08005001
 8004fb4:	08005013 	.word	0x08005013
 8004fb8:	08005055 	.word	0x08005055
 8004fbc:	0800505b 	.word	0x0800505b
 8004fc0:	0800505b 	.word	0x0800505b
 8004fc4:	0800505b 	.word	0x0800505b
 8004fc8:	0800505b 	.word	0x0800505b
 8004fcc:	0800505b 	.word	0x0800505b
 8004fd0:	0800505b 	.word	0x0800505b
 8004fd4:	0800505b 	.word	0x0800505b
 8004fd8:	0800505b 	.word	0x0800505b
 8004fdc:	0800505b 	.word	0x0800505b
 8004fe0:	0800505b 	.word	0x0800505b
 8004fe4:	0800505b 	.word	0x0800505b
 8004fe8:	0800505b 	.word	0x0800505b
 8004fec:	0800505b 	.word	0x0800505b
 8004ff0:	08005009 	.word	0x08005009
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	4a79      	ldr	r2, [pc, #484]	; (80051e0 <HAL_GPIO_Init+0x2b4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004ffe:	e02c      	b.n	800505a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	623b      	str	r3, [r7, #32]
          break;
 8005006:	e029      	b.n	800505c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	3304      	adds	r3, #4
 800500e:	623b      	str	r3, [r7, #32]
          break;
 8005010:	e024      	b.n	800505c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	3308      	adds	r3, #8
 8005018:	623b      	str	r3, [r7, #32]
          break;
 800501a:	e01f      	b.n	800505c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	330c      	adds	r3, #12
 8005022:	623b      	str	r3, [r7, #32]
          break;
 8005024:	e01a      	b.n	800505c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800502e:	2304      	movs	r3, #4
 8005030:	623b      	str	r3, [r7, #32]
          break;
 8005032:	e013      	b.n	800505c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d105      	bne.n	8005048 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800503c:	2308      	movs	r3, #8
 800503e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	611a      	str	r2, [r3, #16]
          break;
 8005046:	e009      	b.n	800505c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005048:	2308      	movs	r3, #8
 800504a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	615a      	str	r2, [r3, #20]
          break;
 8005052:	e003      	b.n	800505c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
          break;
 8005058:	e000      	b.n	800505c <HAL_GPIO_Init+0x130>
          break;
 800505a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2bff      	cmp	r3, #255	; 0xff
 8005060:	d801      	bhi.n	8005066 <HAL_GPIO_Init+0x13a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	e001      	b.n	800506a <HAL_GPIO_Init+0x13e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3304      	adds	r3, #4
 800506a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2bff      	cmp	r3, #255	; 0xff
 8005070:	d802      	bhi.n	8005078 <HAL_GPIO_Init+0x14c>
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	e002      	b.n	800507e <HAL_GPIO_Init+0x152>
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	3b08      	subs	r3, #8
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	210f      	movs	r1, #15
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	431a      	orrs	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80b1 	beq.w	800520e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80050ac:	4b4d      	ldr	r3, [pc, #308]	; (80051e4 <HAL_GPIO_Init+0x2b8>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	4a4c      	ldr	r2, [pc, #304]	; (80051e4 <HAL_GPIO_Init+0x2b8>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6193      	str	r3, [r2, #24]
 80050b8:	4b4a      	ldr	r3, [pc, #296]	; (80051e4 <HAL_GPIO_Init+0x2b8>)
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80050c4:	4a48      	ldr	r2, [pc, #288]	; (80051e8 <HAL_GPIO_Init+0x2bc>)
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	3302      	adds	r3, #2
 80050cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	220f      	movs	r2, #15
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4013      	ands	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a40      	ldr	r2, [pc, #256]	; (80051ec <HAL_GPIO_Init+0x2c0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_GPIO_Init+0x1ec>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <HAL_GPIO_Init+0x2c4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00d      	beq.n	8005114 <HAL_GPIO_Init+0x1e8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a3e      	ldr	r2, [pc, #248]	; (80051f4 <HAL_GPIO_Init+0x2c8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <HAL_GPIO_Init+0x1e4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a3d      	ldr	r2, [pc, #244]	; (80051f8 <HAL_GPIO_Init+0x2cc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_GPIO_Init+0x1e0>
 8005108:	2303      	movs	r3, #3
 800510a:	e006      	b.n	800511a <HAL_GPIO_Init+0x1ee>
 800510c:	2304      	movs	r3, #4
 800510e:	e004      	b.n	800511a <HAL_GPIO_Init+0x1ee>
 8005110:	2302      	movs	r3, #2
 8005112:	e002      	b.n	800511a <HAL_GPIO_Init+0x1ee>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_GPIO_Init+0x1ee>
 8005118:	2300      	movs	r3, #0
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	f002 0203 	and.w	r2, r2, #3
 8005120:	0092      	lsls	r2, r2, #2
 8005122:	4093      	lsls	r3, r2
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800512a:	492f      	ldr	r1, [pc, #188]	; (80051e8 <HAL_GPIO_Init+0x2bc>)
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	3302      	adds	r3, #2
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005144:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	492c      	ldr	r1, [pc, #176]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	608b      	str	r3, [r1, #8]
 8005150:	e006      	b.n	8005160 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005152:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	43db      	mvns	r3, r3
 800515a:	4928      	ldr	r1, [pc, #160]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 800515c:	4013      	ands	r3, r2
 800515e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800516c:	4b23      	ldr	r3, [pc, #140]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	4922      	ldr	r1, [pc, #136]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	60cb      	str	r3, [r1, #12]
 8005178:	e006      	b.n	8005188 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800517a:	4b20      	ldr	r3, [pc, #128]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	43db      	mvns	r3, r3
 8005182:	491e      	ldr	r1, [pc, #120]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 8005184:	4013      	ands	r3, r2
 8005186:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	4918      	ldr	r1, [pc, #96]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
 80051a0:	e006      	b.n	80051b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	4914      	ldr	r1, [pc, #80]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d021      	beq.n	8005200 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80051bc:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	490e      	ldr	r1, [pc, #56]	; (80051fc <HAL_GPIO_Init+0x2d0>)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	e021      	b.n	800520e <HAL_GPIO_Init+0x2e2>
 80051ca:	bf00      	nop
 80051cc:	10320000 	.word	0x10320000
 80051d0:	10310000 	.word	0x10310000
 80051d4:	10220000 	.word	0x10220000
 80051d8:	10210000 	.word	0x10210000
 80051dc:	10120000 	.word	0x10120000
 80051e0:	10110000 	.word	0x10110000
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010800 	.word	0x40010800
 80051f0:	40010c00 	.word	0x40010c00
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40011400 	.word	0x40011400
 80051fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_GPIO_Init+0x304>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	43db      	mvns	r3, r3
 8005208:	4909      	ldr	r1, [pc, #36]	; (8005230 <HAL_GPIO_Init+0x304>)
 800520a:	4013      	ands	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	3301      	adds	r3, #1
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	f47f ae8e 	bne.w	8004f40 <HAL_GPIO_Init+0x14>
  }
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	372c      	adds	r7, #44	; 0x2c
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr
 8005230:	40010400 	.word	0x40010400

08005234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
 8005240:	4613      	mov	r3, r2
 8005242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005244:	787b      	ldrb	r3, [r7, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005250:	e003      	b.n	800525a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005252:	887b      	ldrh	r3, [r7, #2]
 8005254:	041a      	lsls	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	611a      	str	r2, [r3, #16]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e034      	b.n	80052e0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800527e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f245 5255 	movw	r2, #21845	; 0x5555
 8005288:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6852      	ldr	r2, [r2, #4]
 8005292:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6892      	ldr	r2, [r2, #8]
 800529c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800529e:	f7ff fc57 	bl	8004b50 <HAL_GetTick>
 80052a2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80052a4:	e00f      	b.n	80052c6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80052a6:	f7ff fc53 	bl	8004b50 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b27      	cmp	r3, #39	; 0x27
 80052b2:	d908      	bls.n	80052c6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e00c      	b.n	80052e0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e8      	bne.n	80052a6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80052dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80052f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
	...

08005308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e272      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8087 	beq.w	8005436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005328:	4b92      	ldr	r3, [pc, #584]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b04      	cmp	r3, #4
 8005332:	d00c      	beq.n	800534e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005334:	4b8f      	ldr	r3, [pc, #572]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b08      	cmp	r3, #8
 800533e:	d112      	bne.n	8005366 <HAL_RCC_OscConfig+0x5e>
 8005340:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534c:	d10b      	bne.n	8005366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534e:	4b89      	ldr	r3, [pc, #548]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d06c      	beq.n	8005434 <HAL_RCC_OscConfig+0x12c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d168      	bne.n	8005434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e24c      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d106      	bne.n	800537e <HAL_RCC_OscConfig+0x76>
 8005370:	4b80      	ldr	r3, [pc, #512]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a7f      	ldr	r2, [pc, #508]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e02e      	b.n	80053dc <HAL_RCC_OscConfig+0xd4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x98>
 8005386:	4b7b      	ldr	r3, [pc, #492]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a7a      	ldr	r2, [pc, #488]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800538c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b78      	ldr	r3, [pc, #480]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a77      	ldr	r2, [pc, #476]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e01d      	b.n	80053dc <HAL_RCC_OscConfig+0xd4>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0xbc>
 80053aa:	4b72      	ldr	r3, [pc, #456]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a71      	ldr	r2, [pc, #452]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b6f      	ldr	r3, [pc, #444]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6e      	ldr	r2, [pc, #440]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0xd4>
 80053c4:	4b6b      	ldr	r3, [pc, #428]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a6a      	ldr	r2, [pc, #424]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	4b68      	ldr	r3, [pc, #416]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a67      	ldr	r2, [pc, #412]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d013      	beq.n	800540c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7ff fbb4 	bl	8004b50 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ec:	f7ff fbb0 	bl	8004b50 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e200      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	4b5d      	ldr	r3, [pc, #372]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0xe4>
 800540a:	e014      	b.n	8005436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7ff fba0 	bl	8004b50 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005414:	f7ff fb9c 	bl	8004b50 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e1ec      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005426:	4b53      	ldr	r3, [pc, #332]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x10c>
 8005432:	e000      	b.n	8005436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d063      	beq.n	800550a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005442:	4b4c      	ldr	r3, [pc, #304]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800544e:	4b49      	ldr	r3, [pc, #292]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b08      	cmp	r3, #8
 8005458:	d11c      	bne.n	8005494 <HAL_RCC_OscConfig+0x18c>
 800545a:	4b46      	ldr	r3, [pc, #280]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d116      	bne.n	8005494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005466:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_RCC_OscConfig+0x176>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e1c0      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547e:	4b3d      	ldr	r3, [pc, #244]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4939      	ldr	r1, [pc, #228]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005492:	e03a      	b.n	800550a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a2:	f7ff fb55 	bl	8004b50 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054aa:	f7ff fb51 	bl	8004b50 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e1a1      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054bc:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c8:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4927      	ldr	r1, [pc, #156]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	600b      	str	r3, [r1, #0]
 80054dc:	e015      	b.n	800550a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054de:	4b26      	ldr	r3, [pc, #152]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7ff fb34 	bl	8004b50 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ec:	f7ff fb30 	bl	8004b50 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e180      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d03a      	beq.n	800558c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <HAL_RCC_OscConfig+0x274>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005524:	f7ff fb14 	bl	8004b50 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552c:	f7ff fb10 	bl	8004b50 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e160      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553e:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_RCC_OscConfig+0x26c>)
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800554a:	2001      	movs	r0, #1
 800554c:	f000 face 	bl	8005aec <RCC_Delay>
 8005550:	e01c      	b.n	800558c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_RCC_OscConfig+0x274>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005558:	f7ff fafa 	bl	8004b50 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555e:	e00f      	b.n	8005580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005560:	f7ff faf6 	bl	8004b50 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d908      	bls.n	8005580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e146      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	42420000 	.word	0x42420000
 800557c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005580:	4b92      	ldr	r3, [pc, #584]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e9      	bne.n	8005560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80a6 	beq.w	80056e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559a:	2300      	movs	r3, #0
 800559c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559e:	4b8b      	ldr	r3, [pc, #556]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10d      	bne.n	80055c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055aa:	4b88      	ldr	r3, [pc, #544]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	4a87      	ldr	r2, [pc, #540]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	61d3      	str	r3, [r2, #28]
 80055b6:	4b85      	ldr	r3, [pc, #532]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	4b82      	ldr	r3, [pc, #520]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d118      	bne.n	8005604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d2:	4b7f      	ldr	r3, [pc, #508]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a7e      	ldr	r2, [pc, #504]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055de:	f7ff fab7 	bl	8004b50 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7ff fab3 	bl	8004b50 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b64      	cmp	r3, #100	; 0x64
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e103      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	4b75      	ldr	r3, [pc, #468]	; (80057d0 <HAL_RCC_OscConfig+0x4c8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d106      	bne.n	800561a <HAL_RCC_OscConfig+0x312>
 800560c:	4b6f      	ldr	r3, [pc, #444]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4a6e      	ldr	r2, [pc, #440]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6213      	str	r3, [r2, #32]
 8005618:	e02d      	b.n	8005676 <HAL_RCC_OscConfig+0x36e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10c      	bne.n	800563c <HAL_RCC_OscConfig+0x334>
 8005622:	4b6a      	ldr	r3, [pc, #424]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	4a69      	ldr	r2, [pc, #420]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	6213      	str	r3, [r2, #32]
 800562e:	4b67      	ldr	r3, [pc, #412]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	4a66      	ldr	r2, [pc, #408]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005634:	f023 0304 	bic.w	r3, r3, #4
 8005638:	6213      	str	r3, [r2, #32]
 800563a:	e01c      	b.n	8005676 <HAL_RCC_OscConfig+0x36e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b05      	cmp	r3, #5
 8005642:	d10c      	bne.n	800565e <HAL_RCC_OscConfig+0x356>
 8005644:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	4a60      	ldr	r2, [pc, #384]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	6213      	str	r3, [r2, #32]
 8005650:	4b5e      	ldr	r3, [pc, #376]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4a5d      	ldr	r2, [pc, #372]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	6213      	str	r3, [r2, #32]
 800565c:	e00b      	b.n	8005676 <HAL_RCC_OscConfig+0x36e>
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	4a5a      	ldr	r2, [pc, #360]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6213      	str	r3, [r2, #32]
 800566a:	4b58      	ldr	r3, [pc, #352]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4a57      	ldr	r2, [pc, #348]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d015      	beq.n	80056aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567e:	f7ff fa67 	bl	8004b50 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005684:	e00a      	b.n	800569c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7ff fa63 	bl	8004b50 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f241 3288 	movw	r2, #5000	; 0x1388
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e0b1      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569c:	4b4b      	ldr	r3, [pc, #300]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0ee      	beq.n	8005686 <HAL_RCC_OscConfig+0x37e>
 80056a8:	e014      	b.n	80056d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056aa:	f7ff fa51 	bl	8004b50 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b0:	e00a      	b.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b2:	f7ff fa4d 	bl	8004b50 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e09b      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c8:	4b40      	ldr	r3, [pc, #256]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ee      	bne.n	80056b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d105      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056da:	4b3c      	ldr	r3, [pc, #240]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4a3b      	ldr	r2, [pc, #236]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8087 	beq.w	80057fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d061      	beq.n	80057c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d146      	bne.n	8005792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005704:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <HAL_RCC_OscConfig+0x4cc>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570a:	f7ff fa21 	bl	8004b50 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005712:	f7ff fa1d 	bl	8004b50 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e06d      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005724:	4b29      	ldr	r3, [pc, #164]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d108      	bne.n	800574c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800573a:	4b24      	ldr	r3, [pc, #144]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4921      	ldr	r1, [pc, #132]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005748:	4313      	orrs	r3, r2
 800574a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574c:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a19      	ldr	r1, [r3, #32]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	430b      	orrs	r3, r1
 800575e:	491b      	ldr	r1, [pc, #108]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <HAL_RCC_OscConfig+0x4cc>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576a:	f7ff f9f1 	bl	8004b50 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005772:	f7ff f9ed 	bl	8004b50 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e03d      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x46a>
 8005790:	e035      	b.n	80057fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCC_OscConfig+0x4cc>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7ff f9da 	bl	8004b50 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7ff f9d6 	bl	8004b50 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e026      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_RCC_OscConfig+0x4c4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x498>
 80057be:	e01e      	b.n	80057fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e019      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40007000 	.word	0x40007000
 80057d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <HAL_RCC_OscConfig+0x500>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d106      	bne.n	80057fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d001      	beq.n	80057fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40021000 	.word	0x40021000

0800580c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0d0      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d910      	bls.n	8005850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b67      	ldr	r3, [pc, #412]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 0207 	bic.w	r2, r3, #7
 8005836:	4965      	ldr	r1, [pc, #404]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b63      	ldr	r3, [pc, #396]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0b8      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005868:	4b59      	ldr	r3, [pc, #356]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a58      	ldr	r2, [pc, #352]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800586e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005880:	4b53      	ldr	r3, [pc, #332]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a52      	ldr	r2, [pc, #328]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800588a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588c:	4b50      	ldr	r3, [pc, #320]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	494d      	ldr	r1, [pc, #308]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d040      	beq.n	800592c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	4b47      	ldr	r3, [pc, #284]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d115      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e07f      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d107      	bne.n	80058da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	4b41      	ldr	r3, [pc, #260]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e073      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b3d      	ldr	r3, [pc, #244]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e06b      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ea:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4936      	ldr	r1, [pc, #216]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058fc:	f7ff f928 	bl	8004b50 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	e00a      	b.n	800591a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005904:	f7ff f924 	bl	8004b50 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e053      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	4b2d      	ldr	r3, [pc, #180]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 020c 	and.w	r2, r3, #12
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	429a      	cmp	r2, r3
 800592a:	d1eb      	bne.n	8005904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d210      	bcs.n	800595c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 0207 	bic.w	r2, r3, #7
 8005942:	4922      	ldr	r1, [pc, #136]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b20      	ldr	r3, [pc, #128]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e032      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4916      	ldr	r1, [pc, #88]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005976:	4313      	orrs	r3, r2
 8005978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	490e      	ldr	r1, [pc, #56]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	4313      	orrs	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800599a:	f000 f821 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	490a      	ldr	r1, [pc, #40]	; (80059d4 <HAL_RCC_ClockConfig+0x1c8>)
 80059ac:	5ccb      	ldrb	r3, [r1, r3]
 80059ae:	fa22 f303 	lsr.w	r3, r2, r3
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1cc>)
 80059b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_ClockConfig+0x1d0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f886 	bl	8004acc <HAL_InitTick>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40022000 	.word	0x40022000
 80059d0:	40021000 	.word	0x40021000
 80059d4:	0800c898 	.word	0x0800c898
 80059d8:	20000074 	.word	0x20000074
 80059dc:	2000008c 	.word	0x2000008c

080059e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	2300      	movs	r3, #0
 80059f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059fa:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d002      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x30>
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_GetSysClockFreq+0x36>
 8005a0e:	e027      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a12:	613b      	str	r3, [r7, #16]
      break;
 8005a14:	e027      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	0c9b      	lsrs	r3, r3, #18
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a20:	5cd3      	ldrb	r3, [r2, r3]
 8005a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d010      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	0c5b      	lsrs	r3, r3, #17
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a3a:	5cd3      	ldrb	r3, [r2, r3]
 8005a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a42:	fb03 f202 	mul.w	r2, r3, r2
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e004      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	613b      	str	r3, [r7, #16]
      break;
 8005a5e:	e002      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a62:	613b      	str	r3, [r7, #16]
      break;
 8005a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a66:	693b      	ldr	r3, [r7, #16]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	007a1200 	.word	0x007a1200
 8005a7c:	0800c900 	.word	0x0800c900
 8005a80:	0800c910 	.word	0x0800c910
 8005a84:	003d0900 	.word	0x003d0900

08005a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a8c:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	20000074 	.word	0x20000074

08005a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aa0:	f7ff fff2 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4903      	ldr	r1, [pc, #12]	; (8005ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	0800c8a8 	.word	0x0800c8a8

08005ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ac8:	f7ff ffde 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	0adb      	lsrs	r3, r3, #11
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	; (8005ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	0800c8a8 	.word	0x0800c8a8

08005aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <RCC_Delay+0x34>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <RCC_Delay+0x38>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	0a5b      	lsrs	r3, r3, #9
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b08:	bf00      	nop
  }
  while (Delay --);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	60fa      	str	r2, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f9      	bne.n	8005b08 <RCC_Delay+0x1c>
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	20000074 	.word	0x20000074
 8005b24:	10624dd3 	.word	0x10624dd3

08005b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e076      	b.n	8005c28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d108      	bne.n	8005b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b4a:	d009      	beq.n	8005b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
 8005b52:	e005      	b.n	8005b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc fa18 	bl	8001fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	ea42 0103 	orr.w	r1, r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	0c1a      	lsrs	r2, r3, #16
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f002 0204 	and.w	r2, r2, #4
 8005c06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69da      	ldr	r2, [r3, #28]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_SPI_Transmit+0x22>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e12d      	b.n	8005eae <HAL_SPI_Transmit+0x27e>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c5a:	f7fe ff79 	bl	8004b50 <HAL_GetTick>
 8005c5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c60:	88fb      	ldrh	r3, [r7, #6]
 8005c62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d002      	beq.n	8005c76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
 8005c72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c74:	e116      	b.n	8005ea4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_SPI_Transmit+0x52>
 8005c7c:	88fb      	ldrh	r3, [r7, #6]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c86:	e10d      	b.n	8005ea4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cce:	d10f      	bne.n	8005cf0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	d007      	beq.n	8005d0e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d16:	d14f      	bne.n	8005db8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_SPI_Transmit+0xf6>
 8005d20:	8afb      	ldrh	r3, [r7, #22]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d142      	bne.n	8005dac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	1c9a      	adds	r2, r3, #2
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d4a:	e02f      	b.n	8005dac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d112      	bne.n	8005d80 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	881a      	ldrh	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	1c9a      	adds	r2, r3, #2
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d7e:	e015      	b.n	8005dac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d80:	f7fe fee6 	bl	8004b50 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d803      	bhi.n	8005d98 <HAL_SPI_Transmit+0x168>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d102      	bne.n	8005d9e <HAL_SPI_Transmit+0x16e>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005daa:	e07b      	b.n	8005ea4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1ca      	bne.n	8005d4c <HAL_SPI_Transmit+0x11c>
 8005db6:	e050      	b.n	8005e5a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_SPI_Transmit+0x196>
 8005dc0:	8afb      	ldrh	r3, [r7, #22]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d144      	bne.n	8005e50 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005dec:	e030      	b.n	8005e50 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d113      	bne.n	8005e24 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e22:	e015      	b.n	8005e50 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e24:	f7fe fe94 	bl	8004b50 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d803      	bhi.n	8005e3c <HAL_SPI_Transmit+0x20c>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d102      	bne.n	8005e42 <HAL_SPI_Transmit+0x212>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e4e:	e029      	b.n	8005ea4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1c9      	bne.n	8005dee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fcd0 	bl	8006804 <SPI_EndRxTxTransaction>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e003      	b.n	8005ea4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b088      	sub	sp, #32
 8005eba:	af02      	add	r7, sp, #8
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eda:	e0fb      	b.n	80060d4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee4:	d112      	bne.n	8005f0c <HAL_SPI_Receive+0x56>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10e      	bne.n	8005f0c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f8ef 	bl	80060e6 <HAL_SPI_TransmitReceive>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	e0e8      	b.n	80060de <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_SPI_Receive+0x64>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e0e1      	b.n	80060de <HAL_SPI_Receive+0x228>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f22:	f7fe fe15 	bl	8004b50 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_SPI_Receive+0x7e>
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f38:	e0cc      	b.n	80060d4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	88fa      	ldrh	r2, [r7, #6]
 8005f52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f80:	d10f      	bne.n	8005fa2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fa0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d007      	beq.n	8005fc0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d16a      	bne.n	800609e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005fc8:	e032      	b.n	8006030 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d115      	bne.n	8006004 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f103 020c 	add.w	r2, r3, #12
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006002:	e015      	b.n	8006030 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006004:	f7fe fda4 	bl	8004b50 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d803      	bhi.n	800601c <HAL_SPI_Receive+0x166>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d102      	bne.n	8006022 <HAL_SPI_Receive+0x16c>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800602e:	e051      	b.n	80060d4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1c7      	bne.n	8005fca <HAL_SPI_Receive+0x114>
 800603a:	e035      	b.n	80060a8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b01      	cmp	r3, #1
 8006048:	d113      	bne.n	8006072 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	b292      	uxth	r2, r2
 8006056:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006070:	e015      	b.n	800609e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006072:	f7fe fd6d 	bl	8004b50 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d803      	bhi.n	800608a <HAL_SPI_Receive+0x1d4>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d102      	bne.n	8006090 <HAL_SPI_Receive+0x1da>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800609c:	e01a      	b.n	80060d4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1c9      	bne.n	800603c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fb57 	bl	8006760 <SPI_EndRxTransaction>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
 80060ca:	e003      	b.n	80060d4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b08c      	sub	sp, #48	; 0x30
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060f4:	2301      	movs	r3, #1
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_SPI_TransmitReceive+0x26>
 8006108:	2302      	movs	r3, #2
 800610a:	e198      	b.n	800643e <HAL_SPI_TransmitReceive+0x358>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006114:	f7fe fd1c 	bl	8004b50 <HAL_GetTick>
 8006118:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800612a:	887b      	ldrh	r3, [r7, #2]
 800612c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800612e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006132:	2b01      	cmp	r3, #1
 8006134:	d00f      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x70>
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613c:	d107      	bne.n	800614e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <HAL_SPI_TransmitReceive+0x68>
 8006146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800614a:	2b04      	cmp	r3, #4
 800614c:	d003      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800614e:	2302      	movs	r3, #2
 8006150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006154:	e16d      	b.n	8006432 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_SPI_TransmitReceive+0x82>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_SPI_TransmitReceive+0x82>
 8006162:	887b      	ldrh	r3, [r7, #2]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800616e:	e160      	b.n	8006432 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b04      	cmp	r3, #4
 800617a:	d003      	beq.n	8006184 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2205      	movs	r2, #5
 8006180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	887a      	ldrh	r2, [r7, #2]
 800619a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	887a      	ldrh	r2, [r7, #2]
 80061a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	887a      	ldrh	r2, [r7, #2]
 80061ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d007      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e0:	d17c      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_SPI_TransmitReceive+0x10a>
 80061ea:	8b7b      	ldrh	r3, [r7, #26]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d16a      	bne.n	80062c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006214:	e057      	b.n	80062c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d11b      	bne.n	800625c <HAL_SPI_TransmitReceive+0x176>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_SPI_TransmitReceive+0x176>
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d113      	bne.n	800625c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b01      	cmp	r3, #1
 8006268:	d119      	bne.n	800629e <HAL_SPI_TransmitReceive+0x1b8>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d014      	beq.n	800629e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	b292      	uxth	r2, r2
 8006280:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	1c9a      	adds	r2, r3, #2
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800629a:	2301      	movs	r3, #1
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800629e:	f7fe fc57 	bl	8004b50 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d80b      	bhi.n	80062c6 <HAL_SPI_TransmitReceive+0x1e0>
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d007      	beq.n	80062c6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80062c4:	e0b5      	b.n	8006432 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1a2      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x130>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d19d      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x130>
 80062da:	e080      	b.n	80063de <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_SPI_TransmitReceive+0x204>
 80062e4:	8b7b      	ldrh	r3, [r7, #26]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d16f      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	7812      	ldrb	r2, [r2, #0]
 80062f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006310:	e05b      	b.n	80063ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d11c      	bne.n	800635a <HAL_SPI_TransmitReceive+0x274>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d017      	beq.n	800635a <HAL_SPI_TransmitReceive+0x274>
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d114      	bne.n	800635a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b01      	cmp	r3, #1
 8006366:	d119      	bne.n	800639c <HAL_SPI_TransmitReceive+0x2b6>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d014      	beq.n	800639c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006398:	2301      	movs	r3, #1
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800639c:	f7fe fbd8 	bl	8004b50 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d803      	bhi.n	80063b4 <HAL_SPI_TransmitReceive+0x2ce>
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d102      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x2d4>
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d107      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80063c8:	e033      	b.n	8006432 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d19e      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x22c>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d199      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fa0e 	bl	8006804 <SPI_EndRxTxTransaction>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d006      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063fa:	e01a      	b.n	8006432 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006428:	e003      	b.n	8006432 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800643a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800643e:	4618      	mov	r0, r3
 8006440:	3730      	adds	r7, #48	; 0x30
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	099b      	lsrs	r3, r3, #6
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10f      	bne.n	800648c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	099b      	lsrs	r3, r3, #6
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
    return;
 800648a:	e0be      	b.n	800660a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_SPI_IRQHandler+0x66>
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	09db      	lsrs	r3, r3, #7
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
    return;
 80064ac:	e0ad      	b.n	800660a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_SPI_IRQHandler+0x80>
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	099b      	lsrs	r3, r3, #6
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80a1 	beq.w	800660a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 809a 	beq.w	800660a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	099b      	lsrs	r3, r3, #6
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d023      	beq.n	800652a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d011      	beq.n	8006512 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f043 0204 	orr.w	r2, r3, #4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	e00b      	b.n	800652a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	693b      	ldr	r3, [r7, #16]
        return;
 8006528:	e06f      	b.n	800660a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d014      	beq.n	8006560 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	2b00      	cmp	r3, #0
 8006566:	d04f      	beq.n	8006608 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006576:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <HAL_SPI_IRQHandler+0x14c>
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d034      	beq.n	80065fe <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0203 	bic.w	r2, r2, #3
 80065a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d011      	beq.n	80065d0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b0:	4a17      	ldr	r2, [pc, #92]	; (8006610 <HAL_SPI_IRQHandler+0x1c8>)
 80065b2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe fc3f 	bl	8004e3c <HAL_DMA_Abort_IT>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d016      	beq.n	8006606 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065dc:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <HAL_SPI_IRQHandler+0x1c8>)
 80065de:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fc29 	bl	8004e3c <HAL_DMA_Abort_IT>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80065fc:	e003      	b.n	8006606 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f808 	bl	8006614 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006604:	e000      	b.n	8006608 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006606:	bf00      	nop
    return;
 8006608:	bf00      	nop
  }
}
 800660a:	3720      	adds	r7, #32
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	08006627 	.word	0x08006627

08006614 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff ffe7 	bl	8006614 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006660:	f7fe fa76 	bl	8004b50 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4413      	add	r3, r2
 800666e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006670:	f7fe fa6e 	bl	8004b50 <HAL_GetTick>
 8006674:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006676:	4b39      	ldr	r3, [pc, #228]	; (800675c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	015b      	lsls	r3, r3, #5
 800667c:	0d1b      	lsrs	r3, r3, #20
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	fb02 f303 	mul.w	r3, r2, r3
 8006684:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006686:	e054      	b.n	8006732 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d050      	beq.n	8006732 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006690:	f7fe fa5e 	bl	8004b50 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	429a      	cmp	r2, r3
 800669e:	d902      	bls.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d13d      	bne.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066be:	d111      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c8:	d004      	beq.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d107      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ec:	d10f      	bne.n	800670e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800670c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e017      	b.n	8006752 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	3b01      	subs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	429a      	cmp	r2, r3
 800674e:	d19b      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000074 	.word	0x20000074

08006760 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006774:	d111      	bne.n	800679a <SPI_EndRxTransaction+0x3a>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677e:	d004      	beq.n	800678a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006788:	d107      	bne.n	800679a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006798:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a2:	d117      	bne.n	80067d4 <SPI_EndRxTransaction+0x74>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ac:	d112      	bne.n	80067d4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2101      	movs	r1, #1
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff ff49 	bl	8006650 <SPI_WaitFlagStateUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01a      	beq.n	80067fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e013      	b.n	80067fc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff ff36 	bl	8006650 <SPI_WaitFlagStateUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f043 0220 	orr.w	r2, r3, #32
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e000      	b.n	80067fc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff ff18 	bl	8006650 <SPI_WaitFlagStateUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682a:	f043 0220 	orr.w	r2, r3, #32
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e000      	b.n	8006838 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e041      	b.n	80068d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fb fd84 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f000 fa2a 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d122      	bne.n	800693a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d11b      	bne.n	800693a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f06f 0202 	mvn.w	r2, #2
 800690a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f9bd 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006926:	e005      	b.n	8006934 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f9b0 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f9bf 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d122      	bne.n	800698e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b04      	cmp	r3, #4
 8006954:	d11b      	bne.n	800698e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f06f 0204 	mvn.w	r2, #4
 800695e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f993 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 800697a:	e005      	b.n	8006988 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f986 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f995 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d122      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d11b      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f06f 0208 	mvn.w	r2, #8
 80069b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2204      	movs	r2, #4
 80069b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f969 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 80069ce:	e005      	b.n	80069dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f95c 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f96b 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d122      	bne.n	8006a36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0310 	and.w	r3, r3, #16
 80069fa:	2b10      	cmp	r3, #16
 80069fc:	d11b      	bne.n	8006a36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0210 	mvn.w	r2, #16
 8006a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f93f 	bl	8006ca0 <HAL_TIM_IC_CaptureCallback>
 8006a22:	e005      	b.n	8006a30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f932 	bl	8006c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f941 	bl	8006cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d10e      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d107      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f06f 0201 	mvn.w	r2, #1
 8006a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f90d 	bl	8006c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d10e      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b80      	cmp	r3, #128	; 0x80
 8006a7c:	d107      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa84 	bl	8006f96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d10e      	bne.n	8006aba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d107      	bne.n	8006aba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f905 	bl	8006cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d10e      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d107      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0220 	mvn.w	r2, #32
 8006ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fa4f 	bl	8006f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_TIM_ConfigClockSource+0x1c>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e0b4      	b.n	8006c74 <HAL_TIM_ConfigClockSource+0x186>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b30:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b42:	d03e      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0xd4>
 8006b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b48:	f200 8087 	bhi.w	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b50:	f000 8086 	beq.w	8006c60 <HAL_TIM_ConfigClockSource+0x172>
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b58:	d87f      	bhi.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b5a:	2b70      	cmp	r3, #112	; 0x70
 8006b5c:	d01a      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0xa6>
 8006b5e:	2b70      	cmp	r3, #112	; 0x70
 8006b60:	d87b      	bhi.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b62:	2b60      	cmp	r3, #96	; 0x60
 8006b64:	d050      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x11a>
 8006b66:	2b60      	cmp	r3, #96	; 0x60
 8006b68:	d877      	bhi.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b6a:	2b50      	cmp	r3, #80	; 0x50
 8006b6c:	d03c      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0xfa>
 8006b6e:	2b50      	cmp	r3, #80	; 0x50
 8006b70:	d873      	bhi.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d058      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0x13a>
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d86f      	bhi.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b7a:	2b30      	cmp	r3, #48	; 0x30
 8006b7c:	d064      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x15a>
 8006b7e:	2b30      	cmp	r3, #48	; 0x30
 8006b80:	d86b      	bhi.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d060      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x15a>
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d867      	bhi.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d05c      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x15a>
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	d05a      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x15a>
 8006b92:	e062      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	6899      	ldr	r1, [r3, #8]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f000 f971 	bl	8006e8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]
      break;
 8006bc0:	e04f      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6899      	ldr	r1, [r3, #8]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f000 f95a 	bl	8006e8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006be4:	609a      	str	r2, [r3, #8]
      break;
 8006be6:	e03c      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f000 f8d1 	bl	8006d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2150      	movs	r1, #80	; 0x50
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 f928 	bl	8006e56 <TIM_ITRx_SetConfig>
      break;
 8006c06:	e02c      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	6859      	ldr	r1, [r3, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	461a      	mov	r2, r3
 8006c16:	f000 f8ef 	bl	8006df8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2160      	movs	r1, #96	; 0x60
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 f918 	bl	8006e56 <TIM_ITRx_SetConfig>
      break;
 8006c26:	e01c      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	461a      	mov	r2, r3
 8006c36:	f000 f8b1 	bl	8006d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2140      	movs	r1, #64	; 0x40
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 f908 	bl	8006e56 <TIM_ITRx_SetConfig>
      break;
 8006c46:	e00c      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4619      	mov	r1, r3
 8006c52:	4610      	mov	r0, r2
 8006c54:	f000 f8ff 	bl	8006e56 <TIM_ITRx_SetConfig>
      break;
 8006c58:	e003      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c5e:	e000      	b.n	8006c62 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr

08006c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr
	...

08006cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <TIM_Base_SetConfig+0xb8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_Base_SetConfig+0x30>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf6:	d007      	beq.n	8006d08 <TIM_Base_SetConfig+0x30>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <TIM_Base_SetConfig+0xbc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_Base_SetConfig+0x30>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a25      	ldr	r2, [pc, #148]	; (8006d98 <TIM_Base_SetConfig+0xc0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <TIM_Base_SetConfig+0xb8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_Base_SetConfig+0x62>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d28:	d007      	beq.n	8006d3a <TIM_Base_SetConfig+0x62>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <TIM_Base_SetConfig+0xbc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_Base_SetConfig+0x62>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <TIM_Base_SetConfig+0xc0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <TIM_Base_SetConfig+0xb8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d103      	bne.n	8006d80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	615a      	str	r2, [r3, #20]
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800

08006d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f023 0201 	bic.w	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f023 030a 	bic.w	r3, r3, #10
 8006dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0210 	bic.w	r2, r3, #16
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	031b      	lsls	r3, r3, #12
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	621a      	str	r2, [r3, #32]
}
 8006e4c:	bf00      	nop
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f043 0307 	orr.w	r3, r3, #7
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b087      	sub	sp, #28
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	021a      	lsls	r2, r3, #8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	609a      	str	r2, [r3, #8]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e046      	b.n	8006f6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a16      	ldr	r2, [pc, #88]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00e      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2c:	d009      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a12      	ldr	r2, [pc, #72]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d10c      	bne.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800

08006f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr

08006f96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e042      	b.n	8007040 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fb fa20 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2224      	movs	r2, #36	; 0x24
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fd71 	bl	8007ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b20      	cmp	r3, #32
 8007066:	d16d      	bne.n	8007144 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_UART_Transmit+0x2c>
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e066      	b.n	8007146 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2221      	movs	r2, #33	; 0x21
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007086:	f7fd fd63 	bl	8004b50 <HAL_GetTick>
 800708a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a0:	d108      	bne.n	80070b4 <HAL_UART_Transmit+0x6c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e003      	b.n	80070bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070bc:	e02a      	b.n	8007114 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2200      	movs	r2, #0
 80070c6:	2180      	movs	r1, #128	; 0x80
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 faf9 	bl	80076c0 <UART_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e036      	b.n	8007146 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	3302      	adds	r3, #2
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	e007      	b.n	8007106 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	3301      	adds	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1cf      	bne.n	80070be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2200      	movs	r2, #0
 8007126:	2140      	movs	r1, #64	; 0x40
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fac9 	bl	80076c0 <UART_WaitOnFlagUntilTimeout>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e006      	b.n	8007146 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b0ba      	sub	sp, #232	; 0xe8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007176:	2300      	movs	r3, #0
 8007178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800717c:	2300      	movs	r3, #0
 800717e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800718e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10f      	bne.n	80071b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_UART_IRQHandler+0x66>
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fbd1 	bl	8007956 <UART_Receive_IT>
      return;
 80071b4:	e25b      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80de 	beq.w	800737c <HAL_UART_IRQHandler+0x22c>
 80071c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80d1 	beq.w	800737c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_UART_IRQHandler+0xae>
 80071e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	f043 0201 	orr.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <HAL_UART_IRQHandler+0xd2>
 800720a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	f043 0202 	orr.w	r2, r3, #2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_UART_IRQHandler+0xf6>
 800722e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f043 0204 	orr.w	r2, r3, #4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d011      	beq.n	8007276 <HAL_UART_IRQHandler+0x126>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800725e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f043 0208 	orr.w	r2, r3, #8
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 81f2 	beq.w	8007664 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007284:	f003 0320 	and.w	r3, r3, #32
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <HAL_UART_IRQHandler+0x14e>
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb5c 	bl	8007956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <HAL_UART_IRQHandler+0x17a>
 80072c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d04f      	beq.n	800736a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa66 	bl	800779c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d041      	beq.n	8007362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3314      	adds	r3, #20
 80072e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3314      	adds	r3, #20
 8007306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800730a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800730e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1d9      	bne.n	80072de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d013      	beq.n	800735a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	4a7e      	ldr	r2, [pc, #504]	; (8007530 <HAL_UART_IRQHandler+0x3e0>)
 8007338:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd fd7c 	bl	8004e3c <HAL_DMA_Abort_IT>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007358:	e00e      	b.n	8007378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f99c 	bl	8007698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	e00a      	b.n	8007378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f998 	bl	8007698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e006      	b.n	8007378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f994 	bl	8007698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007376:	e175      	b.n	8007664 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	bf00      	nop
    return;
 800737a:	e173      	b.n	8007664 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	2b01      	cmp	r3, #1
 8007382:	f040 814f 	bne.w	8007624 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8148 	beq.w	8007624 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8141 	beq.w	8007624 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80b6 	beq.w	8007534 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8145 	beq.w	8007668 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073e6:	429a      	cmp	r2, r3
 80073e8:	f080 813e 	bcs.w	8007668 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	f000 8088 	beq.w	8007510 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800741a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800741e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	330c      	adds	r3, #12
 8007428:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800742c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007438:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1d9      	bne.n	8007400 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800745c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3314      	adds	r3, #20
 800746c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007470:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007474:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007478:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e1      	bne.n	800744c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3314      	adds	r3, #20
 800748e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800749a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3314      	adds	r3, #20
 80074a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e3      	bne.n	8007488 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e0:	f023 0310 	bic.w	r3, r3, #16
 80074e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80074f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e3      	bne.n	80074ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	4618      	mov	r0, r3
 800750c:	f7fd fc5b 	bl	8004dc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800751e:	b29b      	uxth	r3, r3
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	b29b      	uxth	r3, r3
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f8bf 	bl	80076aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800752c:	e09c      	b.n	8007668 <HAL_UART_IRQHandler+0x518>
 800752e:	bf00      	nop
 8007530:	08007861 	.word	0x08007861
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800753c:	b29b      	uxth	r3, r3
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 808e 	beq.w	800766c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8089 	beq.w	800766c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	330c      	adds	r3, #12
 800757a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800757e:	647a      	str	r2, [r7, #68]	; 0x44
 8007580:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800758c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e3      	bne.n	800755a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3314      	adds	r3, #20
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	623b      	str	r3, [r7, #32]
   return(result);
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075b6:	633a      	str	r2, [r7, #48]	; 0x30
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e3      	bne.n	8007592 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0310 	bic.w	r3, r3, #16
 80075ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075fc:	61fa      	str	r2, [r7, #28]
 80075fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	69b9      	ldr	r1, [r7, #24]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	617b      	str	r3, [r7, #20]
   return(result);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e3      	bne.n	80075d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f844 	bl	80076aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007622:	e023      	b.n	800766c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <HAL_UART_IRQHandler+0x4f4>
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f923 	bl	8007888 <UART_Transmit_IT>
    return;
 8007642:	e014      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00e      	beq.n	800766e <HAL_UART_IRQHandler+0x51e>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f962 	bl	8007926 <UART_EndTransmit_IT>
    return;
 8007662:	e004      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
    return;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
      return;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
      return;
 800766c:	bf00      	nop
  }
}
 800766e:	37e8      	adds	r7, #232	; 0xe8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr

08007686 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr

08007698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr

080076aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr

080076c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b090      	sub	sp, #64	; 0x40
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d0:	e050      	b.n	8007774 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d04c      	beq.n	8007774 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80076e0:	f7fd fa36 	bl	8004b50 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d241      	bcs.n	8007774 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	330c      	adds	r3, #12
 800770e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007710:	637a      	str	r2, [r7, #52]	; 0x34
 8007712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e5      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3314      	adds	r3, #20
 800772a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	613b      	str	r3, [r7, #16]
   return(result);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	63bb      	str	r3, [r7, #56]	; 0x38
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3314      	adds	r3, #20
 8007742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007744:	623a      	str	r2, [r7, #32]
 8007746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	69f9      	ldr	r1, [r7, #28]
 800774a:	6a3a      	ldr	r2, [r7, #32]
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	61bb      	str	r3, [r7, #24]
   return(result);
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e00f      	b.n	8007794 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4013      	ands	r3, r2
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	429a      	cmp	r2, r3
 8007782:	bf0c      	ite	eq
 8007784:	2301      	moveq	r3, #1
 8007786:	2300      	movne	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	429a      	cmp	r2, r3
 8007790:	d09f      	beq.n	80076d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3740      	adds	r7, #64	; 0x40
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800779c:	b480      	push	{r7}
 800779e:	b095      	sub	sp, #84	; 0x54
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077c4:	643a      	str	r2, [r7, #64]	; 0x40
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e5      	bne.n	80077a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	2b01      	cmp	r3, #1
 8007812:	d119      	bne.n	8007848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60bb      	str	r3, [r7, #8]
   return(result);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	647b      	str	r3, [r7, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007834:	61ba      	str	r2, [r7, #24]
 8007836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	613b      	str	r3, [r7, #16]
   return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007856:	bf00      	nop
 8007858:	3754      	adds	r7, #84	; 0x54
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr

08007860 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff ff0c 	bl	8007698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b21      	cmp	r3, #33	; 0x21
 800789a:	d13e      	bne.n	800791a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a4:	d114      	bne.n	80078d0 <UART_Transmit_IT+0x48>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d110      	bne.n	80078d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]
 80078ce:	e008      	b.n	80078e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	1c59      	adds	r1, r3, #1
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6211      	str	r1, [r2, #32]
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10f      	bne.n	8007916 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007904:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	e000      	b.n	800791c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800791a:	2302      	movs	r3, #2
  }
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fe94 	bl	8007674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b08c      	sub	sp, #48	; 0x30
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b22      	cmp	r3, #34	; 0x22
 8007968:	f040 80ae 	bne.w	8007ac8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	d117      	bne.n	80079a6 <UART_Receive_IT+0x50>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d113      	bne.n	80079a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	b29a      	uxth	r2, r3
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	1c9a      	adds	r2, r3, #2
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	; 0x28
 80079a4:	e026      	b.n	80079f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d007      	beq.n	80079ca <UART_Receive_IT+0x74>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <UART_Receive_IT+0x82>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e008      	b.n	80079ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4619      	mov	r1, r3
 8007a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d15d      	bne.n	8007ac4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0220 	bic.w	r2, r2, #32
 8007a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0201 	bic.w	r2, r2, #1
 8007a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d135      	bne.n	8007aba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	613b      	str	r3, [r7, #16]
   return(result);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a74:	623a      	str	r2, [r7, #32]
 8007a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e5      	bne.n	8007a54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d10a      	bne.n	8007aac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fdf9 	bl	80076aa <HAL_UARTEx_RxEventCallback>
 8007ab8:	e002      	b.n	8007ac0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fde3 	bl	8007686 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e002      	b.n	8007aca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e000      	b.n	8007aca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ac8:	2302      	movs	r3, #2
  }
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3730      	adds	r7, #48	; 0x30
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b0e:	f023 030c 	bic.w	r3, r3, #12
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6812      	ldr	r2, [r2, #0]
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a2c      	ldr	r2, [pc, #176]	; (8007be8 <UART_SetConfig+0x114>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d103      	bne.n	8007b44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b3c:	f7fd ffc2 	bl	8005ac4 <HAL_RCC_GetPCLK2Freq>
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	e002      	b.n	8007b4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b44:	f7fd ffaa 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 8007b48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009a      	lsls	r2, r3, #2
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b60:	4a22      	ldr	r2, [pc, #136]	; (8007bec <UART_SetConfig+0x118>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	0119      	lsls	r1, r3, #4
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009a      	lsls	r2, r3, #2
 8007b74:	441a      	add	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b80:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <UART_SetConfig+0x118>)
 8007b82:	fba3 0302 	umull	r0, r3, r3, r2
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	2064      	movs	r0, #100	; 0x64
 8007b8a:	fb00 f303 	mul.w	r3, r0, r3
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	3332      	adds	r3, #50	; 0x32
 8007b94:	4a15      	ldr	r2, [pc, #84]	; (8007bec <UART_SetConfig+0x118>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ba0:	4419      	add	r1, r3
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009a      	lsls	r2, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <UART_SetConfig+0x118>)
 8007bba:	fba3 0302 	umull	r0, r3, r3, r2
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	2064      	movs	r0, #100	; 0x64
 8007bc2:	fb00 f303 	mul.w	r3, r0, r3
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	3332      	adds	r3, #50	; 0x32
 8007bcc:	4a07      	ldr	r2, [pc, #28]	; (8007bec <UART_SetConfig+0x118>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	f003 020f 	and.w	r2, r3, #15
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	440a      	add	r2, r1
 8007bde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40013800 	.word	0x40013800
 8007bec:	51eb851f 	.word	0x51eb851f

08007bf0 <__errno>:
 8007bf0:	4b01      	ldr	r3, [pc, #4]	; (8007bf8 <__errno+0x8>)
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20000094 	.word	0x20000094

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	2600      	movs	r6, #0
 8007c00:	4d0c      	ldr	r5, [pc, #48]	; (8007c34 <__libc_init_array+0x38>)
 8007c02:	4c0d      	ldr	r4, [pc, #52]	; (8007c38 <__libc_init_array+0x3c>)
 8007c04:	1b64      	subs	r4, r4, r5
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	f004 fdfe 	bl	800c80c <_init>
 8007c10:	2600      	movs	r6, #0
 8007c12:	4d0a      	ldr	r5, [pc, #40]	; (8007c3c <__libc_init_array+0x40>)
 8007c14:	4c0a      	ldr	r4, [pc, #40]	; (8007c40 <__libc_init_array+0x44>)
 8007c16:	1b64      	subs	r4, r4, r5
 8007c18:	10a4      	asrs	r4, r4, #2
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c24:	4798      	blx	r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2e:	4798      	blx	r3
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	0800cdbc 	.word	0x0800cdbc
 8007c38:	0800cdbc 	.word	0x0800cdbc
 8007c3c:	0800cdbc 	.word	0x0800cdbc
 8007c40:	0800cdc0 	.word	0x0800cdc0

08007c44 <memcmp>:
 8007c44:	b510      	push	{r4, lr}
 8007c46:	3901      	subs	r1, #1
 8007c48:	4402      	add	r2, r0
 8007c4a:	4290      	cmp	r0, r2
 8007c4c:	d101      	bne.n	8007c52 <memcmp+0xe>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e005      	b.n	8007c5e <memcmp+0x1a>
 8007c52:	7803      	ldrb	r3, [r0, #0]
 8007c54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d001      	beq.n	8007c60 <memcmp+0x1c>
 8007c5c:	1b18      	subs	r0, r3, r4
 8007c5e:	bd10      	pop	{r4, pc}
 8007c60:	3001      	adds	r0, #1
 8007c62:	e7f2      	b.n	8007c4a <memcmp+0x6>

08007c64 <memcpy>:
 8007c64:	440a      	add	r2, r1
 8007c66:	4291      	cmp	r1, r2
 8007c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c6c:	d100      	bne.n	8007c70 <memcpy+0xc>
 8007c6e:	4770      	bx	lr
 8007c70:	b510      	push	{r4, lr}
 8007c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c76:	4291      	cmp	r1, r2
 8007c78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c7c:	d1f9      	bne.n	8007c72 <memcpy+0xe>
 8007c7e:	bd10      	pop	{r4, pc}

08007c80 <memset>:
 8007c80:	4603      	mov	r3, r0
 8007c82:	4402      	add	r2, r0
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d100      	bne.n	8007c8a <memset+0xa>
 8007c88:	4770      	bx	lr
 8007c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8e:	e7f9      	b.n	8007c84 <memset+0x4>

08007c90 <__cvt>:
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c96:	461f      	mov	r7, r3
 8007c98:	bfbb      	ittet	lt
 8007c9a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007c9e:	461f      	movlt	r7, r3
 8007ca0:	2300      	movge	r3, #0
 8007ca2:	232d      	movlt	r3, #45	; 0x2d
 8007ca4:	b088      	sub	sp, #32
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007caa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007cac:	7013      	strb	r3, [r2, #0]
 8007cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007cb4:	f023 0820 	bic.w	r8, r3, #32
 8007cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cbc:	d005      	beq.n	8007cca <__cvt+0x3a>
 8007cbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007cc2:	d100      	bne.n	8007cc6 <__cvt+0x36>
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e000      	b.n	8007ccc <__cvt+0x3c>
 8007cca:	2303      	movs	r3, #3
 8007ccc:	aa07      	add	r2, sp, #28
 8007cce:	9204      	str	r2, [sp, #16]
 8007cd0:	aa06      	add	r2, sp, #24
 8007cd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007cd6:	e9cd 3500 	strd	r3, r5, [sp]
 8007cda:	4622      	mov	r2, r4
 8007cdc:	463b      	mov	r3, r7
 8007cde:	f001 fd83 	bl	80097e8 <_dtoa_r>
 8007ce2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	d102      	bne.n	8007cf0 <__cvt+0x60>
 8007cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cec:	07db      	lsls	r3, r3, #31
 8007cee:	d522      	bpl.n	8007d36 <__cvt+0xa6>
 8007cf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cf4:	eb06 0905 	add.w	r9, r6, r5
 8007cf8:	d110      	bne.n	8007d1c <__cvt+0x8c>
 8007cfa:	7833      	ldrb	r3, [r6, #0]
 8007cfc:	2b30      	cmp	r3, #48	; 0x30
 8007cfe:	d10a      	bne.n	8007d16 <__cvt+0x86>
 8007d00:	2200      	movs	r2, #0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4620      	mov	r0, r4
 8007d06:	4639      	mov	r1, r7
 8007d08:	f7f8 fe4e 	bl	80009a8 <__aeabi_dcmpeq>
 8007d0c:	b918      	cbnz	r0, 8007d16 <__cvt+0x86>
 8007d0e:	f1c5 0501 	rsb	r5, r5, #1
 8007d12:	f8ca 5000 	str.w	r5, [sl]
 8007d16:	f8da 3000 	ldr.w	r3, [sl]
 8007d1a:	4499      	add	r9, r3
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4620      	mov	r0, r4
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fe40 	bl	80009a8 <__aeabi_dcmpeq>
 8007d28:	b108      	cbz	r0, 8007d2e <__cvt+0x9e>
 8007d2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8007d2e:	2230      	movs	r2, #48	; 0x30
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	454b      	cmp	r3, r9
 8007d34:	d307      	bcc.n	8007d46 <__cvt+0xb6>
 8007d36:	4630      	mov	r0, r6
 8007d38:	9b07      	ldr	r3, [sp, #28]
 8007d3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d3c:	1b9b      	subs	r3, r3, r6
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	b008      	add	sp, #32
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	1c59      	adds	r1, r3, #1
 8007d48:	9107      	str	r1, [sp, #28]
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e7f0      	b.n	8007d30 <__cvt+0xa0>

08007d4e <__exponent>:
 8007d4e:	4603      	mov	r3, r0
 8007d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d52:	2900      	cmp	r1, #0
 8007d54:	f803 2b02 	strb.w	r2, [r3], #2
 8007d58:	bfb6      	itet	lt
 8007d5a:	222d      	movlt	r2, #45	; 0x2d
 8007d5c:	222b      	movge	r2, #43	; 0x2b
 8007d5e:	4249      	neglt	r1, r1
 8007d60:	2909      	cmp	r1, #9
 8007d62:	7042      	strb	r2, [r0, #1]
 8007d64:	dd2b      	ble.n	8007dbe <__exponent+0x70>
 8007d66:	f10d 0407 	add.w	r4, sp, #7
 8007d6a:	46a4      	mov	ip, r4
 8007d6c:	270a      	movs	r7, #10
 8007d6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d72:	460a      	mov	r2, r1
 8007d74:	46a6      	mov	lr, r4
 8007d76:	fb07 1516 	mls	r5, r7, r6, r1
 8007d7a:	2a63      	cmp	r2, #99	; 0x63
 8007d7c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007d80:	4631      	mov	r1, r6
 8007d82:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d8a:	dcf0      	bgt.n	8007d6e <__exponent+0x20>
 8007d8c:	3130      	adds	r1, #48	; 0x30
 8007d8e:	f1ae 0502 	sub.w	r5, lr, #2
 8007d92:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d96:	4629      	mov	r1, r5
 8007d98:	1c44      	adds	r4, r0, #1
 8007d9a:	4561      	cmp	r1, ip
 8007d9c:	d30a      	bcc.n	8007db4 <__exponent+0x66>
 8007d9e:	f10d 0209 	add.w	r2, sp, #9
 8007da2:	eba2 020e 	sub.w	r2, r2, lr
 8007da6:	4565      	cmp	r5, ip
 8007da8:	bf88      	it	hi
 8007daa:	2200      	movhi	r2, #0
 8007dac:	4413      	add	r3, r2
 8007dae:	1a18      	subs	r0, r3, r0
 8007db0:	b003      	add	sp, #12
 8007db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007db8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007dbc:	e7ed      	b.n	8007d9a <__exponent+0x4c>
 8007dbe:	2330      	movs	r3, #48	; 0x30
 8007dc0:	3130      	adds	r1, #48	; 0x30
 8007dc2:	7083      	strb	r3, [r0, #2]
 8007dc4:	70c1      	strb	r1, [r0, #3]
 8007dc6:	1d03      	adds	r3, r0, #4
 8007dc8:	e7f1      	b.n	8007dae <__exponent+0x60>
	...

08007dcc <_printf_float>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	b091      	sub	sp, #68	; 0x44
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007dd8:	4616      	mov	r6, r2
 8007dda:	461f      	mov	r7, r3
 8007ddc:	4605      	mov	r5, r0
 8007dde:	f002 fe57 	bl	800aa90 <_localeconv_r>
 8007de2:	6803      	ldr	r3, [r0, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	9309      	str	r3, [sp, #36]	; 0x24
 8007de8:	f7f8 f9b2 	bl	8000150 <strlen>
 8007dec:	2300      	movs	r3, #0
 8007dee:	930e      	str	r3, [sp, #56]	; 0x38
 8007df0:	f8d8 3000 	ldr.w	r3, [r8]
 8007df4:	900a      	str	r0, [sp, #40]	; 0x28
 8007df6:	3307      	adds	r3, #7
 8007df8:	f023 0307 	bic.w	r3, r3, #7
 8007dfc:	f103 0208 	add.w	r2, r3, #8
 8007e00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007e04:	f8d4 b000 	ldr.w	fp, [r4]
 8007e08:	f8c8 2000 	str.w	r2, [r8]
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007e18:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e22:	4640      	mov	r0, r8
 8007e24:	4b9c      	ldr	r3, [pc, #624]	; (8008098 <_printf_float+0x2cc>)
 8007e26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e28:	f7f8 fdf0 	bl	8000a0c <__aeabi_dcmpun>
 8007e2c:	bb70      	cbnz	r0, 8007e8c <_printf_float+0xc0>
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e32:	4640      	mov	r0, r8
 8007e34:	4b98      	ldr	r3, [pc, #608]	; (8008098 <_printf_float+0x2cc>)
 8007e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e38:	f7f8 fdca 	bl	80009d0 <__aeabi_dcmple>
 8007e3c:	bb30      	cbnz	r0, 8007e8c <_printf_float+0xc0>
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2300      	movs	r3, #0
 8007e42:	4640      	mov	r0, r8
 8007e44:	4651      	mov	r1, sl
 8007e46:	f7f8 fdb9 	bl	80009bc <__aeabi_dcmplt>
 8007e4a:	b110      	cbz	r0, 8007e52 <_printf_float+0x86>
 8007e4c:	232d      	movs	r3, #45	; 0x2d
 8007e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e52:	4b92      	ldr	r3, [pc, #584]	; (800809c <_printf_float+0x2d0>)
 8007e54:	4892      	ldr	r0, [pc, #584]	; (80080a0 <_printf_float+0x2d4>)
 8007e56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007e5a:	bf94      	ite	ls
 8007e5c:	4698      	movls	r8, r3
 8007e5e:	4680      	movhi	r8, r0
 8007e60:	2303      	movs	r3, #3
 8007e62:	f04f 0a00 	mov.w	sl, #0
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	f02b 0304 	bic.w	r3, fp, #4
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	4633      	mov	r3, r6
 8007e70:	4621      	mov	r1, r4
 8007e72:	4628      	mov	r0, r5
 8007e74:	9700      	str	r7, [sp, #0]
 8007e76:	aa0f      	add	r2, sp, #60	; 0x3c
 8007e78:	f000 f9d4 	bl	8008224 <_printf_common>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f040 8090 	bne.w	8007fa2 <_printf_float+0x1d6>
 8007e82:	f04f 30ff 	mov.w	r0, #4294967295
 8007e86:	b011      	add	sp, #68	; 0x44
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	4653      	mov	r3, sl
 8007e90:	4640      	mov	r0, r8
 8007e92:	4651      	mov	r1, sl
 8007e94:	f7f8 fdba 	bl	8000a0c <__aeabi_dcmpun>
 8007e98:	b148      	cbz	r0, 8007eae <_printf_float+0xe2>
 8007e9a:	f1ba 0f00 	cmp.w	sl, #0
 8007e9e:	bfb8      	it	lt
 8007ea0:	232d      	movlt	r3, #45	; 0x2d
 8007ea2:	4880      	ldr	r0, [pc, #512]	; (80080a4 <_printf_float+0x2d8>)
 8007ea4:	bfb8      	it	lt
 8007ea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007eaa:	4b7f      	ldr	r3, [pc, #508]	; (80080a8 <_printf_float+0x2dc>)
 8007eac:	e7d3      	b.n	8007e56 <_printf_float+0x8a>
 8007eae:	6863      	ldr	r3, [r4, #4]
 8007eb0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	d142      	bne.n	8007f3e <_printf_float+0x172>
 8007eb8:	2306      	movs	r3, #6
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	9206      	str	r2, [sp, #24]
 8007ec0:	aa0e      	add	r2, sp, #56	; 0x38
 8007ec2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007ec6:	aa0d      	add	r2, sp, #52	; 0x34
 8007ec8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007ecc:	9203      	str	r2, [sp, #12]
 8007ece:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007ed2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	4642      	mov	r2, r8
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	4653      	mov	r3, sl
 8007ee2:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ee4:	f7ff fed4 	bl	8007c90 <__cvt>
 8007ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eea:	4680      	mov	r8, r0
 8007eec:	2947      	cmp	r1, #71	; 0x47
 8007eee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ef0:	d108      	bne.n	8007f04 <_printf_float+0x138>
 8007ef2:	1cc8      	adds	r0, r1, #3
 8007ef4:	db02      	blt.n	8007efc <_printf_float+0x130>
 8007ef6:	6863      	ldr	r3, [r4, #4]
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	dd40      	ble.n	8007f7e <_printf_float+0x1b2>
 8007efc:	f1a9 0902 	sub.w	r9, r9, #2
 8007f00:	fa5f f989 	uxtb.w	r9, r9
 8007f04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f08:	d81f      	bhi.n	8007f4a <_printf_float+0x17e>
 8007f0a:	464a      	mov	r2, r9
 8007f0c:	3901      	subs	r1, #1
 8007f0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f12:	910d      	str	r1, [sp, #52]	; 0x34
 8007f14:	f7ff ff1b 	bl	8007d4e <__exponent>
 8007f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f1a:	4682      	mov	sl, r0
 8007f1c:	1813      	adds	r3, r2, r0
 8007f1e:	2a01      	cmp	r2, #1
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	dc02      	bgt.n	8007f2a <_printf_float+0x15e>
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	07d2      	lsls	r2, r2, #31
 8007f28:	d501      	bpl.n	8007f2e <_printf_float+0x162>
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	6123      	str	r3, [r4, #16]
 8007f2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d09b      	beq.n	8007e6e <_printf_float+0xa2>
 8007f36:	232d      	movs	r3, #45	; 0x2d
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3c:	e797      	b.n	8007e6e <_printf_float+0xa2>
 8007f3e:	2947      	cmp	r1, #71	; 0x47
 8007f40:	d1bc      	bne.n	8007ebc <_printf_float+0xf0>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1ba      	bne.n	8007ebc <_printf_float+0xf0>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e7b7      	b.n	8007eba <_printf_float+0xee>
 8007f4a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007f4e:	d118      	bne.n	8007f82 <_printf_float+0x1b6>
 8007f50:	2900      	cmp	r1, #0
 8007f52:	6863      	ldr	r3, [r4, #4]
 8007f54:	dd0b      	ble.n	8007f6e <_printf_float+0x1a2>
 8007f56:	6121      	str	r1, [r4, #16]
 8007f58:	b913      	cbnz	r3, 8007f60 <_printf_float+0x194>
 8007f5a:	6822      	ldr	r2, [r4, #0]
 8007f5c:	07d0      	lsls	r0, r2, #31
 8007f5e:	d502      	bpl.n	8007f66 <_printf_float+0x19a>
 8007f60:	3301      	adds	r3, #1
 8007f62:	440b      	add	r3, r1
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	f04f 0a00 	mov.w	sl, #0
 8007f6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f6c:	e7df      	b.n	8007f2e <_printf_float+0x162>
 8007f6e:	b913      	cbnz	r3, 8007f76 <_printf_float+0x1aa>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	07d2      	lsls	r2, r2, #31
 8007f74:	d501      	bpl.n	8007f7a <_printf_float+0x1ae>
 8007f76:	3302      	adds	r3, #2
 8007f78:	e7f4      	b.n	8007f64 <_printf_float+0x198>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7f2      	b.n	8007f64 <_printf_float+0x198>
 8007f7e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f84:	4299      	cmp	r1, r3
 8007f86:	db05      	blt.n	8007f94 <_printf_float+0x1c8>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	6121      	str	r1, [r4, #16]
 8007f8c:	07d8      	lsls	r0, r3, #31
 8007f8e:	d5ea      	bpl.n	8007f66 <_printf_float+0x19a>
 8007f90:	1c4b      	adds	r3, r1, #1
 8007f92:	e7e7      	b.n	8007f64 <_printf_float+0x198>
 8007f94:	2900      	cmp	r1, #0
 8007f96:	bfcc      	ite	gt
 8007f98:	2201      	movgt	r2, #1
 8007f9a:	f1c1 0202 	rsble	r2, r1, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	e7e0      	b.n	8007f64 <_printf_float+0x198>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	055a      	lsls	r2, r3, #21
 8007fa6:	d407      	bmi.n	8007fb8 <_printf_float+0x1ec>
 8007fa8:	6923      	ldr	r3, [r4, #16]
 8007faa:	4642      	mov	r2, r8
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d12b      	bne.n	800800e <_printf_float+0x242>
 8007fb6:	e764      	b.n	8007e82 <_printf_float+0xb6>
 8007fb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007fbc:	f240 80dd 	bls.w	800817a <_printf_float+0x3ae>
 8007fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f7f8 fcee 	bl	80009a8 <__aeabi_dcmpeq>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d033      	beq.n	8008038 <_printf_float+0x26c>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	4a35      	ldr	r2, [pc, #212]	; (80080ac <_printf_float+0x2e0>)
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f af51 	beq.w	8007e82 <_printf_float+0xb6>
 8007fe0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	db02      	blt.n	8007fee <_printf_float+0x222>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	07d8      	lsls	r0, r3, #31
 8007fec:	d50f      	bpl.n	800800e <_printf_float+0x242>
 8007fee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f af42 	beq.w	8007e82 <_printf_float+0xb6>
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	f104 091a 	add.w	r9, r4, #26
 8008006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008008:	3b01      	subs	r3, #1
 800800a:	4543      	cmp	r3, r8
 800800c:	dc09      	bgt.n	8008022 <_printf_float+0x256>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	079b      	lsls	r3, r3, #30
 8008012:	f100 8102 	bmi.w	800821a <_printf_float+0x44e>
 8008016:	68e0      	ldr	r0, [r4, #12]
 8008018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800801a:	4298      	cmp	r0, r3
 800801c:	bfb8      	it	lt
 800801e:	4618      	movlt	r0, r3
 8008020:	e731      	b.n	8007e86 <_printf_float+0xba>
 8008022:	2301      	movs	r3, #1
 8008024:	464a      	mov	r2, r9
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f af28 	beq.w	8007e82 <_printf_float+0xb6>
 8008032:	f108 0801 	add.w	r8, r8, #1
 8008036:	e7e6      	b.n	8008006 <_printf_float+0x23a>
 8008038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800803a:	2b00      	cmp	r3, #0
 800803c:	dc38      	bgt.n	80080b0 <_printf_float+0x2e4>
 800803e:	2301      	movs	r3, #1
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	4a19      	ldr	r2, [pc, #100]	; (80080ac <_printf_float+0x2e0>)
 8008046:	47b8      	blx	r7
 8008048:	3001      	adds	r0, #1
 800804a:	f43f af1a 	beq.w	8007e82 <_printf_float+0xb6>
 800804e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008052:	4313      	orrs	r3, r2
 8008054:	d102      	bne.n	800805c <_printf_float+0x290>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	07d9      	lsls	r1, r3, #31
 800805a:	d5d8      	bpl.n	800800e <_printf_float+0x242>
 800805c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f af0b 	beq.w	8007e82 <_printf_float+0xb6>
 800806c:	f04f 0900 	mov.w	r9, #0
 8008070:	f104 0a1a 	add.w	sl, r4, #26
 8008074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008076:	425b      	negs	r3, r3
 8008078:	454b      	cmp	r3, r9
 800807a:	dc01      	bgt.n	8008080 <_printf_float+0x2b4>
 800807c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800807e:	e794      	b.n	8007faa <_printf_float+0x1de>
 8008080:	2301      	movs	r3, #1
 8008082:	4652      	mov	r2, sl
 8008084:	4631      	mov	r1, r6
 8008086:	4628      	mov	r0, r5
 8008088:	47b8      	blx	r7
 800808a:	3001      	adds	r0, #1
 800808c:	f43f aef9 	beq.w	8007e82 <_printf_float+0xb6>
 8008090:	f109 0901 	add.w	r9, r9, #1
 8008094:	e7ee      	b.n	8008074 <_printf_float+0x2a8>
 8008096:	bf00      	nop
 8008098:	7fefffff 	.word	0x7fefffff
 800809c:	0800c918 	.word	0x0800c918
 80080a0:	0800c91c 	.word	0x0800c91c
 80080a4:	0800c924 	.word	0x0800c924
 80080a8:	0800c920 	.word	0x0800c920
 80080ac:	0800c928 	.word	0x0800c928
 80080b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080b4:	429a      	cmp	r2, r3
 80080b6:	bfa8      	it	ge
 80080b8:	461a      	movge	r2, r3
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	4691      	mov	r9, r2
 80080be:	dc37      	bgt.n	8008130 <_printf_float+0x364>
 80080c0:	f04f 0b00 	mov.w	fp, #0
 80080c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c8:	f104 021a 	add.w	r2, r4, #26
 80080cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080d0:	ebaa 0309 	sub.w	r3, sl, r9
 80080d4:	455b      	cmp	r3, fp
 80080d6:	dc33      	bgt.n	8008140 <_printf_float+0x374>
 80080d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80080dc:	429a      	cmp	r2, r3
 80080de:	db3b      	blt.n	8008158 <_printf_float+0x38c>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	07da      	lsls	r2, r3, #31
 80080e4:	d438      	bmi.n	8008158 <_printf_float+0x38c>
 80080e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080ea:	eba3 020a 	sub.w	r2, r3, sl
 80080ee:	eba3 0901 	sub.w	r9, r3, r1
 80080f2:	4591      	cmp	r9, r2
 80080f4:	bfa8      	it	ge
 80080f6:	4691      	movge	r9, r2
 80080f8:	f1b9 0f00 	cmp.w	r9, #0
 80080fc:	dc34      	bgt.n	8008168 <_printf_float+0x39c>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008106:	f104 0a1a 	add.w	sl, r4, #26
 800810a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800810e:	1a9b      	subs	r3, r3, r2
 8008110:	eba3 0309 	sub.w	r3, r3, r9
 8008114:	4543      	cmp	r3, r8
 8008116:	f77f af7a 	ble.w	800800e <_printf_float+0x242>
 800811a:	2301      	movs	r3, #1
 800811c:	4652      	mov	r2, sl
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f aeac 	beq.w	8007e82 <_printf_float+0xb6>
 800812a:	f108 0801 	add.w	r8, r8, #1
 800812e:	e7ec      	b.n	800810a <_printf_float+0x33e>
 8008130:	4613      	mov	r3, r2
 8008132:	4631      	mov	r1, r6
 8008134:	4642      	mov	r2, r8
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	d1c0      	bne.n	80080c0 <_printf_float+0x2f4>
 800813e:	e6a0      	b.n	8007e82 <_printf_float+0xb6>
 8008140:	2301      	movs	r3, #1
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	920b      	str	r2, [sp, #44]	; 0x2c
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	f43f ae99 	beq.w	8007e82 <_printf_float+0xb6>
 8008150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008152:	f10b 0b01 	add.w	fp, fp, #1
 8008156:	e7b9      	b.n	80080cc <_printf_float+0x300>
 8008158:	4631      	mov	r1, r6
 800815a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800815e:	4628      	mov	r0, r5
 8008160:	47b8      	blx	r7
 8008162:	3001      	adds	r0, #1
 8008164:	d1bf      	bne.n	80080e6 <_printf_float+0x31a>
 8008166:	e68c      	b.n	8007e82 <_printf_float+0xb6>
 8008168:	464b      	mov	r3, r9
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	eb08 020a 	add.w	r2, r8, sl
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	d1c2      	bne.n	80080fe <_printf_float+0x332>
 8008178:	e683      	b.n	8007e82 <_printf_float+0xb6>
 800817a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800817c:	2a01      	cmp	r2, #1
 800817e:	dc01      	bgt.n	8008184 <_printf_float+0x3b8>
 8008180:	07db      	lsls	r3, r3, #31
 8008182:	d537      	bpl.n	80081f4 <_printf_float+0x428>
 8008184:	2301      	movs	r3, #1
 8008186:	4642      	mov	r2, r8
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f ae77 	beq.w	8007e82 <_printf_float+0xb6>
 8008194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f ae6f 	beq.w	8007e82 <_printf_float+0xb6>
 80081a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081a8:	2200      	movs	r2, #0
 80081aa:	2300      	movs	r3, #0
 80081ac:	f7f8 fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80081b0:	b9d8      	cbnz	r0, 80081ea <_printf_float+0x41e>
 80081b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b4:	f108 0201 	add.w	r2, r8, #1
 80081b8:	3b01      	subs	r3, #1
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	d10e      	bne.n	80081e2 <_printf_float+0x416>
 80081c4:	e65d      	b.n	8007e82 <_printf_float+0xb6>
 80081c6:	2301      	movs	r3, #1
 80081c8:	464a      	mov	r2, r9
 80081ca:	4631      	mov	r1, r6
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	f43f ae56 	beq.w	8007e82 <_printf_float+0xb6>
 80081d6:	f108 0801 	add.w	r8, r8, #1
 80081da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081dc:	3b01      	subs	r3, #1
 80081de:	4543      	cmp	r3, r8
 80081e0:	dcf1      	bgt.n	80081c6 <_printf_float+0x3fa>
 80081e2:	4653      	mov	r3, sl
 80081e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081e8:	e6e0      	b.n	8007fac <_printf_float+0x1e0>
 80081ea:	f04f 0800 	mov.w	r8, #0
 80081ee:	f104 091a 	add.w	r9, r4, #26
 80081f2:	e7f2      	b.n	80081da <_printf_float+0x40e>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4642      	mov	r2, r8
 80081f8:	e7df      	b.n	80081ba <_printf_float+0x3ee>
 80081fa:	2301      	movs	r3, #1
 80081fc:	464a      	mov	r2, r9
 80081fe:	4631      	mov	r1, r6
 8008200:	4628      	mov	r0, r5
 8008202:	47b8      	blx	r7
 8008204:	3001      	adds	r0, #1
 8008206:	f43f ae3c 	beq.w	8007e82 <_printf_float+0xb6>
 800820a:	f108 0801 	add.w	r8, r8, #1
 800820e:	68e3      	ldr	r3, [r4, #12]
 8008210:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008212:	1a5b      	subs	r3, r3, r1
 8008214:	4543      	cmp	r3, r8
 8008216:	dcf0      	bgt.n	80081fa <_printf_float+0x42e>
 8008218:	e6fd      	b.n	8008016 <_printf_float+0x24a>
 800821a:	f04f 0800 	mov.w	r8, #0
 800821e:	f104 0919 	add.w	r9, r4, #25
 8008222:	e7f4      	b.n	800820e <_printf_float+0x442>

08008224 <_printf_common>:
 8008224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	4616      	mov	r6, r2
 800822a:	4699      	mov	r9, r3
 800822c:	688a      	ldr	r2, [r1, #8]
 800822e:	690b      	ldr	r3, [r1, #16]
 8008230:	4607      	mov	r7, r0
 8008232:	4293      	cmp	r3, r2
 8008234:	bfb8      	it	lt
 8008236:	4613      	movlt	r3, r2
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800823e:	460c      	mov	r4, r1
 8008240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008244:	b10a      	cbz	r2, 800824a <_printf_common+0x26>
 8008246:	3301      	adds	r3, #1
 8008248:	6033      	str	r3, [r6, #0]
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	0699      	lsls	r1, r3, #26
 800824e:	bf42      	ittt	mi
 8008250:	6833      	ldrmi	r3, [r6, #0]
 8008252:	3302      	addmi	r3, #2
 8008254:	6033      	strmi	r3, [r6, #0]
 8008256:	6825      	ldr	r5, [r4, #0]
 8008258:	f015 0506 	ands.w	r5, r5, #6
 800825c:	d106      	bne.n	800826c <_printf_common+0x48>
 800825e:	f104 0a19 	add.w	sl, r4, #25
 8008262:	68e3      	ldr	r3, [r4, #12]
 8008264:	6832      	ldr	r2, [r6, #0]
 8008266:	1a9b      	subs	r3, r3, r2
 8008268:	42ab      	cmp	r3, r5
 800826a:	dc28      	bgt.n	80082be <_printf_common+0x9a>
 800826c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008270:	1e13      	subs	r3, r2, #0
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	bf18      	it	ne
 8008276:	2301      	movne	r3, #1
 8008278:	0692      	lsls	r2, r2, #26
 800827a:	d42d      	bmi.n	80082d8 <_printf_common+0xb4>
 800827c:	4649      	mov	r1, r9
 800827e:	4638      	mov	r0, r7
 8008280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008284:	47c0      	blx	r8
 8008286:	3001      	adds	r0, #1
 8008288:	d020      	beq.n	80082cc <_printf_common+0xa8>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	68e5      	ldr	r5, [r4, #12]
 800828e:	f003 0306 	and.w	r3, r3, #6
 8008292:	2b04      	cmp	r3, #4
 8008294:	bf18      	it	ne
 8008296:	2500      	movne	r5, #0
 8008298:	6832      	ldr	r2, [r6, #0]
 800829a:	f04f 0600 	mov.w	r6, #0
 800829e:	68a3      	ldr	r3, [r4, #8]
 80082a0:	bf08      	it	eq
 80082a2:	1aad      	subeq	r5, r5, r2
 80082a4:	6922      	ldr	r2, [r4, #16]
 80082a6:	bf08      	it	eq
 80082a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082ac:	4293      	cmp	r3, r2
 80082ae:	bfc4      	itt	gt
 80082b0:	1a9b      	subgt	r3, r3, r2
 80082b2:	18ed      	addgt	r5, r5, r3
 80082b4:	341a      	adds	r4, #26
 80082b6:	42b5      	cmp	r5, r6
 80082b8:	d11a      	bne.n	80082f0 <_printf_common+0xcc>
 80082ba:	2000      	movs	r0, #0
 80082bc:	e008      	b.n	80082d0 <_printf_common+0xac>
 80082be:	2301      	movs	r3, #1
 80082c0:	4652      	mov	r2, sl
 80082c2:	4649      	mov	r1, r9
 80082c4:	4638      	mov	r0, r7
 80082c6:	47c0      	blx	r8
 80082c8:	3001      	adds	r0, #1
 80082ca:	d103      	bne.n	80082d4 <_printf_common+0xb0>
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d4:	3501      	adds	r5, #1
 80082d6:	e7c4      	b.n	8008262 <_printf_common+0x3e>
 80082d8:	2030      	movs	r0, #48	; 0x30
 80082da:	18e1      	adds	r1, r4, r3
 80082dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082e6:	4422      	add	r2, r4
 80082e8:	3302      	adds	r3, #2
 80082ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ee:	e7c5      	b.n	800827c <_printf_common+0x58>
 80082f0:	2301      	movs	r3, #1
 80082f2:	4622      	mov	r2, r4
 80082f4:	4649      	mov	r1, r9
 80082f6:	4638      	mov	r0, r7
 80082f8:	47c0      	blx	r8
 80082fa:	3001      	adds	r0, #1
 80082fc:	d0e6      	beq.n	80082cc <_printf_common+0xa8>
 80082fe:	3601      	adds	r6, #1
 8008300:	e7d9      	b.n	80082b6 <_printf_common+0x92>
	...

08008304 <_printf_i>:
 8008304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	7e0f      	ldrb	r7, [r1, #24]
 800830a:	4691      	mov	r9, r2
 800830c:	2f78      	cmp	r7, #120	; 0x78
 800830e:	4680      	mov	r8, r0
 8008310:	460c      	mov	r4, r1
 8008312:	469a      	mov	sl, r3
 8008314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800831a:	d807      	bhi.n	800832c <_printf_i+0x28>
 800831c:	2f62      	cmp	r7, #98	; 0x62
 800831e:	d80a      	bhi.n	8008336 <_printf_i+0x32>
 8008320:	2f00      	cmp	r7, #0
 8008322:	f000 80d9 	beq.w	80084d8 <_printf_i+0x1d4>
 8008326:	2f58      	cmp	r7, #88	; 0x58
 8008328:	f000 80a4 	beq.w	8008474 <_printf_i+0x170>
 800832c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008334:	e03a      	b.n	80083ac <_printf_i+0xa8>
 8008336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800833a:	2b15      	cmp	r3, #21
 800833c:	d8f6      	bhi.n	800832c <_printf_i+0x28>
 800833e:	a101      	add	r1, pc, #4	; (adr r1, 8008344 <_printf_i+0x40>)
 8008340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008344:	0800839d 	.word	0x0800839d
 8008348:	080083b1 	.word	0x080083b1
 800834c:	0800832d 	.word	0x0800832d
 8008350:	0800832d 	.word	0x0800832d
 8008354:	0800832d 	.word	0x0800832d
 8008358:	0800832d 	.word	0x0800832d
 800835c:	080083b1 	.word	0x080083b1
 8008360:	0800832d 	.word	0x0800832d
 8008364:	0800832d 	.word	0x0800832d
 8008368:	0800832d 	.word	0x0800832d
 800836c:	0800832d 	.word	0x0800832d
 8008370:	080084bf 	.word	0x080084bf
 8008374:	080083e1 	.word	0x080083e1
 8008378:	080084a1 	.word	0x080084a1
 800837c:	0800832d 	.word	0x0800832d
 8008380:	0800832d 	.word	0x0800832d
 8008384:	080084e1 	.word	0x080084e1
 8008388:	0800832d 	.word	0x0800832d
 800838c:	080083e1 	.word	0x080083e1
 8008390:	0800832d 	.word	0x0800832d
 8008394:	0800832d 	.word	0x0800832d
 8008398:	080084a9 	.word	0x080084a9
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	1d1a      	adds	r2, r3, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	602a      	str	r2, [r5, #0]
 80083a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083ac:	2301      	movs	r3, #1
 80083ae:	e0a4      	b.n	80084fa <_printf_i+0x1f6>
 80083b0:	6820      	ldr	r0, [r4, #0]
 80083b2:	6829      	ldr	r1, [r5, #0]
 80083b4:	0606      	lsls	r6, r0, #24
 80083b6:	f101 0304 	add.w	r3, r1, #4
 80083ba:	d50a      	bpl.n	80083d2 <_printf_i+0xce>
 80083bc:	680e      	ldr	r6, [r1, #0]
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	2e00      	cmp	r6, #0
 80083c2:	da03      	bge.n	80083cc <_printf_i+0xc8>
 80083c4:	232d      	movs	r3, #45	; 0x2d
 80083c6:	4276      	negs	r6, r6
 80083c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083cc:	230a      	movs	r3, #10
 80083ce:	485e      	ldr	r0, [pc, #376]	; (8008548 <_printf_i+0x244>)
 80083d0:	e019      	b.n	8008406 <_printf_i+0x102>
 80083d2:	680e      	ldr	r6, [r1, #0]
 80083d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	bf18      	it	ne
 80083dc:	b236      	sxthne	r6, r6
 80083de:	e7ef      	b.n	80083c0 <_printf_i+0xbc>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	6820      	ldr	r0, [r4, #0]
 80083e4:	1d19      	adds	r1, r3, #4
 80083e6:	6029      	str	r1, [r5, #0]
 80083e8:	0601      	lsls	r1, r0, #24
 80083ea:	d501      	bpl.n	80083f0 <_printf_i+0xec>
 80083ec:	681e      	ldr	r6, [r3, #0]
 80083ee:	e002      	b.n	80083f6 <_printf_i+0xf2>
 80083f0:	0646      	lsls	r6, r0, #25
 80083f2:	d5fb      	bpl.n	80083ec <_printf_i+0xe8>
 80083f4:	881e      	ldrh	r6, [r3, #0]
 80083f6:	2f6f      	cmp	r7, #111	; 0x6f
 80083f8:	bf0c      	ite	eq
 80083fa:	2308      	moveq	r3, #8
 80083fc:	230a      	movne	r3, #10
 80083fe:	4852      	ldr	r0, [pc, #328]	; (8008548 <_printf_i+0x244>)
 8008400:	2100      	movs	r1, #0
 8008402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008406:	6865      	ldr	r5, [r4, #4]
 8008408:	2d00      	cmp	r5, #0
 800840a:	bfa8      	it	ge
 800840c:	6821      	ldrge	r1, [r4, #0]
 800840e:	60a5      	str	r5, [r4, #8]
 8008410:	bfa4      	itt	ge
 8008412:	f021 0104 	bicge.w	r1, r1, #4
 8008416:	6021      	strge	r1, [r4, #0]
 8008418:	b90e      	cbnz	r6, 800841e <_printf_i+0x11a>
 800841a:	2d00      	cmp	r5, #0
 800841c:	d04d      	beq.n	80084ba <_printf_i+0x1b6>
 800841e:	4615      	mov	r5, r2
 8008420:	fbb6 f1f3 	udiv	r1, r6, r3
 8008424:	fb03 6711 	mls	r7, r3, r1, r6
 8008428:	5dc7      	ldrb	r7, [r0, r7]
 800842a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800842e:	4637      	mov	r7, r6
 8008430:	42bb      	cmp	r3, r7
 8008432:	460e      	mov	r6, r1
 8008434:	d9f4      	bls.n	8008420 <_printf_i+0x11c>
 8008436:	2b08      	cmp	r3, #8
 8008438:	d10b      	bne.n	8008452 <_printf_i+0x14e>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	07de      	lsls	r6, r3, #31
 800843e:	d508      	bpl.n	8008452 <_printf_i+0x14e>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	6861      	ldr	r1, [r4, #4]
 8008444:	4299      	cmp	r1, r3
 8008446:	bfde      	ittt	le
 8008448:	2330      	movle	r3, #48	; 0x30
 800844a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800844e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008452:	1b52      	subs	r2, r2, r5
 8008454:	6122      	str	r2, [r4, #16]
 8008456:	464b      	mov	r3, r9
 8008458:	4621      	mov	r1, r4
 800845a:	4640      	mov	r0, r8
 800845c:	f8cd a000 	str.w	sl, [sp]
 8008460:	aa03      	add	r2, sp, #12
 8008462:	f7ff fedf 	bl	8008224 <_printf_common>
 8008466:	3001      	adds	r0, #1
 8008468:	d14c      	bne.n	8008504 <_printf_i+0x200>
 800846a:	f04f 30ff 	mov.w	r0, #4294967295
 800846e:	b004      	add	sp, #16
 8008470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008474:	4834      	ldr	r0, [pc, #208]	; (8008548 <_printf_i+0x244>)
 8008476:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800847a:	6829      	ldr	r1, [r5, #0]
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008482:	6029      	str	r1, [r5, #0]
 8008484:	061d      	lsls	r5, r3, #24
 8008486:	d514      	bpl.n	80084b2 <_printf_i+0x1ae>
 8008488:	07df      	lsls	r7, r3, #31
 800848a:	bf44      	itt	mi
 800848c:	f043 0320 	orrmi.w	r3, r3, #32
 8008490:	6023      	strmi	r3, [r4, #0]
 8008492:	b91e      	cbnz	r6, 800849c <_printf_i+0x198>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	f023 0320 	bic.w	r3, r3, #32
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	2310      	movs	r3, #16
 800849e:	e7af      	b.n	8008400 <_printf_i+0xfc>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	f043 0320 	orr.w	r3, r3, #32
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	2378      	movs	r3, #120	; 0x78
 80084aa:	4828      	ldr	r0, [pc, #160]	; (800854c <_printf_i+0x248>)
 80084ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084b0:	e7e3      	b.n	800847a <_printf_i+0x176>
 80084b2:	0659      	lsls	r1, r3, #25
 80084b4:	bf48      	it	mi
 80084b6:	b2b6      	uxthmi	r6, r6
 80084b8:	e7e6      	b.n	8008488 <_printf_i+0x184>
 80084ba:	4615      	mov	r5, r2
 80084bc:	e7bb      	b.n	8008436 <_printf_i+0x132>
 80084be:	682b      	ldr	r3, [r5, #0]
 80084c0:	6826      	ldr	r6, [r4, #0]
 80084c2:	1d18      	adds	r0, r3, #4
 80084c4:	6961      	ldr	r1, [r4, #20]
 80084c6:	6028      	str	r0, [r5, #0]
 80084c8:	0635      	lsls	r5, r6, #24
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	d501      	bpl.n	80084d2 <_printf_i+0x1ce>
 80084ce:	6019      	str	r1, [r3, #0]
 80084d0:	e002      	b.n	80084d8 <_printf_i+0x1d4>
 80084d2:	0670      	lsls	r0, r6, #25
 80084d4:	d5fb      	bpl.n	80084ce <_printf_i+0x1ca>
 80084d6:	8019      	strh	r1, [r3, #0]
 80084d8:	2300      	movs	r3, #0
 80084da:	4615      	mov	r5, r2
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	e7ba      	b.n	8008456 <_printf_i+0x152>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	2100      	movs	r1, #0
 80084e4:	1d1a      	adds	r2, r3, #4
 80084e6:	602a      	str	r2, [r5, #0]
 80084e8:	681d      	ldr	r5, [r3, #0]
 80084ea:	6862      	ldr	r2, [r4, #4]
 80084ec:	4628      	mov	r0, r5
 80084ee:	f002 faed 	bl	800aacc <memchr>
 80084f2:	b108      	cbz	r0, 80084f8 <_printf_i+0x1f4>
 80084f4:	1b40      	subs	r0, r0, r5
 80084f6:	6060      	str	r0, [r4, #4]
 80084f8:	6863      	ldr	r3, [r4, #4]
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	2300      	movs	r3, #0
 80084fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008502:	e7a8      	b.n	8008456 <_printf_i+0x152>
 8008504:	462a      	mov	r2, r5
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	47d0      	blx	sl
 800850e:	3001      	adds	r0, #1
 8008510:	d0ab      	beq.n	800846a <_printf_i+0x166>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	079b      	lsls	r3, r3, #30
 8008516:	d413      	bmi.n	8008540 <_printf_i+0x23c>
 8008518:	68e0      	ldr	r0, [r4, #12]
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	4298      	cmp	r0, r3
 800851e:	bfb8      	it	lt
 8008520:	4618      	movlt	r0, r3
 8008522:	e7a4      	b.n	800846e <_printf_i+0x16a>
 8008524:	2301      	movs	r3, #1
 8008526:	4632      	mov	r2, r6
 8008528:	4649      	mov	r1, r9
 800852a:	4640      	mov	r0, r8
 800852c:	47d0      	blx	sl
 800852e:	3001      	adds	r0, #1
 8008530:	d09b      	beq.n	800846a <_printf_i+0x166>
 8008532:	3501      	adds	r5, #1
 8008534:	68e3      	ldr	r3, [r4, #12]
 8008536:	9903      	ldr	r1, [sp, #12]
 8008538:	1a5b      	subs	r3, r3, r1
 800853a:	42ab      	cmp	r3, r5
 800853c:	dcf2      	bgt.n	8008524 <_printf_i+0x220>
 800853e:	e7eb      	b.n	8008518 <_printf_i+0x214>
 8008540:	2500      	movs	r5, #0
 8008542:	f104 0619 	add.w	r6, r4, #25
 8008546:	e7f5      	b.n	8008534 <_printf_i+0x230>
 8008548:	0800c92a 	.word	0x0800c92a
 800854c:	0800c93b 	.word	0x0800c93b

08008550 <_scanf_float>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	b087      	sub	sp, #28
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	688b      	ldr	r3, [r1, #8]
 800855a:	4617      	mov	r7, r2
 800855c:	1e5a      	subs	r2, r3, #1
 800855e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008562:	bf85      	ittet	hi
 8008564:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008568:	195b      	addhi	r3, r3, r5
 800856a:	2300      	movls	r3, #0
 800856c:	9302      	strhi	r3, [sp, #8]
 800856e:	bf88      	it	hi
 8008570:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008574:	468b      	mov	fp, r1
 8008576:	f04f 0500 	mov.w	r5, #0
 800857a:	bf8c      	ite	hi
 800857c:	608b      	strhi	r3, [r1, #8]
 800857e:	9302      	strls	r3, [sp, #8]
 8008580:	680b      	ldr	r3, [r1, #0]
 8008582:	4680      	mov	r8, r0
 8008584:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008588:	f84b 3b1c 	str.w	r3, [fp], #28
 800858c:	460c      	mov	r4, r1
 800858e:	465e      	mov	r6, fp
 8008590:	46aa      	mov	sl, r5
 8008592:	46a9      	mov	r9, r5
 8008594:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008598:	9501      	str	r5, [sp, #4]
 800859a:	68a2      	ldr	r2, [r4, #8]
 800859c:	b152      	cbz	r2, 80085b4 <_scanf_float+0x64>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b4e      	cmp	r3, #78	; 0x4e
 80085a4:	d864      	bhi.n	8008670 <_scanf_float+0x120>
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	d83c      	bhi.n	8008624 <_scanf_float+0xd4>
 80085aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80085ae:	b2c8      	uxtb	r0, r1
 80085b0:	280e      	cmp	r0, #14
 80085b2:	d93a      	bls.n	800862a <_scanf_float+0xda>
 80085b4:	f1b9 0f00 	cmp.w	r9, #0
 80085b8:	d003      	beq.n	80085c2 <_scanf_float+0x72>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085c6:	f1ba 0f01 	cmp.w	sl, #1
 80085ca:	f200 8113 	bhi.w	80087f4 <_scanf_float+0x2a4>
 80085ce:	455e      	cmp	r6, fp
 80085d0:	f200 8105 	bhi.w	80087de <_scanf_float+0x28e>
 80085d4:	2501      	movs	r5, #1
 80085d6:	4628      	mov	r0, r5
 80085d8:	b007      	add	sp, #28
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80085e2:	2a0d      	cmp	r2, #13
 80085e4:	d8e6      	bhi.n	80085b4 <_scanf_float+0x64>
 80085e6:	a101      	add	r1, pc, #4	; (adr r1, 80085ec <_scanf_float+0x9c>)
 80085e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085ec:	0800872b 	.word	0x0800872b
 80085f0:	080085b5 	.word	0x080085b5
 80085f4:	080085b5 	.word	0x080085b5
 80085f8:	080085b5 	.word	0x080085b5
 80085fc:	0800878b 	.word	0x0800878b
 8008600:	08008763 	.word	0x08008763
 8008604:	080085b5 	.word	0x080085b5
 8008608:	080085b5 	.word	0x080085b5
 800860c:	08008739 	.word	0x08008739
 8008610:	080085b5 	.word	0x080085b5
 8008614:	080085b5 	.word	0x080085b5
 8008618:	080085b5 	.word	0x080085b5
 800861c:	080085b5 	.word	0x080085b5
 8008620:	080086f1 	.word	0x080086f1
 8008624:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008628:	e7db      	b.n	80085e2 <_scanf_float+0x92>
 800862a:	290e      	cmp	r1, #14
 800862c:	d8c2      	bhi.n	80085b4 <_scanf_float+0x64>
 800862e:	a001      	add	r0, pc, #4	; (adr r0, 8008634 <_scanf_float+0xe4>)
 8008630:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008634:	080086e3 	.word	0x080086e3
 8008638:	080085b5 	.word	0x080085b5
 800863c:	080086e3 	.word	0x080086e3
 8008640:	08008777 	.word	0x08008777
 8008644:	080085b5 	.word	0x080085b5
 8008648:	08008691 	.word	0x08008691
 800864c:	080086cd 	.word	0x080086cd
 8008650:	080086cd 	.word	0x080086cd
 8008654:	080086cd 	.word	0x080086cd
 8008658:	080086cd 	.word	0x080086cd
 800865c:	080086cd 	.word	0x080086cd
 8008660:	080086cd 	.word	0x080086cd
 8008664:	080086cd 	.word	0x080086cd
 8008668:	080086cd 	.word	0x080086cd
 800866c:	080086cd 	.word	0x080086cd
 8008670:	2b6e      	cmp	r3, #110	; 0x6e
 8008672:	d809      	bhi.n	8008688 <_scanf_float+0x138>
 8008674:	2b60      	cmp	r3, #96	; 0x60
 8008676:	d8b2      	bhi.n	80085de <_scanf_float+0x8e>
 8008678:	2b54      	cmp	r3, #84	; 0x54
 800867a:	d077      	beq.n	800876c <_scanf_float+0x21c>
 800867c:	2b59      	cmp	r3, #89	; 0x59
 800867e:	d199      	bne.n	80085b4 <_scanf_float+0x64>
 8008680:	2d07      	cmp	r5, #7
 8008682:	d197      	bne.n	80085b4 <_scanf_float+0x64>
 8008684:	2508      	movs	r5, #8
 8008686:	e029      	b.n	80086dc <_scanf_float+0x18c>
 8008688:	2b74      	cmp	r3, #116	; 0x74
 800868a:	d06f      	beq.n	800876c <_scanf_float+0x21c>
 800868c:	2b79      	cmp	r3, #121	; 0x79
 800868e:	e7f6      	b.n	800867e <_scanf_float+0x12e>
 8008690:	6821      	ldr	r1, [r4, #0]
 8008692:	05c8      	lsls	r0, r1, #23
 8008694:	d51a      	bpl.n	80086cc <_scanf_float+0x17c>
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800869c:	6021      	str	r1, [r4, #0]
 800869e:	f109 0901 	add.w	r9, r9, #1
 80086a2:	b11b      	cbz	r3, 80086ac <_scanf_float+0x15c>
 80086a4:	3b01      	subs	r3, #1
 80086a6:	3201      	adds	r2, #1
 80086a8:	9302      	str	r3, [sp, #8]
 80086aa:	60a2      	str	r2, [r4, #8]
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	60a3      	str	r3, [r4, #8]
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	3301      	adds	r3, #1
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	607b      	str	r3, [r7, #4]
 80086c0:	f340 8084 	ble.w	80087cc <_scanf_float+0x27c>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	3301      	adds	r3, #1
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	e766      	b.n	800859a <_scanf_float+0x4a>
 80086cc:	eb1a 0f05 	cmn.w	sl, r5
 80086d0:	f47f af70 	bne.w	80085b4 <_scanf_float+0x64>
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80086da:	6022      	str	r2, [r4, #0]
 80086dc:	f806 3b01 	strb.w	r3, [r6], #1
 80086e0:	e7e4      	b.n	80086ac <_scanf_float+0x15c>
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	0610      	lsls	r0, r2, #24
 80086e6:	f57f af65 	bpl.w	80085b4 <_scanf_float+0x64>
 80086ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ee:	e7f4      	b.n	80086da <_scanf_float+0x18a>
 80086f0:	f1ba 0f00 	cmp.w	sl, #0
 80086f4:	d10e      	bne.n	8008714 <_scanf_float+0x1c4>
 80086f6:	f1b9 0f00 	cmp.w	r9, #0
 80086fa:	d10e      	bne.n	800871a <_scanf_float+0x1ca>
 80086fc:	6822      	ldr	r2, [r4, #0]
 80086fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008702:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008706:	d108      	bne.n	800871a <_scanf_float+0x1ca>
 8008708:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800870c:	f04f 0a01 	mov.w	sl, #1
 8008710:	6022      	str	r2, [r4, #0]
 8008712:	e7e3      	b.n	80086dc <_scanf_float+0x18c>
 8008714:	f1ba 0f02 	cmp.w	sl, #2
 8008718:	d055      	beq.n	80087c6 <_scanf_float+0x276>
 800871a:	2d01      	cmp	r5, #1
 800871c:	d002      	beq.n	8008724 <_scanf_float+0x1d4>
 800871e:	2d04      	cmp	r5, #4
 8008720:	f47f af48 	bne.w	80085b4 <_scanf_float+0x64>
 8008724:	3501      	adds	r5, #1
 8008726:	b2ed      	uxtb	r5, r5
 8008728:	e7d8      	b.n	80086dc <_scanf_float+0x18c>
 800872a:	f1ba 0f01 	cmp.w	sl, #1
 800872e:	f47f af41 	bne.w	80085b4 <_scanf_float+0x64>
 8008732:	f04f 0a02 	mov.w	sl, #2
 8008736:	e7d1      	b.n	80086dc <_scanf_float+0x18c>
 8008738:	b97d      	cbnz	r5, 800875a <_scanf_float+0x20a>
 800873a:	f1b9 0f00 	cmp.w	r9, #0
 800873e:	f47f af3c 	bne.w	80085ba <_scanf_float+0x6a>
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008748:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800874c:	f47f af39 	bne.w	80085c2 <_scanf_float+0x72>
 8008750:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008754:	2501      	movs	r5, #1
 8008756:	6022      	str	r2, [r4, #0]
 8008758:	e7c0      	b.n	80086dc <_scanf_float+0x18c>
 800875a:	2d03      	cmp	r5, #3
 800875c:	d0e2      	beq.n	8008724 <_scanf_float+0x1d4>
 800875e:	2d05      	cmp	r5, #5
 8008760:	e7de      	b.n	8008720 <_scanf_float+0x1d0>
 8008762:	2d02      	cmp	r5, #2
 8008764:	f47f af26 	bne.w	80085b4 <_scanf_float+0x64>
 8008768:	2503      	movs	r5, #3
 800876a:	e7b7      	b.n	80086dc <_scanf_float+0x18c>
 800876c:	2d06      	cmp	r5, #6
 800876e:	f47f af21 	bne.w	80085b4 <_scanf_float+0x64>
 8008772:	2507      	movs	r5, #7
 8008774:	e7b2      	b.n	80086dc <_scanf_float+0x18c>
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	0591      	lsls	r1, r2, #22
 800877a:	f57f af1b 	bpl.w	80085b4 <_scanf_float+0x64>
 800877e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008782:	6022      	str	r2, [r4, #0]
 8008784:	f8cd 9004 	str.w	r9, [sp, #4]
 8008788:	e7a8      	b.n	80086dc <_scanf_float+0x18c>
 800878a:	6822      	ldr	r2, [r4, #0]
 800878c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008790:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008794:	d006      	beq.n	80087a4 <_scanf_float+0x254>
 8008796:	0550      	lsls	r0, r2, #21
 8008798:	f57f af0c 	bpl.w	80085b4 <_scanf_float+0x64>
 800879c:	f1b9 0f00 	cmp.w	r9, #0
 80087a0:	f43f af0f 	beq.w	80085c2 <_scanf_float+0x72>
 80087a4:	0591      	lsls	r1, r2, #22
 80087a6:	bf58      	it	pl
 80087a8:	9901      	ldrpl	r1, [sp, #4]
 80087aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087ae:	bf58      	it	pl
 80087b0:	eba9 0101 	subpl.w	r1, r9, r1
 80087b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80087b8:	f04f 0900 	mov.w	r9, #0
 80087bc:	bf58      	it	pl
 80087be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	e78a      	b.n	80086dc <_scanf_float+0x18c>
 80087c6:	f04f 0a03 	mov.w	sl, #3
 80087ca:	e787      	b.n	80086dc <_scanf_float+0x18c>
 80087cc:	4639      	mov	r1, r7
 80087ce:	4640      	mov	r0, r8
 80087d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80087d4:	4798      	blx	r3
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f aedf 	beq.w	800859a <_scanf_float+0x4a>
 80087dc:	e6ea      	b.n	80085b4 <_scanf_float+0x64>
 80087de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087e2:	463a      	mov	r2, r7
 80087e4:	4640      	mov	r0, r8
 80087e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087ea:	4798      	blx	r3
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	e6ec      	b.n	80085ce <_scanf_float+0x7e>
 80087f4:	1e6b      	subs	r3, r5, #1
 80087f6:	2b06      	cmp	r3, #6
 80087f8:	d825      	bhi.n	8008846 <_scanf_float+0x2f6>
 80087fa:	2d02      	cmp	r5, #2
 80087fc:	d836      	bhi.n	800886c <_scanf_float+0x31c>
 80087fe:	455e      	cmp	r6, fp
 8008800:	f67f aee8 	bls.w	80085d4 <_scanf_float+0x84>
 8008804:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008808:	463a      	mov	r2, r7
 800880a:	4640      	mov	r0, r8
 800880c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008810:	4798      	blx	r3
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	3b01      	subs	r3, #1
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	e7f1      	b.n	80087fe <_scanf_float+0x2ae>
 800881a:	9802      	ldr	r0, [sp, #8]
 800881c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008820:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008824:	463a      	mov	r2, r7
 8008826:	9002      	str	r0, [sp, #8]
 8008828:	4640      	mov	r0, r8
 800882a:	4798      	blx	r3
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	3b01      	subs	r3, #1
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008836:	fa5f fa8a 	uxtb.w	sl, sl
 800883a:	f1ba 0f02 	cmp.w	sl, #2
 800883e:	d1ec      	bne.n	800881a <_scanf_float+0x2ca>
 8008840:	3d03      	subs	r5, #3
 8008842:	b2ed      	uxtb	r5, r5
 8008844:	1b76      	subs	r6, r6, r5
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	05da      	lsls	r2, r3, #23
 800884a:	d52f      	bpl.n	80088ac <_scanf_float+0x35c>
 800884c:	055b      	lsls	r3, r3, #21
 800884e:	d510      	bpl.n	8008872 <_scanf_float+0x322>
 8008850:	455e      	cmp	r6, fp
 8008852:	f67f aebf 	bls.w	80085d4 <_scanf_float+0x84>
 8008856:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800885a:	463a      	mov	r2, r7
 800885c:	4640      	mov	r0, r8
 800885e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008862:	4798      	blx	r3
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	3b01      	subs	r3, #1
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	e7f1      	b.n	8008850 <_scanf_float+0x300>
 800886c:	46aa      	mov	sl, r5
 800886e:	9602      	str	r6, [sp, #8]
 8008870:	e7df      	b.n	8008832 <_scanf_float+0x2e2>
 8008872:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	2965      	cmp	r1, #101	; 0x65
 800887a:	f103 33ff 	add.w	r3, r3, #4294967295
 800887e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	d00c      	beq.n	80088a0 <_scanf_float+0x350>
 8008886:	2945      	cmp	r1, #69	; 0x45
 8008888:	d00a      	beq.n	80088a0 <_scanf_float+0x350>
 800888a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800888e:	463a      	mov	r2, r7
 8008890:	4640      	mov	r0, r8
 8008892:	4798      	blx	r3
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800889a:	3b01      	subs	r3, #1
 800889c:	1eb5      	subs	r5, r6, #2
 800889e:	6123      	str	r3, [r4, #16]
 80088a0:	463a      	mov	r2, r7
 80088a2:	4640      	mov	r0, r8
 80088a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088a8:	4798      	blx	r3
 80088aa:	462e      	mov	r6, r5
 80088ac:	6825      	ldr	r5, [r4, #0]
 80088ae:	f015 0510 	ands.w	r5, r5, #16
 80088b2:	d155      	bne.n	8008960 <_scanf_float+0x410>
 80088b4:	7035      	strb	r5, [r6, #0]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c0:	d11b      	bne.n	80088fa <_scanf_float+0x3aa>
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	454b      	cmp	r3, r9
 80088c6:	eba3 0209 	sub.w	r2, r3, r9
 80088ca:	d123      	bne.n	8008914 <_scanf_float+0x3c4>
 80088cc:	2200      	movs	r2, #0
 80088ce:	4659      	mov	r1, fp
 80088d0:	4640      	mov	r0, r8
 80088d2:	f000 fe79 	bl	80095c8 <_strtod_r>
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	f012 0f02 	tst.w	r2, #2
 80088de:	4606      	mov	r6, r0
 80088e0:	460f      	mov	r7, r1
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	d021      	beq.n	800892a <_scanf_float+0x3da>
 80088e6:	1d1a      	adds	r2, r3, #4
 80088e8:	9903      	ldr	r1, [sp, #12]
 80088ea:	600a      	str	r2, [r1, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	e9c3 6700 	strd	r6, r7, [r3]
 80088f2:	68e3      	ldr	r3, [r4, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60e3      	str	r3, [r4, #12]
 80088f8:	e66d      	b.n	80085d6 <_scanf_float+0x86>
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0e5      	beq.n	80088cc <_scanf_float+0x37c>
 8008900:	9905      	ldr	r1, [sp, #20]
 8008902:	230a      	movs	r3, #10
 8008904:	462a      	mov	r2, r5
 8008906:	4640      	mov	r0, r8
 8008908:	3101      	adds	r1, #1
 800890a:	f000 fedf 	bl	80096cc <_strtol_r>
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	9e05      	ldr	r6, [sp, #20]
 8008912:	1ac2      	subs	r2, r0, r3
 8008914:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008918:	429e      	cmp	r6, r3
 800891a:	bf28      	it	cs
 800891c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008920:	4630      	mov	r0, r6
 8008922:	4910      	ldr	r1, [pc, #64]	; (8008964 <_scanf_float+0x414>)
 8008924:	f000 f826 	bl	8008974 <siprintf>
 8008928:	e7d0      	b.n	80088cc <_scanf_float+0x37c>
 800892a:	f012 0f04 	tst.w	r2, #4
 800892e:	f103 0204 	add.w	r2, r3, #4
 8008932:	d1d9      	bne.n	80088e8 <_scanf_float+0x398>
 8008934:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008938:	f8cc 2000 	str.w	r2, [ip]
 800893c:	f8d3 8000 	ldr.w	r8, [r3]
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	f7f8 f862 	bl	8000a0c <__aeabi_dcmpun>
 8008948:	b128      	cbz	r0, 8008956 <_scanf_float+0x406>
 800894a:	4807      	ldr	r0, [pc, #28]	; (8008968 <_scanf_float+0x418>)
 800894c:	f000 f80e 	bl	800896c <nanf>
 8008950:	f8c8 0000 	str.w	r0, [r8]
 8008954:	e7cd      	b.n	80088f2 <_scanf_float+0x3a2>
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f8 f8b5 	bl	8000ac8 <__aeabi_d2f>
 800895e:	e7f7      	b.n	8008950 <_scanf_float+0x400>
 8008960:	2500      	movs	r5, #0
 8008962:	e638      	b.n	80085d6 <_scanf_float+0x86>
 8008964:	0800c94c 	.word	0x0800c94c
 8008968:	0800cd58 	.word	0x0800cd58

0800896c <nanf>:
 800896c:	4800      	ldr	r0, [pc, #0]	; (8008970 <nanf+0x4>)
 800896e:	4770      	bx	lr
 8008970:	7fc00000 	.word	0x7fc00000

08008974 <siprintf>:
 8008974:	b40e      	push	{r1, r2, r3}
 8008976:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800897a:	b500      	push	{lr}
 800897c:	b09c      	sub	sp, #112	; 0x70
 800897e:	ab1d      	add	r3, sp, #116	; 0x74
 8008980:	9002      	str	r0, [sp, #8]
 8008982:	9006      	str	r0, [sp, #24]
 8008984:	9107      	str	r1, [sp, #28]
 8008986:	9104      	str	r1, [sp, #16]
 8008988:	4808      	ldr	r0, [pc, #32]	; (80089ac <siprintf+0x38>)
 800898a:	4909      	ldr	r1, [pc, #36]	; (80089b0 <siprintf+0x3c>)
 800898c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008990:	9105      	str	r1, [sp, #20]
 8008992:	6800      	ldr	r0, [r0, #0]
 8008994:	a902      	add	r1, sp, #8
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	f002 feaa 	bl	800b6f0 <_svfiprintf_r>
 800899c:	2200      	movs	r2, #0
 800899e:	9b02      	ldr	r3, [sp, #8]
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	b01c      	add	sp, #112	; 0x70
 80089a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a8:	b003      	add	sp, #12
 80089aa:	4770      	bx	lr
 80089ac:	20000094 	.word	0x20000094
 80089b0:	ffff0208 	.word	0xffff0208

080089b4 <sulp>:
 80089b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b8:	460f      	mov	r7, r1
 80089ba:	4690      	mov	r8, r2
 80089bc:	f002 fc04 	bl	800b1c8 <__ulp>
 80089c0:	4604      	mov	r4, r0
 80089c2:	460d      	mov	r5, r1
 80089c4:	f1b8 0f00 	cmp.w	r8, #0
 80089c8:	d011      	beq.n	80089ee <sulp+0x3a>
 80089ca:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80089ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dd0b      	ble.n	80089ee <sulp+0x3a>
 80089d6:	2400      	movs	r4, #0
 80089d8:	051b      	lsls	r3, r3, #20
 80089da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089e2:	4622      	mov	r2, r4
 80089e4:	462b      	mov	r3, r5
 80089e6:	f7f7 fd77 	bl	80004d8 <__aeabi_dmul>
 80089ea:	4604      	mov	r4, r0
 80089ec:	460d      	mov	r5, r1
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080089f8 <_strtod_l>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	469b      	mov	fp, r3
 80089fe:	2300      	movs	r3, #0
 8008a00:	b09f      	sub	sp, #124	; 0x7c
 8008a02:	931a      	str	r3, [sp, #104]	; 0x68
 8008a04:	4b9e      	ldr	r3, [pc, #632]	; (8008c80 <_strtod_l+0x288>)
 8008a06:	4682      	mov	sl, r0
 8008a08:	681f      	ldr	r7, [r3, #0]
 8008a0a:	460e      	mov	r6, r1
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	9215      	str	r2, [sp, #84]	; 0x54
 8008a10:	f7f7 fb9e 	bl	8000150 <strlen>
 8008a14:	f04f 0800 	mov.w	r8, #0
 8008a18:	4604      	mov	r4, r0
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	9619      	str	r6, [sp, #100]	; 0x64
 8008a20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	2a2b      	cmp	r2, #43	; 0x2b
 8008a26:	d04c      	beq.n	8008ac2 <_strtod_l+0xca>
 8008a28:	d83a      	bhi.n	8008aa0 <_strtod_l+0xa8>
 8008a2a:	2a0d      	cmp	r2, #13
 8008a2c:	d833      	bhi.n	8008a96 <_strtod_l+0x9e>
 8008a2e:	2a08      	cmp	r2, #8
 8008a30:	d833      	bhi.n	8008a9a <_strtod_l+0xa2>
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	d03d      	beq.n	8008ab2 <_strtod_l+0xba>
 8008a36:	2300      	movs	r3, #0
 8008a38:	930a      	str	r3, [sp, #40]	; 0x28
 8008a3a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008a3c:	782b      	ldrb	r3, [r5, #0]
 8008a3e:	2b30      	cmp	r3, #48	; 0x30
 8008a40:	f040 80aa 	bne.w	8008b98 <_strtod_l+0x1a0>
 8008a44:	786b      	ldrb	r3, [r5, #1]
 8008a46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a4a:	2b58      	cmp	r3, #88	; 0x58
 8008a4c:	d166      	bne.n	8008b1c <_strtod_l+0x124>
 8008a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a50:	4650      	mov	r0, sl
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	ab1a      	add	r3, sp, #104	; 0x68
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4a8a      	ldr	r2, [pc, #552]	; (8008c84 <_strtod_l+0x28c>)
 8008a5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a5e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a60:	a919      	add	r1, sp, #100	; 0x64
 8008a62:	f001 fd17 	bl	800a494 <__gethex>
 8008a66:	f010 0607 	ands.w	r6, r0, #7
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	d005      	beq.n	8008a7a <_strtod_l+0x82>
 8008a6e:	2e06      	cmp	r6, #6
 8008a70:	d129      	bne.n	8008ac6 <_strtod_l+0xce>
 8008a72:	2300      	movs	r3, #0
 8008a74:	3501      	adds	r5, #1
 8008a76:	9519      	str	r5, [sp, #100]	; 0x64
 8008a78:	930a      	str	r3, [sp, #40]	; 0x28
 8008a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 858a 	bne.w	8009596 <_strtod_l+0xb9e>
 8008a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a84:	b1d3      	cbz	r3, 8008abc <_strtod_l+0xc4>
 8008a86:	4642      	mov	r2, r8
 8008a88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4619      	mov	r1, r3
 8008a90:	b01f      	add	sp, #124	; 0x7c
 8008a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a96:	2a20      	cmp	r2, #32
 8008a98:	d1cd      	bne.n	8008a36 <_strtod_l+0x3e>
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	9319      	str	r3, [sp, #100]	; 0x64
 8008a9e:	e7bf      	b.n	8008a20 <_strtod_l+0x28>
 8008aa0:	2a2d      	cmp	r2, #45	; 0x2d
 8008aa2:	d1c8      	bne.n	8008a36 <_strtod_l+0x3e>
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	920a      	str	r2, [sp, #40]	; 0x28
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	9219      	str	r2, [sp, #100]	; 0x64
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1c3      	bne.n	8008a3a <_strtod_l+0x42>
 8008ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab4:	9619      	str	r6, [sp, #100]	; 0x64
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 856b 	bne.w	8009592 <_strtod_l+0xb9a>
 8008abc:	4642      	mov	r2, r8
 8008abe:	464b      	mov	r3, r9
 8008ac0:	e7e4      	b.n	8008a8c <_strtod_l+0x94>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	e7ef      	b.n	8008aa6 <_strtod_l+0xae>
 8008ac6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ac8:	b13a      	cbz	r2, 8008ada <_strtod_l+0xe2>
 8008aca:	2135      	movs	r1, #53	; 0x35
 8008acc:	a81c      	add	r0, sp, #112	; 0x70
 8008ace:	f002 fc7f 	bl	800b3d0 <__copybits>
 8008ad2:	4650      	mov	r0, sl
 8008ad4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ad6:	f002 f847 	bl	800ab68 <_Bfree>
 8008ada:	3e01      	subs	r6, #1
 8008adc:	2e04      	cmp	r6, #4
 8008ade:	d806      	bhi.n	8008aee <_strtod_l+0xf6>
 8008ae0:	e8df f006 	tbb	[pc, r6]
 8008ae4:	1714030a 	.word	0x1714030a
 8008ae8:	0a          	.byte	0x0a
 8008ae9:	00          	.byte	0x00
 8008aea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008aee:	0721      	lsls	r1, r4, #28
 8008af0:	d5c3      	bpl.n	8008a7a <_strtod_l+0x82>
 8008af2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008af6:	e7c0      	b.n	8008a7a <_strtod_l+0x82>
 8008af8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008afa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008afe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008b0a:	e7f0      	b.n	8008aee <_strtod_l+0xf6>
 8008b0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c88 <_strtod_l+0x290>
 8008b10:	e7ed      	b.n	8008aee <_strtod_l+0xf6>
 8008b12:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008b16:	f04f 38ff 	mov.w	r8, #4294967295
 8008b1a:	e7e8      	b.n	8008aee <_strtod_l+0xf6>
 8008b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	9219      	str	r2, [sp, #100]	; 0x64
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b30      	cmp	r3, #48	; 0x30
 8008b26:	d0f9      	beq.n	8008b1c <_strtod_l+0x124>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0a6      	beq.n	8008a7a <_strtod_l+0x82>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9307      	str	r3, [sp, #28]
 8008b30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b32:	220a      	movs	r2, #10
 8008b34:	9308      	str	r3, [sp, #32]
 8008b36:	2300      	movs	r3, #0
 8008b38:	469b      	mov	fp, r3
 8008b3a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008b3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008b40:	7805      	ldrb	r5, [r0, #0]
 8008b42:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008b46:	b2d9      	uxtb	r1, r3
 8008b48:	2909      	cmp	r1, #9
 8008b4a:	d927      	bls.n	8008b9c <_strtod_l+0x1a4>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f002 fee4 	bl	800b91c <strncmp>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d033      	beq.n	8008bc0 <_strtod_l+0x1c8>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	465c      	mov	r4, fp
 8008b5e:	4603      	mov	r3, r0
 8008b60:	9004      	str	r0, [sp, #16]
 8008b62:	2a65      	cmp	r2, #101	; 0x65
 8008b64:	d001      	beq.n	8008b6a <_strtod_l+0x172>
 8008b66:	2a45      	cmp	r2, #69	; 0x45
 8008b68:	d114      	bne.n	8008b94 <_strtod_l+0x19c>
 8008b6a:	b91c      	cbnz	r4, 8008b74 <_strtod_l+0x17c>
 8008b6c:	9a07      	ldr	r2, [sp, #28]
 8008b6e:	4302      	orrs	r2, r0
 8008b70:	d09f      	beq.n	8008ab2 <_strtod_l+0xba>
 8008b72:	2400      	movs	r4, #0
 8008b74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008b76:	1c72      	adds	r2, r6, #1
 8008b78:	9219      	str	r2, [sp, #100]	; 0x64
 8008b7a:	7872      	ldrb	r2, [r6, #1]
 8008b7c:	2a2b      	cmp	r2, #43	; 0x2b
 8008b7e:	d079      	beq.n	8008c74 <_strtod_l+0x27c>
 8008b80:	2a2d      	cmp	r2, #45	; 0x2d
 8008b82:	f000 8083 	beq.w	8008c8c <_strtod_l+0x294>
 8008b86:	2700      	movs	r7, #0
 8008b88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b8c:	2909      	cmp	r1, #9
 8008b8e:	f240 8083 	bls.w	8008c98 <_strtod_l+0x2a0>
 8008b92:	9619      	str	r6, [sp, #100]	; 0x64
 8008b94:	2500      	movs	r5, #0
 8008b96:	e09f      	b.n	8008cd8 <_strtod_l+0x2e0>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e7c8      	b.n	8008b2e <_strtod_l+0x136>
 8008b9c:	f1bb 0f08 	cmp.w	fp, #8
 8008ba0:	bfd5      	itete	le
 8008ba2:	9906      	ldrle	r1, [sp, #24]
 8008ba4:	9905      	ldrgt	r1, [sp, #20]
 8008ba6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008baa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008bae:	f100 0001 	add.w	r0, r0, #1
 8008bb2:	bfd4      	ite	le
 8008bb4:	9306      	strle	r3, [sp, #24]
 8008bb6:	9305      	strgt	r3, [sp, #20]
 8008bb8:	f10b 0b01 	add.w	fp, fp, #1
 8008bbc:	9019      	str	r0, [sp, #100]	; 0x64
 8008bbe:	e7be      	b.n	8008b3e <_strtod_l+0x146>
 8008bc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bc2:	191a      	adds	r2, r3, r4
 8008bc4:	9219      	str	r2, [sp, #100]	; 0x64
 8008bc6:	5d1a      	ldrb	r2, [r3, r4]
 8008bc8:	f1bb 0f00 	cmp.w	fp, #0
 8008bcc:	d036      	beq.n	8008c3c <_strtod_l+0x244>
 8008bce:	465c      	mov	r4, fp
 8008bd0:	9004      	str	r0, [sp, #16]
 8008bd2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d912      	bls.n	8008c00 <_strtod_l+0x208>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e7c1      	b.n	8008b62 <_strtod_l+0x16a>
 8008bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008be0:	3001      	adds	r0, #1
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	9219      	str	r2, [sp, #100]	; 0x64
 8008be6:	785a      	ldrb	r2, [r3, #1]
 8008be8:	2a30      	cmp	r2, #48	; 0x30
 8008bea:	d0f8      	beq.n	8008bde <_strtod_l+0x1e6>
 8008bec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	f200 84d5 	bhi.w	80095a0 <_strtod_l+0xba8>
 8008bf6:	9004      	str	r0, [sp, #16]
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	3a30      	subs	r2, #48	; 0x30
 8008c02:	f100 0301 	add.w	r3, r0, #1
 8008c06:	d013      	beq.n	8008c30 <_strtod_l+0x238>
 8008c08:	9904      	ldr	r1, [sp, #16]
 8008c0a:	1905      	adds	r5, r0, r4
 8008c0c:	4419      	add	r1, r3
 8008c0e:	9104      	str	r1, [sp, #16]
 8008c10:	4623      	mov	r3, r4
 8008c12:	210a      	movs	r1, #10
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	d113      	bne.n	8008c40 <_strtod_l+0x248>
 8008c18:	1823      	adds	r3, r4, r0
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	f104 0401 	add.w	r4, r4, #1
 8008c20:	4404      	add	r4, r0
 8008c22:	dc1b      	bgt.n	8008c5c <_strtod_l+0x264>
 8008c24:	230a      	movs	r3, #10
 8008c26:	9906      	ldr	r1, [sp, #24]
 8008c28:	fb03 2301 	mla	r3, r3, r1, r2
 8008c2c:	9306      	str	r3, [sp, #24]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c32:	4618      	mov	r0, r3
 8008c34:	1c51      	adds	r1, r2, #1
 8008c36:	9119      	str	r1, [sp, #100]	; 0x64
 8008c38:	7852      	ldrb	r2, [r2, #1]
 8008c3a:	e7ca      	b.n	8008bd2 <_strtod_l+0x1da>
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	e7d3      	b.n	8008be8 <_strtod_l+0x1f0>
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	dc04      	bgt.n	8008c4e <_strtod_l+0x256>
 8008c44:	9f06      	ldr	r7, [sp, #24]
 8008c46:	434f      	muls	r7, r1
 8008c48:	9706      	str	r7, [sp, #24]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	e7e2      	b.n	8008c14 <_strtod_l+0x21c>
 8008c4e:	1c5f      	adds	r7, r3, #1
 8008c50:	2f10      	cmp	r7, #16
 8008c52:	bfde      	ittt	le
 8008c54:	9f05      	ldrle	r7, [sp, #20]
 8008c56:	434f      	mulle	r7, r1
 8008c58:	9705      	strle	r7, [sp, #20]
 8008c5a:	e7f6      	b.n	8008c4a <_strtod_l+0x252>
 8008c5c:	2c10      	cmp	r4, #16
 8008c5e:	bfdf      	itttt	le
 8008c60:	230a      	movle	r3, #10
 8008c62:	9905      	ldrle	r1, [sp, #20]
 8008c64:	fb03 2301 	mlale	r3, r3, r1, r2
 8008c68:	9305      	strle	r3, [sp, #20]
 8008c6a:	e7e0      	b.n	8008c2e <_strtod_l+0x236>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9304      	str	r3, [sp, #16]
 8008c70:	2301      	movs	r3, #1
 8008c72:	e77b      	b.n	8008b6c <_strtod_l+0x174>
 8008c74:	2700      	movs	r7, #0
 8008c76:	1cb2      	adds	r2, r6, #2
 8008c78:	9219      	str	r2, [sp, #100]	; 0x64
 8008c7a:	78b2      	ldrb	r2, [r6, #2]
 8008c7c:	e784      	b.n	8008b88 <_strtod_l+0x190>
 8008c7e:	bf00      	nop
 8008c80:	0800cba0 	.word	0x0800cba0
 8008c84:	0800c954 	.word	0x0800c954
 8008c88:	7ff00000 	.word	0x7ff00000
 8008c8c:	2701      	movs	r7, #1
 8008c8e:	e7f2      	b.n	8008c76 <_strtod_l+0x27e>
 8008c90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c92:	1c51      	adds	r1, r2, #1
 8008c94:	9119      	str	r1, [sp, #100]	; 0x64
 8008c96:	7852      	ldrb	r2, [r2, #1]
 8008c98:	2a30      	cmp	r2, #48	; 0x30
 8008c9a:	d0f9      	beq.n	8008c90 <_strtod_l+0x298>
 8008c9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ca0:	2908      	cmp	r1, #8
 8008ca2:	f63f af77 	bhi.w	8008b94 <_strtod_l+0x19c>
 8008ca6:	f04f 0e0a 	mov.w	lr, #10
 8008caa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008cae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cb4:	1c51      	adds	r1, r2, #1
 8008cb6:	9119      	str	r1, [sp, #100]	; 0x64
 8008cb8:	7852      	ldrb	r2, [r2, #1]
 8008cba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008cbe:	2d09      	cmp	r5, #9
 8008cc0:	d935      	bls.n	8008d2e <_strtod_l+0x336>
 8008cc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cc4:	1b49      	subs	r1, r1, r5
 8008cc6:	2908      	cmp	r1, #8
 8008cc8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008ccc:	dc02      	bgt.n	8008cd4 <_strtod_l+0x2dc>
 8008cce:	4565      	cmp	r5, ip
 8008cd0:	bfa8      	it	ge
 8008cd2:	4665      	movge	r5, ip
 8008cd4:	b107      	cbz	r7, 8008cd8 <_strtod_l+0x2e0>
 8008cd6:	426d      	negs	r5, r5
 8008cd8:	2c00      	cmp	r4, #0
 8008cda:	d14c      	bne.n	8008d76 <_strtod_l+0x37e>
 8008cdc:	9907      	ldr	r1, [sp, #28]
 8008cde:	4301      	orrs	r1, r0
 8008ce0:	f47f aecb 	bne.w	8008a7a <_strtod_l+0x82>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f47f aee4 	bne.w	8008ab2 <_strtod_l+0xba>
 8008cea:	2a69      	cmp	r2, #105	; 0x69
 8008cec:	d026      	beq.n	8008d3c <_strtod_l+0x344>
 8008cee:	dc23      	bgt.n	8008d38 <_strtod_l+0x340>
 8008cf0:	2a49      	cmp	r2, #73	; 0x49
 8008cf2:	d023      	beq.n	8008d3c <_strtod_l+0x344>
 8008cf4:	2a4e      	cmp	r2, #78	; 0x4e
 8008cf6:	f47f aedc 	bne.w	8008ab2 <_strtod_l+0xba>
 8008cfa:	499d      	ldr	r1, [pc, #628]	; (8008f70 <_strtod_l+0x578>)
 8008cfc:	a819      	add	r0, sp, #100	; 0x64
 8008cfe:	f001 fe17 	bl	800a930 <__match>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f43f aed5 	beq.w	8008ab2 <_strtod_l+0xba>
 8008d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b28      	cmp	r3, #40	; 0x28
 8008d0e:	d12c      	bne.n	8008d6a <_strtod_l+0x372>
 8008d10:	4998      	ldr	r1, [pc, #608]	; (8008f74 <_strtod_l+0x57c>)
 8008d12:	aa1c      	add	r2, sp, #112	; 0x70
 8008d14:	a819      	add	r0, sp, #100	; 0x64
 8008d16:	f001 fe1f 	bl	800a958 <__hexnan>
 8008d1a:	2805      	cmp	r0, #5
 8008d1c:	d125      	bne.n	8008d6a <_strtod_l+0x372>
 8008d1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d20:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008d24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008d28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008d2c:	e6a5      	b.n	8008a7a <_strtod_l+0x82>
 8008d2e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008d32:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008d36:	e7bc      	b.n	8008cb2 <_strtod_l+0x2ba>
 8008d38:	2a6e      	cmp	r2, #110	; 0x6e
 8008d3a:	e7dc      	b.n	8008cf6 <_strtod_l+0x2fe>
 8008d3c:	498e      	ldr	r1, [pc, #568]	; (8008f78 <_strtod_l+0x580>)
 8008d3e:	a819      	add	r0, sp, #100	; 0x64
 8008d40:	f001 fdf6 	bl	800a930 <__match>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	f43f aeb4 	beq.w	8008ab2 <_strtod_l+0xba>
 8008d4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d4c:	498b      	ldr	r1, [pc, #556]	; (8008f7c <_strtod_l+0x584>)
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	a819      	add	r0, sp, #100	; 0x64
 8008d52:	9319      	str	r3, [sp, #100]	; 0x64
 8008d54:	f001 fdec 	bl	800a930 <__match>
 8008d58:	b910      	cbnz	r0, 8008d60 <_strtod_l+0x368>
 8008d5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	9319      	str	r3, [sp, #100]	; 0x64
 8008d60:	f04f 0800 	mov.w	r8, #0
 8008d64:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008f80 <_strtod_l+0x588>
 8008d68:	e687      	b.n	8008a7a <_strtod_l+0x82>
 8008d6a:	4886      	ldr	r0, [pc, #536]	; (8008f84 <_strtod_l+0x58c>)
 8008d6c:	f002 fdc0 	bl	800b8f0 <nan>
 8008d70:	4680      	mov	r8, r0
 8008d72:	4689      	mov	r9, r1
 8008d74:	e681      	b.n	8008a7a <_strtod_l+0x82>
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	f1bb 0f00 	cmp.w	fp, #0
 8008d7c:	bf08      	it	eq
 8008d7e:	46a3      	moveq	fp, r4
 8008d80:	1aeb      	subs	r3, r5, r3
 8008d82:	2c10      	cmp	r4, #16
 8008d84:	9806      	ldr	r0, [sp, #24]
 8008d86:	4626      	mov	r6, r4
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	bfa8      	it	ge
 8008d8c:	2610      	movge	r6, #16
 8008d8e:	f7f7 fb29 	bl	80003e4 <__aeabi_ui2d>
 8008d92:	2c09      	cmp	r4, #9
 8008d94:	4680      	mov	r8, r0
 8008d96:	4689      	mov	r9, r1
 8008d98:	dd13      	ble.n	8008dc2 <_strtod_l+0x3ca>
 8008d9a:	4b7b      	ldr	r3, [pc, #492]	; (8008f88 <_strtod_l+0x590>)
 8008d9c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008da0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008da4:	f7f7 fb98 	bl	80004d8 <__aeabi_dmul>
 8008da8:	4680      	mov	r8, r0
 8008daa:	9805      	ldr	r0, [sp, #20]
 8008dac:	4689      	mov	r9, r1
 8008dae:	f7f7 fb19 	bl	80003e4 <__aeabi_ui2d>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4640      	mov	r0, r8
 8008db8:	4649      	mov	r1, r9
 8008dba:	f7f7 f9d7 	bl	800016c <__adddf3>
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	2c0f      	cmp	r4, #15
 8008dc4:	dc36      	bgt.n	8008e34 <_strtod_l+0x43c>
 8008dc6:	9b07      	ldr	r3, [sp, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f43f ae56 	beq.w	8008a7a <_strtod_l+0x82>
 8008dce:	dd22      	ble.n	8008e16 <_strtod_l+0x41e>
 8008dd0:	2b16      	cmp	r3, #22
 8008dd2:	dc09      	bgt.n	8008de8 <_strtod_l+0x3f0>
 8008dd4:	496c      	ldr	r1, [pc, #432]	; (8008f88 <_strtod_l+0x590>)
 8008dd6:	4642      	mov	r2, r8
 8008dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ddc:	464b      	mov	r3, r9
 8008dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de2:	f7f7 fb79 	bl	80004d8 <__aeabi_dmul>
 8008de6:	e7c3      	b.n	8008d70 <_strtod_l+0x378>
 8008de8:	9a07      	ldr	r2, [sp, #28]
 8008dea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008dee:	4293      	cmp	r3, r2
 8008df0:	db20      	blt.n	8008e34 <_strtod_l+0x43c>
 8008df2:	4d65      	ldr	r5, [pc, #404]	; (8008f88 <_strtod_l+0x590>)
 8008df4:	f1c4 040f 	rsb	r4, r4, #15
 8008df8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e02:	464b      	mov	r3, r9
 8008e04:	f7f7 fb68 	bl	80004d8 <__aeabi_dmul>
 8008e08:	9b07      	ldr	r3, [sp, #28]
 8008e0a:	1b1c      	subs	r4, r3, r4
 8008e0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e14:	e7e5      	b.n	8008de2 <_strtod_l+0x3ea>
 8008e16:	9b07      	ldr	r3, [sp, #28]
 8008e18:	3316      	adds	r3, #22
 8008e1a:	db0b      	blt.n	8008e34 <_strtod_l+0x43c>
 8008e1c:	9b04      	ldr	r3, [sp, #16]
 8008e1e:	4640      	mov	r0, r8
 8008e20:	1b5d      	subs	r5, r3, r5
 8008e22:	4b59      	ldr	r3, [pc, #356]	; (8008f88 <_strtod_l+0x590>)
 8008e24:	4649      	mov	r1, r9
 8008e26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e2e:	f7f7 fc7d 	bl	800072c <__aeabi_ddiv>
 8008e32:	e79d      	b.n	8008d70 <_strtod_l+0x378>
 8008e34:	9b07      	ldr	r3, [sp, #28]
 8008e36:	1ba6      	subs	r6, r4, r6
 8008e38:	441e      	add	r6, r3
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	dd74      	ble.n	8008f28 <_strtod_l+0x530>
 8008e3e:	f016 030f 	ands.w	r3, r6, #15
 8008e42:	d00a      	beq.n	8008e5a <_strtod_l+0x462>
 8008e44:	4950      	ldr	r1, [pc, #320]	; (8008f88 <_strtod_l+0x590>)
 8008e46:	4642      	mov	r2, r8
 8008e48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e50:	464b      	mov	r3, r9
 8008e52:	f7f7 fb41 	bl	80004d8 <__aeabi_dmul>
 8008e56:	4680      	mov	r8, r0
 8008e58:	4689      	mov	r9, r1
 8008e5a:	f036 060f 	bics.w	r6, r6, #15
 8008e5e:	d052      	beq.n	8008f06 <_strtod_l+0x50e>
 8008e60:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008e64:	dd27      	ble.n	8008eb6 <_strtod_l+0x4be>
 8008e66:	f04f 0b00 	mov.w	fp, #0
 8008e6a:	f8cd b010 	str.w	fp, [sp, #16]
 8008e6e:	f8cd b020 	str.w	fp, [sp, #32]
 8008e72:	f8cd b018 	str.w	fp, [sp, #24]
 8008e76:	2322      	movs	r3, #34	; 0x22
 8008e78:	f04f 0800 	mov.w	r8, #0
 8008e7c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008f80 <_strtod_l+0x588>
 8008e80:	f8ca 3000 	str.w	r3, [sl]
 8008e84:	9b08      	ldr	r3, [sp, #32]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f43f adf7 	beq.w	8008a7a <_strtod_l+0x82>
 8008e8c:	4650      	mov	r0, sl
 8008e8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e90:	f001 fe6a 	bl	800ab68 <_Bfree>
 8008e94:	4650      	mov	r0, sl
 8008e96:	9906      	ldr	r1, [sp, #24]
 8008e98:	f001 fe66 	bl	800ab68 <_Bfree>
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	9904      	ldr	r1, [sp, #16]
 8008ea0:	f001 fe62 	bl	800ab68 <_Bfree>
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	9908      	ldr	r1, [sp, #32]
 8008ea8:	f001 fe5e 	bl	800ab68 <_Bfree>
 8008eac:	4659      	mov	r1, fp
 8008eae:	4650      	mov	r0, sl
 8008eb0:	f001 fe5a 	bl	800ab68 <_Bfree>
 8008eb4:	e5e1      	b.n	8008a7a <_strtod_l+0x82>
 8008eb6:	4b35      	ldr	r3, [pc, #212]	; (8008f8c <_strtod_l+0x594>)
 8008eb8:	4640      	mov	r0, r8
 8008eba:	9305      	str	r3, [sp, #20]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	461f      	mov	r7, r3
 8008ec2:	1136      	asrs	r6, r6, #4
 8008ec4:	2e01      	cmp	r6, #1
 8008ec6:	dc21      	bgt.n	8008f0c <_strtod_l+0x514>
 8008ec8:	b10b      	cbz	r3, 8008ece <_strtod_l+0x4d6>
 8008eca:	4680      	mov	r8, r0
 8008ecc:	4689      	mov	r9, r1
 8008ece:	4b2f      	ldr	r3, [pc, #188]	; (8008f8c <_strtod_l+0x594>)
 8008ed0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ed4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008ed8:	4642      	mov	r2, r8
 8008eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ede:	464b      	mov	r3, r9
 8008ee0:	f7f7 fafa 	bl	80004d8 <__aeabi_dmul>
 8008ee4:	4b26      	ldr	r3, [pc, #152]	; (8008f80 <_strtod_l+0x588>)
 8008ee6:	460a      	mov	r2, r1
 8008ee8:	400b      	ands	r3, r1
 8008eea:	4929      	ldr	r1, [pc, #164]	; (8008f90 <_strtod_l+0x598>)
 8008eec:	4680      	mov	r8, r0
 8008eee:	428b      	cmp	r3, r1
 8008ef0:	d8b9      	bhi.n	8008e66 <_strtod_l+0x46e>
 8008ef2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	bf86      	itte	hi
 8008efa:	f04f 38ff 	movhi.w	r8, #4294967295
 8008efe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008f94 <_strtod_l+0x59c>
 8008f02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008f06:	2300      	movs	r3, #0
 8008f08:	9305      	str	r3, [sp, #20]
 8008f0a:	e07f      	b.n	800900c <_strtod_l+0x614>
 8008f0c:	07f2      	lsls	r2, r6, #31
 8008f0e:	d505      	bpl.n	8008f1c <_strtod_l+0x524>
 8008f10:	9b05      	ldr	r3, [sp, #20]
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 fadf 	bl	80004d8 <__aeabi_dmul>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	9a05      	ldr	r2, [sp, #20]
 8008f1e:	3701      	adds	r7, #1
 8008f20:	3208      	adds	r2, #8
 8008f22:	1076      	asrs	r6, r6, #1
 8008f24:	9205      	str	r2, [sp, #20]
 8008f26:	e7cd      	b.n	8008ec4 <_strtod_l+0x4cc>
 8008f28:	d0ed      	beq.n	8008f06 <_strtod_l+0x50e>
 8008f2a:	4276      	negs	r6, r6
 8008f2c:	f016 020f 	ands.w	r2, r6, #15
 8008f30:	d00a      	beq.n	8008f48 <_strtod_l+0x550>
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <_strtod_l+0x590>)
 8008f34:	4640      	mov	r0, r8
 8008f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7f7 fbf4 	bl	800072c <__aeabi_ddiv>
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	1136      	asrs	r6, r6, #4
 8008f4a:	d0dc      	beq.n	8008f06 <_strtod_l+0x50e>
 8008f4c:	2e1f      	cmp	r6, #31
 8008f4e:	dd23      	ble.n	8008f98 <_strtod_l+0x5a0>
 8008f50:	f04f 0b00 	mov.w	fp, #0
 8008f54:	f8cd b010 	str.w	fp, [sp, #16]
 8008f58:	f8cd b020 	str.w	fp, [sp, #32]
 8008f5c:	f8cd b018 	str.w	fp, [sp, #24]
 8008f60:	2322      	movs	r3, #34	; 0x22
 8008f62:	f04f 0800 	mov.w	r8, #0
 8008f66:	f04f 0900 	mov.w	r9, #0
 8008f6a:	f8ca 3000 	str.w	r3, [sl]
 8008f6e:	e789      	b.n	8008e84 <_strtod_l+0x48c>
 8008f70:	0800c925 	.word	0x0800c925
 8008f74:	0800c968 	.word	0x0800c968
 8008f78:	0800c91d 	.word	0x0800c91d
 8008f7c:	0800caac 	.word	0x0800caac
 8008f80:	7ff00000 	.word	0x7ff00000
 8008f84:	0800cd58 	.word	0x0800cd58
 8008f88:	0800cc38 	.word	0x0800cc38
 8008f8c:	0800cc10 	.word	0x0800cc10
 8008f90:	7ca00000 	.word	0x7ca00000
 8008f94:	7fefffff 	.word	0x7fefffff
 8008f98:	f016 0310 	ands.w	r3, r6, #16
 8008f9c:	bf18      	it	ne
 8008f9e:	236a      	movne	r3, #106	; 0x6a
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	9305      	str	r3, [sp, #20]
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4fb0      	ldr	r7, [pc, #704]	; (800926c <_strtod_l+0x874>)
 8008faa:	07f2      	lsls	r2, r6, #31
 8008fac:	d504      	bpl.n	8008fb8 <_strtod_l+0x5c0>
 8008fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb2:	f7f7 fa91 	bl	80004d8 <__aeabi_dmul>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	1076      	asrs	r6, r6, #1
 8008fba:	f107 0708 	add.w	r7, r7, #8
 8008fbe:	d1f4      	bne.n	8008faa <_strtod_l+0x5b2>
 8008fc0:	b10b      	cbz	r3, 8008fc6 <_strtod_l+0x5ce>
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	9b05      	ldr	r3, [sp, #20]
 8008fc8:	b1c3      	cbz	r3, 8008ffc <_strtod_l+0x604>
 8008fca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008fce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	dd11      	ble.n	8008ffc <_strtod_l+0x604>
 8008fd8:	2b1f      	cmp	r3, #31
 8008fda:	f340 8127 	ble.w	800922c <_strtod_l+0x834>
 8008fde:	2b34      	cmp	r3, #52	; 0x34
 8008fe0:	bfd8      	it	le
 8008fe2:	f04f 33ff 	movle.w	r3, #4294967295
 8008fe6:	f04f 0800 	mov.w	r8, #0
 8008fea:	bfcf      	iteee	gt
 8008fec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ff0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ff4:	fa03 f202 	lslle.w	r2, r3, r2
 8008ff8:	ea02 0901 	andle.w	r9, r2, r1
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2300      	movs	r3, #0
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7f7 fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8009008:	2800      	cmp	r0, #0
 800900a:	d1a1      	bne.n	8008f50 <_strtod_l+0x558>
 800900c:	9b06      	ldr	r3, [sp, #24]
 800900e:	465a      	mov	r2, fp
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4650      	mov	r0, sl
 8009014:	4623      	mov	r3, r4
 8009016:	9908      	ldr	r1, [sp, #32]
 8009018:	f001 fe0e 	bl	800ac38 <__s2b>
 800901c:	9008      	str	r0, [sp, #32]
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f af21 	beq.w	8008e66 <_strtod_l+0x46e>
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	f04f 0b00 	mov.w	fp, #0
 800902a:	1b5d      	subs	r5, r3, r5
 800902c:	9b07      	ldr	r3, [sp, #28]
 800902e:	f8cd b010 	str.w	fp, [sp, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfb4      	ite	lt
 8009036:	462b      	movlt	r3, r5
 8009038:	2300      	movge	r3, #0
 800903a:	930e      	str	r3, [sp, #56]	; 0x38
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009042:	9314      	str	r3, [sp, #80]	; 0x50
 8009044:	9b08      	ldr	r3, [sp, #32]
 8009046:	4650      	mov	r0, sl
 8009048:	6859      	ldr	r1, [r3, #4]
 800904a:	f001 fd4d 	bl	800aae8 <_Balloc>
 800904e:	9006      	str	r0, [sp, #24]
 8009050:	2800      	cmp	r0, #0
 8009052:	f43f af10 	beq.w	8008e76 <_strtod_l+0x47e>
 8009056:	9b08      	ldr	r3, [sp, #32]
 8009058:	300c      	adds	r0, #12
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	f103 010c 	add.w	r1, r3, #12
 8009060:	3202      	adds	r2, #2
 8009062:	0092      	lsls	r2, r2, #2
 8009064:	f7fe fdfe 	bl	8007c64 <memcpy>
 8009068:	ab1c      	add	r3, sp, #112	; 0x70
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	ab1b      	add	r3, sp, #108	; 0x6c
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4642      	mov	r2, r8
 8009072:	464b      	mov	r3, r9
 8009074:	4650      	mov	r0, sl
 8009076:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800907a:	f002 f91f 	bl	800b2bc <__d2b>
 800907e:	901a      	str	r0, [sp, #104]	; 0x68
 8009080:	2800      	cmp	r0, #0
 8009082:	f43f aef8 	beq.w	8008e76 <_strtod_l+0x47e>
 8009086:	2101      	movs	r1, #1
 8009088:	4650      	mov	r0, sl
 800908a:	f001 fe6d 	bl	800ad68 <__i2b>
 800908e:	4603      	mov	r3, r0
 8009090:	9004      	str	r0, [sp, #16]
 8009092:	2800      	cmp	r0, #0
 8009094:	f43f aeef 	beq.w	8008e76 <_strtod_l+0x47e>
 8009098:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800909a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800909c:	2d00      	cmp	r5, #0
 800909e:	bfab      	itete	ge
 80090a0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80090a2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80090a4:	18ee      	addge	r6, r5, r3
 80090a6:	1b5c      	sublt	r4, r3, r5
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	bfa8      	it	ge
 80090ac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80090ae:	eba5 0503 	sub.w	r5, r5, r3
 80090b2:	4415      	add	r5, r2
 80090b4:	4b6e      	ldr	r3, [pc, #440]	; (8009270 <_strtod_l+0x878>)
 80090b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80090ba:	bfb8      	it	lt
 80090bc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80090be:	429d      	cmp	r5, r3
 80090c0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090c4:	f280 80c4 	bge.w	8009250 <_strtod_l+0x858>
 80090c8:	1b5b      	subs	r3, r3, r5
 80090ca:	2b1f      	cmp	r3, #31
 80090cc:	f04f 0701 	mov.w	r7, #1
 80090d0:	eba2 0203 	sub.w	r2, r2, r3
 80090d4:	f300 80b1 	bgt.w	800923a <_strtod_l+0x842>
 80090d8:	2500      	movs	r5, #0
 80090da:	fa07 f303 	lsl.w	r3, r7, r3
 80090de:	930f      	str	r3, [sp, #60]	; 0x3c
 80090e0:	18b7      	adds	r7, r6, r2
 80090e2:	9b05      	ldr	r3, [sp, #20]
 80090e4:	42be      	cmp	r6, r7
 80090e6:	4414      	add	r4, r2
 80090e8:	441c      	add	r4, r3
 80090ea:	4633      	mov	r3, r6
 80090ec:	bfa8      	it	ge
 80090ee:	463b      	movge	r3, r7
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	bfa8      	it	ge
 80090f4:	4623      	movge	r3, r4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfc2      	ittt	gt
 80090fa:	1aff      	subgt	r7, r7, r3
 80090fc:	1ae4      	subgt	r4, r4, r3
 80090fe:	1af6      	subgt	r6, r6, r3
 8009100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	dd17      	ble.n	8009136 <_strtod_l+0x73e>
 8009106:	461a      	mov	r2, r3
 8009108:	4650      	mov	r0, sl
 800910a:	9904      	ldr	r1, [sp, #16]
 800910c:	f001 feea 	bl	800aee4 <__pow5mult>
 8009110:	9004      	str	r0, [sp, #16]
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f aeaf 	beq.w	8008e76 <_strtod_l+0x47e>
 8009118:	4601      	mov	r1, r0
 800911a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800911c:	4650      	mov	r0, sl
 800911e:	f001 fe39 	bl	800ad94 <__multiply>
 8009122:	9009      	str	r0, [sp, #36]	; 0x24
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f aea6 	beq.w	8008e76 <_strtod_l+0x47e>
 800912a:	4650      	mov	r0, sl
 800912c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800912e:	f001 fd1b 	bl	800ab68 <_Bfree>
 8009132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009134:	931a      	str	r3, [sp, #104]	; 0x68
 8009136:	2f00      	cmp	r7, #0
 8009138:	f300 808e 	bgt.w	8009258 <_strtod_l+0x860>
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd08      	ble.n	8009154 <_strtod_l+0x75c>
 8009142:	4650      	mov	r0, sl
 8009144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009146:	9906      	ldr	r1, [sp, #24]
 8009148:	f001 fecc 	bl	800aee4 <__pow5mult>
 800914c:	9006      	str	r0, [sp, #24]
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f ae91 	beq.w	8008e76 <_strtod_l+0x47e>
 8009154:	2c00      	cmp	r4, #0
 8009156:	dd08      	ble.n	800916a <_strtod_l+0x772>
 8009158:	4622      	mov	r2, r4
 800915a:	4650      	mov	r0, sl
 800915c:	9906      	ldr	r1, [sp, #24]
 800915e:	f001 ff1b 	bl	800af98 <__lshift>
 8009162:	9006      	str	r0, [sp, #24]
 8009164:	2800      	cmp	r0, #0
 8009166:	f43f ae86 	beq.w	8008e76 <_strtod_l+0x47e>
 800916a:	2e00      	cmp	r6, #0
 800916c:	dd08      	ble.n	8009180 <_strtod_l+0x788>
 800916e:	4632      	mov	r2, r6
 8009170:	4650      	mov	r0, sl
 8009172:	9904      	ldr	r1, [sp, #16]
 8009174:	f001 ff10 	bl	800af98 <__lshift>
 8009178:	9004      	str	r0, [sp, #16]
 800917a:	2800      	cmp	r0, #0
 800917c:	f43f ae7b 	beq.w	8008e76 <_strtod_l+0x47e>
 8009180:	4650      	mov	r0, sl
 8009182:	9a06      	ldr	r2, [sp, #24]
 8009184:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009186:	f001 ff93 	bl	800b0b0 <__mdiff>
 800918a:	4683      	mov	fp, r0
 800918c:	2800      	cmp	r0, #0
 800918e:	f43f ae72 	beq.w	8008e76 <_strtod_l+0x47e>
 8009192:	2400      	movs	r4, #0
 8009194:	68c3      	ldr	r3, [r0, #12]
 8009196:	9904      	ldr	r1, [sp, #16]
 8009198:	60c4      	str	r4, [r0, #12]
 800919a:	930b      	str	r3, [sp, #44]	; 0x2c
 800919c:	f001 ff6c 	bl	800b078 <__mcmp>
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	da6b      	bge.n	800927c <_strtod_l+0x884>
 80091a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a6:	ea53 0308 	orrs.w	r3, r3, r8
 80091aa:	f040 8091 	bne.w	80092d0 <_strtod_l+0x8d8>
 80091ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f040 808c 	bne.w	80092d0 <_strtod_l+0x8d8>
 80091b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091bc:	0d1b      	lsrs	r3, r3, #20
 80091be:	051b      	lsls	r3, r3, #20
 80091c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091c4:	f240 8084 	bls.w	80092d0 <_strtod_l+0x8d8>
 80091c8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80091cc:	b91b      	cbnz	r3, 80091d6 <_strtod_l+0x7de>
 80091ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	dd7c      	ble.n	80092d0 <_strtod_l+0x8d8>
 80091d6:	4659      	mov	r1, fp
 80091d8:	2201      	movs	r2, #1
 80091da:	4650      	mov	r0, sl
 80091dc:	f001 fedc 	bl	800af98 <__lshift>
 80091e0:	9904      	ldr	r1, [sp, #16]
 80091e2:	4683      	mov	fp, r0
 80091e4:	f001 ff48 	bl	800b078 <__mcmp>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	dd71      	ble.n	80092d0 <_strtod_l+0x8d8>
 80091ec:	9905      	ldr	r1, [sp, #20]
 80091ee:	464b      	mov	r3, r9
 80091f0:	4a20      	ldr	r2, [pc, #128]	; (8009274 <_strtod_l+0x87c>)
 80091f2:	2900      	cmp	r1, #0
 80091f4:	f000 808c 	beq.w	8009310 <_strtod_l+0x918>
 80091f8:	ea02 0109 	and.w	r1, r2, r9
 80091fc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009200:	f300 8086 	bgt.w	8009310 <_strtod_l+0x918>
 8009204:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009208:	f77f aeaa 	ble.w	8008f60 <_strtod_l+0x568>
 800920c:	4640      	mov	r0, r8
 800920e:	4649      	mov	r1, r9
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <_strtod_l+0x880>)
 8009212:	2200      	movs	r2, #0
 8009214:	f7f7 f960 	bl	80004d8 <__aeabi_dmul>
 8009218:	460b      	mov	r3, r1
 800921a:	4303      	orrs	r3, r0
 800921c:	bf08      	it	eq
 800921e:	2322      	moveq	r3, #34	; 0x22
 8009220:	4680      	mov	r8, r0
 8009222:	4689      	mov	r9, r1
 8009224:	bf08      	it	eq
 8009226:	f8ca 3000 	streq.w	r3, [sl]
 800922a:	e62f      	b.n	8008e8c <_strtod_l+0x494>
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	ea03 0808 	and.w	r8, r3, r8
 8009238:	e6e0      	b.n	8008ffc <_strtod_l+0x604>
 800923a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800923e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009242:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009246:	35e2      	adds	r5, #226	; 0xe2
 8009248:	fa07 f505 	lsl.w	r5, r7, r5
 800924c:	970f      	str	r7, [sp, #60]	; 0x3c
 800924e:	e747      	b.n	80090e0 <_strtod_l+0x6e8>
 8009250:	2301      	movs	r3, #1
 8009252:	2500      	movs	r5, #0
 8009254:	930f      	str	r3, [sp, #60]	; 0x3c
 8009256:	e743      	b.n	80090e0 <_strtod_l+0x6e8>
 8009258:	463a      	mov	r2, r7
 800925a:	4650      	mov	r0, sl
 800925c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800925e:	f001 fe9b 	bl	800af98 <__lshift>
 8009262:	901a      	str	r0, [sp, #104]	; 0x68
 8009264:	2800      	cmp	r0, #0
 8009266:	f47f af69 	bne.w	800913c <_strtod_l+0x744>
 800926a:	e604      	b.n	8008e76 <_strtod_l+0x47e>
 800926c:	0800c980 	.word	0x0800c980
 8009270:	fffffc02 	.word	0xfffffc02
 8009274:	7ff00000 	.word	0x7ff00000
 8009278:	39500000 	.word	0x39500000
 800927c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009280:	d165      	bne.n	800934e <_strtod_l+0x956>
 8009282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009288:	b35a      	cbz	r2, 80092e2 <_strtod_l+0x8ea>
 800928a:	4a99      	ldr	r2, [pc, #612]	; (80094f0 <_strtod_l+0xaf8>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d12b      	bne.n	80092e8 <_strtod_l+0x8f0>
 8009290:	9b05      	ldr	r3, [sp, #20]
 8009292:	4641      	mov	r1, r8
 8009294:	b303      	cbz	r3, 80092d8 <_strtod_l+0x8e0>
 8009296:	464a      	mov	r2, r9
 8009298:	4b96      	ldr	r3, [pc, #600]	; (80094f4 <_strtod_l+0xafc>)
 800929a:	4013      	ands	r3, r2
 800929c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	d81b      	bhi.n	80092de <_strtod_l+0x8e6>
 80092a6:	0d1b      	lsrs	r3, r3, #20
 80092a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	4299      	cmp	r1, r3
 80092b2:	d119      	bne.n	80092e8 <_strtod_l+0x8f0>
 80092b4:	4b90      	ldr	r3, [pc, #576]	; (80094f8 <_strtod_l+0xb00>)
 80092b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d102      	bne.n	80092c2 <_strtod_l+0x8ca>
 80092bc:	3101      	adds	r1, #1
 80092be:	f43f adda 	beq.w	8008e76 <_strtod_l+0x47e>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	4b8b      	ldr	r3, [pc, #556]	; (80094f4 <_strtod_l+0xafc>)
 80092c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ca:	401a      	ands	r2, r3
 80092cc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d19a      	bne.n	800920c <_strtod_l+0x814>
 80092d6:	e5d9      	b.n	8008e8c <_strtod_l+0x494>
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	e7e8      	b.n	80092b0 <_strtod_l+0x8b8>
 80092de:	4613      	mov	r3, r2
 80092e0:	e7e6      	b.n	80092b0 <_strtod_l+0x8b8>
 80092e2:	ea53 0308 	orrs.w	r3, r3, r8
 80092e6:	d081      	beq.n	80091ec <_strtod_l+0x7f4>
 80092e8:	b1e5      	cbz	r5, 8009324 <_strtod_l+0x92c>
 80092ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ec:	421d      	tst	r5, r3
 80092ee:	d0ef      	beq.n	80092d0 <_strtod_l+0x8d8>
 80092f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	9a05      	ldr	r2, [sp, #20]
 80092f8:	b1c3      	cbz	r3, 800932c <_strtod_l+0x934>
 80092fa:	f7ff fb5b 	bl	80089b4 <sulp>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009306:	f7f6 ff31 	bl	800016c <__adddf3>
 800930a:	4680      	mov	r8, r0
 800930c:	4689      	mov	r9, r1
 800930e:	e7df      	b.n	80092d0 <_strtod_l+0x8d8>
 8009310:	4013      	ands	r3, r2
 8009312:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009316:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800931a:	f04f 38ff 	mov.w	r8, #4294967295
 800931e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009322:	e7d5      	b.n	80092d0 <_strtod_l+0x8d8>
 8009324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009326:	ea13 0f08 	tst.w	r3, r8
 800932a:	e7e0      	b.n	80092ee <_strtod_l+0x8f6>
 800932c:	f7ff fb42 	bl	80089b4 <sulp>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009338:	f7f6 ff16 	bl	8000168 <__aeabi_dsub>
 800933c:	2200      	movs	r2, #0
 800933e:	2300      	movs	r3, #0
 8009340:	4680      	mov	r8, r0
 8009342:	4689      	mov	r9, r1
 8009344:	f7f7 fb30 	bl	80009a8 <__aeabi_dcmpeq>
 8009348:	2800      	cmp	r0, #0
 800934a:	d0c1      	beq.n	80092d0 <_strtod_l+0x8d8>
 800934c:	e608      	b.n	8008f60 <_strtod_l+0x568>
 800934e:	4658      	mov	r0, fp
 8009350:	9904      	ldr	r1, [sp, #16]
 8009352:	f002 f80f 	bl	800b374 <__ratio>
 8009356:	2200      	movs	r2, #0
 8009358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800935c:	4606      	mov	r6, r0
 800935e:	460f      	mov	r7, r1
 8009360:	f7f7 fb36 	bl	80009d0 <__aeabi_dcmple>
 8009364:	2800      	cmp	r0, #0
 8009366:	d070      	beq.n	800944a <_strtod_l+0xa52>
 8009368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d042      	beq.n	80093f4 <_strtod_l+0x9fc>
 800936e:	2600      	movs	r6, #0
 8009370:	4f62      	ldr	r7, [pc, #392]	; (80094fc <_strtod_l+0xb04>)
 8009372:	4d62      	ldr	r5, [pc, #392]	; (80094fc <_strtod_l+0xb04>)
 8009374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800937a:	0d1b      	lsrs	r3, r3, #20
 800937c:	051b      	lsls	r3, r3, #20
 800937e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009382:	4b5f      	ldr	r3, [pc, #380]	; (8009500 <_strtod_l+0xb08>)
 8009384:	429a      	cmp	r2, r3
 8009386:	f040 80c3 	bne.w	8009510 <_strtod_l+0xb18>
 800938a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938c:	4640      	mov	r0, r8
 800938e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009392:	4649      	mov	r1, r9
 8009394:	f001 ff18 	bl	800b1c8 <__ulp>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4630      	mov	r0, r6
 800939e:	4639      	mov	r1, r7
 80093a0:	f7f7 f89a 	bl	80004d8 <__aeabi_dmul>
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	f7f6 fee0 	bl	800016c <__adddf3>
 80093ac:	460b      	mov	r3, r1
 80093ae:	4951      	ldr	r1, [pc, #324]	; (80094f4 <_strtod_l+0xafc>)
 80093b0:	4a54      	ldr	r2, [pc, #336]	; (8009504 <_strtod_l+0xb0c>)
 80093b2:	4019      	ands	r1, r3
 80093b4:	4291      	cmp	r1, r2
 80093b6:	4680      	mov	r8, r0
 80093b8:	d95d      	bls.n	8009476 <_strtod_l+0xa7e>
 80093ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093bc:	4b4e      	ldr	r3, [pc, #312]	; (80094f8 <_strtod_l+0xb00>)
 80093be:	429a      	cmp	r2, r3
 80093c0:	d103      	bne.n	80093ca <_strtod_l+0x9d2>
 80093c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c4:	3301      	adds	r3, #1
 80093c6:	f43f ad56 	beq.w	8008e76 <_strtod_l+0x47e>
 80093ca:	f04f 38ff 	mov.w	r8, #4294967295
 80093ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80094f8 <_strtod_l+0xb00>
 80093d2:	4650      	mov	r0, sl
 80093d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093d6:	f001 fbc7 	bl	800ab68 <_Bfree>
 80093da:	4650      	mov	r0, sl
 80093dc:	9906      	ldr	r1, [sp, #24]
 80093de:	f001 fbc3 	bl	800ab68 <_Bfree>
 80093e2:	4650      	mov	r0, sl
 80093e4:	9904      	ldr	r1, [sp, #16]
 80093e6:	f001 fbbf 	bl	800ab68 <_Bfree>
 80093ea:	4659      	mov	r1, fp
 80093ec:	4650      	mov	r0, sl
 80093ee:	f001 fbbb 	bl	800ab68 <_Bfree>
 80093f2:	e627      	b.n	8009044 <_strtod_l+0x64c>
 80093f4:	f1b8 0f00 	cmp.w	r8, #0
 80093f8:	d119      	bne.n	800942e <_strtod_l+0xa36>
 80093fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009400:	b9e3      	cbnz	r3, 800943c <_strtod_l+0xa44>
 8009402:	2200      	movs	r2, #0
 8009404:	4630      	mov	r0, r6
 8009406:	4639      	mov	r1, r7
 8009408:	4b3c      	ldr	r3, [pc, #240]	; (80094fc <_strtod_l+0xb04>)
 800940a:	f7f7 fad7 	bl	80009bc <__aeabi_dcmplt>
 800940e:	b9c8      	cbnz	r0, 8009444 <_strtod_l+0xa4c>
 8009410:	2200      	movs	r2, #0
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	4b3c      	ldr	r3, [pc, #240]	; (8009508 <_strtod_l+0xb10>)
 8009418:	f7f7 f85e 	bl	80004d8 <__aeabi_dmul>
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009424:	9416      	str	r4, [sp, #88]	; 0x58
 8009426:	9317      	str	r3, [sp, #92]	; 0x5c
 8009428:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800942c:	e7a2      	b.n	8009374 <_strtod_l+0x97c>
 800942e:	f1b8 0f01 	cmp.w	r8, #1
 8009432:	d103      	bne.n	800943c <_strtod_l+0xa44>
 8009434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f ad92 	beq.w	8008f60 <_strtod_l+0x568>
 800943c:	2600      	movs	r6, #0
 800943e:	2400      	movs	r4, #0
 8009440:	4f32      	ldr	r7, [pc, #200]	; (800950c <_strtod_l+0xb14>)
 8009442:	e796      	b.n	8009372 <_strtod_l+0x97a>
 8009444:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009446:	4d30      	ldr	r5, [pc, #192]	; (8009508 <_strtod_l+0xb10>)
 8009448:	e7ea      	b.n	8009420 <_strtod_l+0xa28>
 800944a:	4b2f      	ldr	r3, [pc, #188]	; (8009508 <_strtod_l+0xb10>)
 800944c:	2200      	movs	r2, #0
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7f7 f841 	bl	80004d8 <__aeabi_dmul>
 8009456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	b933      	cbnz	r3, 800946c <_strtod_l+0xa74>
 800945e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009462:	9010      	str	r0, [sp, #64]	; 0x40
 8009464:	9311      	str	r3, [sp, #68]	; 0x44
 8009466:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800946a:	e783      	b.n	8009374 <_strtod_l+0x97c>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009474:	e7f7      	b.n	8009466 <_strtod_l+0xa6e>
 8009476:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800947a:	9b05      	ldr	r3, [sp, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1a8      	bne.n	80093d2 <_strtod_l+0x9da>
 8009480:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009486:	0d1b      	lsrs	r3, r3, #20
 8009488:	051b      	lsls	r3, r3, #20
 800948a:	429a      	cmp	r2, r3
 800948c:	d1a1      	bne.n	80093d2 <_strtod_l+0x9da>
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f7 fe79 	bl	8001188 <__aeabi_d2lz>
 8009496:	f7f6 fff1 	bl	800047c <__aeabi_l2d>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4620      	mov	r0, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	f7f6 fe61 	bl	8000168 <__aeabi_dsub>
 80094a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094ac:	ea43 0308 	orr.w	r3, r3, r8
 80094b0:	4313      	orrs	r3, r2
 80094b2:	4604      	mov	r4, r0
 80094b4:	460d      	mov	r5, r1
 80094b6:	d066      	beq.n	8009586 <_strtod_l+0xb8e>
 80094b8:	a309      	add	r3, pc, #36	; (adr r3, 80094e0 <_strtod_l+0xae8>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f7f7 fa7d 	bl	80009bc <__aeabi_dcmplt>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	f47f ace2 	bne.w	8008e8c <_strtod_l+0x494>
 80094c8:	a307      	add	r3, pc, #28	; (adr r3, 80094e8 <_strtod_l+0xaf0>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7f7 fa91 	bl	80009f8 <__aeabi_dcmpgt>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f af7b 	beq.w	80093d2 <_strtod_l+0x9da>
 80094dc:	e4d6      	b.n	8008e8c <_strtod_l+0x494>
 80094de:	bf00      	nop
 80094e0:	94a03595 	.word	0x94a03595
 80094e4:	3fdfffff 	.word	0x3fdfffff
 80094e8:	35afe535 	.word	0x35afe535
 80094ec:	3fe00000 	.word	0x3fe00000
 80094f0:	000fffff 	.word	0x000fffff
 80094f4:	7ff00000 	.word	0x7ff00000
 80094f8:	7fefffff 	.word	0x7fefffff
 80094fc:	3ff00000 	.word	0x3ff00000
 8009500:	7fe00000 	.word	0x7fe00000
 8009504:	7c9fffff 	.word	0x7c9fffff
 8009508:	3fe00000 	.word	0x3fe00000
 800950c:	bff00000 	.word	0xbff00000
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	b313      	cbz	r3, 800955a <_strtod_l+0xb62>
 8009514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009516:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800951a:	d81e      	bhi.n	800955a <_strtod_l+0xb62>
 800951c:	a326      	add	r3, pc, #152	; (adr r3, 80095b8 <_strtod_l+0xbc0>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	4620      	mov	r0, r4
 8009524:	4629      	mov	r1, r5
 8009526:	f7f7 fa53 	bl	80009d0 <__aeabi_dcmple>
 800952a:	b190      	cbz	r0, 8009552 <_strtod_l+0xb5a>
 800952c:	4629      	mov	r1, r5
 800952e:	4620      	mov	r0, r4
 8009530:	f7f7 faaa 	bl	8000a88 <__aeabi_d2uiz>
 8009534:	2801      	cmp	r0, #1
 8009536:	bf38      	it	cc
 8009538:	2001      	movcc	r0, #1
 800953a:	f7f6 ff53 	bl	80003e4 <__aeabi_ui2d>
 800953e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009540:	4604      	mov	r4, r0
 8009542:	460d      	mov	r5, r1
 8009544:	b9d3      	cbnz	r3, 800957c <_strtod_l+0xb84>
 8009546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800954a:	9012      	str	r0, [sp, #72]	; 0x48
 800954c:	9313      	str	r3, [sp, #76]	; 0x4c
 800954e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009552:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009554:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009558:	1a9f      	subs	r7, r3, r2
 800955a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800955e:	f001 fe33 	bl	800b1c8 <__ulp>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4630      	mov	r0, r6
 8009568:	4639      	mov	r1, r7
 800956a:	f7f6 ffb5 	bl	80004d8 <__aeabi_dmul>
 800956e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009572:	f7f6 fdfb 	bl	800016c <__adddf3>
 8009576:	4680      	mov	r8, r0
 8009578:	4689      	mov	r9, r1
 800957a:	e77e      	b.n	800947a <_strtod_l+0xa82>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009584:	e7e3      	b.n	800954e <_strtod_l+0xb56>
 8009586:	a30e      	add	r3, pc, #56	; (adr r3, 80095c0 <_strtod_l+0xbc8>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	f7f7 fa16 	bl	80009bc <__aeabi_dcmplt>
 8009590:	e7a1      	b.n	80094d6 <_strtod_l+0xade>
 8009592:	2300      	movs	r3, #0
 8009594:	930a      	str	r3, [sp, #40]	; 0x28
 8009596:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009598:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	f7ff ba71 	b.w	8008a82 <_strtod_l+0x8a>
 80095a0:	2a65      	cmp	r2, #101	; 0x65
 80095a2:	f43f ab63 	beq.w	8008c6c <_strtod_l+0x274>
 80095a6:	2a45      	cmp	r2, #69	; 0x45
 80095a8:	f43f ab60 	beq.w	8008c6c <_strtod_l+0x274>
 80095ac:	2301      	movs	r3, #1
 80095ae:	f7ff bb95 	b.w	8008cdc <_strtod_l+0x2e4>
 80095b2:	bf00      	nop
 80095b4:	f3af 8000 	nop.w
 80095b8:	ffc00000 	.word	0xffc00000
 80095bc:	41dfffff 	.word	0x41dfffff
 80095c0:	94a03595 	.word	0x94a03595
 80095c4:	3fcfffff 	.word	0x3fcfffff

080095c8 <_strtod_r>:
 80095c8:	4b01      	ldr	r3, [pc, #4]	; (80095d0 <_strtod_r+0x8>)
 80095ca:	f7ff ba15 	b.w	80089f8 <_strtod_l>
 80095ce:	bf00      	nop
 80095d0:	200000fc 	.word	0x200000fc

080095d4 <_strtol_l.constprop.0>:
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095da:	4680      	mov	r8, r0
 80095dc:	d001      	beq.n	80095e2 <_strtol_l.constprop.0+0xe>
 80095de:	2b24      	cmp	r3, #36	; 0x24
 80095e0:	d906      	bls.n	80095f0 <_strtol_l.constprop.0+0x1c>
 80095e2:	f7fe fb05 	bl	8007bf0 <__errno>
 80095e6:	2316      	movs	r3, #22
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	2000      	movs	r0, #0
 80095ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f0:	460d      	mov	r5, r1
 80095f2:	4f35      	ldr	r7, [pc, #212]	; (80096c8 <_strtol_l.constprop.0+0xf4>)
 80095f4:	4628      	mov	r0, r5
 80095f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095fa:	5de6      	ldrb	r6, [r4, r7]
 80095fc:	f016 0608 	ands.w	r6, r6, #8
 8009600:	d1f8      	bne.n	80095f4 <_strtol_l.constprop.0+0x20>
 8009602:	2c2d      	cmp	r4, #45	; 0x2d
 8009604:	d12f      	bne.n	8009666 <_strtol_l.constprop.0+0x92>
 8009606:	2601      	movs	r6, #1
 8009608:	782c      	ldrb	r4, [r5, #0]
 800960a:	1c85      	adds	r5, r0, #2
 800960c:	2b00      	cmp	r3, #0
 800960e:	d057      	beq.n	80096c0 <_strtol_l.constprop.0+0xec>
 8009610:	2b10      	cmp	r3, #16
 8009612:	d109      	bne.n	8009628 <_strtol_l.constprop.0+0x54>
 8009614:	2c30      	cmp	r4, #48	; 0x30
 8009616:	d107      	bne.n	8009628 <_strtol_l.constprop.0+0x54>
 8009618:	7828      	ldrb	r0, [r5, #0]
 800961a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800961e:	2858      	cmp	r0, #88	; 0x58
 8009620:	d149      	bne.n	80096b6 <_strtol_l.constprop.0+0xe2>
 8009622:	2310      	movs	r3, #16
 8009624:	786c      	ldrb	r4, [r5, #1]
 8009626:	3502      	adds	r5, #2
 8009628:	2700      	movs	r7, #0
 800962a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800962e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009632:	fbbe f9f3 	udiv	r9, lr, r3
 8009636:	4638      	mov	r0, r7
 8009638:	fb03 ea19 	mls	sl, r3, r9, lr
 800963c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009640:	f1bc 0f09 	cmp.w	ip, #9
 8009644:	d814      	bhi.n	8009670 <_strtol_l.constprop.0+0x9c>
 8009646:	4664      	mov	r4, ip
 8009648:	42a3      	cmp	r3, r4
 800964a:	dd22      	ble.n	8009692 <_strtol_l.constprop.0+0xbe>
 800964c:	2f00      	cmp	r7, #0
 800964e:	db1d      	blt.n	800968c <_strtol_l.constprop.0+0xb8>
 8009650:	4581      	cmp	r9, r0
 8009652:	d31b      	bcc.n	800968c <_strtol_l.constprop.0+0xb8>
 8009654:	d101      	bne.n	800965a <_strtol_l.constprop.0+0x86>
 8009656:	45a2      	cmp	sl, r4
 8009658:	db18      	blt.n	800968c <_strtol_l.constprop.0+0xb8>
 800965a:	2701      	movs	r7, #1
 800965c:	fb00 4003 	mla	r0, r0, r3, r4
 8009660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009664:	e7ea      	b.n	800963c <_strtol_l.constprop.0+0x68>
 8009666:	2c2b      	cmp	r4, #43	; 0x2b
 8009668:	bf04      	itt	eq
 800966a:	782c      	ldrbeq	r4, [r5, #0]
 800966c:	1c85      	addeq	r5, r0, #2
 800966e:	e7cd      	b.n	800960c <_strtol_l.constprop.0+0x38>
 8009670:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009674:	f1bc 0f19 	cmp.w	ip, #25
 8009678:	d801      	bhi.n	800967e <_strtol_l.constprop.0+0xaa>
 800967a:	3c37      	subs	r4, #55	; 0x37
 800967c:	e7e4      	b.n	8009648 <_strtol_l.constprop.0+0x74>
 800967e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009682:	f1bc 0f19 	cmp.w	ip, #25
 8009686:	d804      	bhi.n	8009692 <_strtol_l.constprop.0+0xbe>
 8009688:	3c57      	subs	r4, #87	; 0x57
 800968a:	e7dd      	b.n	8009648 <_strtol_l.constprop.0+0x74>
 800968c:	f04f 37ff 	mov.w	r7, #4294967295
 8009690:	e7e6      	b.n	8009660 <_strtol_l.constprop.0+0x8c>
 8009692:	2f00      	cmp	r7, #0
 8009694:	da07      	bge.n	80096a6 <_strtol_l.constprop.0+0xd2>
 8009696:	2322      	movs	r3, #34	; 0x22
 8009698:	4670      	mov	r0, lr
 800969a:	f8c8 3000 	str.w	r3, [r8]
 800969e:	2a00      	cmp	r2, #0
 80096a0:	d0a4      	beq.n	80095ec <_strtol_l.constprop.0+0x18>
 80096a2:	1e69      	subs	r1, r5, #1
 80096a4:	e005      	b.n	80096b2 <_strtol_l.constprop.0+0xde>
 80096a6:	b106      	cbz	r6, 80096aa <_strtol_l.constprop.0+0xd6>
 80096a8:	4240      	negs	r0, r0
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d09e      	beq.n	80095ec <_strtol_l.constprop.0+0x18>
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	d1f7      	bne.n	80096a2 <_strtol_l.constprop.0+0xce>
 80096b2:	6011      	str	r1, [r2, #0]
 80096b4:	e79a      	b.n	80095ec <_strtol_l.constprop.0+0x18>
 80096b6:	2430      	movs	r4, #48	; 0x30
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1b5      	bne.n	8009628 <_strtol_l.constprop.0+0x54>
 80096bc:	2308      	movs	r3, #8
 80096be:	e7b3      	b.n	8009628 <_strtol_l.constprop.0+0x54>
 80096c0:	2c30      	cmp	r4, #48	; 0x30
 80096c2:	d0a9      	beq.n	8009618 <_strtol_l.constprop.0+0x44>
 80096c4:	230a      	movs	r3, #10
 80096c6:	e7af      	b.n	8009628 <_strtol_l.constprop.0+0x54>
 80096c8:	0800c9a9 	.word	0x0800c9a9

080096cc <_strtol_r>:
 80096cc:	f7ff bf82 	b.w	80095d4 <_strtol_l.constprop.0>

080096d0 <quorem>:
 80096d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	6903      	ldr	r3, [r0, #16]
 80096d6:	690c      	ldr	r4, [r1, #16]
 80096d8:	4607      	mov	r7, r0
 80096da:	42a3      	cmp	r3, r4
 80096dc:	f2c0 8082 	blt.w	80097e4 <quorem+0x114>
 80096e0:	3c01      	subs	r4, #1
 80096e2:	f100 0514 	add.w	r5, r0, #20
 80096e6:	f101 0814 	add.w	r8, r1, #20
 80096ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096f8:	3301      	adds	r3, #1
 80096fa:	429a      	cmp	r2, r3
 80096fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009700:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009708:	d331      	bcc.n	800976e <quorem+0x9e>
 800970a:	f04f 0e00 	mov.w	lr, #0
 800970e:	4640      	mov	r0, r8
 8009710:	46ac      	mov	ip, r5
 8009712:	46f2      	mov	sl, lr
 8009714:	f850 2b04 	ldr.w	r2, [r0], #4
 8009718:	b293      	uxth	r3, r2
 800971a:	fb06 e303 	mla	r3, r6, r3, lr
 800971e:	0c12      	lsrs	r2, r2, #16
 8009720:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009724:	b29b      	uxth	r3, r3
 8009726:	fb06 e202 	mla	r2, r6, r2, lr
 800972a:	ebaa 0303 	sub.w	r3, sl, r3
 800972e:	f8dc a000 	ldr.w	sl, [ip]
 8009732:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009736:	fa1f fa8a 	uxth.w	sl, sl
 800973a:	4453      	add	r3, sl
 800973c:	f8dc a000 	ldr.w	sl, [ip]
 8009740:	b292      	uxth	r2, r2
 8009742:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800974a:	b29b      	uxth	r3, r3
 800974c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009750:	4581      	cmp	r9, r0
 8009752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009756:	f84c 3b04 	str.w	r3, [ip], #4
 800975a:	d2db      	bcs.n	8009714 <quorem+0x44>
 800975c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009760:	b92b      	cbnz	r3, 800976e <quorem+0x9e>
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	3b04      	subs	r3, #4
 8009766:	429d      	cmp	r5, r3
 8009768:	461a      	mov	r2, r3
 800976a:	d32f      	bcc.n	80097cc <quorem+0xfc>
 800976c:	613c      	str	r4, [r7, #16]
 800976e:	4638      	mov	r0, r7
 8009770:	f001 fc82 	bl	800b078 <__mcmp>
 8009774:	2800      	cmp	r0, #0
 8009776:	db25      	blt.n	80097c4 <quorem+0xf4>
 8009778:	4628      	mov	r0, r5
 800977a:	f04f 0c00 	mov.w	ip, #0
 800977e:	3601      	adds	r6, #1
 8009780:	f858 1b04 	ldr.w	r1, [r8], #4
 8009784:	f8d0 e000 	ldr.w	lr, [r0]
 8009788:	b28b      	uxth	r3, r1
 800978a:	ebac 0303 	sub.w	r3, ip, r3
 800978e:	fa1f f28e 	uxth.w	r2, lr
 8009792:	4413      	add	r3, r2
 8009794:	0c0a      	lsrs	r2, r1, #16
 8009796:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800979a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a4:	45c1      	cmp	r9, r8
 80097a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097aa:	f840 3b04 	str.w	r3, [r0], #4
 80097ae:	d2e7      	bcs.n	8009780 <quorem+0xb0>
 80097b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b8:	b922      	cbnz	r2, 80097c4 <quorem+0xf4>
 80097ba:	3b04      	subs	r3, #4
 80097bc:	429d      	cmp	r5, r3
 80097be:	461a      	mov	r2, r3
 80097c0:	d30a      	bcc.n	80097d8 <quorem+0x108>
 80097c2:	613c      	str	r4, [r7, #16]
 80097c4:	4630      	mov	r0, r6
 80097c6:	b003      	add	sp, #12
 80097c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097cc:	6812      	ldr	r2, [r2, #0]
 80097ce:	3b04      	subs	r3, #4
 80097d0:	2a00      	cmp	r2, #0
 80097d2:	d1cb      	bne.n	800976c <quorem+0x9c>
 80097d4:	3c01      	subs	r4, #1
 80097d6:	e7c6      	b.n	8009766 <quorem+0x96>
 80097d8:	6812      	ldr	r2, [r2, #0]
 80097da:	3b04      	subs	r3, #4
 80097dc:	2a00      	cmp	r2, #0
 80097de:	d1f0      	bne.n	80097c2 <quorem+0xf2>
 80097e0:	3c01      	subs	r4, #1
 80097e2:	e7eb      	b.n	80097bc <quorem+0xec>
 80097e4:	2000      	movs	r0, #0
 80097e6:	e7ee      	b.n	80097c6 <quorem+0xf6>

080097e8 <_dtoa_r>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	4616      	mov	r6, r2
 80097ee:	461f      	mov	r7, r3
 80097f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097f2:	b099      	sub	sp, #100	; 0x64
 80097f4:	4605      	mov	r5, r0
 80097f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097fe:	b974      	cbnz	r4, 800981e <_dtoa_r+0x36>
 8009800:	2010      	movs	r0, #16
 8009802:	f001 f949 	bl	800aa98 <malloc>
 8009806:	4602      	mov	r2, r0
 8009808:	6268      	str	r0, [r5, #36]	; 0x24
 800980a:	b920      	cbnz	r0, 8009816 <_dtoa_r+0x2e>
 800980c:	21ea      	movs	r1, #234	; 0xea
 800980e:	4ba8      	ldr	r3, [pc, #672]	; (8009ab0 <_dtoa_r+0x2c8>)
 8009810:	48a8      	ldr	r0, [pc, #672]	; (8009ab4 <_dtoa_r+0x2cc>)
 8009812:	f002 f8a5 	bl	800b960 <__assert_func>
 8009816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800981a:	6004      	str	r4, [r0, #0]
 800981c:	60c4      	str	r4, [r0, #12]
 800981e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009820:	6819      	ldr	r1, [r3, #0]
 8009822:	b151      	cbz	r1, 800983a <_dtoa_r+0x52>
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	2301      	movs	r3, #1
 8009828:	4093      	lsls	r3, r2
 800982a:	604a      	str	r2, [r1, #4]
 800982c:	608b      	str	r3, [r1, #8]
 800982e:	4628      	mov	r0, r5
 8009830:	f001 f99a 	bl	800ab68 <_Bfree>
 8009834:	2200      	movs	r2, #0
 8009836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	1e3b      	subs	r3, r7, #0
 800983c:	bfaf      	iteee	ge
 800983e:	2300      	movge	r3, #0
 8009840:	2201      	movlt	r2, #1
 8009842:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009846:	9305      	strlt	r3, [sp, #20]
 8009848:	bfa8      	it	ge
 800984a:	f8c8 3000 	strge.w	r3, [r8]
 800984e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009852:	4b99      	ldr	r3, [pc, #612]	; (8009ab8 <_dtoa_r+0x2d0>)
 8009854:	bfb8      	it	lt
 8009856:	f8c8 2000 	strlt.w	r2, [r8]
 800985a:	ea33 0309 	bics.w	r3, r3, r9
 800985e:	d119      	bne.n	8009894 <_dtoa_r+0xac>
 8009860:	f242 730f 	movw	r3, #9999	; 0x270f
 8009864:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800986c:	4333      	orrs	r3, r6
 800986e:	f000 857f 	beq.w	800a370 <_dtoa_r+0xb88>
 8009872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009874:	b953      	cbnz	r3, 800988c <_dtoa_r+0xa4>
 8009876:	4b91      	ldr	r3, [pc, #580]	; (8009abc <_dtoa_r+0x2d4>)
 8009878:	e022      	b.n	80098c0 <_dtoa_r+0xd8>
 800987a:	4b91      	ldr	r3, [pc, #580]	; (8009ac0 <_dtoa_r+0x2d8>)
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	3308      	adds	r3, #8
 8009880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	9803      	ldr	r0, [sp, #12]
 8009886:	b019      	add	sp, #100	; 0x64
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988c:	4b8b      	ldr	r3, [pc, #556]	; (8009abc <_dtoa_r+0x2d4>)
 800988e:	9303      	str	r3, [sp, #12]
 8009890:	3303      	adds	r3, #3
 8009892:	e7f5      	b.n	8009880 <_dtoa_r+0x98>
 8009894:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009898:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800989c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098a0:	2200      	movs	r2, #0
 80098a2:	2300      	movs	r3, #0
 80098a4:	f7f7 f880 	bl	80009a8 <__aeabi_dcmpeq>
 80098a8:	4680      	mov	r8, r0
 80098aa:	b158      	cbz	r0, 80098c4 <_dtoa_r+0xdc>
 80098ac:	2301      	movs	r3, #1
 80098ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8558 	beq.w	800a36a <_dtoa_r+0xb82>
 80098ba:	4882      	ldr	r0, [pc, #520]	; (8009ac4 <_dtoa_r+0x2dc>)
 80098bc:	6018      	str	r0, [r3, #0]
 80098be:	1e43      	subs	r3, r0, #1
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	e7df      	b.n	8009884 <_dtoa_r+0x9c>
 80098c4:	ab16      	add	r3, sp, #88	; 0x58
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	ab17      	add	r3, sp, #92	; 0x5c
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	4628      	mov	r0, r5
 80098ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098d2:	f001 fcf3 	bl	800b2bc <__d2b>
 80098d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098da:	4683      	mov	fp, r0
 80098dc:	2c00      	cmp	r4, #0
 80098de:	d07f      	beq.n	80099e0 <_dtoa_r+0x1f8>
 80098e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80098ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80098f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098fa:	2200      	movs	r2, #0
 80098fc:	4b72      	ldr	r3, [pc, #456]	; (8009ac8 <_dtoa_r+0x2e0>)
 80098fe:	f7f6 fc33 	bl	8000168 <__aeabi_dsub>
 8009902:	a365      	add	r3, pc, #404	; (adr r3, 8009a98 <_dtoa_r+0x2b0>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fde6 	bl	80004d8 <__aeabi_dmul>
 800990c:	a364      	add	r3, pc, #400	; (adr r3, 8009aa0 <_dtoa_r+0x2b8>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	f7f6 fc2b 	bl	800016c <__adddf3>
 8009916:	4606      	mov	r6, r0
 8009918:	4620      	mov	r0, r4
 800991a:	460f      	mov	r7, r1
 800991c:	f7f6 fd72 	bl	8000404 <__aeabi_i2d>
 8009920:	a361      	add	r3, pc, #388	; (adr r3, 8009aa8 <_dtoa_r+0x2c0>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fdd7 	bl	80004d8 <__aeabi_dmul>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	f7f6 fc1b 	bl	800016c <__adddf3>
 8009936:	4606      	mov	r6, r0
 8009938:	460f      	mov	r7, r1
 800993a:	f7f7 f87d 	bl	8000a38 <__aeabi_d2iz>
 800993e:	2200      	movs	r2, #0
 8009940:	4682      	mov	sl, r0
 8009942:	2300      	movs	r3, #0
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f7 f838 	bl	80009bc <__aeabi_dcmplt>
 800994c:	b148      	cbz	r0, 8009962 <_dtoa_r+0x17a>
 800994e:	4650      	mov	r0, sl
 8009950:	f7f6 fd58 	bl	8000404 <__aeabi_i2d>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	f7f7 f826 	bl	80009a8 <__aeabi_dcmpeq>
 800995c:	b908      	cbnz	r0, 8009962 <_dtoa_r+0x17a>
 800995e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009962:	f1ba 0f16 	cmp.w	sl, #22
 8009966:	d858      	bhi.n	8009a1a <_dtoa_r+0x232>
 8009968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800996c:	4b57      	ldr	r3, [pc, #348]	; (8009acc <_dtoa_r+0x2e4>)
 800996e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f7 f821 	bl	80009bc <__aeabi_dcmplt>
 800997a:	2800      	cmp	r0, #0
 800997c:	d04f      	beq.n	8009a1e <_dtoa_r+0x236>
 800997e:	2300      	movs	r3, #0
 8009980:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009984:	930f      	str	r3, [sp, #60]	; 0x3c
 8009986:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009988:	1b1c      	subs	r4, r3, r4
 800998a:	1e63      	subs	r3, r4, #1
 800998c:	9309      	str	r3, [sp, #36]	; 0x24
 800998e:	bf49      	itett	mi
 8009990:	f1c4 0301 	rsbmi	r3, r4, #1
 8009994:	2300      	movpl	r3, #0
 8009996:	9306      	strmi	r3, [sp, #24]
 8009998:	2300      	movmi	r3, #0
 800999a:	bf54      	ite	pl
 800999c:	9306      	strpl	r3, [sp, #24]
 800999e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80099a0:	f1ba 0f00 	cmp.w	sl, #0
 80099a4:	db3d      	blt.n	8009a22 <_dtoa_r+0x23a>
 80099a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80099ac:	4453      	add	r3, sl
 80099ae:	9309      	str	r3, [sp, #36]	; 0x24
 80099b0:	2300      	movs	r3, #0
 80099b2:	930a      	str	r3, [sp, #40]	; 0x28
 80099b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	f200 808c 	bhi.w	8009ad4 <_dtoa_r+0x2ec>
 80099bc:	2b05      	cmp	r3, #5
 80099be:	bfc4      	itt	gt
 80099c0:	3b04      	subgt	r3, #4
 80099c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80099c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099c6:	bfc8      	it	gt
 80099c8:	2400      	movgt	r4, #0
 80099ca:	f1a3 0302 	sub.w	r3, r3, #2
 80099ce:	bfd8      	it	le
 80099d0:	2401      	movle	r4, #1
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	f200 808a 	bhi.w	8009aec <_dtoa_r+0x304>
 80099d8:	e8df f003 	tbb	[pc, r3]
 80099dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80099e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80099e4:	441c      	add	r4, r3
 80099e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	bfc3      	ittte	gt
 80099ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80099f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80099fa:	f1c3 0320 	rsble	r3, r3, #32
 80099fe:	bfc6      	itte	gt
 8009a00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a04:	4318      	orrgt	r0, r3
 8009a06:	fa06 f003 	lslle.w	r0, r6, r3
 8009a0a:	f7f6 fceb 	bl	80003e4 <__aeabi_ui2d>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a14:	3c01      	subs	r4, #1
 8009a16:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a18:	e76f      	b.n	80098fa <_dtoa_r+0x112>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e7b2      	b.n	8009984 <_dtoa_r+0x19c>
 8009a1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a20:	e7b1      	b.n	8009986 <_dtoa_r+0x19e>
 8009a22:	9b06      	ldr	r3, [sp, #24]
 8009a24:	eba3 030a 	sub.w	r3, r3, sl
 8009a28:	9306      	str	r3, [sp, #24]
 8009a2a:	f1ca 0300 	rsb	r3, sl, #0
 8009a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a30:	2300      	movs	r3, #0
 8009a32:	930e      	str	r3, [sp, #56]	; 0x38
 8009a34:	e7be      	b.n	80099b4 <_dtoa_r+0x1cc>
 8009a36:	2300      	movs	r3, #0
 8009a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dc58      	bgt.n	8009af2 <_dtoa_r+0x30a>
 8009a40:	f04f 0901 	mov.w	r9, #1
 8009a44:	464b      	mov	r3, r9
 8009a46:	f8cd 9020 	str.w	r9, [sp, #32]
 8009a4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009a4e:	2200      	movs	r2, #0
 8009a50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a52:	6042      	str	r2, [r0, #4]
 8009a54:	2204      	movs	r2, #4
 8009a56:	f102 0614 	add.w	r6, r2, #20
 8009a5a:	429e      	cmp	r6, r3
 8009a5c:	6841      	ldr	r1, [r0, #4]
 8009a5e:	d94e      	bls.n	8009afe <_dtoa_r+0x316>
 8009a60:	4628      	mov	r0, r5
 8009a62:	f001 f841 	bl	800aae8 <_Balloc>
 8009a66:	9003      	str	r0, [sp, #12]
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d14c      	bne.n	8009b06 <_dtoa_r+0x31e>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a72:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <_dtoa_r+0x2e8>)
 8009a74:	e6cc      	b.n	8009810 <_dtoa_r+0x28>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7de      	b.n	8009a38 <_dtoa_r+0x250>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a80:	eb0a 0903 	add.w	r9, sl, r3
 8009a84:	f109 0301 	add.w	r3, r9, #1
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	bfb8      	it	lt
 8009a8e:	2301      	movlt	r3, #1
 8009a90:	e7dd      	b.n	8009a4e <_dtoa_r+0x266>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7f2      	b.n	8009a7c <_dtoa_r+0x294>
 8009a96:	bf00      	nop
 8009a98:	636f4361 	.word	0x636f4361
 8009a9c:	3fd287a7 	.word	0x3fd287a7
 8009aa0:	8b60c8b3 	.word	0x8b60c8b3
 8009aa4:	3fc68a28 	.word	0x3fc68a28
 8009aa8:	509f79fb 	.word	0x509f79fb
 8009aac:	3fd34413 	.word	0x3fd34413
 8009ab0:	0800cab6 	.word	0x0800cab6
 8009ab4:	0800cacd 	.word	0x0800cacd
 8009ab8:	7ff00000 	.word	0x7ff00000
 8009abc:	0800cab2 	.word	0x0800cab2
 8009ac0:	0800caa9 	.word	0x0800caa9
 8009ac4:	0800c929 	.word	0x0800c929
 8009ac8:	3ff80000 	.word	0x3ff80000
 8009acc:	0800cc38 	.word	0x0800cc38
 8009ad0:	0800cb28 	.word	0x0800cb28
 8009ad4:	2401      	movs	r4, #1
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ada:	9322      	str	r3, [sp, #136]	; 0x88
 8009adc:	f04f 39ff 	mov.w	r9, #4294967295
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2312      	movs	r3, #18
 8009ae4:	f8cd 9020 	str.w	r9, [sp, #32]
 8009ae8:	9223      	str	r2, [sp, #140]	; 0x8c
 8009aea:	e7b0      	b.n	8009a4e <_dtoa_r+0x266>
 8009aec:	2301      	movs	r3, #1
 8009aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af0:	e7f4      	b.n	8009adc <_dtoa_r+0x2f4>
 8009af2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009af6:	464b      	mov	r3, r9
 8009af8:	f8cd 9020 	str.w	r9, [sp, #32]
 8009afc:	e7a7      	b.n	8009a4e <_dtoa_r+0x266>
 8009afe:	3101      	adds	r1, #1
 8009b00:	6041      	str	r1, [r0, #4]
 8009b02:	0052      	lsls	r2, r2, #1
 8009b04:	e7a7      	b.n	8009a56 <_dtoa_r+0x26e>
 8009b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b08:	9a03      	ldr	r2, [sp, #12]
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	9b08      	ldr	r3, [sp, #32]
 8009b0e:	2b0e      	cmp	r3, #14
 8009b10:	f200 80a8 	bhi.w	8009c64 <_dtoa_r+0x47c>
 8009b14:	2c00      	cmp	r4, #0
 8009b16:	f000 80a5 	beq.w	8009c64 <_dtoa_r+0x47c>
 8009b1a:	f1ba 0f00 	cmp.w	sl, #0
 8009b1e:	dd34      	ble.n	8009b8a <_dtoa_r+0x3a2>
 8009b20:	4a9a      	ldr	r2, [pc, #616]	; (8009d8c <_dtoa_r+0x5a4>)
 8009b22:	f00a 030f 	and.w	r3, sl, #15
 8009b26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009b3a:	d016      	beq.n	8009b6a <_dtoa_r+0x382>
 8009b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b40:	4b93      	ldr	r3, [pc, #588]	; (8009d90 <_dtoa_r+0x5a8>)
 8009b42:	2703      	movs	r7, #3
 8009b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b48:	f7f6 fdf0 	bl	800072c <__aeabi_ddiv>
 8009b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b50:	f004 040f 	and.w	r4, r4, #15
 8009b54:	4e8e      	ldr	r6, [pc, #568]	; (8009d90 <_dtoa_r+0x5a8>)
 8009b56:	b954      	cbnz	r4, 8009b6e <_dtoa_r+0x386>
 8009b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b60:	f7f6 fde4 	bl	800072c <__aeabi_ddiv>
 8009b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b68:	e029      	b.n	8009bbe <_dtoa_r+0x3d6>
 8009b6a:	2702      	movs	r7, #2
 8009b6c:	e7f2      	b.n	8009b54 <_dtoa_r+0x36c>
 8009b6e:	07e1      	lsls	r1, r4, #31
 8009b70:	d508      	bpl.n	8009b84 <_dtoa_r+0x39c>
 8009b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b7a:	f7f6 fcad 	bl	80004d8 <__aeabi_dmul>
 8009b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b82:	3701      	adds	r7, #1
 8009b84:	1064      	asrs	r4, r4, #1
 8009b86:	3608      	adds	r6, #8
 8009b88:	e7e5      	b.n	8009b56 <_dtoa_r+0x36e>
 8009b8a:	f000 80a5 	beq.w	8009cd8 <_dtoa_r+0x4f0>
 8009b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b92:	f1ca 0400 	rsb	r4, sl, #0
 8009b96:	4b7d      	ldr	r3, [pc, #500]	; (8009d8c <_dtoa_r+0x5a4>)
 8009b98:	f004 020f 	and.w	r2, r4, #15
 8009b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f7f6 fc98 	bl	80004d8 <__aeabi_dmul>
 8009ba8:	2702      	movs	r7, #2
 8009baa:	2300      	movs	r3, #0
 8009bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bb0:	4e77      	ldr	r6, [pc, #476]	; (8009d90 <_dtoa_r+0x5a8>)
 8009bb2:	1124      	asrs	r4, r4, #4
 8009bb4:	2c00      	cmp	r4, #0
 8009bb6:	f040 8084 	bne.w	8009cc2 <_dtoa_r+0x4da>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1d2      	bne.n	8009b64 <_dtoa_r+0x37c>
 8009bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 808b 	beq.w	8009cdc <_dtoa_r+0x4f4>
 8009bc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009bca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009bce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4b6f      	ldr	r3, [pc, #444]	; (8009d94 <_dtoa_r+0x5ac>)
 8009bd6:	f7f6 fef1 	bl	80009bc <__aeabi_dcmplt>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d07e      	beq.n	8009cdc <_dtoa_r+0x4f4>
 8009bde:	9b08      	ldr	r3, [sp, #32]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d07b      	beq.n	8009cdc <_dtoa_r+0x4f4>
 8009be4:	f1b9 0f00 	cmp.w	r9, #0
 8009be8:	dd38      	ble.n	8009c5c <_dtoa_r+0x474>
 8009bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4b69      	ldr	r3, [pc, #420]	; (8009d98 <_dtoa_r+0x5b0>)
 8009bf2:	f7f6 fc71 	bl	80004d8 <__aeabi_dmul>
 8009bf6:	464c      	mov	r4, r9
 8009bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bfc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009c00:	3701      	adds	r7, #1
 8009c02:	4638      	mov	r0, r7
 8009c04:	f7f6 fbfe 	bl	8000404 <__aeabi_i2d>
 8009c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c0c:	f7f6 fc64 	bl	80004d8 <__aeabi_dmul>
 8009c10:	2200      	movs	r2, #0
 8009c12:	4b62      	ldr	r3, [pc, #392]	; (8009d9c <_dtoa_r+0x5b4>)
 8009c14:	f7f6 faaa 	bl	800016c <__adddf3>
 8009c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c20:	9611      	str	r6, [sp, #68]	; 0x44
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d15d      	bne.n	8009ce2 <_dtoa_r+0x4fa>
 8009c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4b5c      	ldr	r3, [pc, #368]	; (8009da0 <_dtoa_r+0x5b8>)
 8009c2e:	f7f6 fa9b 	bl	8000168 <__aeabi_dsub>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c3a:	4633      	mov	r3, r6
 8009c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c3e:	f7f6 fedb 	bl	80009f8 <__aeabi_dcmpgt>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f040 829c 	bne.w	800a180 <_dtoa_r+0x998>
 8009c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c52:	f7f6 feb3 	bl	80009bc <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f040 8290 	bne.w	800a17c <_dtoa_r+0x994>
 8009c5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f2c0 8152 	blt.w	8009f10 <_dtoa_r+0x728>
 8009c6c:	f1ba 0f0e 	cmp.w	sl, #14
 8009c70:	f300 814e 	bgt.w	8009f10 <_dtoa_r+0x728>
 8009c74:	4b45      	ldr	r3, [pc, #276]	; (8009d8c <_dtoa_r+0x5a4>)
 8009c76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f280 80db 	bge.w	8009e40 <_dtoa_r+0x658>
 8009c8a:	9b08      	ldr	r3, [sp, #32]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f300 80d7 	bgt.w	8009e40 <_dtoa_r+0x658>
 8009c92:	f040 8272 	bne.w	800a17a <_dtoa_r+0x992>
 8009c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4b40      	ldr	r3, [pc, #256]	; (8009da0 <_dtoa_r+0x5b8>)
 8009c9e:	f7f6 fc1b 	bl	80004d8 <__aeabi_dmul>
 8009ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ca6:	f7f6 fe9d 	bl	80009e4 <__aeabi_dcmpge>
 8009caa:	9c08      	ldr	r4, [sp, #32]
 8009cac:	4626      	mov	r6, r4
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f040 8248 	bne.w	800a144 <_dtoa_r+0x95c>
 8009cb4:	2331      	movs	r3, #49	; 0x31
 8009cb6:	9f03      	ldr	r7, [sp, #12]
 8009cb8:	f10a 0a01 	add.w	sl, sl, #1
 8009cbc:	f807 3b01 	strb.w	r3, [r7], #1
 8009cc0:	e244      	b.n	800a14c <_dtoa_r+0x964>
 8009cc2:	07e2      	lsls	r2, r4, #31
 8009cc4:	d505      	bpl.n	8009cd2 <_dtoa_r+0x4ea>
 8009cc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cca:	f7f6 fc05 	bl	80004d8 <__aeabi_dmul>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	3701      	adds	r7, #1
 8009cd2:	1064      	asrs	r4, r4, #1
 8009cd4:	3608      	adds	r6, #8
 8009cd6:	e76d      	b.n	8009bb4 <_dtoa_r+0x3cc>
 8009cd8:	2702      	movs	r7, #2
 8009cda:	e770      	b.n	8009bbe <_dtoa_r+0x3d6>
 8009cdc:	46d0      	mov	r8, sl
 8009cde:	9c08      	ldr	r4, [sp, #32]
 8009ce0:	e78f      	b.n	8009c02 <_dtoa_r+0x41a>
 8009ce2:	9903      	ldr	r1, [sp, #12]
 8009ce4:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <_dtoa_r+0x5a4>)
 8009ce6:	4421      	add	r1, r4
 8009ce8:	9112      	str	r1, [sp, #72]	; 0x48
 8009cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009cf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	d055      	beq.n	8009da8 <_dtoa_r+0x5c0>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	4929      	ldr	r1, [pc, #164]	; (8009da4 <_dtoa_r+0x5bc>)
 8009d00:	f7f6 fd14 	bl	800072c <__aeabi_ddiv>
 8009d04:	463b      	mov	r3, r7
 8009d06:	4632      	mov	r2, r6
 8009d08:	f7f6 fa2e 	bl	8000168 <__aeabi_dsub>
 8009d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d10:	9f03      	ldr	r7, [sp, #12]
 8009d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d16:	f7f6 fe8f 	bl	8000a38 <__aeabi_d2iz>
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	f7f6 fb72 	bl	8000404 <__aeabi_i2d>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d28:	f7f6 fa1e 	bl	8000168 <__aeabi_dsub>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	3430      	adds	r4, #48	; 0x30
 8009d32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d3a:	f807 4b01 	strb.w	r4, [r7], #1
 8009d3e:	f7f6 fe3d 	bl	80009bc <__aeabi_dcmplt>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d174      	bne.n	8009e30 <_dtoa_r+0x648>
 8009d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	4911      	ldr	r1, [pc, #68]	; (8009d94 <_dtoa_r+0x5ac>)
 8009d4e:	f7f6 fa0b 	bl	8000168 <__aeabi_dsub>
 8009d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d56:	f7f6 fe31 	bl	80009bc <__aeabi_dcmplt>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f040 80b7 	bne.w	8009ece <_dtoa_r+0x6e6>
 8009d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d62:	429f      	cmp	r7, r3
 8009d64:	f43f af7a 	beq.w	8009c5c <_dtoa_r+0x474>
 8009d68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <_dtoa_r+0x5b0>)
 8009d70:	f7f6 fbb2 	bl	80004d8 <__aeabi_dmul>
 8009d74:	2200      	movs	r2, #0
 8009d76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d7e:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <_dtoa_r+0x5b0>)
 8009d80:	f7f6 fbaa 	bl	80004d8 <__aeabi_dmul>
 8009d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d88:	e7c3      	b.n	8009d12 <_dtoa_r+0x52a>
 8009d8a:	bf00      	nop
 8009d8c:	0800cc38 	.word	0x0800cc38
 8009d90:	0800cc10 	.word	0x0800cc10
 8009d94:	3ff00000 	.word	0x3ff00000
 8009d98:	40240000 	.word	0x40240000
 8009d9c:	401c0000 	.word	0x401c0000
 8009da0:	40140000 	.word	0x40140000
 8009da4:	3fe00000 	.word	0x3fe00000
 8009da8:	4630      	mov	r0, r6
 8009daa:	4639      	mov	r1, r7
 8009dac:	f7f6 fb94 	bl	80004d8 <__aeabi_dmul>
 8009db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009db6:	9c03      	ldr	r4, [sp, #12]
 8009db8:	9314      	str	r3, [sp, #80]	; 0x50
 8009dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dbe:	f7f6 fe3b 	bl	8000a38 <__aeabi_d2iz>
 8009dc2:	9015      	str	r0, [sp, #84]	; 0x54
 8009dc4:	f7f6 fb1e 	bl	8000404 <__aeabi_i2d>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dd0:	f7f6 f9ca 	bl	8000168 <__aeabi_dsub>
 8009dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	3330      	adds	r3, #48	; 0x30
 8009dda:	f804 3b01 	strb.w	r3, [r4], #1
 8009dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009de0:	460f      	mov	r7, r1
 8009de2:	429c      	cmp	r4, r3
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	d124      	bne.n	8009e34 <_dtoa_r+0x64c>
 8009dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dee:	4bb0      	ldr	r3, [pc, #704]	; (800a0b0 <_dtoa_r+0x8c8>)
 8009df0:	f7f6 f9bc 	bl	800016c <__adddf3>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 fdfc 	bl	80009f8 <__aeabi_dcmpgt>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d163      	bne.n	8009ecc <_dtoa_r+0x6e4>
 8009e04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e08:	2000      	movs	r0, #0
 8009e0a:	49a9      	ldr	r1, [pc, #676]	; (800a0b0 <_dtoa_r+0x8c8>)
 8009e0c:	f7f6 f9ac 	bl	8000168 <__aeabi_dsub>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4630      	mov	r0, r6
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 fdd0 	bl	80009bc <__aeabi_dcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f43f af1d 	beq.w	8009c5c <_dtoa_r+0x474>
 8009e22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e24:	1e7b      	subs	r3, r7, #1
 8009e26:	9314      	str	r3, [sp, #80]	; 0x50
 8009e28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e2c:	2b30      	cmp	r3, #48	; 0x30
 8009e2e:	d0f8      	beq.n	8009e22 <_dtoa_r+0x63a>
 8009e30:	46c2      	mov	sl, r8
 8009e32:	e03b      	b.n	8009eac <_dtoa_r+0x6c4>
 8009e34:	4b9f      	ldr	r3, [pc, #636]	; (800a0b4 <_dtoa_r+0x8cc>)
 8009e36:	f7f6 fb4f 	bl	80004d8 <__aeabi_dmul>
 8009e3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e3e:	e7bc      	b.n	8009dba <_dtoa_r+0x5d2>
 8009e40:	9f03      	ldr	r7, [sp, #12]
 8009e42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f7f6 fc6d 	bl	800072c <__aeabi_ddiv>
 8009e52:	f7f6 fdf1 	bl	8000a38 <__aeabi_d2iz>
 8009e56:	4604      	mov	r4, r0
 8009e58:	f7f6 fad4 	bl	8000404 <__aeabi_i2d>
 8009e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e60:	f7f6 fb3a 	bl	80004d8 <__aeabi_dmul>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 f97c 	bl	8000168 <__aeabi_dsub>
 8009e70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e74:	f807 6b01 	strb.w	r6, [r7], #1
 8009e78:	9e03      	ldr	r6, [sp, #12]
 8009e7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e7e:	1bbe      	subs	r6, r7, r6
 8009e80:	45b4      	cmp	ip, r6
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	d136      	bne.n	8009ef6 <_dtoa_r+0x70e>
 8009e88:	f7f6 f970 	bl	800016c <__adddf3>
 8009e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e90:	4680      	mov	r8, r0
 8009e92:	4689      	mov	r9, r1
 8009e94:	f7f6 fdb0 	bl	80009f8 <__aeabi_dcmpgt>
 8009e98:	bb58      	cbnz	r0, 8009ef2 <_dtoa_r+0x70a>
 8009e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	f7f6 fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8009ea6:	b108      	cbz	r0, 8009eac <_dtoa_r+0x6c4>
 8009ea8:	07e1      	lsls	r1, r4, #31
 8009eaa:	d422      	bmi.n	8009ef2 <_dtoa_r+0x70a>
 8009eac:	4628      	mov	r0, r5
 8009eae:	4659      	mov	r1, fp
 8009eb0:	f000 fe5a 	bl	800ab68 <_Bfree>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	703b      	strb	r3, [r7, #0]
 8009eb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009eba:	f10a 0001 	add.w	r0, sl, #1
 8009ebe:	6018      	str	r0, [r3, #0]
 8009ec0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f43f acde 	beq.w	8009884 <_dtoa_r+0x9c>
 8009ec8:	601f      	str	r7, [r3, #0]
 8009eca:	e4db      	b.n	8009884 <_dtoa_r+0x9c>
 8009ecc:	4627      	mov	r7, r4
 8009ece:	463b      	mov	r3, r7
 8009ed0:	461f      	mov	r7, r3
 8009ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ed6:	2a39      	cmp	r2, #57	; 0x39
 8009ed8:	d107      	bne.n	8009eea <_dtoa_r+0x702>
 8009eda:	9a03      	ldr	r2, [sp, #12]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d1f7      	bne.n	8009ed0 <_dtoa_r+0x6e8>
 8009ee0:	2230      	movs	r2, #48	; 0x30
 8009ee2:	9903      	ldr	r1, [sp, #12]
 8009ee4:	f108 0801 	add.w	r8, r8, #1
 8009ee8:	700a      	strb	r2, [r1, #0]
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	3201      	adds	r2, #1
 8009eee:	701a      	strb	r2, [r3, #0]
 8009ef0:	e79e      	b.n	8009e30 <_dtoa_r+0x648>
 8009ef2:	46d0      	mov	r8, sl
 8009ef4:	e7eb      	b.n	8009ece <_dtoa_r+0x6e6>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4b6e      	ldr	r3, [pc, #440]	; (800a0b4 <_dtoa_r+0x8cc>)
 8009efa:	f7f6 faed 	bl	80004d8 <__aeabi_dmul>
 8009efe:	2200      	movs	r2, #0
 8009f00:	2300      	movs	r3, #0
 8009f02:	4680      	mov	r8, r0
 8009f04:	4689      	mov	r9, r1
 8009f06:	f7f6 fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d09b      	beq.n	8009e46 <_dtoa_r+0x65e>
 8009f0e:	e7cd      	b.n	8009eac <_dtoa_r+0x6c4>
 8009f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	f000 80d0 	beq.w	800a0b8 <_dtoa_r+0x8d0>
 8009f18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f1a:	2a01      	cmp	r2, #1
 8009f1c:	f300 80ae 	bgt.w	800a07c <_dtoa_r+0x894>
 8009f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	f000 80a6 	beq.w	800a074 <_dtoa_r+0x88c>
 8009f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f2e:	9f06      	ldr	r7, [sp, #24]
 8009f30:	9a06      	ldr	r2, [sp, #24]
 8009f32:	2101      	movs	r1, #1
 8009f34:	441a      	add	r2, r3
 8009f36:	9206      	str	r2, [sp, #24]
 8009f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	441a      	add	r2, r3
 8009f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f40:	f000 ff12 	bl	800ad68 <__i2b>
 8009f44:	4606      	mov	r6, r0
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	dd0c      	ble.n	8009f64 <_dtoa_r+0x77c>
 8009f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd09      	ble.n	8009f64 <_dtoa_r+0x77c>
 8009f50:	42bb      	cmp	r3, r7
 8009f52:	bfa8      	it	ge
 8009f54:	463b      	movge	r3, r7
 8009f56:	9a06      	ldr	r2, [sp, #24]
 8009f58:	1aff      	subs	r7, r7, r3
 8009f5a:	1ad2      	subs	r2, r2, r3
 8009f5c:	9206      	str	r2, [sp, #24]
 8009f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	9309      	str	r3, [sp, #36]	; 0x24
 8009f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f66:	b1f3      	cbz	r3, 8009fa6 <_dtoa_r+0x7be>
 8009f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 80a8 	beq.w	800a0c0 <_dtoa_r+0x8d8>
 8009f70:	2c00      	cmp	r4, #0
 8009f72:	dd10      	ble.n	8009f96 <_dtoa_r+0x7ae>
 8009f74:	4631      	mov	r1, r6
 8009f76:	4622      	mov	r2, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 ffb3 	bl	800aee4 <__pow5mult>
 8009f7e:	465a      	mov	r2, fp
 8009f80:	4601      	mov	r1, r0
 8009f82:	4606      	mov	r6, r0
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 ff05 	bl	800ad94 <__multiply>
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 fdea 	bl	800ab68 <_Bfree>
 8009f94:	46c3      	mov	fp, r8
 8009f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f98:	1b1a      	subs	r2, r3, r4
 8009f9a:	d004      	beq.n	8009fa6 <_dtoa_r+0x7be>
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 ffa0 	bl	800aee4 <__pow5mult>
 8009fa4:	4683      	mov	fp, r0
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f000 fedd 	bl	800ad68 <__i2b>
 8009fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f340 8086 	ble.w	800a0c4 <_dtoa_r+0x8dc>
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4601      	mov	r1, r0
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f000 ff91 	bl	800aee4 <__pow5mult>
 8009fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	dd7f      	ble.n	800a0ca <_dtoa_r+0x8e2>
 8009fca:	f04f 0800 	mov.w	r8, #0
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fd4:	6918      	ldr	r0, [r3, #16]
 8009fd6:	f000 fe79 	bl	800accc <__hi0bits>
 8009fda:	f1c0 0020 	rsb	r0, r0, #32
 8009fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe0:	4418      	add	r0, r3
 8009fe2:	f010 001f 	ands.w	r0, r0, #31
 8009fe6:	f000 8092 	beq.w	800a10e <_dtoa_r+0x926>
 8009fea:	f1c0 0320 	rsb	r3, r0, #32
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	f340 808a 	ble.w	800a108 <_dtoa_r+0x920>
 8009ff4:	f1c0 001c 	rsb	r0, r0, #28
 8009ff8:	9b06      	ldr	r3, [sp, #24]
 8009ffa:	4407      	add	r7, r0
 8009ffc:	4403      	add	r3, r0
 8009ffe:	9306      	str	r3, [sp, #24]
 800a000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a002:	4403      	add	r3, r0
 800a004:	9309      	str	r3, [sp, #36]	; 0x24
 800a006:	9b06      	ldr	r3, [sp, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dd05      	ble.n	800a018 <_dtoa_r+0x830>
 800a00c:	4659      	mov	r1, fp
 800a00e:	461a      	mov	r2, r3
 800a010:	4628      	mov	r0, r5
 800a012:	f000 ffc1 	bl	800af98 <__lshift>
 800a016:	4683      	mov	fp, r0
 800a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dd05      	ble.n	800a02a <_dtoa_r+0x842>
 800a01e:	4621      	mov	r1, r4
 800a020:	461a      	mov	r2, r3
 800a022:	4628      	mov	r0, r5
 800a024:	f000 ffb8 	bl	800af98 <__lshift>
 800a028:	4604      	mov	r4, r0
 800a02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d070      	beq.n	800a112 <_dtoa_r+0x92a>
 800a030:	4621      	mov	r1, r4
 800a032:	4658      	mov	r0, fp
 800a034:	f001 f820 	bl	800b078 <__mcmp>
 800a038:	2800      	cmp	r0, #0
 800a03a:	da6a      	bge.n	800a112 <_dtoa_r+0x92a>
 800a03c:	2300      	movs	r3, #0
 800a03e:	4659      	mov	r1, fp
 800a040:	220a      	movs	r2, #10
 800a042:	4628      	mov	r0, r5
 800a044:	f000 fdb2 	bl	800abac <__multadd>
 800a048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a04a:	4683      	mov	fp, r0
 800a04c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 8194 	beq.w	800a37e <_dtoa_r+0xb96>
 800a056:	4631      	mov	r1, r6
 800a058:	2300      	movs	r3, #0
 800a05a:	220a      	movs	r2, #10
 800a05c:	4628      	mov	r0, r5
 800a05e:	f000 fda5 	bl	800abac <__multadd>
 800a062:	f1b9 0f00 	cmp.w	r9, #0
 800a066:	4606      	mov	r6, r0
 800a068:	f300 8093 	bgt.w	800a192 <_dtoa_r+0x9aa>
 800a06c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a06e:	2b02      	cmp	r3, #2
 800a070:	dc57      	bgt.n	800a122 <_dtoa_r+0x93a>
 800a072:	e08e      	b.n	800a192 <_dtoa_r+0x9aa>
 800a074:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a07a:	e757      	b.n	8009f2c <_dtoa_r+0x744>
 800a07c:	9b08      	ldr	r3, [sp, #32]
 800a07e:	1e5c      	subs	r4, r3, #1
 800a080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a082:	42a3      	cmp	r3, r4
 800a084:	bfb7      	itett	lt
 800a086:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a088:	1b1c      	subge	r4, r3, r4
 800a08a:	1ae2      	sublt	r2, r4, r3
 800a08c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a08e:	bfbe      	ittt	lt
 800a090:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a092:	189b      	addlt	r3, r3, r2
 800a094:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a096:	9b08      	ldr	r3, [sp, #32]
 800a098:	bfb8      	it	lt
 800a09a:	2400      	movlt	r4, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfbb      	ittet	lt
 800a0a0:	9b06      	ldrlt	r3, [sp, #24]
 800a0a2:	9a08      	ldrlt	r2, [sp, #32]
 800a0a4:	9f06      	ldrge	r7, [sp, #24]
 800a0a6:	1a9f      	sublt	r7, r3, r2
 800a0a8:	bfac      	ite	ge
 800a0aa:	9b08      	ldrge	r3, [sp, #32]
 800a0ac:	2300      	movlt	r3, #0
 800a0ae:	e73f      	b.n	8009f30 <_dtoa_r+0x748>
 800a0b0:	3fe00000 	.word	0x3fe00000
 800a0b4:	40240000 	.word	0x40240000
 800a0b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0ba:	9f06      	ldr	r7, [sp, #24]
 800a0bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a0be:	e742      	b.n	8009f46 <_dtoa_r+0x75e>
 800a0c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c2:	e76b      	b.n	8009f9c <_dtoa_r+0x7b4>
 800a0c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	dc19      	bgt.n	800a0fe <_dtoa_r+0x916>
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	b9bb      	cbnz	r3, 800a0fe <_dtoa_r+0x916>
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d4:	b99b      	cbnz	r3, 800a0fe <_dtoa_r+0x916>
 800a0d6:	9b05      	ldr	r3, [sp, #20]
 800a0d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0dc:	0d1b      	lsrs	r3, r3, #20
 800a0de:	051b      	lsls	r3, r3, #20
 800a0e0:	b183      	cbz	r3, 800a104 <_dtoa_r+0x91c>
 800a0e2:	f04f 0801 	mov.w	r8, #1
 800a0e6:	9b06      	ldr	r3, [sp, #24]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	9306      	str	r3, [sp, #24]
 800a0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f47f af6a 	bne.w	8009fce <_dtoa_r+0x7e6>
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	e76f      	b.n	8009fde <_dtoa_r+0x7f6>
 800a0fe:	f04f 0800 	mov.w	r8, #0
 800a102:	e7f6      	b.n	800a0f2 <_dtoa_r+0x90a>
 800a104:	4698      	mov	r8, r3
 800a106:	e7f4      	b.n	800a0f2 <_dtoa_r+0x90a>
 800a108:	f43f af7d 	beq.w	800a006 <_dtoa_r+0x81e>
 800a10c:	4618      	mov	r0, r3
 800a10e:	301c      	adds	r0, #28
 800a110:	e772      	b.n	8009ff8 <_dtoa_r+0x810>
 800a112:	9b08      	ldr	r3, [sp, #32]
 800a114:	2b00      	cmp	r3, #0
 800a116:	dc36      	bgt.n	800a186 <_dtoa_r+0x99e>
 800a118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	dd33      	ble.n	800a186 <_dtoa_r+0x99e>
 800a11e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a122:	f1b9 0f00 	cmp.w	r9, #0
 800a126:	d10d      	bne.n	800a144 <_dtoa_r+0x95c>
 800a128:	4621      	mov	r1, r4
 800a12a:	464b      	mov	r3, r9
 800a12c:	2205      	movs	r2, #5
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 fd3c 	bl	800abac <__multadd>
 800a134:	4601      	mov	r1, r0
 800a136:	4604      	mov	r4, r0
 800a138:	4658      	mov	r0, fp
 800a13a:	f000 ff9d 	bl	800b078 <__mcmp>
 800a13e:	2800      	cmp	r0, #0
 800a140:	f73f adb8 	bgt.w	8009cb4 <_dtoa_r+0x4cc>
 800a144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a146:	9f03      	ldr	r7, [sp, #12]
 800a148:	ea6f 0a03 	mvn.w	sl, r3
 800a14c:	f04f 0800 	mov.w	r8, #0
 800a150:	4621      	mov	r1, r4
 800a152:	4628      	mov	r0, r5
 800a154:	f000 fd08 	bl	800ab68 <_Bfree>
 800a158:	2e00      	cmp	r6, #0
 800a15a:	f43f aea7 	beq.w	8009eac <_dtoa_r+0x6c4>
 800a15e:	f1b8 0f00 	cmp.w	r8, #0
 800a162:	d005      	beq.n	800a170 <_dtoa_r+0x988>
 800a164:	45b0      	cmp	r8, r6
 800a166:	d003      	beq.n	800a170 <_dtoa_r+0x988>
 800a168:	4641      	mov	r1, r8
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 fcfc 	bl	800ab68 <_Bfree>
 800a170:	4631      	mov	r1, r6
 800a172:	4628      	mov	r0, r5
 800a174:	f000 fcf8 	bl	800ab68 <_Bfree>
 800a178:	e698      	b.n	8009eac <_dtoa_r+0x6c4>
 800a17a:	2400      	movs	r4, #0
 800a17c:	4626      	mov	r6, r4
 800a17e:	e7e1      	b.n	800a144 <_dtoa_r+0x95c>
 800a180:	46c2      	mov	sl, r8
 800a182:	4626      	mov	r6, r4
 800a184:	e596      	b.n	8009cb4 <_dtoa_r+0x4cc>
 800a186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 80fd 	beq.w	800a38c <_dtoa_r+0xba4>
 800a192:	2f00      	cmp	r7, #0
 800a194:	dd05      	ble.n	800a1a2 <_dtoa_r+0x9ba>
 800a196:	4631      	mov	r1, r6
 800a198:	463a      	mov	r2, r7
 800a19a:	4628      	mov	r0, r5
 800a19c:	f000 fefc 	bl	800af98 <__lshift>
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	f1b8 0f00 	cmp.w	r8, #0
 800a1a6:	d05c      	beq.n	800a262 <_dtoa_r+0xa7a>
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	6871      	ldr	r1, [r6, #4]
 800a1ac:	f000 fc9c 	bl	800aae8 <_Balloc>
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	b928      	cbnz	r0, 800a1c0 <_dtoa_r+0x9d8>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ba:	4b7f      	ldr	r3, [pc, #508]	; (800a3b8 <_dtoa_r+0xbd0>)
 800a1bc:	f7ff bb28 	b.w	8009810 <_dtoa_r+0x28>
 800a1c0:	6932      	ldr	r2, [r6, #16]
 800a1c2:	f106 010c 	add.w	r1, r6, #12
 800a1c6:	3202      	adds	r2, #2
 800a1c8:	0092      	lsls	r2, r2, #2
 800a1ca:	300c      	adds	r0, #12
 800a1cc:	f7fd fd4a 	bl	8007c64 <memcpy>
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f000 fedf 	bl	800af98 <__lshift>
 800a1da:	46b0      	mov	r8, r6
 800a1dc:	4606      	mov	r6, r0
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	9308      	str	r3, [sp, #32]
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	444b      	add	r3, r9
 800a1e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ea:	9b04      	ldr	r3, [sp, #16]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	4658      	mov	r0, fp
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	f7ff fa68 	bl	80096d0 <quorem>
 800a200:	4603      	mov	r3, r0
 800a202:	4641      	mov	r1, r8
 800a204:	3330      	adds	r3, #48	; 0x30
 800a206:	9006      	str	r0, [sp, #24]
 800a208:	4658      	mov	r0, fp
 800a20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20c:	f000 ff34 	bl	800b078 <__mcmp>
 800a210:	4632      	mov	r2, r6
 800a212:	4681      	mov	r9, r0
 800a214:	4621      	mov	r1, r4
 800a216:	4628      	mov	r0, r5
 800a218:	f000 ff4a 	bl	800b0b0 <__mdiff>
 800a21c:	68c2      	ldr	r2, [r0, #12]
 800a21e:	4607      	mov	r7, r0
 800a220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a222:	bb02      	cbnz	r2, 800a266 <_dtoa_r+0xa7e>
 800a224:	4601      	mov	r1, r0
 800a226:	4658      	mov	r0, fp
 800a228:	f000 ff26 	bl	800b078 <__mcmp>
 800a22c:	4602      	mov	r2, r0
 800a22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a230:	4639      	mov	r1, r7
 800a232:	4628      	mov	r0, r5
 800a234:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a238:	f000 fc96 	bl	800ab68 <_Bfree>
 800a23c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a240:	9f08      	ldr	r7, [sp, #32]
 800a242:	ea43 0102 	orr.w	r1, r3, r2
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	430b      	orrs	r3, r1
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	d10d      	bne.n	800a26a <_dtoa_r+0xa82>
 800a24e:	2b39      	cmp	r3, #57	; 0x39
 800a250:	d029      	beq.n	800a2a6 <_dtoa_r+0xabe>
 800a252:	f1b9 0f00 	cmp.w	r9, #0
 800a256:	dd01      	ble.n	800a25c <_dtoa_r+0xa74>
 800a258:	9b06      	ldr	r3, [sp, #24]
 800a25a:	3331      	adds	r3, #49	; 0x31
 800a25c:	9a04      	ldr	r2, [sp, #16]
 800a25e:	7013      	strb	r3, [r2, #0]
 800a260:	e776      	b.n	800a150 <_dtoa_r+0x968>
 800a262:	4630      	mov	r0, r6
 800a264:	e7b9      	b.n	800a1da <_dtoa_r+0x9f2>
 800a266:	2201      	movs	r2, #1
 800a268:	e7e2      	b.n	800a230 <_dtoa_r+0xa48>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	db06      	blt.n	800a27e <_dtoa_r+0xa96>
 800a270:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a272:	ea41 0909 	orr.w	r9, r1, r9
 800a276:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a278:	ea59 0101 	orrs.w	r1, r9, r1
 800a27c:	d120      	bne.n	800a2c0 <_dtoa_r+0xad8>
 800a27e:	2a00      	cmp	r2, #0
 800a280:	ddec      	ble.n	800a25c <_dtoa_r+0xa74>
 800a282:	4659      	mov	r1, fp
 800a284:	2201      	movs	r2, #1
 800a286:	4628      	mov	r0, r5
 800a288:	9308      	str	r3, [sp, #32]
 800a28a:	f000 fe85 	bl	800af98 <__lshift>
 800a28e:	4621      	mov	r1, r4
 800a290:	4683      	mov	fp, r0
 800a292:	f000 fef1 	bl	800b078 <__mcmp>
 800a296:	2800      	cmp	r0, #0
 800a298:	9b08      	ldr	r3, [sp, #32]
 800a29a:	dc02      	bgt.n	800a2a2 <_dtoa_r+0xaba>
 800a29c:	d1de      	bne.n	800a25c <_dtoa_r+0xa74>
 800a29e:	07da      	lsls	r2, r3, #31
 800a2a0:	d5dc      	bpl.n	800a25c <_dtoa_r+0xa74>
 800a2a2:	2b39      	cmp	r3, #57	; 0x39
 800a2a4:	d1d8      	bne.n	800a258 <_dtoa_r+0xa70>
 800a2a6:	2339      	movs	r3, #57	; 0x39
 800a2a8:	9a04      	ldr	r2, [sp, #16]
 800a2aa:	7013      	strb	r3, [r2, #0]
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	461f      	mov	r7, r3
 800a2b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	2a39      	cmp	r2, #57	; 0x39
 800a2b8:	d050      	beq.n	800a35c <_dtoa_r+0xb74>
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e747      	b.n	800a150 <_dtoa_r+0x968>
 800a2c0:	2a00      	cmp	r2, #0
 800a2c2:	dd03      	ble.n	800a2cc <_dtoa_r+0xae4>
 800a2c4:	2b39      	cmp	r3, #57	; 0x39
 800a2c6:	d0ee      	beq.n	800a2a6 <_dtoa_r+0xabe>
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	e7c7      	b.n	800a25c <_dtoa_r+0xa74>
 800a2cc:	9a08      	ldr	r2, [sp, #32]
 800a2ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2d4:	428a      	cmp	r2, r1
 800a2d6:	d02a      	beq.n	800a32e <_dtoa_r+0xb46>
 800a2d8:	4659      	mov	r1, fp
 800a2da:	2300      	movs	r3, #0
 800a2dc:	220a      	movs	r2, #10
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 fc64 	bl	800abac <__multadd>
 800a2e4:	45b0      	cmp	r8, r6
 800a2e6:	4683      	mov	fp, r0
 800a2e8:	f04f 0300 	mov.w	r3, #0
 800a2ec:	f04f 020a 	mov.w	r2, #10
 800a2f0:	4641      	mov	r1, r8
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	d107      	bne.n	800a306 <_dtoa_r+0xb1e>
 800a2f6:	f000 fc59 	bl	800abac <__multadd>
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	3301      	adds	r3, #1
 800a302:	9308      	str	r3, [sp, #32]
 800a304:	e775      	b.n	800a1f2 <_dtoa_r+0xa0a>
 800a306:	f000 fc51 	bl	800abac <__multadd>
 800a30a:	4631      	mov	r1, r6
 800a30c:	4680      	mov	r8, r0
 800a30e:	2300      	movs	r3, #0
 800a310:	220a      	movs	r2, #10
 800a312:	4628      	mov	r0, r5
 800a314:	f000 fc4a 	bl	800abac <__multadd>
 800a318:	4606      	mov	r6, r0
 800a31a:	e7f0      	b.n	800a2fe <_dtoa_r+0xb16>
 800a31c:	f1b9 0f00 	cmp.w	r9, #0
 800a320:	bfcc      	ite	gt
 800a322:	464f      	movgt	r7, r9
 800a324:	2701      	movle	r7, #1
 800a326:	f04f 0800 	mov.w	r8, #0
 800a32a:	9a03      	ldr	r2, [sp, #12]
 800a32c:	4417      	add	r7, r2
 800a32e:	4659      	mov	r1, fp
 800a330:	2201      	movs	r2, #1
 800a332:	4628      	mov	r0, r5
 800a334:	9308      	str	r3, [sp, #32]
 800a336:	f000 fe2f 	bl	800af98 <__lshift>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4683      	mov	fp, r0
 800a33e:	f000 fe9b 	bl	800b078 <__mcmp>
 800a342:	2800      	cmp	r0, #0
 800a344:	dcb2      	bgt.n	800a2ac <_dtoa_r+0xac4>
 800a346:	d102      	bne.n	800a34e <_dtoa_r+0xb66>
 800a348:	9b08      	ldr	r3, [sp, #32]
 800a34a:	07db      	lsls	r3, r3, #31
 800a34c:	d4ae      	bmi.n	800a2ac <_dtoa_r+0xac4>
 800a34e:	463b      	mov	r3, r7
 800a350:	461f      	mov	r7, r3
 800a352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a356:	2a30      	cmp	r2, #48	; 0x30
 800a358:	d0fa      	beq.n	800a350 <_dtoa_r+0xb68>
 800a35a:	e6f9      	b.n	800a150 <_dtoa_r+0x968>
 800a35c:	9a03      	ldr	r2, [sp, #12]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d1a5      	bne.n	800a2ae <_dtoa_r+0xac6>
 800a362:	2331      	movs	r3, #49	; 0x31
 800a364:	f10a 0a01 	add.w	sl, sl, #1
 800a368:	e779      	b.n	800a25e <_dtoa_r+0xa76>
 800a36a:	4b14      	ldr	r3, [pc, #80]	; (800a3bc <_dtoa_r+0xbd4>)
 800a36c:	f7ff baa8 	b.w	80098c0 <_dtoa_r+0xd8>
 800a370:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a372:	2b00      	cmp	r3, #0
 800a374:	f47f aa81 	bne.w	800987a <_dtoa_r+0x92>
 800a378:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <_dtoa_r+0xbd8>)
 800a37a:	f7ff baa1 	b.w	80098c0 <_dtoa_r+0xd8>
 800a37e:	f1b9 0f00 	cmp.w	r9, #0
 800a382:	dc03      	bgt.n	800a38c <_dtoa_r+0xba4>
 800a384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a386:	2b02      	cmp	r3, #2
 800a388:	f73f aecb 	bgt.w	800a122 <_dtoa_r+0x93a>
 800a38c:	9f03      	ldr	r7, [sp, #12]
 800a38e:	4621      	mov	r1, r4
 800a390:	4658      	mov	r0, fp
 800a392:	f7ff f99d 	bl	80096d0 <quorem>
 800a396:	9a03      	ldr	r2, [sp, #12]
 800a398:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a39c:	f807 3b01 	strb.w	r3, [r7], #1
 800a3a0:	1aba      	subs	r2, r7, r2
 800a3a2:	4591      	cmp	r9, r2
 800a3a4:	ddba      	ble.n	800a31c <_dtoa_r+0xb34>
 800a3a6:	4659      	mov	r1, fp
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	220a      	movs	r2, #10
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 fbfd 	bl	800abac <__multadd>
 800a3b2:	4683      	mov	fp, r0
 800a3b4:	e7eb      	b.n	800a38e <_dtoa_r+0xba6>
 800a3b6:	bf00      	nop
 800a3b8:	0800cb28 	.word	0x0800cb28
 800a3bc:	0800c928 	.word	0x0800c928
 800a3c0:	0800caa9 	.word	0x0800caa9

0800a3c4 <rshift>:
 800a3c4:	6903      	ldr	r3, [r0, #16]
 800a3c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3ce:	f100 0414 	add.w	r4, r0, #20
 800a3d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3d6:	dd46      	ble.n	800a466 <rshift+0xa2>
 800a3d8:	f011 011f 	ands.w	r1, r1, #31
 800a3dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3e4:	d10c      	bne.n	800a400 <rshift+0x3c>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f100 0710 	add.w	r7, r0, #16
 800a3ec:	42b1      	cmp	r1, r6
 800a3ee:	d335      	bcc.n	800a45c <rshift+0x98>
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	1eea      	subs	r2, r5, #3
 800a3f6:	4296      	cmp	r6, r2
 800a3f8:	bf38      	it	cc
 800a3fa:	2300      	movcc	r3, #0
 800a3fc:	4423      	add	r3, r4
 800a3fe:	e015      	b.n	800a42c <rshift+0x68>
 800a400:	46a1      	mov	r9, r4
 800a402:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a406:	f1c1 0820 	rsb	r8, r1, #32
 800a40a:	40cf      	lsrs	r7, r1
 800a40c:	f105 0e04 	add.w	lr, r5, #4
 800a410:	4576      	cmp	r6, lr
 800a412:	46f4      	mov	ip, lr
 800a414:	d816      	bhi.n	800a444 <rshift+0x80>
 800a416:	1a9a      	subs	r2, r3, r2
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	3a04      	subs	r2, #4
 800a41c:	3501      	adds	r5, #1
 800a41e:	42ae      	cmp	r6, r5
 800a420:	bf38      	it	cc
 800a422:	2200      	movcc	r2, #0
 800a424:	18a3      	adds	r3, r4, r2
 800a426:	50a7      	str	r7, [r4, r2]
 800a428:	b107      	cbz	r7, 800a42c <rshift+0x68>
 800a42a:	3304      	adds	r3, #4
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	eba3 0204 	sub.w	r2, r3, r4
 800a432:	bf08      	it	eq
 800a434:	2300      	moveq	r3, #0
 800a436:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a43a:	6102      	str	r2, [r0, #16]
 800a43c:	bf08      	it	eq
 800a43e:	6143      	streq	r3, [r0, #20]
 800a440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a444:	f8dc c000 	ldr.w	ip, [ip]
 800a448:	fa0c fc08 	lsl.w	ip, ip, r8
 800a44c:	ea4c 0707 	orr.w	r7, ip, r7
 800a450:	f849 7b04 	str.w	r7, [r9], #4
 800a454:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a458:	40cf      	lsrs	r7, r1
 800a45a:	e7d9      	b.n	800a410 <rshift+0x4c>
 800a45c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a460:	f847 cf04 	str.w	ip, [r7, #4]!
 800a464:	e7c2      	b.n	800a3ec <rshift+0x28>
 800a466:	4623      	mov	r3, r4
 800a468:	e7e0      	b.n	800a42c <rshift+0x68>

0800a46a <__hexdig_fun>:
 800a46a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a46e:	2b09      	cmp	r3, #9
 800a470:	d802      	bhi.n	800a478 <__hexdig_fun+0xe>
 800a472:	3820      	subs	r0, #32
 800a474:	b2c0      	uxtb	r0, r0
 800a476:	4770      	bx	lr
 800a478:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a47c:	2b05      	cmp	r3, #5
 800a47e:	d801      	bhi.n	800a484 <__hexdig_fun+0x1a>
 800a480:	3847      	subs	r0, #71	; 0x47
 800a482:	e7f7      	b.n	800a474 <__hexdig_fun+0xa>
 800a484:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a488:	2b05      	cmp	r3, #5
 800a48a:	d801      	bhi.n	800a490 <__hexdig_fun+0x26>
 800a48c:	3827      	subs	r0, #39	; 0x27
 800a48e:	e7f1      	b.n	800a474 <__hexdig_fun+0xa>
 800a490:	2000      	movs	r0, #0
 800a492:	4770      	bx	lr

0800a494 <__gethex>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	b08b      	sub	sp, #44	; 0x2c
 800a49a:	9305      	str	r3, [sp, #20]
 800a49c:	4bb2      	ldr	r3, [pc, #712]	; (800a768 <__gethex+0x2d4>)
 800a49e:	9002      	str	r0, [sp, #8]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	468b      	mov	fp, r1
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	4690      	mov	r8, r2
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	f7f5 fe51 	bl	8000150 <strlen>
 800a4ae:	4682      	mov	sl, r0
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	f8db 2000 	ldr.w	r2, [fp]
 800a4b6:	4403      	add	r3, r0
 800a4b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4bc:	9306      	str	r3, [sp, #24]
 800a4be:	1c93      	adds	r3, r2, #2
 800a4c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4c8:	32fe      	adds	r2, #254	; 0xfe
 800a4ca:	18d1      	adds	r1, r2, r3
 800a4cc:	461f      	mov	r7, r3
 800a4ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4d2:	9101      	str	r1, [sp, #4]
 800a4d4:	2830      	cmp	r0, #48	; 0x30
 800a4d6:	d0f8      	beq.n	800a4ca <__gethex+0x36>
 800a4d8:	f7ff ffc7 	bl	800a46a <__hexdig_fun>
 800a4dc:	4604      	mov	r4, r0
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d13a      	bne.n	800a558 <__gethex+0xc4>
 800a4e2:	4652      	mov	r2, sl
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	9903      	ldr	r1, [sp, #12]
 800a4e8:	f001 fa18 	bl	800b91c <strncmp>
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d166      	bne.n	800a5c0 <__gethex+0x12c>
 800a4f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a4f6:	eb07 060a 	add.w	r6, r7, sl
 800a4fa:	f7ff ffb6 	bl	800a46a <__hexdig_fun>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d060      	beq.n	800a5c4 <__gethex+0x130>
 800a502:	4633      	mov	r3, r6
 800a504:	7818      	ldrb	r0, [r3, #0]
 800a506:	461f      	mov	r7, r3
 800a508:	2830      	cmp	r0, #48	; 0x30
 800a50a:	f103 0301 	add.w	r3, r3, #1
 800a50e:	d0f9      	beq.n	800a504 <__gethex+0x70>
 800a510:	f7ff ffab 	bl	800a46a <__hexdig_fun>
 800a514:	2301      	movs	r3, #1
 800a516:	fab0 f480 	clz	r4, r0
 800a51a:	4635      	mov	r5, r6
 800a51c:	0964      	lsrs	r4, r4, #5
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	463a      	mov	r2, r7
 800a522:	4616      	mov	r6, r2
 800a524:	7830      	ldrb	r0, [r6, #0]
 800a526:	3201      	adds	r2, #1
 800a528:	f7ff ff9f 	bl	800a46a <__hexdig_fun>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d1f8      	bne.n	800a522 <__gethex+0x8e>
 800a530:	4652      	mov	r2, sl
 800a532:	4630      	mov	r0, r6
 800a534:	9903      	ldr	r1, [sp, #12]
 800a536:	f001 f9f1 	bl	800b91c <strncmp>
 800a53a:	b980      	cbnz	r0, 800a55e <__gethex+0xca>
 800a53c:	b94d      	cbnz	r5, 800a552 <__gethex+0xbe>
 800a53e:	eb06 050a 	add.w	r5, r6, sl
 800a542:	462a      	mov	r2, r5
 800a544:	4616      	mov	r6, r2
 800a546:	7830      	ldrb	r0, [r6, #0]
 800a548:	3201      	adds	r2, #1
 800a54a:	f7ff ff8e 	bl	800a46a <__hexdig_fun>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d1f8      	bne.n	800a544 <__gethex+0xb0>
 800a552:	1bad      	subs	r5, r5, r6
 800a554:	00ad      	lsls	r5, r5, #2
 800a556:	e004      	b.n	800a562 <__gethex+0xce>
 800a558:	2400      	movs	r4, #0
 800a55a:	4625      	mov	r5, r4
 800a55c:	e7e0      	b.n	800a520 <__gethex+0x8c>
 800a55e:	2d00      	cmp	r5, #0
 800a560:	d1f7      	bne.n	800a552 <__gethex+0xbe>
 800a562:	7833      	ldrb	r3, [r6, #0]
 800a564:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a568:	2b50      	cmp	r3, #80	; 0x50
 800a56a:	d139      	bne.n	800a5e0 <__gethex+0x14c>
 800a56c:	7873      	ldrb	r3, [r6, #1]
 800a56e:	2b2b      	cmp	r3, #43	; 0x2b
 800a570:	d02a      	beq.n	800a5c8 <__gethex+0x134>
 800a572:	2b2d      	cmp	r3, #45	; 0x2d
 800a574:	d02c      	beq.n	800a5d0 <__gethex+0x13c>
 800a576:	f04f 0900 	mov.w	r9, #0
 800a57a:	1c71      	adds	r1, r6, #1
 800a57c:	7808      	ldrb	r0, [r1, #0]
 800a57e:	f7ff ff74 	bl	800a46a <__hexdig_fun>
 800a582:	1e43      	subs	r3, r0, #1
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b18      	cmp	r3, #24
 800a588:	d82a      	bhi.n	800a5e0 <__gethex+0x14c>
 800a58a:	f1a0 0210 	sub.w	r2, r0, #16
 800a58e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a592:	f7ff ff6a 	bl	800a46a <__hexdig_fun>
 800a596:	1e43      	subs	r3, r0, #1
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b18      	cmp	r3, #24
 800a59c:	d91b      	bls.n	800a5d6 <__gethex+0x142>
 800a59e:	f1b9 0f00 	cmp.w	r9, #0
 800a5a2:	d000      	beq.n	800a5a6 <__gethex+0x112>
 800a5a4:	4252      	negs	r2, r2
 800a5a6:	4415      	add	r5, r2
 800a5a8:	f8cb 1000 	str.w	r1, [fp]
 800a5ac:	b1d4      	cbz	r4, 800a5e4 <__gethex+0x150>
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bf14      	ite	ne
 800a5b4:	2700      	movne	r7, #0
 800a5b6:	2706      	moveq	r7, #6
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	b00b      	add	sp, #44	; 0x2c
 800a5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c0:	463e      	mov	r6, r7
 800a5c2:	4625      	mov	r5, r4
 800a5c4:	2401      	movs	r4, #1
 800a5c6:	e7cc      	b.n	800a562 <__gethex+0xce>
 800a5c8:	f04f 0900 	mov.w	r9, #0
 800a5cc:	1cb1      	adds	r1, r6, #2
 800a5ce:	e7d5      	b.n	800a57c <__gethex+0xe8>
 800a5d0:	f04f 0901 	mov.w	r9, #1
 800a5d4:	e7fa      	b.n	800a5cc <__gethex+0x138>
 800a5d6:	230a      	movs	r3, #10
 800a5d8:	fb03 0202 	mla	r2, r3, r2, r0
 800a5dc:	3a10      	subs	r2, #16
 800a5de:	e7d6      	b.n	800a58e <__gethex+0xfa>
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	e7e1      	b.n	800a5a8 <__gethex+0x114>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	1bf3      	subs	r3, r6, r7
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	2b07      	cmp	r3, #7
 800a5ec:	dc0a      	bgt.n	800a604 <__gethex+0x170>
 800a5ee:	9802      	ldr	r0, [sp, #8]
 800a5f0:	f000 fa7a 	bl	800aae8 <_Balloc>
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	b940      	cbnz	r0, 800a60a <__gethex+0x176>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	21de      	movs	r1, #222	; 0xde
 800a5fc:	4b5b      	ldr	r3, [pc, #364]	; (800a76c <__gethex+0x2d8>)
 800a5fe:	485c      	ldr	r0, [pc, #368]	; (800a770 <__gethex+0x2dc>)
 800a600:	f001 f9ae 	bl	800b960 <__assert_func>
 800a604:	3101      	adds	r1, #1
 800a606:	105b      	asrs	r3, r3, #1
 800a608:	e7ef      	b.n	800a5ea <__gethex+0x156>
 800a60a:	f04f 0b00 	mov.w	fp, #0
 800a60e:	f100 0914 	add.w	r9, r0, #20
 800a612:	f1ca 0301 	rsb	r3, sl, #1
 800a616:	f8cd 9010 	str.w	r9, [sp, #16]
 800a61a:	f8cd b004 	str.w	fp, [sp, #4]
 800a61e:	9308      	str	r3, [sp, #32]
 800a620:	42b7      	cmp	r7, r6
 800a622:	d33f      	bcc.n	800a6a4 <__gethex+0x210>
 800a624:	9f04      	ldr	r7, [sp, #16]
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	f847 3b04 	str.w	r3, [r7], #4
 800a62c:	eba7 0709 	sub.w	r7, r7, r9
 800a630:	10bf      	asrs	r7, r7, #2
 800a632:	6127      	str	r7, [r4, #16]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fb49 	bl	800accc <__hi0bits>
 800a63a:	017f      	lsls	r7, r7, #5
 800a63c:	f8d8 6000 	ldr.w	r6, [r8]
 800a640:	1a3f      	subs	r7, r7, r0
 800a642:	42b7      	cmp	r7, r6
 800a644:	dd62      	ble.n	800a70c <__gethex+0x278>
 800a646:	1bbf      	subs	r7, r7, r6
 800a648:	4639      	mov	r1, r7
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 fee3 	bl	800b416 <__any_on>
 800a650:	4682      	mov	sl, r0
 800a652:	b1a8      	cbz	r0, 800a680 <__gethex+0x1ec>
 800a654:	f04f 0a01 	mov.w	sl, #1
 800a658:	1e7b      	subs	r3, r7, #1
 800a65a:	1159      	asrs	r1, r3, #5
 800a65c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a660:	f003 021f 	and.w	r2, r3, #31
 800a664:	fa0a f202 	lsl.w	r2, sl, r2
 800a668:	420a      	tst	r2, r1
 800a66a:	d009      	beq.n	800a680 <__gethex+0x1ec>
 800a66c:	4553      	cmp	r3, sl
 800a66e:	dd05      	ble.n	800a67c <__gethex+0x1e8>
 800a670:	4620      	mov	r0, r4
 800a672:	1eb9      	subs	r1, r7, #2
 800a674:	f000 fecf 	bl	800b416 <__any_on>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d144      	bne.n	800a706 <__gethex+0x272>
 800a67c:	f04f 0a02 	mov.w	sl, #2
 800a680:	4639      	mov	r1, r7
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff fe9e 	bl	800a3c4 <rshift>
 800a688:	443d      	add	r5, r7
 800a68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a68e:	42ab      	cmp	r3, r5
 800a690:	da4a      	bge.n	800a728 <__gethex+0x294>
 800a692:	4621      	mov	r1, r4
 800a694:	9802      	ldr	r0, [sp, #8]
 800a696:	f000 fa67 	bl	800ab68 <_Bfree>
 800a69a:	2300      	movs	r3, #0
 800a69c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a69e:	27a3      	movs	r7, #163	; 0xa3
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e789      	b.n	800a5b8 <__gethex+0x124>
 800a6a4:	1e73      	subs	r3, r6, #1
 800a6a6:	9a06      	ldr	r2, [sp, #24]
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d019      	beq.n	800a6e6 <__gethex+0x252>
 800a6b2:	f1bb 0f20 	cmp.w	fp, #32
 800a6b6:	d107      	bne.n	800a6c8 <__gethex+0x234>
 800a6b8:	9b04      	ldr	r3, [sp, #16]
 800a6ba:	9a01      	ldr	r2, [sp, #4]
 800a6bc:	f843 2b04 	str.w	r2, [r3], #4
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	469b      	mov	fp, r3
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6cc:	f7ff fecd 	bl	800a46a <__hexdig_fun>
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	f000 000f 	and.w	r0, r0, #15
 800a6d6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6da:	4303      	orrs	r3, r0
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	f10b 0b04 	add.w	fp, fp, #4
 800a6e2:	9b07      	ldr	r3, [sp, #28]
 800a6e4:	e00d      	b.n	800a702 <__gethex+0x26e>
 800a6e6:	9a08      	ldr	r2, [sp, #32]
 800a6e8:	1e73      	subs	r3, r6, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	42bb      	cmp	r3, r7
 800a6ee:	d3e0      	bcc.n	800a6b2 <__gethex+0x21e>
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	9903      	ldr	r1, [sp, #12]
 800a6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f8:	f001 f910 	bl	800b91c <strncmp>
 800a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d1d7      	bne.n	800a6b2 <__gethex+0x21e>
 800a702:	461e      	mov	r6, r3
 800a704:	e78c      	b.n	800a620 <__gethex+0x18c>
 800a706:	f04f 0a03 	mov.w	sl, #3
 800a70a:	e7b9      	b.n	800a680 <__gethex+0x1ec>
 800a70c:	da09      	bge.n	800a722 <__gethex+0x28e>
 800a70e:	1bf7      	subs	r7, r6, r7
 800a710:	4621      	mov	r1, r4
 800a712:	463a      	mov	r2, r7
 800a714:	9802      	ldr	r0, [sp, #8]
 800a716:	f000 fc3f 	bl	800af98 <__lshift>
 800a71a:	4604      	mov	r4, r0
 800a71c:	1bed      	subs	r5, r5, r7
 800a71e:	f100 0914 	add.w	r9, r0, #20
 800a722:	f04f 0a00 	mov.w	sl, #0
 800a726:	e7b0      	b.n	800a68a <__gethex+0x1f6>
 800a728:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a72c:	42a8      	cmp	r0, r5
 800a72e:	dd72      	ble.n	800a816 <__gethex+0x382>
 800a730:	1b45      	subs	r5, r0, r5
 800a732:	42ae      	cmp	r6, r5
 800a734:	dc35      	bgt.n	800a7a2 <__gethex+0x30e>
 800a736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d029      	beq.n	800a792 <__gethex+0x2fe>
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d02b      	beq.n	800a79a <__gethex+0x306>
 800a742:	2b01      	cmp	r3, #1
 800a744:	d11c      	bne.n	800a780 <__gethex+0x2ec>
 800a746:	42ae      	cmp	r6, r5
 800a748:	d11a      	bne.n	800a780 <__gethex+0x2ec>
 800a74a:	2e01      	cmp	r6, #1
 800a74c:	d112      	bne.n	800a774 <__gethex+0x2e0>
 800a74e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a752:	9a05      	ldr	r2, [sp, #20]
 800a754:	2762      	movs	r7, #98	; 0x62
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	2301      	movs	r3, #1
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	f8c9 3000 	str.w	r3, [r9]
 800a760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a762:	601c      	str	r4, [r3, #0]
 800a764:	e728      	b.n	800a5b8 <__gethex+0x124>
 800a766:	bf00      	nop
 800a768:	0800cba0 	.word	0x0800cba0
 800a76c:	0800cb28 	.word	0x0800cb28
 800a770:	0800cb39 	.word	0x0800cb39
 800a774:	4620      	mov	r0, r4
 800a776:	1e71      	subs	r1, r6, #1
 800a778:	f000 fe4d 	bl	800b416 <__any_on>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d1e6      	bne.n	800a74e <__gethex+0x2ba>
 800a780:	4621      	mov	r1, r4
 800a782:	9802      	ldr	r0, [sp, #8]
 800a784:	f000 f9f0 	bl	800ab68 <_Bfree>
 800a788:	2300      	movs	r3, #0
 800a78a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a78c:	2750      	movs	r7, #80	; 0x50
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	e712      	b.n	800a5b8 <__gethex+0x124>
 800a792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1f3      	bne.n	800a780 <__gethex+0x2ec>
 800a798:	e7d9      	b.n	800a74e <__gethex+0x2ba>
 800a79a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1d6      	bne.n	800a74e <__gethex+0x2ba>
 800a7a0:	e7ee      	b.n	800a780 <__gethex+0x2ec>
 800a7a2:	1e6f      	subs	r7, r5, #1
 800a7a4:	f1ba 0f00 	cmp.w	sl, #0
 800a7a8:	d132      	bne.n	800a810 <__gethex+0x37c>
 800a7aa:	b127      	cbz	r7, 800a7b6 <__gethex+0x322>
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fe31 	bl	800b416 <__any_on>
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	117b      	asrs	r3, r7, #5
 800a7ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7be:	f007 071f 	and.w	r7, r7, #31
 800a7c2:	fa01 f707 	lsl.w	r7, r1, r7
 800a7c6:	421f      	tst	r7, r3
 800a7c8:	f04f 0702 	mov.w	r7, #2
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	bf18      	it	ne
 800a7d2:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7d6:	1b76      	subs	r6, r6, r5
 800a7d8:	f7ff fdf4 	bl	800a3c4 <rshift>
 800a7dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7e0:	f1ba 0f00 	cmp.w	sl, #0
 800a7e4:	d048      	beq.n	800a878 <__gethex+0x3e4>
 800a7e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d015      	beq.n	800a81a <__gethex+0x386>
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d017      	beq.n	800a822 <__gethex+0x38e>
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d109      	bne.n	800a80a <__gethex+0x376>
 800a7f6:	f01a 0f02 	tst.w	sl, #2
 800a7fa:	d006      	beq.n	800a80a <__gethex+0x376>
 800a7fc:	f8d9 0000 	ldr.w	r0, [r9]
 800a800:	ea4a 0a00 	orr.w	sl, sl, r0
 800a804:	f01a 0f01 	tst.w	sl, #1
 800a808:	d10e      	bne.n	800a828 <__gethex+0x394>
 800a80a:	f047 0710 	orr.w	r7, r7, #16
 800a80e:	e033      	b.n	800a878 <__gethex+0x3e4>
 800a810:	f04f 0a01 	mov.w	sl, #1
 800a814:	e7cf      	b.n	800a7b6 <__gethex+0x322>
 800a816:	2701      	movs	r7, #1
 800a818:	e7e2      	b.n	800a7e0 <__gethex+0x34c>
 800a81a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a81c:	f1c3 0301 	rsb	r3, r3, #1
 800a820:	9315      	str	r3, [sp, #84]	; 0x54
 800a822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0f0      	beq.n	800a80a <__gethex+0x376>
 800a828:	f04f 0c00 	mov.w	ip, #0
 800a82c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a830:	f104 0314 	add.w	r3, r4, #20
 800a834:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a838:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a842:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a846:	d01c      	beq.n	800a882 <__gethex+0x3ee>
 800a848:	3201      	adds	r2, #1
 800a84a:	6002      	str	r2, [r0, #0]
 800a84c:	2f02      	cmp	r7, #2
 800a84e:	f104 0314 	add.w	r3, r4, #20
 800a852:	d13d      	bne.n	800a8d0 <__gethex+0x43c>
 800a854:	f8d8 2000 	ldr.w	r2, [r8]
 800a858:	3a01      	subs	r2, #1
 800a85a:	42b2      	cmp	r2, r6
 800a85c:	d10a      	bne.n	800a874 <__gethex+0x3e0>
 800a85e:	2201      	movs	r2, #1
 800a860:	1171      	asrs	r1, r6, #5
 800a862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a866:	f006 061f 	and.w	r6, r6, #31
 800a86a:	fa02 f606 	lsl.w	r6, r2, r6
 800a86e:	421e      	tst	r6, r3
 800a870:	bf18      	it	ne
 800a872:	4617      	movne	r7, r2
 800a874:	f047 0720 	orr.w	r7, r7, #32
 800a878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a87a:	601c      	str	r4, [r3, #0]
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	601d      	str	r5, [r3, #0]
 800a880:	e69a      	b.n	800a5b8 <__gethex+0x124>
 800a882:	4299      	cmp	r1, r3
 800a884:	f843 cc04 	str.w	ip, [r3, #-4]
 800a888:	d8d8      	bhi.n	800a83c <__gethex+0x3a8>
 800a88a:	68a3      	ldr	r3, [r4, #8]
 800a88c:	459b      	cmp	fp, r3
 800a88e:	db17      	blt.n	800a8c0 <__gethex+0x42c>
 800a890:	6861      	ldr	r1, [r4, #4]
 800a892:	9802      	ldr	r0, [sp, #8]
 800a894:	3101      	adds	r1, #1
 800a896:	f000 f927 	bl	800aae8 <_Balloc>
 800a89a:	4681      	mov	r9, r0
 800a89c:	b918      	cbnz	r0, 800a8a6 <__gethex+0x412>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	2184      	movs	r1, #132	; 0x84
 800a8a2:	4b19      	ldr	r3, [pc, #100]	; (800a908 <__gethex+0x474>)
 800a8a4:	e6ab      	b.n	800a5fe <__gethex+0x16a>
 800a8a6:	6922      	ldr	r2, [r4, #16]
 800a8a8:	f104 010c 	add.w	r1, r4, #12
 800a8ac:	3202      	adds	r2, #2
 800a8ae:	0092      	lsls	r2, r2, #2
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	f7fd f9d7 	bl	8007c64 <memcpy>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	9802      	ldr	r0, [sp, #8]
 800a8ba:	f000 f955 	bl	800ab68 <_Bfree>
 800a8be:	464c      	mov	r4, r9
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	6122      	str	r2, [r4, #16]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8cc:	615a      	str	r2, [r3, #20]
 800a8ce:	e7bd      	b.n	800a84c <__gethex+0x3b8>
 800a8d0:	6922      	ldr	r2, [r4, #16]
 800a8d2:	455a      	cmp	r2, fp
 800a8d4:	dd0b      	ble.n	800a8ee <__gethex+0x45a>
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7ff fd73 	bl	800a3c4 <rshift>
 800a8de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8e2:	3501      	adds	r5, #1
 800a8e4:	42ab      	cmp	r3, r5
 800a8e6:	f6ff aed4 	blt.w	800a692 <__gethex+0x1fe>
 800a8ea:	2701      	movs	r7, #1
 800a8ec:	e7c2      	b.n	800a874 <__gethex+0x3e0>
 800a8ee:	f016 061f 	ands.w	r6, r6, #31
 800a8f2:	d0fa      	beq.n	800a8ea <__gethex+0x456>
 800a8f4:	4453      	add	r3, sl
 800a8f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8fa:	f000 f9e7 	bl	800accc <__hi0bits>
 800a8fe:	f1c6 0620 	rsb	r6, r6, #32
 800a902:	42b0      	cmp	r0, r6
 800a904:	dbe7      	blt.n	800a8d6 <__gethex+0x442>
 800a906:	e7f0      	b.n	800a8ea <__gethex+0x456>
 800a908:	0800cb28 	.word	0x0800cb28

0800a90c <L_shift>:
 800a90c:	f1c2 0208 	rsb	r2, r2, #8
 800a910:	0092      	lsls	r2, r2, #2
 800a912:	b570      	push	{r4, r5, r6, lr}
 800a914:	f1c2 0620 	rsb	r6, r2, #32
 800a918:	6843      	ldr	r3, [r0, #4]
 800a91a:	6804      	ldr	r4, [r0, #0]
 800a91c:	fa03 f506 	lsl.w	r5, r3, r6
 800a920:	432c      	orrs	r4, r5
 800a922:	40d3      	lsrs	r3, r2
 800a924:	6004      	str	r4, [r0, #0]
 800a926:	f840 3f04 	str.w	r3, [r0, #4]!
 800a92a:	4288      	cmp	r0, r1
 800a92c:	d3f4      	bcc.n	800a918 <L_shift+0xc>
 800a92e:	bd70      	pop	{r4, r5, r6, pc}

0800a930 <__match>:
 800a930:	b530      	push	{r4, r5, lr}
 800a932:	6803      	ldr	r3, [r0, #0]
 800a934:	3301      	adds	r3, #1
 800a936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93a:	b914      	cbnz	r4, 800a942 <__match+0x12>
 800a93c:	6003      	str	r3, [r0, #0]
 800a93e:	2001      	movs	r0, #1
 800a940:	bd30      	pop	{r4, r5, pc}
 800a942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a946:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a94a:	2d19      	cmp	r5, #25
 800a94c:	bf98      	it	ls
 800a94e:	3220      	addls	r2, #32
 800a950:	42a2      	cmp	r2, r4
 800a952:	d0f0      	beq.n	800a936 <__match+0x6>
 800a954:	2000      	movs	r0, #0
 800a956:	e7f3      	b.n	800a940 <__match+0x10>

0800a958 <__hexnan>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	2500      	movs	r5, #0
 800a95e:	680b      	ldr	r3, [r1, #0]
 800a960:	4682      	mov	sl, r0
 800a962:	115e      	asrs	r6, r3, #5
 800a964:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a968:	f013 031f 	ands.w	r3, r3, #31
 800a96c:	bf18      	it	ne
 800a96e:	3604      	addne	r6, #4
 800a970:	1f37      	subs	r7, r6, #4
 800a972:	46b9      	mov	r9, r7
 800a974:	463c      	mov	r4, r7
 800a976:	46ab      	mov	fp, r5
 800a978:	b087      	sub	sp, #28
 800a97a:	4690      	mov	r8, r2
 800a97c:	6802      	ldr	r2, [r0, #0]
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	f846 5c04 	str.w	r5, [r6, #-4]
 800a984:	9502      	str	r5, [sp, #8]
 800a986:	7851      	ldrb	r1, [r2, #1]
 800a988:	1c53      	adds	r3, r2, #1
 800a98a:	9303      	str	r3, [sp, #12]
 800a98c:	b341      	cbz	r1, 800a9e0 <__hexnan+0x88>
 800a98e:	4608      	mov	r0, r1
 800a990:	9205      	str	r2, [sp, #20]
 800a992:	9104      	str	r1, [sp, #16]
 800a994:	f7ff fd69 	bl	800a46a <__hexdig_fun>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d14f      	bne.n	800aa3c <__hexnan+0xe4>
 800a99c:	9904      	ldr	r1, [sp, #16]
 800a99e:	9a05      	ldr	r2, [sp, #20]
 800a9a0:	2920      	cmp	r1, #32
 800a9a2:	d818      	bhi.n	800a9d6 <__hexnan+0x7e>
 800a9a4:	9b02      	ldr	r3, [sp, #8]
 800a9a6:	459b      	cmp	fp, r3
 800a9a8:	dd13      	ble.n	800a9d2 <__hexnan+0x7a>
 800a9aa:	454c      	cmp	r4, r9
 800a9ac:	d206      	bcs.n	800a9bc <__hexnan+0x64>
 800a9ae:	2d07      	cmp	r5, #7
 800a9b0:	dc04      	bgt.n	800a9bc <__hexnan+0x64>
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff ffa8 	bl	800a90c <L_shift>
 800a9bc:	4544      	cmp	r4, r8
 800a9be:	d950      	bls.n	800aa62 <__hexnan+0x10a>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a9c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9ca:	461d      	mov	r5, r3
 800a9cc:	464c      	mov	r4, r9
 800a9ce:	f8cd b008 	str.w	fp, [sp, #8]
 800a9d2:	9a03      	ldr	r2, [sp, #12]
 800a9d4:	e7d7      	b.n	800a986 <__hexnan+0x2e>
 800a9d6:	2929      	cmp	r1, #41	; 0x29
 800a9d8:	d156      	bne.n	800aa88 <__hexnan+0x130>
 800a9da:	3202      	adds	r2, #2
 800a9dc:	f8ca 2000 	str.w	r2, [sl]
 800a9e0:	f1bb 0f00 	cmp.w	fp, #0
 800a9e4:	d050      	beq.n	800aa88 <__hexnan+0x130>
 800a9e6:	454c      	cmp	r4, r9
 800a9e8:	d206      	bcs.n	800a9f8 <__hexnan+0xa0>
 800a9ea:	2d07      	cmp	r5, #7
 800a9ec:	dc04      	bgt.n	800a9f8 <__hexnan+0xa0>
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f7ff ff8a 	bl	800a90c <L_shift>
 800a9f8:	4544      	cmp	r4, r8
 800a9fa:	d934      	bls.n	800aa66 <__hexnan+0x10e>
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	f1a8 0204 	sub.w	r2, r8, #4
 800aa02:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa06:	429f      	cmp	r7, r3
 800aa08:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa0c:	d2f9      	bcs.n	800aa02 <__hexnan+0xaa>
 800aa0e:	1b3b      	subs	r3, r7, r4
 800aa10:	f023 0303 	bic.w	r3, r3, #3
 800aa14:	3304      	adds	r3, #4
 800aa16:	3401      	adds	r4, #1
 800aa18:	3e03      	subs	r6, #3
 800aa1a:	42b4      	cmp	r4, r6
 800aa1c:	bf88      	it	hi
 800aa1e:	2304      	movhi	r3, #4
 800aa20:	2200      	movs	r2, #0
 800aa22:	4443      	add	r3, r8
 800aa24:	f843 2b04 	str.w	r2, [r3], #4
 800aa28:	429f      	cmp	r7, r3
 800aa2a:	d2fb      	bcs.n	800aa24 <__hexnan+0xcc>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	b91b      	cbnz	r3, 800aa38 <__hexnan+0xe0>
 800aa30:	4547      	cmp	r7, r8
 800aa32:	d127      	bne.n	800aa84 <__hexnan+0x12c>
 800aa34:	2301      	movs	r3, #1
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	2005      	movs	r0, #5
 800aa3a:	e026      	b.n	800aa8a <__hexnan+0x132>
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	2d08      	cmp	r5, #8
 800aa40:	f10b 0b01 	add.w	fp, fp, #1
 800aa44:	dd06      	ble.n	800aa54 <__hexnan+0xfc>
 800aa46:	4544      	cmp	r4, r8
 800aa48:	d9c3      	bls.n	800a9d2 <__hexnan+0x7a>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2501      	movs	r5, #1
 800aa4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa52:	3c04      	subs	r4, #4
 800aa54:	6822      	ldr	r2, [r4, #0]
 800aa56:	f000 000f 	and.w	r0, r0, #15
 800aa5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa5e:	6022      	str	r2, [r4, #0]
 800aa60:	e7b7      	b.n	800a9d2 <__hexnan+0x7a>
 800aa62:	2508      	movs	r5, #8
 800aa64:	e7b5      	b.n	800a9d2 <__hexnan+0x7a>
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0df      	beq.n	800aa2c <__hexnan+0xd4>
 800aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa70:	f1c3 0320 	rsb	r3, r3, #32
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
 800aa78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa7c:	401a      	ands	r2, r3
 800aa7e:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa82:	e7d3      	b.n	800aa2c <__hexnan+0xd4>
 800aa84:	3f04      	subs	r7, #4
 800aa86:	e7d1      	b.n	800aa2c <__hexnan+0xd4>
 800aa88:	2004      	movs	r0, #4
 800aa8a:	b007      	add	sp, #28
 800aa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa90 <_localeconv_r>:
 800aa90:	4800      	ldr	r0, [pc, #0]	; (800aa94 <_localeconv_r+0x4>)
 800aa92:	4770      	bx	lr
 800aa94:	200001ec 	.word	0x200001ec

0800aa98 <malloc>:
 800aa98:	4b02      	ldr	r3, [pc, #8]	; (800aaa4 <malloc+0xc>)
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	6818      	ldr	r0, [r3, #0]
 800aa9e:	f000 bd57 	b.w	800b550 <_malloc_r>
 800aaa2:	bf00      	nop
 800aaa4:	20000094 	.word	0x20000094

0800aaa8 <__ascii_mbtowc>:
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	b901      	cbnz	r1, 800aaae <__ascii_mbtowc+0x6>
 800aaac:	a901      	add	r1, sp, #4
 800aaae:	b142      	cbz	r2, 800aac2 <__ascii_mbtowc+0x1a>
 800aab0:	b14b      	cbz	r3, 800aac6 <__ascii_mbtowc+0x1e>
 800aab2:	7813      	ldrb	r3, [r2, #0]
 800aab4:	600b      	str	r3, [r1, #0]
 800aab6:	7812      	ldrb	r2, [r2, #0]
 800aab8:	1e10      	subs	r0, r2, #0
 800aaba:	bf18      	it	ne
 800aabc:	2001      	movne	r0, #1
 800aabe:	b002      	add	sp, #8
 800aac0:	4770      	bx	lr
 800aac2:	4610      	mov	r0, r2
 800aac4:	e7fb      	b.n	800aabe <__ascii_mbtowc+0x16>
 800aac6:	f06f 0001 	mvn.w	r0, #1
 800aaca:	e7f8      	b.n	800aabe <__ascii_mbtowc+0x16>

0800aacc <memchr>:
 800aacc:	4603      	mov	r3, r0
 800aace:	b510      	push	{r4, lr}
 800aad0:	b2c9      	uxtb	r1, r1
 800aad2:	4402      	add	r2, r0
 800aad4:	4293      	cmp	r3, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	d101      	bne.n	800aade <memchr+0x12>
 800aada:	2000      	movs	r0, #0
 800aadc:	e003      	b.n	800aae6 <memchr+0x1a>
 800aade:	7804      	ldrb	r4, [r0, #0]
 800aae0:	3301      	adds	r3, #1
 800aae2:	428c      	cmp	r4, r1
 800aae4:	d1f6      	bne.n	800aad4 <memchr+0x8>
 800aae6:	bd10      	pop	{r4, pc}

0800aae8 <_Balloc>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaec:	4604      	mov	r4, r0
 800aaee:	460d      	mov	r5, r1
 800aaf0:	b976      	cbnz	r6, 800ab10 <_Balloc+0x28>
 800aaf2:	2010      	movs	r0, #16
 800aaf4:	f7ff ffd0 	bl	800aa98 <malloc>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	6260      	str	r0, [r4, #36]	; 0x24
 800aafc:	b920      	cbnz	r0, 800ab08 <_Balloc+0x20>
 800aafe:	2166      	movs	r1, #102	; 0x66
 800ab00:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <_Balloc+0x78>)
 800ab02:	4818      	ldr	r0, [pc, #96]	; (800ab64 <_Balloc+0x7c>)
 800ab04:	f000 ff2c 	bl	800b960 <__assert_func>
 800ab08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab0c:	6006      	str	r6, [r0, #0]
 800ab0e:	60c6      	str	r6, [r0, #12]
 800ab10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab12:	68f3      	ldr	r3, [r6, #12]
 800ab14:	b183      	cbz	r3, 800ab38 <_Balloc+0x50>
 800ab16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab1e:	b9b8      	cbnz	r0, 800ab50 <_Balloc+0x68>
 800ab20:	2101      	movs	r1, #1
 800ab22:	fa01 f605 	lsl.w	r6, r1, r5
 800ab26:	1d72      	adds	r2, r6, #5
 800ab28:	4620      	mov	r0, r4
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	f000 fc94 	bl	800b458 <_calloc_r>
 800ab30:	b160      	cbz	r0, 800ab4c <_Balloc+0x64>
 800ab32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab36:	e00e      	b.n	800ab56 <_Balloc+0x6e>
 800ab38:	2221      	movs	r2, #33	; 0x21
 800ab3a:	2104      	movs	r1, #4
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 fc8b 	bl	800b458 <_calloc_r>
 800ab42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab44:	60f0      	str	r0, [r6, #12]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e4      	bne.n	800ab16 <_Balloc+0x2e>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	6802      	ldr	r2, [r0, #0]
 800ab52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab56:	2300      	movs	r3, #0
 800ab58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab5c:	e7f7      	b.n	800ab4e <_Balloc+0x66>
 800ab5e:	bf00      	nop
 800ab60:	0800cab6 	.word	0x0800cab6
 800ab64:	0800cbb4 	.word	0x0800cbb4

0800ab68 <_Bfree>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	b976      	cbnz	r6, 800ab90 <_Bfree+0x28>
 800ab72:	2010      	movs	r0, #16
 800ab74:	f7ff ff90 	bl	800aa98 <malloc>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	6268      	str	r0, [r5, #36]	; 0x24
 800ab7c:	b920      	cbnz	r0, 800ab88 <_Bfree+0x20>
 800ab7e:	218a      	movs	r1, #138	; 0x8a
 800ab80:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <_Bfree+0x3c>)
 800ab82:	4809      	ldr	r0, [pc, #36]	; (800aba8 <_Bfree+0x40>)
 800ab84:	f000 feec 	bl	800b960 <__assert_func>
 800ab88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab8c:	6006      	str	r6, [r0, #0]
 800ab8e:	60c6      	str	r6, [r0, #12]
 800ab90:	b13c      	cbz	r4, 800aba2 <_Bfree+0x3a>
 800ab92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab94:	6862      	ldr	r2, [r4, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab9c:	6021      	str	r1, [r4, #0]
 800ab9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	0800cab6 	.word	0x0800cab6
 800aba8:	0800cbb4 	.word	0x0800cbb4

0800abac <__multadd>:
 800abac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb0:	4607      	mov	r7, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	461e      	mov	r6, r3
 800abb6:	2000      	movs	r0, #0
 800abb8:	690d      	ldr	r5, [r1, #16]
 800abba:	f101 0c14 	add.w	ip, r1, #20
 800abbe:	f8dc 3000 	ldr.w	r3, [ip]
 800abc2:	3001      	adds	r0, #1
 800abc4:	b299      	uxth	r1, r3
 800abc6:	fb02 6101 	mla	r1, r2, r1, r6
 800abca:	0c1e      	lsrs	r6, r3, #16
 800abcc:	0c0b      	lsrs	r3, r1, #16
 800abce:	fb02 3306 	mla	r3, r2, r6, r3
 800abd2:	b289      	uxth	r1, r1
 800abd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abd8:	4285      	cmp	r5, r0
 800abda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abde:	f84c 1b04 	str.w	r1, [ip], #4
 800abe2:	dcec      	bgt.n	800abbe <__multadd+0x12>
 800abe4:	b30e      	cbz	r6, 800ac2a <__multadd+0x7e>
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	42ab      	cmp	r3, r5
 800abea:	dc19      	bgt.n	800ac20 <__multadd+0x74>
 800abec:	6861      	ldr	r1, [r4, #4]
 800abee:	4638      	mov	r0, r7
 800abf0:	3101      	adds	r1, #1
 800abf2:	f7ff ff79 	bl	800aae8 <_Balloc>
 800abf6:	4680      	mov	r8, r0
 800abf8:	b928      	cbnz	r0, 800ac06 <__multadd+0x5a>
 800abfa:	4602      	mov	r2, r0
 800abfc:	21b5      	movs	r1, #181	; 0xb5
 800abfe:	4b0c      	ldr	r3, [pc, #48]	; (800ac30 <__multadd+0x84>)
 800ac00:	480c      	ldr	r0, [pc, #48]	; (800ac34 <__multadd+0x88>)
 800ac02:	f000 fead 	bl	800b960 <__assert_func>
 800ac06:	6922      	ldr	r2, [r4, #16]
 800ac08:	f104 010c 	add.w	r1, r4, #12
 800ac0c:	3202      	adds	r2, #2
 800ac0e:	0092      	lsls	r2, r2, #2
 800ac10:	300c      	adds	r0, #12
 800ac12:	f7fd f827 	bl	8007c64 <memcpy>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4638      	mov	r0, r7
 800ac1a:	f7ff ffa5 	bl	800ab68 <_Bfree>
 800ac1e:	4644      	mov	r4, r8
 800ac20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac24:	3501      	adds	r5, #1
 800ac26:	615e      	str	r6, [r3, #20]
 800ac28:	6125      	str	r5, [r4, #16]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac30:	0800cb28 	.word	0x0800cb28
 800ac34:	0800cbb4 	.word	0x0800cbb4

0800ac38 <__s2b>:
 800ac38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	4615      	mov	r5, r2
 800ac3e:	2209      	movs	r2, #9
 800ac40:	461f      	mov	r7, r3
 800ac42:	3308      	adds	r3, #8
 800ac44:	460c      	mov	r4, r1
 800ac46:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	2100      	movs	r1, #0
 800ac50:	429a      	cmp	r2, r3
 800ac52:	db09      	blt.n	800ac68 <__s2b+0x30>
 800ac54:	4630      	mov	r0, r6
 800ac56:	f7ff ff47 	bl	800aae8 <_Balloc>
 800ac5a:	b940      	cbnz	r0, 800ac6e <__s2b+0x36>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	21ce      	movs	r1, #206	; 0xce
 800ac60:	4b18      	ldr	r3, [pc, #96]	; (800acc4 <__s2b+0x8c>)
 800ac62:	4819      	ldr	r0, [pc, #100]	; (800acc8 <__s2b+0x90>)
 800ac64:	f000 fe7c 	bl	800b960 <__assert_func>
 800ac68:	0052      	lsls	r2, r2, #1
 800ac6a:	3101      	adds	r1, #1
 800ac6c:	e7f0      	b.n	800ac50 <__s2b+0x18>
 800ac6e:	9b08      	ldr	r3, [sp, #32]
 800ac70:	2d09      	cmp	r5, #9
 800ac72:	6143      	str	r3, [r0, #20]
 800ac74:	f04f 0301 	mov.w	r3, #1
 800ac78:	6103      	str	r3, [r0, #16]
 800ac7a:	dd16      	ble.n	800acaa <__s2b+0x72>
 800ac7c:	f104 0909 	add.w	r9, r4, #9
 800ac80:	46c8      	mov	r8, r9
 800ac82:	442c      	add	r4, r5
 800ac84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac88:	4601      	mov	r1, r0
 800ac8a:	220a      	movs	r2, #10
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	3b30      	subs	r3, #48	; 0x30
 800ac90:	f7ff ff8c 	bl	800abac <__multadd>
 800ac94:	45a0      	cmp	r8, r4
 800ac96:	d1f5      	bne.n	800ac84 <__s2b+0x4c>
 800ac98:	f1a5 0408 	sub.w	r4, r5, #8
 800ac9c:	444c      	add	r4, r9
 800ac9e:	1b2d      	subs	r5, r5, r4
 800aca0:	1963      	adds	r3, r4, r5
 800aca2:	42bb      	cmp	r3, r7
 800aca4:	db04      	blt.n	800acb0 <__s2b+0x78>
 800aca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acaa:	2509      	movs	r5, #9
 800acac:	340a      	adds	r4, #10
 800acae:	e7f6      	b.n	800ac9e <__s2b+0x66>
 800acb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acb4:	4601      	mov	r1, r0
 800acb6:	220a      	movs	r2, #10
 800acb8:	4630      	mov	r0, r6
 800acba:	3b30      	subs	r3, #48	; 0x30
 800acbc:	f7ff ff76 	bl	800abac <__multadd>
 800acc0:	e7ee      	b.n	800aca0 <__s2b+0x68>
 800acc2:	bf00      	nop
 800acc4:	0800cb28 	.word	0x0800cb28
 800acc8:	0800cbb4 	.word	0x0800cbb4

0800accc <__hi0bits>:
 800accc:	0c02      	lsrs	r2, r0, #16
 800acce:	0412      	lsls	r2, r2, #16
 800acd0:	4603      	mov	r3, r0
 800acd2:	b9ca      	cbnz	r2, 800ad08 <__hi0bits+0x3c>
 800acd4:	0403      	lsls	r3, r0, #16
 800acd6:	2010      	movs	r0, #16
 800acd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800acdc:	bf04      	itt	eq
 800acde:	021b      	lsleq	r3, r3, #8
 800ace0:	3008      	addeq	r0, #8
 800ace2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ace6:	bf04      	itt	eq
 800ace8:	011b      	lsleq	r3, r3, #4
 800acea:	3004      	addeq	r0, #4
 800acec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acf0:	bf04      	itt	eq
 800acf2:	009b      	lsleq	r3, r3, #2
 800acf4:	3002      	addeq	r0, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	db05      	blt.n	800ad06 <__hi0bits+0x3a>
 800acfa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800acfe:	f100 0001 	add.w	r0, r0, #1
 800ad02:	bf08      	it	eq
 800ad04:	2020      	moveq	r0, #32
 800ad06:	4770      	bx	lr
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e7e5      	b.n	800acd8 <__hi0bits+0xc>

0800ad0c <__lo0bits>:
 800ad0c:	6803      	ldr	r3, [r0, #0]
 800ad0e:	4602      	mov	r2, r0
 800ad10:	f013 0007 	ands.w	r0, r3, #7
 800ad14:	d00b      	beq.n	800ad2e <__lo0bits+0x22>
 800ad16:	07d9      	lsls	r1, r3, #31
 800ad18:	d421      	bmi.n	800ad5e <__lo0bits+0x52>
 800ad1a:	0798      	lsls	r0, r3, #30
 800ad1c:	bf49      	itett	mi
 800ad1e:	085b      	lsrmi	r3, r3, #1
 800ad20:	089b      	lsrpl	r3, r3, #2
 800ad22:	2001      	movmi	r0, #1
 800ad24:	6013      	strmi	r3, [r2, #0]
 800ad26:	bf5c      	itt	pl
 800ad28:	2002      	movpl	r0, #2
 800ad2a:	6013      	strpl	r3, [r2, #0]
 800ad2c:	4770      	bx	lr
 800ad2e:	b299      	uxth	r1, r3
 800ad30:	b909      	cbnz	r1, 800ad36 <__lo0bits+0x2a>
 800ad32:	2010      	movs	r0, #16
 800ad34:	0c1b      	lsrs	r3, r3, #16
 800ad36:	b2d9      	uxtb	r1, r3
 800ad38:	b909      	cbnz	r1, 800ad3e <__lo0bits+0x32>
 800ad3a:	3008      	adds	r0, #8
 800ad3c:	0a1b      	lsrs	r3, r3, #8
 800ad3e:	0719      	lsls	r1, r3, #28
 800ad40:	bf04      	itt	eq
 800ad42:	091b      	lsreq	r3, r3, #4
 800ad44:	3004      	addeq	r0, #4
 800ad46:	0799      	lsls	r1, r3, #30
 800ad48:	bf04      	itt	eq
 800ad4a:	089b      	lsreq	r3, r3, #2
 800ad4c:	3002      	addeq	r0, #2
 800ad4e:	07d9      	lsls	r1, r3, #31
 800ad50:	d403      	bmi.n	800ad5a <__lo0bits+0x4e>
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	f100 0001 	add.w	r0, r0, #1
 800ad58:	d003      	beq.n	800ad62 <__lo0bits+0x56>
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	4770      	bx	lr
 800ad5e:	2000      	movs	r0, #0
 800ad60:	4770      	bx	lr
 800ad62:	2020      	movs	r0, #32
 800ad64:	4770      	bx	lr
	...

0800ad68 <__i2b>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	f7ff febb 	bl	800aae8 <_Balloc>
 800ad72:	4602      	mov	r2, r0
 800ad74:	b928      	cbnz	r0, 800ad82 <__i2b+0x1a>
 800ad76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad7a:	4b04      	ldr	r3, [pc, #16]	; (800ad8c <__i2b+0x24>)
 800ad7c:	4804      	ldr	r0, [pc, #16]	; (800ad90 <__i2b+0x28>)
 800ad7e:	f000 fdef 	bl	800b960 <__assert_func>
 800ad82:	2301      	movs	r3, #1
 800ad84:	6144      	str	r4, [r0, #20]
 800ad86:	6103      	str	r3, [r0, #16]
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800cb28 	.word	0x0800cb28
 800ad90:	0800cbb4 	.word	0x0800cbb4

0800ad94 <__multiply>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	4691      	mov	r9, r2
 800ad9a:	690a      	ldr	r2, [r1, #16]
 800ad9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ada0:	460c      	mov	r4, r1
 800ada2:	429a      	cmp	r2, r3
 800ada4:	bfbe      	ittt	lt
 800ada6:	460b      	movlt	r3, r1
 800ada8:	464c      	movlt	r4, r9
 800adaa:	4699      	movlt	r9, r3
 800adac:	6927      	ldr	r7, [r4, #16]
 800adae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	6861      	ldr	r1, [r4, #4]
 800adb6:	eb07 060a 	add.w	r6, r7, sl
 800adba:	42b3      	cmp	r3, r6
 800adbc:	b085      	sub	sp, #20
 800adbe:	bfb8      	it	lt
 800adc0:	3101      	addlt	r1, #1
 800adc2:	f7ff fe91 	bl	800aae8 <_Balloc>
 800adc6:	b930      	cbnz	r0, 800add6 <__multiply+0x42>
 800adc8:	4602      	mov	r2, r0
 800adca:	f240 115d 	movw	r1, #349	; 0x15d
 800adce:	4b43      	ldr	r3, [pc, #268]	; (800aedc <__multiply+0x148>)
 800add0:	4843      	ldr	r0, [pc, #268]	; (800aee0 <__multiply+0x14c>)
 800add2:	f000 fdc5 	bl	800b960 <__assert_func>
 800add6:	f100 0514 	add.w	r5, r0, #20
 800adda:	462b      	mov	r3, r5
 800addc:	2200      	movs	r2, #0
 800adde:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ade2:	4543      	cmp	r3, r8
 800ade4:	d321      	bcc.n	800ae2a <__multiply+0x96>
 800ade6:	f104 0314 	add.w	r3, r4, #20
 800adea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adee:	f109 0314 	add.w	r3, r9, #20
 800adf2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800adf6:	9202      	str	r2, [sp, #8]
 800adf8:	1b3a      	subs	r2, r7, r4
 800adfa:	3a15      	subs	r2, #21
 800adfc:	f022 0203 	bic.w	r2, r2, #3
 800ae00:	3204      	adds	r2, #4
 800ae02:	f104 0115 	add.w	r1, r4, #21
 800ae06:	428f      	cmp	r7, r1
 800ae08:	bf38      	it	cc
 800ae0a:	2204      	movcc	r2, #4
 800ae0c:	9201      	str	r2, [sp, #4]
 800ae0e:	9a02      	ldr	r2, [sp, #8]
 800ae10:	9303      	str	r3, [sp, #12]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d80c      	bhi.n	800ae30 <__multiply+0x9c>
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	dd03      	ble.n	800ae22 <__multiply+0x8e>
 800ae1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d059      	beq.n	800aed6 <__multiply+0x142>
 800ae22:	6106      	str	r6, [r0, #16]
 800ae24:	b005      	add	sp, #20
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	f843 2b04 	str.w	r2, [r3], #4
 800ae2e:	e7d8      	b.n	800ade2 <__multiply+0x4e>
 800ae30:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae34:	f1ba 0f00 	cmp.w	sl, #0
 800ae38:	d023      	beq.n	800ae82 <__multiply+0xee>
 800ae3a:	46a9      	mov	r9, r5
 800ae3c:	f04f 0c00 	mov.w	ip, #0
 800ae40:	f104 0e14 	add.w	lr, r4, #20
 800ae44:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae48:	f8d9 1000 	ldr.w	r1, [r9]
 800ae4c:	fa1f fb82 	uxth.w	fp, r2
 800ae50:	b289      	uxth	r1, r1
 800ae52:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae56:	4461      	add	r1, ip
 800ae58:	f8d9 c000 	ldr.w	ip, [r9]
 800ae5c:	0c12      	lsrs	r2, r2, #16
 800ae5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae62:	fb0a c202 	mla	r2, sl, r2, ip
 800ae66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae6a:	b289      	uxth	r1, r1
 800ae6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae70:	4577      	cmp	r7, lr
 800ae72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae76:	f849 1b04 	str.w	r1, [r9], #4
 800ae7a:	d8e3      	bhi.n	800ae44 <__multiply+0xb0>
 800ae7c:	9a01      	ldr	r2, [sp, #4]
 800ae7e:	f845 c002 	str.w	ip, [r5, r2]
 800ae82:	9a03      	ldr	r2, [sp, #12]
 800ae84:	3304      	adds	r3, #4
 800ae86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae8a:	f1b9 0f00 	cmp.w	r9, #0
 800ae8e:	d020      	beq.n	800aed2 <__multiply+0x13e>
 800ae90:	46ae      	mov	lr, r5
 800ae92:	f04f 0a00 	mov.w	sl, #0
 800ae96:	6829      	ldr	r1, [r5, #0]
 800ae98:	f104 0c14 	add.w	ip, r4, #20
 800ae9c:	f8bc b000 	ldrh.w	fp, [ip]
 800aea0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aea4:	b289      	uxth	r1, r1
 800aea6:	fb09 220b 	mla	r2, r9, fp, r2
 800aeaa:	4492      	add	sl, r2
 800aeac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aeb0:	f84e 1b04 	str.w	r1, [lr], #4
 800aeb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aeb8:	f8be 1000 	ldrh.w	r1, [lr]
 800aebc:	0c12      	lsrs	r2, r2, #16
 800aebe:	fb09 1102 	mla	r1, r9, r2, r1
 800aec2:	4567      	cmp	r7, ip
 800aec4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aec8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aecc:	d8e6      	bhi.n	800ae9c <__multiply+0x108>
 800aece:	9a01      	ldr	r2, [sp, #4]
 800aed0:	50a9      	str	r1, [r5, r2]
 800aed2:	3504      	adds	r5, #4
 800aed4:	e79b      	b.n	800ae0e <__multiply+0x7a>
 800aed6:	3e01      	subs	r6, #1
 800aed8:	e79d      	b.n	800ae16 <__multiply+0x82>
 800aeda:	bf00      	nop
 800aedc:	0800cb28 	.word	0x0800cb28
 800aee0:	0800cbb4 	.word	0x0800cbb4

0800aee4 <__pow5mult>:
 800aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	4615      	mov	r5, r2
 800aeea:	f012 0203 	ands.w	r2, r2, #3
 800aeee:	4606      	mov	r6, r0
 800aef0:	460f      	mov	r7, r1
 800aef2:	d007      	beq.n	800af04 <__pow5mult+0x20>
 800aef4:	4c25      	ldr	r4, [pc, #148]	; (800af8c <__pow5mult+0xa8>)
 800aef6:	3a01      	subs	r2, #1
 800aef8:	2300      	movs	r3, #0
 800aefa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aefe:	f7ff fe55 	bl	800abac <__multadd>
 800af02:	4607      	mov	r7, r0
 800af04:	10ad      	asrs	r5, r5, #2
 800af06:	d03d      	beq.n	800af84 <__pow5mult+0xa0>
 800af08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af0a:	b97c      	cbnz	r4, 800af2c <__pow5mult+0x48>
 800af0c:	2010      	movs	r0, #16
 800af0e:	f7ff fdc3 	bl	800aa98 <malloc>
 800af12:	4602      	mov	r2, r0
 800af14:	6270      	str	r0, [r6, #36]	; 0x24
 800af16:	b928      	cbnz	r0, 800af24 <__pow5mult+0x40>
 800af18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af1c:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <__pow5mult+0xac>)
 800af1e:	481d      	ldr	r0, [pc, #116]	; (800af94 <__pow5mult+0xb0>)
 800af20:	f000 fd1e 	bl	800b960 <__assert_func>
 800af24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af28:	6004      	str	r4, [r0, #0]
 800af2a:	60c4      	str	r4, [r0, #12]
 800af2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af34:	b94c      	cbnz	r4, 800af4a <__pow5mult+0x66>
 800af36:	f240 2171 	movw	r1, #625	; 0x271
 800af3a:	4630      	mov	r0, r6
 800af3c:	f7ff ff14 	bl	800ad68 <__i2b>
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	f8c8 0008 	str.w	r0, [r8, #8]
 800af48:	6003      	str	r3, [r0, #0]
 800af4a:	f04f 0900 	mov.w	r9, #0
 800af4e:	07eb      	lsls	r3, r5, #31
 800af50:	d50a      	bpl.n	800af68 <__pow5mult+0x84>
 800af52:	4639      	mov	r1, r7
 800af54:	4622      	mov	r2, r4
 800af56:	4630      	mov	r0, r6
 800af58:	f7ff ff1c 	bl	800ad94 <__multiply>
 800af5c:	4680      	mov	r8, r0
 800af5e:	4639      	mov	r1, r7
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff fe01 	bl	800ab68 <_Bfree>
 800af66:	4647      	mov	r7, r8
 800af68:	106d      	asrs	r5, r5, #1
 800af6a:	d00b      	beq.n	800af84 <__pow5mult+0xa0>
 800af6c:	6820      	ldr	r0, [r4, #0]
 800af6e:	b938      	cbnz	r0, 800af80 <__pow5mult+0x9c>
 800af70:	4622      	mov	r2, r4
 800af72:	4621      	mov	r1, r4
 800af74:	4630      	mov	r0, r6
 800af76:	f7ff ff0d 	bl	800ad94 <__multiply>
 800af7a:	6020      	str	r0, [r4, #0]
 800af7c:	f8c0 9000 	str.w	r9, [r0]
 800af80:	4604      	mov	r4, r0
 800af82:	e7e4      	b.n	800af4e <__pow5mult+0x6a>
 800af84:	4638      	mov	r0, r7
 800af86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af8a:	bf00      	nop
 800af8c:	0800cd00 	.word	0x0800cd00
 800af90:	0800cab6 	.word	0x0800cab6
 800af94:	0800cbb4 	.word	0x0800cbb4

0800af98 <__lshift>:
 800af98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	460c      	mov	r4, r1
 800af9e:	4607      	mov	r7, r0
 800afa0:	4691      	mov	r9, r2
 800afa2:	6923      	ldr	r3, [r4, #16]
 800afa4:	6849      	ldr	r1, [r1, #4]
 800afa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afb0:	f108 0601 	add.w	r6, r8, #1
 800afb4:	42b3      	cmp	r3, r6
 800afb6:	db0b      	blt.n	800afd0 <__lshift+0x38>
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff fd95 	bl	800aae8 <_Balloc>
 800afbe:	4605      	mov	r5, r0
 800afc0:	b948      	cbnz	r0, 800afd6 <__lshift+0x3e>
 800afc2:	4602      	mov	r2, r0
 800afc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afc8:	4b29      	ldr	r3, [pc, #164]	; (800b070 <__lshift+0xd8>)
 800afca:	482a      	ldr	r0, [pc, #168]	; (800b074 <__lshift+0xdc>)
 800afcc:	f000 fcc8 	bl	800b960 <__assert_func>
 800afd0:	3101      	adds	r1, #1
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	e7ee      	b.n	800afb4 <__lshift+0x1c>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f100 0114 	add.w	r1, r0, #20
 800afdc:	f100 0210 	add.w	r2, r0, #16
 800afe0:	4618      	mov	r0, r3
 800afe2:	4553      	cmp	r3, sl
 800afe4:	db37      	blt.n	800b056 <__lshift+0xbe>
 800afe6:	6920      	ldr	r0, [r4, #16]
 800afe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afec:	f104 0314 	add.w	r3, r4, #20
 800aff0:	f019 091f 	ands.w	r9, r9, #31
 800aff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aff8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800affc:	d02f      	beq.n	800b05e <__lshift+0xc6>
 800affe:	468a      	mov	sl, r1
 800b000:	f04f 0c00 	mov.w	ip, #0
 800b004:	f1c9 0e20 	rsb	lr, r9, #32
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	fa02 f209 	lsl.w	r2, r2, r9
 800b00e:	ea42 020c 	orr.w	r2, r2, ip
 800b012:	f84a 2b04 	str.w	r2, [sl], #4
 800b016:	f853 2b04 	ldr.w	r2, [r3], #4
 800b01a:	4298      	cmp	r0, r3
 800b01c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b020:	d8f2      	bhi.n	800b008 <__lshift+0x70>
 800b022:	1b03      	subs	r3, r0, r4
 800b024:	3b15      	subs	r3, #21
 800b026:	f023 0303 	bic.w	r3, r3, #3
 800b02a:	3304      	adds	r3, #4
 800b02c:	f104 0215 	add.w	r2, r4, #21
 800b030:	4290      	cmp	r0, r2
 800b032:	bf38      	it	cc
 800b034:	2304      	movcc	r3, #4
 800b036:	f841 c003 	str.w	ip, [r1, r3]
 800b03a:	f1bc 0f00 	cmp.w	ip, #0
 800b03e:	d001      	beq.n	800b044 <__lshift+0xac>
 800b040:	f108 0602 	add.w	r6, r8, #2
 800b044:	3e01      	subs	r6, #1
 800b046:	4638      	mov	r0, r7
 800b048:	4621      	mov	r1, r4
 800b04a:	612e      	str	r6, [r5, #16]
 800b04c:	f7ff fd8c 	bl	800ab68 <_Bfree>
 800b050:	4628      	mov	r0, r5
 800b052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b056:	f842 0f04 	str.w	r0, [r2, #4]!
 800b05a:	3301      	adds	r3, #1
 800b05c:	e7c1      	b.n	800afe2 <__lshift+0x4a>
 800b05e:	3904      	subs	r1, #4
 800b060:	f853 2b04 	ldr.w	r2, [r3], #4
 800b064:	4298      	cmp	r0, r3
 800b066:	f841 2f04 	str.w	r2, [r1, #4]!
 800b06a:	d8f9      	bhi.n	800b060 <__lshift+0xc8>
 800b06c:	e7ea      	b.n	800b044 <__lshift+0xac>
 800b06e:	bf00      	nop
 800b070:	0800cb28 	.word	0x0800cb28
 800b074:	0800cbb4 	.word	0x0800cbb4

0800b078 <__mcmp>:
 800b078:	4603      	mov	r3, r0
 800b07a:	690a      	ldr	r2, [r1, #16]
 800b07c:	6900      	ldr	r0, [r0, #16]
 800b07e:	b530      	push	{r4, r5, lr}
 800b080:	1a80      	subs	r0, r0, r2
 800b082:	d10d      	bne.n	800b0a0 <__mcmp+0x28>
 800b084:	3314      	adds	r3, #20
 800b086:	3114      	adds	r1, #20
 800b088:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b08c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b090:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b094:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b098:	4295      	cmp	r5, r2
 800b09a:	d002      	beq.n	800b0a2 <__mcmp+0x2a>
 800b09c:	d304      	bcc.n	800b0a8 <__mcmp+0x30>
 800b09e:	2001      	movs	r0, #1
 800b0a0:	bd30      	pop	{r4, r5, pc}
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	d3f4      	bcc.n	800b090 <__mcmp+0x18>
 800b0a6:	e7fb      	b.n	800b0a0 <__mcmp+0x28>
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	e7f8      	b.n	800b0a0 <__mcmp+0x28>
	...

0800b0b0 <__mdiff>:
 800b0b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	460d      	mov	r5, r1
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	4614      	mov	r4, r2
 800b0be:	f7ff ffdb 	bl	800b078 <__mcmp>
 800b0c2:	1e06      	subs	r6, r0, #0
 800b0c4:	d111      	bne.n	800b0ea <__mdiff+0x3a>
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f7ff fd0d 	bl	800aae8 <_Balloc>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	b928      	cbnz	r0, 800b0de <__mdiff+0x2e>
 800b0d2:	f240 2132 	movw	r1, #562	; 0x232
 800b0d6:	4b3a      	ldr	r3, [pc, #232]	; (800b1c0 <__mdiff+0x110>)
 800b0d8:	483a      	ldr	r0, [pc, #232]	; (800b1c4 <__mdiff+0x114>)
 800b0da:	f000 fc41 	bl	800b960 <__assert_func>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ea:	bfa4      	itt	ge
 800b0ec:	4623      	movge	r3, r4
 800b0ee:	462c      	movge	r4, r5
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	6861      	ldr	r1, [r4, #4]
 800b0f4:	bfa6      	itte	ge
 800b0f6:	461d      	movge	r5, r3
 800b0f8:	2600      	movge	r6, #0
 800b0fa:	2601      	movlt	r6, #1
 800b0fc:	f7ff fcf4 	bl	800aae8 <_Balloc>
 800b100:	4602      	mov	r2, r0
 800b102:	b918      	cbnz	r0, 800b10c <__mdiff+0x5c>
 800b104:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b108:	4b2d      	ldr	r3, [pc, #180]	; (800b1c0 <__mdiff+0x110>)
 800b10a:	e7e5      	b.n	800b0d8 <__mdiff+0x28>
 800b10c:	f102 0814 	add.w	r8, r2, #20
 800b110:	46c2      	mov	sl, r8
 800b112:	f04f 0c00 	mov.w	ip, #0
 800b116:	6927      	ldr	r7, [r4, #16]
 800b118:	60c6      	str	r6, [r0, #12]
 800b11a:	692e      	ldr	r6, [r5, #16]
 800b11c:	f104 0014 	add.w	r0, r4, #20
 800b120:	f105 0914 	add.w	r9, r5, #20
 800b124:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b128:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b12c:	3410      	adds	r4, #16
 800b12e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b132:	f859 3b04 	ldr.w	r3, [r9], #4
 800b136:	fa1f f18b 	uxth.w	r1, fp
 800b13a:	448c      	add	ip, r1
 800b13c:	b299      	uxth	r1, r3
 800b13e:	0c1b      	lsrs	r3, r3, #16
 800b140:	ebac 0101 	sub.w	r1, ip, r1
 800b144:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b148:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b14c:	b289      	uxth	r1, r1
 800b14e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b152:	454e      	cmp	r6, r9
 800b154:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b158:	f84a 3b04 	str.w	r3, [sl], #4
 800b15c:	d8e7      	bhi.n	800b12e <__mdiff+0x7e>
 800b15e:	1b73      	subs	r3, r6, r5
 800b160:	3b15      	subs	r3, #21
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	3515      	adds	r5, #21
 800b168:	3304      	adds	r3, #4
 800b16a:	42ae      	cmp	r6, r5
 800b16c:	bf38      	it	cc
 800b16e:	2304      	movcc	r3, #4
 800b170:	4418      	add	r0, r3
 800b172:	4443      	add	r3, r8
 800b174:	461e      	mov	r6, r3
 800b176:	4605      	mov	r5, r0
 800b178:	4575      	cmp	r5, lr
 800b17a:	d30e      	bcc.n	800b19a <__mdiff+0xea>
 800b17c:	f10e 0103 	add.w	r1, lr, #3
 800b180:	1a09      	subs	r1, r1, r0
 800b182:	f021 0103 	bic.w	r1, r1, #3
 800b186:	3803      	subs	r0, #3
 800b188:	4586      	cmp	lr, r0
 800b18a:	bf38      	it	cc
 800b18c:	2100      	movcc	r1, #0
 800b18e:	4419      	add	r1, r3
 800b190:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b194:	b18b      	cbz	r3, 800b1ba <__mdiff+0x10a>
 800b196:	6117      	str	r7, [r2, #16]
 800b198:	e7a4      	b.n	800b0e4 <__mdiff+0x34>
 800b19a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b19e:	fa1f f188 	uxth.w	r1, r8
 800b1a2:	4461      	add	r1, ip
 800b1a4:	140c      	asrs	r4, r1, #16
 800b1a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1aa:	b289      	uxth	r1, r1
 800b1ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b1b4:	f846 1b04 	str.w	r1, [r6], #4
 800b1b8:	e7de      	b.n	800b178 <__mdiff+0xc8>
 800b1ba:	3f01      	subs	r7, #1
 800b1bc:	e7e8      	b.n	800b190 <__mdiff+0xe0>
 800b1be:	bf00      	nop
 800b1c0:	0800cb28 	.word	0x0800cb28
 800b1c4:	0800cbb4 	.word	0x0800cbb4

0800b1c8 <__ulp>:
 800b1c8:	4b11      	ldr	r3, [pc, #68]	; (800b210 <__ulp+0x48>)
 800b1ca:	400b      	ands	r3, r1
 800b1cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dd02      	ble.n	800b1da <__ulp+0x12>
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4770      	bx	lr
 800b1da:	425b      	negs	r3, r3
 800b1dc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b1e0:	f04f 0000 	mov.w	r0, #0
 800b1e4:	f04f 0100 	mov.w	r1, #0
 800b1e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1ec:	da04      	bge.n	800b1f8 <__ulp+0x30>
 800b1ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1f2:	fa43 f102 	asr.w	r1, r3, r2
 800b1f6:	4770      	bx	lr
 800b1f8:	f1a2 0314 	sub.w	r3, r2, #20
 800b1fc:	2b1e      	cmp	r3, #30
 800b1fe:	bfd6      	itet	le
 800b200:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b204:	2301      	movgt	r3, #1
 800b206:	fa22 f303 	lsrle.w	r3, r2, r3
 800b20a:	4618      	mov	r0, r3
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	7ff00000 	.word	0x7ff00000

0800b214 <__b2d>:
 800b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b218:	6907      	ldr	r7, [r0, #16]
 800b21a:	f100 0914 	add.w	r9, r0, #20
 800b21e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b222:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b226:	f1a7 0804 	sub.w	r8, r7, #4
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7ff fd4e 	bl	800accc <__hi0bits>
 800b230:	f1c0 0320 	rsb	r3, r0, #32
 800b234:	280a      	cmp	r0, #10
 800b236:	600b      	str	r3, [r1, #0]
 800b238:	491f      	ldr	r1, [pc, #124]	; (800b2b8 <__b2d+0xa4>)
 800b23a:	dc17      	bgt.n	800b26c <__b2d+0x58>
 800b23c:	45c1      	cmp	r9, r8
 800b23e:	bf28      	it	cs
 800b240:	2200      	movcs	r2, #0
 800b242:	f1c0 0c0b 	rsb	ip, r0, #11
 800b246:	fa26 f30c 	lsr.w	r3, r6, ip
 800b24a:	bf38      	it	cc
 800b24c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b250:	ea43 0501 	orr.w	r5, r3, r1
 800b254:	f100 0315 	add.w	r3, r0, #21
 800b258:	fa06 f303 	lsl.w	r3, r6, r3
 800b25c:	fa22 f20c 	lsr.w	r2, r2, ip
 800b260:	ea43 0402 	orr.w	r4, r3, r2
 800b264:	4620      	mov	r0, r4
 800b266:	4629      	mov	r1, r5
 800b268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26c:	45c1      	cmp	r9, r8
 800b26e:	bf2e      	itee	cs
 800b270:	2200      	movcs	r2, #0
 800b272:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b276:	f1a7 0808 	subcc.w	r8, r7, #8
 800b27a:	f1b0 030b 	subs.w	r3, r0, #11
 800b27e:	d016      	beq.n	800b2ae <__b2d+0x9a>
 800b280:	f1c3 0720 	rsb	r7, r3, #32
 800b284:	fa22 f107 	lsr.w	r1, r2, r7
 800b288:	45c8      	cmp	r8, r9
 800b28a:	fa06 f603 	lsl.w	r6, r6, r3
 800b28e:	ea46 0601 	orr.w	r6, r6, r1
 800b292:	bf94      	ite	ls
 800b294:	2100      	movls	r1, #0
 800b296:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b29a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b29e:	fa02 f003 	lsl.w	r0, r2, r3
 800b2a2:	40f9      	lsrs	r1, r7
 800b2a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2a8:	ea40 0401 	orr.w	r4, r0, r1
 800b2ac:	e7da      	b.n	800b264 <__b2d+0x50>
 800b2ae:	4614      	mov	r4, r2
 800b2b0:	ea46 0501 	orr.w	r5, r6, r1
 800b2b4:	e7d6      	b.n	800b264 <__b2d+0x50>
 800b2b6:	bf00      	nop
 800b2b8:	3ff00000 	.word	0x3ff00000

0800b2bc <__d2b>:
 800b2bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b2c6:	4690      	mov	r8, r2
 800b2c8:	461d      	mov	r5, r3
 800b2ca:	f7ff fc0d 	bl	800aae8 <_Balloc>
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	b930      	cbnz	r0, 800b2e0 <__d2b+0x24>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	f240 310a 	movw	r1, #778	; 0x30a
 800b2d8:	4b24      	ldr	r3, [pc, #144]	; (800b36c <__d2b+0xb0>)
 800b2da:	4825      	ldr	r0, [pc, #148]	; (800b370 <__d2b+0xb4>)
 800b2dc:	f000 fb40 	bl	800b960 <__assert_func>
 800b2e0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b2e4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b2e8:	bb2d      	cbnz	r5, 800b336 <__d2b+0x7a>
 800b2ea:	9301      	str	r3, [sp, #4]
 800b2ec:	f1b8 0300 	subs.w	r3, r8, #0
 800b2f0:	d026      	beq.n	800b340 <__d2b+0x84>
 800b2f2:	4668      	mov	r0, sp
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	f7ff fd09 	bl	800ad0c <__lo0bits>
 800b2fa:	9900      	ldr	r1, [sp, #0]
 800b2fc:	b1f0      	cbz	r0, 800b33c <__d2b+0x80>
 800b2fe:	9a01      	ldr	r2, [sp, #4]
 800b300:	f1c0 0320 	rsb	r3, r0, #32
 800b304:	fa02 f303 	lsl.w	r3, r2, r3
 800b308:	430b      	orrs	r3, r1
 800b30a:	40c2      	lsrs	r2, r0
 800b30c:	6163      	str	r3, [r4, #20]
 800b30e:	9201      	str	r2, [sp, #4]
 800b310:	9b01      	ldr	r3, [sp, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	bf14      	ite	ne
 800b316:	2102      	movne	r1, #2
 800b318:	2101      	moveq	r1, #1
 800b31a:	61a3      	str	r3, [r4, #24]
 800b31c:	6121      	str	r1, [r4, #16]
 800b31e:	b1c5      	cbz	r5, 800b352 <__d2b+0x96>
 800b320:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b324:	4405      	add	r5, r0
 800b326:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b32a:	603d      	str	r5, [r7, #0]
 800b32c:	6030      	str	r0, [r6, #0]
 800b32e:	4620      	mov	r0, r4
 800b330:	b002      	add	sp, #8
 800b332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b33a:	e7d6      	b.n	800b2ea <__d2b+0x2e>
 800b33c:	6161      	str	r1, [r4, #20]
 800b33e:	e7e7      	b.n	800b310 <__d2b+0x54>
 800b340:	a801      	add	r0, sp, #4
 800b342:	f7ff fce3 	bl	800ad0c <__lo0bits>
 800b346:	2101      	movs	r1, #1
 800b348:	9b01      	ldr	r3, [sp, #4]
 800b34a:	6121      	str	r1, [r4, #16]
 800b34c:	6163      	str	r3, [r4, #20]
 800b34e:	3020      	adds	r0, #32
 800b350:	e7e5      	b.n	800b31e <__d2b+0x62>
 800b352:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b356:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b35a:	6038      	str	r0, [r7, #0]
 800b35c:	6918      	ldr	r0, [r3, #16]
 800b35e:	f7ff fcb5 	bl	800accc <__hi0bits>
 800b362:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b366:	6031      	str	r1, [r6, #0]
 800b368:	e7e1      	b.n	800b32e <__d2b+0x72>
 800b36a:	bf00      	nop
 800b36c:	0800cb28 	.word	0x0800cb28
 800b370:	0800cbb4 	.word	0x0800cbb4

0800b374 <__ratio>:
 800b374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	4688      	mov	r8, r1
 800b37a:	4669      	mov	r1, sp
 800b37c:	4681      	mov	r9, r0
 800b37e:	f7ff ff49 	bl	800b214 <__b2d>
 800b382:	460f      	mov	r7, r1
 800b384:	4604      	mov	r4, r0
 800b386:	460d      	mov	r5, r1
 800b388:	4640      	mov	r0, r8
 800b38a:	a901      	add	r1, sp, #4
 800b38c:	f7ff ff42 	bl	800b214 <__b2d>
 800b390:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b394:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b398:	468b      	mov	fp, r1
 800b39a:	eba3 0c02 	sub.w	ip, r3, r2
 800b39e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3a2:	1a9b      	subs	r3, r3, r2
 800b3a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bfd5      	itete	le
 800b3ac:	460a      	movle	r2, r1
 800b3ae:	462a      	movgt	r2, r5
 800b3b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3b4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3b8:	bfd8      	it	le
 800b3ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3be:	465b      	mov	r3, fp
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f7f5 f9b1 	bl	800072c <__aeabi_ddiv>
 800b3ca:	b003      	add	sp, #12
 800b3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3d0 <__copybits>:
 800b3d0:	3901      	subs	r1, #1
 800b3d2:	b570      	push	{r4, r5, r6, lr}
 800b3d4:	1149      	asrs	r1, r1, #5
 800b3d6:	6914      	ldr	r4, [r2, #16]
 800b3d8:	3101      	adds	r1, #1
 800b3da:	f102 0314 	add.w	r3, r2, #20
 800b3de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3e6:	1f05      	subs	r5, r0, #4
 800b3e8:	42a3      	cmp	r3, r4
 800b3ea:	d30c      	bcc.n	800b406 <__copybits+0x36>
 800b3ec:	1aa3      	subs	r3, r4, r2
 800b3ee:	3b11      	subs	r3, #17
 800b3f0:	f023 0303 	bic.w	r3, r3, #3
 800b3f4:	3211      	adds	r2, #17
 800b3f6:	42a2      	cmp	r2, r4
 800b3f8:	bf88      	it	hi
 800b3fa:	2300      	movhi	r3, #0
 800b3fc:	4418      	add	r0, r3
 800b3fe:	2300      	movs	r3, #0
 800b400:	4288      	cmp	r0, r1
 800b402:	d305      	bcc.n	800b410 <__copybits+0x40>
 800b404:	bd70      	pop	{r4, r5, r6, pc}
 800b406:	f853 6b04 	ldr.w	r6, [r3], #4
 800b40a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b40e:	e7eb      	b.n	800b3e8 <__copybits+0x18>
 800b410:	f840 3b04 	str.w	r3, [r0], #4
 800b414:	e7f4      	b.n	800b400 <__copybits+0x30>

0800b416 <__any_on>:
 800b416:	f100 0214 	add.w	r2, r0, #20
 800b41a:	6900      	ldr	r0, [r0, #16]
 800b41c:	114b      	asrs	r3, r1, #5
 800b41e:	4298      	cmp	r0, r3
 800b420:	b510      	push	{r4, lr}
 800b422:	db11      	blt.n	800b448 <__any_on+0x32>
 800b424:	dd0a      	ble.n	800b43c <__any_on+0x26>
 800b426:	f011 011f 	ands.w	r1, r1, #31
 800b42a:	d007      	beq.n	800b43c <__any_on+0x26>
 800b42c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b430:	fa24 f001 	lsr.w	r0, r4, r1
 800b434:	fa00 f101 	lsl.w	r1, r0, r1
 800b438:	428c      	cmp	r4, r1
 800b43a:	d10b      	bne.n	800b454 <__any_on+0x3e>
 800b43c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b440:	4293      	cmp	r3, r2
 800b442:	d803      	bhi.n	800b44c <__any_on+0x36>
 800b444:	2000      	movs	r0, #0
 800b446:	bd10      	pop	{r4, pc}
 800b448:	4603      	mov	r3, r0
 800b44a:	e7f7      	b.n	800b43c <__any_on+0x26>
 800b44c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b450:	2900      	cmp	r1, #0
 800b452:	d0f5      	beq.n	800b440 <__any_on+0x2a>
 800b454:	2001      	movs	r0, #1
 800b456:	e7f6      	b.n	800b446 <__any_on+0x30>

0800b458 <_calloc_r>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	fba1 5402 	umull	r5, r4, r1, r2
 800b45e:	b934      	cbnz	r4, 800b46e <_calloc_r+0x16>
 800b460:	4629      	mov	r1, r5
 800b462:	f000 f875 	bl	800b550 <_malloc_r>
 800b466:	4606      	mov	r6, r0
 800b468:	b928      	cbnz	r0, 800b476 <_calloc_r+0x1e>
 800b46a:	4630      	mov	r0, r6
 800b46c:	bd70      	pop	{r4, r5, r6, pc}
 800b46e:	220c      	movs	r2, #12
 800b470:	2600      	movs	r6, #0
 800b472:	6002      	str	r2, [r0, #0]
 800b474:	e7f9      	b.n	800b46a <_calloc_r+0x12>
 800b476:	462a      	mov	r2, r5
 800b478:	4621      	mov	r1, r4
 800b47a:	f7fc fc01 	bl	8007c80 <memset>
 800b47e:	e7f4      	b.n	800b46a <_calloc_r+0x12>

0800b480 <_free_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4605      	mov	r5, r0
 800b484:	2900      	cmp	r1, #0
 800b486:	d040      	beq.n	800b50a <_free_r+0x8a>
 800b488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48c:	1f0c      	subs	r4, r1, #4
 800b48e:	2b00      	cmp	r3, #0
 800b490:	bfb8      	it	lt
 800b492:	18e4      	addlt	r4, r4, r3
 800b494:	f000 faae 	bl	800b9f4 <__malloc_lock>
 800b498:	4a1c      	ldr	r2, [pc, #112]	; (800b50c <_free_r+0x8c>)
 800b49a:	6813      	ldr	r3, [r2, #0]
 800b49c:	b933      	cbnz	r3, 800b4ac <_free_r+0x2c>
 800b49e:	6063      	str	r3, [r4, #4]
 800b4a0:	6014      	str	r4, [r2, #0]
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4a8:	f000 baaa 	b.w	800ba00 <__malloc_unlock>
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d908      	bls.n	800b4c2 <_free_r+0x42>
 800b4b0:	6820      	ldr	r0, [r4, #0]
 800b4b2:	1821      	adds	r1, r4, r0
 800b4b4:	428b      	cmp	r3, r1
 800b4b6:	bf01      	itttt	eq
 800b4b8:	6819      	ldreq	r1, [r3, #0]
 800b4ba:	685b      	ldreq	r3, [r3, #4]
 800b4bc:	1809      	addeq	r1, r1, r0
 800b4be:	6021      	streq	r1, [r4, #0]
 800b4c0:	e7ed      	b.n	800b49e <_free_r+0x1e>
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	b10b      	cbz	r3, 800b4cc <_free_r+0x4c>
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	d9fa      	bls.n	800b4c2 <_free_r+0x42>
 800b4cc:	6811      	ldr	r1, [r2, #0]
 800b4ce:	1850      	adds	r0, r2, r1
 800b4d0:	42a0      	cmp	r0, r4
 800b4d2:	d10b      	bne.n	800b4ec <_free_r+0x6c>
 800b4d4:	6820      	ldr	r0, [r4, #0]
 800b4d6:	4401      	add	r1, r0
 800b4d8:	1850      	adds	r0, r2, r1
 800b4da:	4283      	cmp	r3, r0
 800b4dc:	6011      	str	r1, [r2, #0]
 800b4de:	d1e0      	bne.n	800b4a2 <_free_r+0x22>
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	4401      	add	r1, r0
 800b4e6:	6011      	str	r1, [r2, #0]
 800b4e8:	6053      	str	r3, [r2, #4]
 800b4ea:	e7da      	b.n	800b4a2 <_free_r+0x22>
 800b4ec:	d902      	bls.n	800b4f4 <_free_r+0x74>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	e7d6      	b.n	800b4a2 <_free_r+0x22>
 800b4f4:	6820      	ldr	r0, [r4, #0]
 800b4f6:	1821      	adds	r1, r4, r0
 800b4f8:	428b      	cmp	r3, r1
 800b4fa:	bf01      	itttt	eq
 800b4fc:	6819      	ldreq	r1, [r3, #0]
 800b4fe:	685b      	ldreq	r3, [r3, #4]
 800b500:	1809      	addeq	r1, r1, r0
 800b502:	6021      	streq	r1, [r4, #0]
 800b504:	6063      	str	r3, [r4, #4]
 800b506:	6054      	str	r4, [r2, #4]
 800b508:	e7cb      	b.n	800b4a2 <_free_r+0x22>
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	20000580 	.word	0x20000580

0800b510 <sbrk_aligned>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	4e0e      	ldr	r6, [pc, #56]	; (800b54c <sbrk_aligned+0x3c>)
 800b514:	460c      	mov	r4, r1
 800b516:	6831      	ldr	r1, [r6, #0]
 800b518:	4605      	mov	r5, r0
 800b51a:	b911      	cbnz	r1, 800b522 <sbrk_aligned+0x12>
 800b51c:	f000 f9ee 	bl	800b8fc <_sbrk_r>
 800b520:	6030      	str	r0, [r6, #0]
 800b522:	4621      	mov	r1, r4
 800b524:	4628      	mov	r0, r5
 800b526:	f000 f9e9 	bl	800b8fc <_sbrk_r>
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	d00a      	beq.n	800b544 <sbrk_aligned+0x34>
 800b52e:	1cc4      	adds	r4, r0, #3
 800b530:	f024 0403 	bic.w	r4, r4, #3
 800b534:	42a0      	cmp	r0, r4
 800b536:	d007      	beq.n	800b548 <sbrk_aligned+0x38>
 800b538:	1a21      	subs	r1, r4, r0
 800b53a:	4628      	mov	r0, r5
 800b53c:	f000 f9de 	bl	800b8fc <_sbrk_r>
 800b540:	3001      	adds	r0, #1
 800b542:	d101      	bne.n	800b548 <sbrk_aligned+0x38>
 800b544:	f04f 34ff 	mov.w	r4, #4294967295
 800b548:	4620      	mov	r0, r4
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	20000584 	.word	0x20000584

0800b550 <_malloc_r>:
 800b550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b554:	1ccd      	adds	r5, r1, #3
 800b556:	f025 0503 	bic.w	r5, r5, #3
 800b55a:	3508      	adds	r5, #8
 800b55c:	2d0c      	cmp	r5, #12
 800b55e:	bf38      	it	cc
 800b560:	250c      	movcc	r5, #12
 800b562:	2d00      	cmp	r5, #0
 800b564:	4607      	mov	r7, r0
 800b566:	db01      	blt.n	800b56c <_malloc_r+0x1c>
 800b568:	42a9      	cmp	r1, r5
 800b56a:	d905      	bls.n	800b578 <_malloc_r+0x28>
 800b56c:	230c      	movs	r3, #12
 800b56e:	2600      	movs	r6, #0
 800b570:	603b      	str	r3, [r7, #0]
 800b572:	4630      	mov	r0, r6
 800b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b578:	4e2e      	ldr	r6, [pc, #184]	; (800b634 <_malloc_r+0xe4>)
 800b57a:	f000 fa3b 	bl	800b9f4 <__malloc_lock>
 800b57e:	6833      	ldr	r3, [r6, #0]
 800b580:	461c      	mov	r4, r3
 800b582:	bb34      	cbnz	r4, 800b5d2 <_malloc_r+0x82>
 800b584:	4629      	mov	r1, r5
 800b586:	4638      	mov	r0, r7
 800b588:	f7ff ffc2 	bl	800b510 <sbrk_aligned>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	4604      	mov	r4, r0
 800b590:	d14d      	bne.n	800b62e <_malloc_r+0xde>
 800b592:	6834      	ldr	r4, [r6, #0]
 800b594:	4626      	mov	r6, r4
 800b596:	2e00      	cmp	r6, #0
 800b598:	d140      	bne.n	800b61c <_malloc_r+0xcc>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	4631      	mov	r1, r6
 800b59e:	4638      	mov	r0, r7
 800b5a0:	eb04 0803 	add.w	r8, r4, r3
 800b5a4:	f000 f9aa 	bl	800b8fc <_sbrk_r>
 800b5a8:	4580      	cmp	r8, r0
 800b5aa:	d13a      	bne.n	800b622 <_malloc_r+0xd2>
 800b5ac:	6821      	ldr	r1, [r4, #0]
 800b5ae:	3503      	adds	r5, #3
 800b5b0:	1a6d      	subs	r5, r5, r1
 800b5b2:	f025 0503 	bic.w	r5, r5, #3
 800b5b6:	3508      	adds	r5, #8
 800b5b8:	2d0c      	cmp	r5, #12
 800b5ba:	bf38      	it	cc
 800b5bc:	250c      	movcc	r5, #12
 800b5be:	4638      	mov	r0, r7
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7ff ffa5 	bl	800b510 <sbrk_aligned>
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	d02b      	beq.n	800b622 <_malloc_r+0xd2>
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	442b      	add	r3, r5
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	e00e      	b.n	800b5f0 <_malloc_r+0xa0>
 800b5d2:	6822      	ldr	r2, [r4, #0]
 800b5d4:	1b52      	subs	r2, r2, r5
 800b5d6:	d41e      	bmi.n	800b616 <_malloc_r+0xc6>
 800b5d8:	2a0b      	cmp	r2, #11
 800b5da:	d916      	bls.n	800b60a <_malloc_r+0xba>
 800b5dc:	1961      	adds	r1, r4, r5
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	6025      	str	r5, [r4, #0]
 800b5e2:	bf18      	it	ne
 800b5e4:	6059      	strne	r1, [r3, #4]
 800b5e6:	6863      	ldr	r3, [r4, #4]
 800b5e8:	bf08      	it	eq
 800b5ea:	6031      	streq	r1, [r6, #0]
 800b5ec:	5162      	str	r2, [r4, r5]
 800b5ee:	604b      	str	r3, [r1, #4]
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f104 060b 	add.w	r6, r4, #11
 800b5f6:	f000 fa03 	bl	800ba00 <__malloc_unlock>
 800b5fa:	f026 0607 	bic.w	r6, r6, #7
 800b5fe:	1d23      	adds	r3, r4, #4
 800b600:	1af2      	subs	r2, r6, r3
 800b602:	d0b6      	beq.n	800b572 <_malloc_r+0x22>
 800b604:	1b9b      	subs	r3, r3, r6
 800b606:	50a3      	str	r3, [r4, r2]
 800b608:	e7b3      	b.n	800b572 <_malloc_r+0x22>
 800b60a:	6862      	ldr	r2, [r4, #4]
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	bf0c      	ite	eq
 800b610:	6032      	streq	r2, [r6, #0]
 800b612:	605a      	strne	r2, [r3, #4]
 800b614:	e7ec      	b.n	800b5f0 <_malloc_r+0xa0>
 800b616:	4623      	mov	r3, r4
 800b618:	6864      	ldr	r4, [r4, #4]
 800b61a:	e7b2      	b.n	800b582 <_malloc_r+0x32>
 800b61c:	4634      	mov	r4, r6
 800b61e:	6876      	ldr	r6, [r6, #4]
 800b620:	e7b9      	b.n	800b596 <_malloc_r+0x46>
 800b622:	230c      	movs	r3, #12
 800b624:	4638      	mov	r0, r7
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	f000 f9ea 	bl	800ba00 <__malloc_unlock>
 800b62c:	e7a1      	b.n	800b572 <_malloc_r+0x22>
 800b62e:	6025      	str	r5, [r4, #0]
 800b630:	e7de      	b.n	800b5f0 <_malloc_r+0xa0>
 800b632:	bf00      	nop
 800b634:	20000580 	.word	0x20000580

0800b638 <__ssputs_r>:
 800b638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b63c:	688e      	ldr	r6, [r1, #8]
 800b63e:	4682      	mov	sl, r0
 800b640:	429e      	cmp	r6, r3
 800b642:	460c      	mov	r4, r1
 800b644:	4690      	mov	r8, r2
 800b646:	461f      	mov	r7, r3
 800b648:	d838      	bhi.n	800b6bc <__ssputs_r+0x84>
 800b64a:	898a      	ldrh	r2, [r1, #12]
 800b64c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b650:	d032      	beq.n	800b6b8 <__ssputs_r+0x80>
 800b652:	6825      	ldr	r5, [r4, #0]
 800b654:	6909      	ldr	r1, [r1, #16]
 800b656:	3301      	adds	r3, #1
 800b658:	eba5 0901 	sub.w	r9, r5, r1
 800b65c:	6965      	ldr	r5, [r4, #20]
 800b65e:	444b      	add	r3, r9
 800b660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b668:	106d      	asrs	r5, r5, #1
 800b66a:	429d      	cmp	r5, r3
 800b66c:	bf38      	it	cc
 800b66e:	461d      	movcc	r5, r3
 800b670:	0553      	lsls	r3, r2, #21
 800b672:	d531      	bpl.n	800b6d8 <__ssputs_r+0xa0>
 800b674:	4629      	mov	r1, r5
 800b676:	f7ff ff6b 	bl	800b550 <_malloc_r>
 800b67a:	4606      	mov	r6, r0
 800b67c:	b950      	cbnz	r0, 800b694 <__ssputs_r+0x5c>
 800b67e:	230c      	movs	r3, #12
 800b680:	f04f 30ff 	mov.w	r0, #4294967295
 800b684:	f8ca 3000 	str.w	r3, [sl]
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b694:	464a      	mov	r2, r9
 800b696:	6921      	ldr	r1, [r4, #16]
 800b698:	f7fc fae4 	bl	8007c64 <memcpy>
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a6:	81a3      	strh	r3, [r4, #12]
 800b6a8:	6126      	str	r6, [r4, #16]
 800b6aa:	444e      	add	r6, r9
 800b6ac:	6026      	str	r6, [r4, #0]
 800b6ae:	463e      	mov	r6, r7
 800b6b0:	6165      	str	r5, [r4, #20]
 800b6b2:	eba5 0509 	sub.w	r5, r5, r9
 800b6b6:	60a5      	str	r5, [r4, #8]
 800b6b8:	42be      	cmp	r6, r7
 800b6ba:	d900      	bls.n	800b6be <__ssputs_r+0x86>
 800b6bc:	463e      	mov	r6, r7
 800b6be:	4632      	mov	r2, r6
 800b6c0:	4641      	mov	r1, r8
 800b6c2:	6820      	ldr	r0, [r4, #0]
 800b6c4:	f000 f97c 	bl	800b9c0 <memmove>
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	1b9b      	subs	r3, r3, r6
 800b6ce:	60a3      	str	r3, [r4, #8]
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	4433      	add	r3, r6
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	e7db      	b.n	800b690 <__ssputs_r+0x58>
 800b6d8:	462a      	mov	r2, r5
 800b6da:	f000 f997 	bl	800ba0c <_realloc_r>
 800b6de:	4606      	mov	r6, r0
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d1e1      	bne.n	800b6a8 <__ssputs_r+0x70>
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	6921      	ldr	r1, [r4, #16]
 800b6e8:	f7ff feca 	bl	800b480 <_free_r>
 800b6ec:	e7c7      	b.n	800b67e <__ssputs_r+0x46>
	...

0800b6f0 <_svfiprintf_r>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	4698      	mov	r8, r3
 800b6f6:	898b      	ldrh	r3, [r1, #12]
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	061b      	lsls	r3, r3, #24
 800b6fc:	460d      	mov	r5, r1
 800b6fe:	4614      	mov	r4, r2
 800b700:	b09d      	sub	sp, #116	; 0x74
 800b702:	d50e      	bpl.n	800b722 <_svfiprintf_r+0x32>
 800b704:	690b      	ldr	r3, [r1, #16]
 800b706:	b963      	cbnz	r3, 800b722 <_svfiprintf_r+0x32>
 800b708:	2140      	movs	r1, #64	; 0x40
 800b70a:	f7ff ff21 	bl	800b550 <_malloc_r>
 800b70e:	6028      	str	r0, [r5, #0]
 800b710:	6128      	str	r0, [r5, #16]
 800b712:	b920      	cbnz	r0, 800b71e <_svfiprintf_r+0x2e>
 800b714:	230c      	movs	r3, #12
 800b716:	603b      	str	r3, [r7, #0]
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	e0d1      	b.n	800b8c2 <_svfiprintf_r+0x1d2>
 800b71e:	2340      	movs	r3, #64	; 0x40
 800b720:	616b      	str	r3, [r5, #20]
 800b722:	2300      	movs	r3, #0
 800b724:	9309      	str	r3, [sp, #36]	; 0x24
 800b726:	2320      	movs	r3, #32
 800b728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b72c:	2330      	movs	r3, #48	; 0x30
 800b72e:	f04f 0901 	mov.w	r9, #1
 800b732:	f8cd 800c 	str.w	r8, [sp, #12]
 800b736:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b8dc <_svfiprintf_r+0x1ec>
 800b73a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b73e:	4623      	mov	r3, r4
 800b740:	469a      	mov	sl, r3
 800b742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b746:	b10a      	cbz	r2, 800b74c <_svfiprintf_r+0x5c>
 800b748:	2a25      	cmp	r2, #37	; 0x25
 800b74a:	d1f9      	bne.n	800b740 <_svfiprintf_r+0x50>
 800b74c:	ebba 0b04 	subs.w	fp, sl, r4
 800b750:	d00b      	beq.n	800b76a <_svfiprintf_r+0x7a>
 800b752:	465b      	mov	r3, fp
 800b754:	4622      	mov	r2, r4
 800b756:	4629      	mov	r1, r5
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff ff6d 	bl	800b638 <__ssputs_r>
 800b75e:	3001      	adds	r0, #1
 800b760:	f000 80aa 	beq.w	800b8b8 <_svfiprintf_r+0x1c8>
 800b764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b766:	445a      	add	r2, fp
 800b768:	9209      	str	r2, [sp, #36]	; 0x24
 800b76a:	f89a 3000 	ldrb.w	r3, [sl]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 80a2 	beq.w	800b8b8 <_svfiprintf_r+0x1c8>
 800b774:	2300      	movs	r3, #0
 800b776:	f04f 32ff 	mov.w	r2, #4294967295
 800b77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b77e:	f10a 0a01 	add.w	sl, sl, #1
 800b782:	9304      	str	r3, [sp, #16]
 800b784:	9307      	str	r3, [sp, #28]
 800b786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b78a:	931a      	str	r3, [sp, #104]	; 0x68
 800b78c:	4654      	mov	r4, sl
 800b78e:	2205      	movs	r2, #5
 800b790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b794:	4851      	ldr	r0, [pc, #324]	; (800b8dc <_svfiprintf_r+0x1ec>)
 800b796:	f7ff f999 	bl	800aacc <memchr>
 800b79a:	9a04      	ldr	r2, [sp, #16]
 800b79c:	b9d8      	cbnz	r0, 800b7d6 <_svfiprintf_r+0xe6>
 800b79e:	06d0      	lsls	r0, r2, #27
 800b7a0:	bf44      	itt	mi
 800b7a2:	2320      	movmi	r3, #32
 800b7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a8:	0711      	lsls	r1, r2, #28
 800b7aa:	bf44      	itt	mi
 800b7ac:	232b      	movmi	r3, #43	; 0x2b
 800b7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b8:	d015      	beq.n	800b7e6 <_svfiprintf_r+0xf6>
 800b7ba:	4654      	mov	r4, sl
 800b7bc:	2000      	movs	r0, #0
 800b7be:	f04f 0c0a 	mov.w	ip, #10
 800b7c2:	9a07      	ldr	r2, [sp, #28]
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ca:	3b30      	subs	r3, #48	; 0x30
 800b7cc:	2b09      	cmp	r3, #9
 800b7ce:	d94e      	bls.n	800b86e <_svfiprintf_r+0x17e>
 800b7d0:	b1b0      	cbz	r0, 800b800 <_svfiprintf_r+0x110>
 800b7d2:	9207      	str	r2, [sp, #28]
 800b7d4:	e014      	b.n	800b800 <_svfiprintf_r+0x110>
 800b7d6:	eba0 0308 	sub.w	r3, r0, r8
 800b7da:	fa09 f303 	lsl.w	r3, r9, r3
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	46a2      	mov	sl, r4
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	e7d2      	b.n	800b78c <_svfiprintf_r+0x9c>
 800b7e6:	9b03      	ldr	r3, [sp, #12]
 800b7e8:	1d19      	adds	r1, r3, #4
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	9103      	str	r1, [sp, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	bfbb      	ittet	lt
 800b7f2:	425b      	neglt	r3, r3
 800b7f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f8:	9307      	strge	r3, [sp, #28]
 800b7fa:	9307      	strlt	r3, [sp, #28]
 800b7fc:	bfb8      	it	lt
 800b7fe:	9204      	strlt	r2, [sp, #16]
 800b800:	7823      	ldrb	r3, [r4, #0]
 800b802:	2b2e      	cmp	r3, #46	; 0x2e
 800b804:	d10c      	bne.n	800b820 <_svfiprintf_r+0x130>
 800b806:	7863      	ldrb	r3, [r4, #1]
 800b808:	2b2a      	cmp	r3, #42	; 0x2a
 800b80a:	d135      	bne.n	800b878 <_svfiprintf_r+0x188>
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	3402      	adds	r4, #2
 800b810:	1d1a      	adds	r2, r3, #4
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	9203      	str	r2, [sp, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	bfb8      	it	lt
 800b81a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b81e:	9305      	str	r3, [sp, #20]
 800b820:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b8e0 <_svfiprintf_r+0x1f0>
 800b824:	2203      	movs	r2, #3
 800b826:	4650      	mov	r0, sl
 800b828:	7821      	ldrb	r1, [r4, #0]
 800b82a:	f7ff f94f 	bl	800aacc <memchr>
 800b82e:	b140      	cbz	r0, 800b842 <_svfiprintf_r+0x152>
 800b830:	2340      	movs	r3, #64	; 0x40
 800b832:	eba0 000a 	sub.w	r0, r0, sl
 800b836:	fa03 f000 	lsl.w	r0, r3, r0
 800b83a:	9b04      	ldr	r3, [sp, #16]
 800b83c:	3401      	adds	r4, #1
 800b83e:	4303      	orrs	r3, r0
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b846:	2206      	movs	r2, #6
 800b848:	4826      	ldr	r0, [pc, #152]	; (800b8e4 <_svfiprintf_r+0x1f4>)
 800b84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b84e:	f7ff f93d 	bl	800aacc <memchr>
 800b852:	2800      	cmp	r0, #0
 800b854:	d038      	beq.n	800b8c8 <_svfiprintf_r+0x1d8>
 800b856:	4b24      	ldr	r3, [pc, #144]	; (800b8e8 <_svfiprintf_r+0x1f8>)
 800b858:	bb1b      	cbnz	r3, 800b8a2 <_svfiprintf_r+0x1b2>
 800b85a:	9b03      	ldr	r3, [sp, #12]
 800b85c:	3307      	adds	r3, #7
 800b85e:	f023 0307 	bic.w	r3, r3, #7
 800b862:	3308      	adds	r3, #8
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b868:	4433      	add	r3, r6
 800b86a:	9309      	str	r3, [sp, #36]	; 0x24
 800b86c:	e767      	b.n	800b73e <_svfiprintf_r+0x4e>
 800b86e:	460c      	mov	r4, r1
 800b870:	2001      	movs	r0, #1
 800b872:	fb0c 3202 	mla	r2, ip, r2, r3
 800b876:	e7a5      	b.n	800b7c4 <_svfiprintf_r+0xd4>
 800b878:	2300      	movs	r3, #0
 800b87a:	f04f 0c0a 	mov.w	ip, #10
 800b87e:	4619      	mov	r1, r3
 800b880:	3401      	adds	r4, #1
 800b882:	9305      	str	r3, [sp, #20]
 800b884:	4620      	mov	r0, r4
 800b886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b88a:	3a30      	subs	r2, #48	; 0x30
 800b88c:	2a09      	cmp	r2, #9
 800b88e:	d903      	bls.n	800b898 <_svfiprintf_r+0x1a8>
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0c5      	beq.n	800b820 <_svfiprintf_r+0x130>
 800b894:	9105      	str	r1, [sp, #20]
 800b896:	e7c3      	b.n	800b820 <_svfiprintf_r+0x130>
 800b898:	4604      	mov	r4, r0
 800b89a:	2301      	movs	r3, #1
 800b89c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a0:	e7f0      	b.n	800b884 <_svfiprintf_r+0x194>
 800b8a2:	ab03      	add	r3, sp, #12
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	4b10      	ldr	r3, [pc, #64]	; (800b8ec <_svfiprintf_r+0x1fc>)
 800b8ac:	a904      	add	r1, sp, #16
 800b8ae:	f7fc fa8d 	bl	8007dcc <_printf_float>
 800b8b2:	1c42      	adds	r2, r0, #1
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	d1d6      	bne.n	800b866 <_svfiprintf_r+0x176>
 800b8b8:	89ab      	ldrh	r3, [r5, #12]
 800b8ba:	065b      	lsls	r3, r3, #25
 800b8bc:	f53f af2c 	bmi.w	800b718 <_svfiprintf_r+0x28>
 800b8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8c2:	b01d      	add	sp, #116	; 0x74
 800b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c8:	ab03      	add	r3, sp, #12
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <_svfiprintf_r+0x1fc>)
 800b8d2:	a904      	add	r1, sp, #16
 800b8d4:	f7fc fd16 	bl	8008304 <_printf_i>
 800b8d8:	e7eb      	b.n	800b8b2 <_svfiprintf_r+0x1c2>
 800b8da:	bf00      	nop
 800b8dc:	0800cd0c 	.word	0x0800cd0c
 800b8e0:	0800cd12 	.word	0x0800cd12
 800b8e4:	0800cd16 	.word	0x0800cd16
 800b8e8:	08007dcd 	.word	0x08007dcd
 800b8ec:	0800b639 	.word	0x0800b639

0800b8f0 <nan>:
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	4901      	ldr	r1, [pc, #4]	; (800b8f8 <nan+0x8>)
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	7ff80000 	.word	0x7ff80000

0800b8fc <_sbrk_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	2300      	movs	r3, #0
 800b900:	4d05      	ldr	r5, [pc, #20]	; (800b918 <_sbrk_r+0x1c>)
 800b902:	4604      	mov	r4, r0
 800b904:	4608      	mov	r0, r1
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	f7f6 fca6 	bl	8002258 <_sbrk>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d102      	bne.n	800b916 <_sbrk_r+0x1a>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	b103      	cbz	r3, 800b916 <_sbrk_r+0x1a>
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	bd38      	pop	{r3, r4, r5, pc}
 800b918:	20000588 	.word	0x20000588

0800b91c <strncmp>:
 800b91c:	4603      	mov	r3, r0
 800b91e:	b510      	push	{r4, lr}
 800b920:	b172      	cbz	r2, 800b940 <strncmp+0x24>
 800b922:	3901      	subs	r1, #1
 800b924:	1884      	adds	r4, r0, r2
 800b926:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b92a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b92e:	4290      	cmp	r0, r2
 800b930:	d101      	bne.n	800b936 <strncmp+0x1a>
 800b932:	42a3      	cmp	r3, r4
 800b934:	d101      	bne.n	800b93a <strncmp+0x1e>
 800b936:	1a80      	subs	r0, r0, r2
 800b938:	bd10      	pop	{r4, pc}
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d1f3      	bne.n	800b926 <strncmp+0xa>
 800b93e:	e7fa      	b.n	800b936 <strncmp+0x1a>
 800b940:	4610      	mov	r0, r2
 800b942:	e7f9      	b.n	800b938 <strncmp+0x1c>

0800b944 <__ascii_wctomb>:
 800b944:	4603      	mov	r3, r0
 800b946:	4608      	mov	r0, r1
 800b948:	b141      	cbz	r1, 800b95c <__ascii_wctomb+0x18>
 800b94a:	2aff      	cmp	r2, #255	; 0xff
 800b94c:	d904      	bls.n	800b958 <__ascii_wctomb+0x14>
 800b94e:	228a      	movs	r2, #138	; 0x8a
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	4770      	bx	lr
 800b958:	2001      	movs	r0, #1
 800b95a:	700a      	strb	r2, [r1, #0]
 800b95c:	4770      	bx	lr
	...

0800b960 <__assert_func>:
 800b960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b962:	4614      	mov	r4, r2
 800b964:	461a      	mov	r2, r3
 800b966:	4b09      	ldr	r3, [pc, #36]	; (800b98c <__assert_func+0x2c>)
 800b968:	4605      	mov	r5, r0
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68d8      	ldr	r0, [r3, #12]
 800b96e:	b14c      	cbz	r4, 800b984 <__assert_func+0x24>
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <__assert_func+0x30>)
 800b972:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b976:	9100      	str	r1, [sp, #0]
 800b978:	462b      	mov	r3, r5
 800b97a:	4906      	ldr	r1, [pc, #24]	; (800b994 <__assert_func+0x34>)
 800b97c:	f000 f80e 	bl	800b99c <fiprintf>
 800b980:	f000 fa8a 	bl	800be98 <abort>
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <__assert_func+0x38>)
 800b986:	461c      	mov	r4, r3
 800b988:	e7f3      	b.n	800b972 <__assert_func+0x12>
 800b98a:	bf00      	nop
 800b98c:	20000094 	.word	0x20000094
 800b990:	0800cd1d 	.word	0x0800cd1d
 800b994:	0800cd2a 	.word	0x0800cd2a
 800b998:	0800cd58 	.word	0x0800cd58

0800b99c <fiprintf>:
 800b99c:	b40e      	push	{r1, r2, r3}
 800b99e:	b503      	push	{r0, r1, lr}
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	ab03      	add	r3, sp, #12
 800b9a4:	4805      	ldr	r0, [pc, #20]	; (800b9bc <fiprintf+0x20>)
 800b9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	f000 f883 	bl	800bab8 <_vfiprintf_r>
 800b9b2:	b002      	add	sp, #8
 800b9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9b8:	b003      	add	sp, #12
 800b9ba:	4770      	bx	lr
 800b9bc:	20000094 	.word	0x20000094

0800b9c0 <memmove>:
 800b9c0:	4288      	cmp	r0, r1
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	eb01 0402 	add.w	r4, r1, r2
 800b9c8:	d902      	bls.n	800b9d0 <memmove+0x10>
 800b9ca:	4284      	cmp	r4, r0
 800b9cc:	4623      	mov	r3, r4
 800b9ce:	d807      	bhi.n	800b9e0 <memmove+0x20>
 800b9d0:	1e43      	subs	r3, r0, #1
 800b9d2:	42a1      	cmp	r1, r4
 800b9d4:	d008      	beq.n	800b9e8 <memmove+0x28>
 800b9d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9de:	e7f8      	b.n	800b9d2 <memmove+0x12>
 800b9e0:	4601      	mov	r1, r0
 800b9e2:	4402      	add	r2, r0
 800b9e4:	428a      	cmp	r2, r1
 800b9e6:	d100      	bne.n	800b9ea <memmove+0x2a>
 800b9e8:	bd10      	pop	{r4, pc}
 800b9ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9f2:	e7f7      	b.n	800b9e4 <memmove+0x24>

0800b9f4 <__malloc_lock>:
 800b9f4:	4801      	ldr	r0, [pc, #4]	; (800b9fc <__malloc_lock+0x8>)
 800b9f6:	f000 bc0b 	b.w	800c210 <__retarget_lock_acquire_recursive>
 800b9fa:	bf00      	nop
 800b9fc:	2000058c 	.word	0x2000058c

0800ba00 <__malloc_unlock>:
 800ba00:	4801      	ldr	r0, [pc, #4]	; (800ba08 <__malloc_unlock+0x8>)
 800ba02:	f000 bc06 	b.w	800c212 <__retarget_lock_release_recursive>
 800ba06:	bf00      	nop
 800ba08:	2000058c 	.word	0x2000058c

0800ba0c <_realloc_r>:
 800ba0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba10:	4680      	mov	r8, r0
 800ba12:	4614      	mov	r4, r2
 800ba14:	460e      	mov	r6, r1
 800ba16:	b921      	cbnz	r1, 800ba22 <_realloc_r+0x16>
 800ba18:	4611      	mov	r1, r2
 800ba1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1e:	f7ff bd97 	b.w	800b550 <_malloc_r>
 800ba22:	b92a      	cbnz	r2, 800ba30 <_realloc_r+0x24>
 800ba24:	f7ff fd2c 	bl	800b480 <_free_r>
 800ba28:	4625      	mov	r5, r4
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba30:	f000 fc56 	bl	800c2e0 <_malloc_usable_size_r>
 800ba34:	4284      	cmp	r4, r0
 800ba36:	4607      	mov	r7, r0
 800ba38:	d802      	bhi.n	800ba40 <_realloc_r+0x34>
 800ba3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba3e:	d812      	bhi.n	800ba66 <_realloc_r+0x5a>
 800ba40:	4621      	mov	r1, r4
 800ba42:	4640      	mov	r0, r8
 800ba44:	f7ff fd84 	bl	800b550 <_malloc_r>
 800ba48:	4605      	mov	r5, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0ed      	beq.n	800ba2a <_realloc_r+0x1e>
 800ba4e:	42bc      	cmp	r4, r7
 800ba50:	4622      	mov	r2, r4
 800ba52:	4631      	mov	r1, r6
 800ba54:	bf28      	it	cs
 800ba56:	463a      	movcs	r2, r7
 800ba58:	f7fc f904 	bl	8007c64 <memcpy>
 800ba5c:	4631      	mov	r1, r6
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f7ff fd0e 	bl	800b480 <_free_r>
 800ba64:	e7e1      	b.n	800ba2a <_realloc_r+0x1e>
 800ba66:	4635      	mov	r5, r6
 800ba68:	e7df      	b.n	800ba2a <_realloc_r+0x1e>

0800ba6a <__sfputc_r>:
 800ba6a:	6893      	ldr	r3, [r2, #8]
 800ba6c:	b410      	push	{r4}
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	6093      	str	r3, [r2, #8]
 800ba74:	da07      	bge.n	800ba86 <__sfputc_r+0x1c>
 800ba76:	6994      	ldr	r4, [r2, #24]
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	db01      	blt.n	800ba80 <__sfputc_r+0x16>
 800ba7c:	290a      	cmp	r1, #10
 800ba7e:	d102      	bne.n	800ba86 <__sfputc_r+0x1c>
 800ba80:	bc10      	pop	{r4}
 800ba82:	f000 b949 	b.w	800bd18 <__swbuf_r>
 800ba86:	6813      	ldr	r3, [r2, #0]
 800ba88:	1c58      	adds	r0, r3, #1
 800ba8a:	6010      	str	r0, [r2, #0]
 800ba8c:	7019      	strb	r1, [r3, #0]
 800ba8e:	4608      	mov	r0, r1
 800ba90:	bc10      	pop	{r4}
 800ba92:	4770      	bx	lr

0800ba94 <__sfputs_r>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	4606      	mov	r6, r0
 800ba98:	460f      	mov	r7, r1
 800ba9a:	4614      	mov	r4, r2
 800ba9c:	18d5      	adds	r5, r2, r3
 800ba9e:	42ac      	cmp	r4, r5
 800baa0:	d101      	bne.n	800baa6 <__sfputs_r+0x12>
 800baa2:	2000      	movs	r0, #0
 800baa4:	e007      	b.n	800bab6 <__sfputs_r+0x22>
 800baa6:	463a      	mov	r2, r7
 800baa8:	4630      	mov	r0, r6
 800baaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baae:	f7ff ffdc 	bl	800ba6a <__sfputc_r>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	d1f3      	bne.n	800ba9e <__sfputs_r+0xa>
 800bab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bab8 <_vfiprintf_r>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	460d      	mov	r5, r1
 800babe:	4614      	mov	r4, r2
 800bac0:	4698      	mov	r8, r3
 800bac2:	4606      	mov	r6, r0
 800bac4:	b09d      	sub	sp, #116	; 0x74
 800bac6:	b118      	cbz	r0, 800bad0 <_vfiprintf_r+0x18>
 800bac8:	6983      	ldr	r3, [r0, #24]
 800baca:	b90b      	cbnz	r3, 800bad0 <_vfiprintf_r+0x18>
 800bacc:	f000 fb02 	bl	800c0d4 <__sinit>
 800bad0:	4b89      	ldr	r3, [pc, #548]	; (800bcf8 <_vfiprintf_r+0x240>)
 800bad2:	429d      	cmp	r5, r3
 800bad4:	d11b      	bne.n	800bb0e <_vfiprintf_r+0x56>
 800bad6:	6875      	ldr	r5, [r6, #4]
 800bad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bada:	07d9      	lsls	r1, r3, #31
 800badc:	d405      	bmi.n	800baea <_vfiprintf_r+0x32>
 800bade:	89ab      	ldrh	r3, [r5, #12]
 800bae0:	059a      	lsls	r2, r3, #22
 800bae2:	d402      	bmi.n	800baea <_vfiprintf_r+0x32>
 800bae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bae6:	f000 fb93 	bl	800c210 <__retarget_lock_acquire_recursive>
 800baea:	89ab      	ldrh	r3, [r5, #12]
 800baec:	071b      	lsls	r3, r3, #28
 800baee:	d501      	bpl.n	800baf4 <_vfiprintf_r+0x3c>
 800baf0:	692b      	ldr	r3, [r5, #16]
 800baf2:	b9eb      	cbnz	r3, 800bb30 <_vfiprintf_r+0x78>
 800baf4:	4629      	mov	r1, r5
 800baf6:	4630      	mov	r0, r6
 800baf8:	f000 f960 	bl	800bdbc <__swsetup_r>
 800bafc:	b1c0      	cbz	r0, 800bb30 <_vfiprintf_r+0x78>
 800bafe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb00:	07dc      	lsls	r4, r3, #31
 800bb02:	d50e      	bpl.n	800bb22 <_vfiprintf_r+0x6a>
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	b01d      	add	sp, #116	; 0x74
 800bb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0e:	4b7b      	ldr	r3, [pc, #492]	; (800bcfc <_vfiprintf_r+0x244>)
 800bb10:	429d      	cmp	r5, r3
 800bb12:	d101      	bne.n	800bb18 <_vfiprintf_r+0x60>
 800bb14:	68b5      	ldr	r5, [r6, #8]
 800bb16:	e7df      	b.n	800bad8 <_vfiprintf_r+0x20>
 800bb18:	4b79      	ldr	r3, [pc, #484]	; (800bd00 <_vfiprintf_r+0x248>)
 800bb1a:	429d      	cmp	r5, r3
 800bb1c:	bf08      	it	eq
 800bb1e:	68f5      	ldreq	r5, [r6, #12]
 800bb20:	e7da      	b.n	800bad8 <_vfiprintf_r+0x20>
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	0598      	lsls	r0, r3, #22
 800bb26:	d4ed      	bmi.n	800bb04 <_vfiprintf_r+0x4c>
 800bb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb2a:	f000 fb72 	bl	800c212 <__retarget_lock_release_recursive>
 800bb2e:	e7e9      	b.n	800bb04 <_vfiprintf_r+0x4c>
 800bb30:	2300      	movs	r3, #0
 800bb32:	9309      	str	r3, [sp, #36]	; 0x24
 800bb34:	2320      	movs	r3, #32
 800bb36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb3a:	2330      	movs	r3, #48	; 0x30
 800bb3c:	f04f 0901 	mov.w	r9, #1
 800bb40:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb44:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bd04 <_vfiprintf_r+0x24c>
 800bb48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb4c:	4623      	mov	r3, r4
 800bb4e:	469a      	mov	sl, r3
 800bb50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb54:	b10a      	cbz	r2, 800bb5a <_vfiprintf_r+0xa2>
 800bb56:	2a25      	cmp	r2, #37	; 0x25
 800bb58:	d1f9      	bne.n	800bb4e <_vfiprintf_r+0x96>
 800bb5a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb5e:	d00b      	beq.n	800bb78 <_vfiprintf_r+0xc0>
 800bb60:	465b      	mov	r3, fp
 800bb62:	4622      	mov	r2, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7ff ff94 	bl	800ba94 <__sfputs_r>
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	f000 80aa 	beq.w	800bcc6 <_vfiprintf_r+0x20e>
 800bb72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb74:	445a      	add	r2, fp
 800bb76:	9209      	str	r2, [sp, #36]	; 0x24
 800bb78:	f89a 3000 	ldrb.w	r3, [sl]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 80a2 	beq.w	800bcc6 <_vfiprintf_r+0x20e>
 800bb82:	2300      	movs	r3, #0
 800bb84:	f04f 32ff 	mov.w	r2, #4294967295
 800bb88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb8c:	f10a 0a01 	add.w	sl, sl, #1
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	9307      	str	r3, [sp, #28]
 800bb94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb98:	931a      	str	r3, [sp, #104]	; 0x68
 800bb9a:	4654      	mov	r4, sl
 800bb9c:	2205      	movs	r2, #5
 800bb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba2:	4858      	ldr	r0, [pc, #352]	; (800bd04 <_vfiprintf_r+0x24c>)
 800bba4:	f7fe ff92 	bl	800aacc <memchr>
 800bba8:	9a04      	ldr	r2, [sp, #16]
 800bbaa:	b9d8      	cbnz	r0, 800bbe4 <_vfiprintf_r+0x12c>
 800bbac:	06d1      	lsls	r1, r2, #27
 800bbae:	bf44      	itt	mi
 800bbb0:	2320      	movmi	r3, #32
 800bbb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb6:	0713      	lsls	r3, r2, #28
 800bbb8:	bf44      	itt	mi
 800bbba:	232b      	movmi	r3, #43	; 0x2b
 800bbbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbc0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc6:	d015      	beq.n	800bbf4 <_vfiprintf_r+0x13c>
 800bbc8:	4654      	mov	r4, sl
 800bbca:	2000      	movs	r0, #0
 800bbcc:	f04f 0c0a 	mov.w	ip, #10
 800bbd0:	9a07      	ldr	r2, [sp, #28]
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd8:	3b30      	subs	r3, #48	; 0x30
 800bbda:	2b09      	cmp	r3, #9
 800bbdc:	d94e      	bls.n	800bc7c <_vfiprintf_r+0x1c4>
 800bbde:	b1b0      	cbz	r0, 800bc0e <_vfiprintf_r+0x156>
 800bbe0:	9207      	str	r2, [sp, #28]
 800bbe2:	e014      	b.n	800bc0e <_vfiprintf_r+0x156>
 800bbe4:	eba0 0308 	sub.w	r3, r0, r8
 800bbe8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbec:	4313      	orrs	r3, r2
 800bbee:	46a2      	mov	sl, r4
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	e7d2      	b.n	800bb9a <_vfiprintf_r+0xe2>
 800bbf4:	9b03      	ldr	r3, [sp, #12]
 800bbf6:	1d19      	adds	r1, r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	9103      	str	r1, [sp, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	bfbb      	ittet	lt
 800bc00:	425b      	neglt	r3, r3
 800bc02:	f042 0202 	orrlt.w	r2, r2, #2
 800bc06:	9307      	strge	r3, [sp, #28]
 800bc08:	9307      	strlt	r3, [sp, #28]
 800bc0a:	bfb8      	it	lt
 800bc0c:	9204      	strlt	r2, [sp, #16]
 800bc0e:	7823      	ldrb	r3, [r4, #0]
 800bc10:	2b2e      	cmp	r3, #46	; 0x2e
 800bc12:	d10c      	bne.n	800bc2e <_vfiprintf_r+0x176>
 800bc14:	7863      	ldrb	r3, [r4, #1]
 800bc16:	2b2a      	cmp	r3, #42	; 0x2a
 800bc18:	d135      	bne.n	800bc86 <_vfiprintf_r+0x1ce>
 800bc1a:	9b03      	ldr	r3, [sp, #12]
 800bc1c:	3402      	adds	r4, #2
 800bc1e:	1d1a      	adds	r2, r3, #4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	9203      	str	r2, [sp, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bfb8      	it	lt
 800bc28:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bd08 <_vfiprintf_r+0x250>
 800bc32:	2203      	movs	r2, #3
 800bc34:	4650      	mov	r0, sl
 800bc36:	7821      	ldrb	r1, [r4, #0]
 800bc38:	f7fe ff48 	bl	800aacc <memchr>
 800bc3c:	b140      	cbz	r0, 800bc50 <_vfiprintf_r+0x198>
 800bc3e:	2340      	movs	r3, #64	; 0x40
 800bc40:	eba0 000a 	sub.w	r0, r0, sl
 800bc44:	fa03 f000 	lsl.w	r0, r3, r0
 800bc48:	9b04      	ldr	r3, [sp, #16]
 800bc4a:	3401      	adds	r4, #1
 800bc4c:	4303      	orrs	r3, r0
 800bc4e:	9304      	str	r3, [sp, #16]
 800bc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc54:	2206      	movs	r2, #6
 800bc56:	482d      	ldr	r0, [pc, #180]	; (800bd0c <_vfiprintf_r+0x254>)
 800bc58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc5c:	f7fe ff36 	bl	800aacc <memchr>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	d03f      	beq.n	800bce4 <_vfiprintf_r+0x22c>
 800bc64:	4b2a      	ldr	r3, [pc, #168]	; (800bd10 <_vfiprintf_r+0x258>)
 800bc66:	bb1b      	cbnz	r3, 800bcb0 <_vfiprintf_r+0x1f8>
 800bc68:	9b03      	ldr	r3, [sp, #12]
 800bc6a:	3307      	adds	r3, #7
 800bc6c:	f023 0307 	bic.w	r3, r3, #7
 800bc70:	3308      	adds	r3, #8
 800bc72:	9303      	str	r3, [sp, #12]
 800bc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc76:	443b      	add	r3, r7
 800bc78:	9309      	str	r3, [sp, #36]	; 0x24
 800bc7a:	e767      	b.n	800bb4c <_vfiprintf_r+0x94>
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	2001      	movs	r0, #1
 800bc80:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc84:	e7a5      	b.n	800bbd2 <_vfiprintf_r+0x11a>
 800bc86:	2300      	movs	r3, #0
 800bc88:	f04f 0c0a 	mov.w	ip, #10
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	3401      	adds	r4, #1
 800bc90:	9305      	str	r3, [sp, #20]
 800bc92:	4620      	mov	r0, r4
 800bc94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc98:	3a30      	subs	r2, #48	; 0x30
 800bc9a:	2a09      	cmp	r2, #9
 800bc9c:	d903      	bls.n	800bca6 <_vfiprintf_r+0x1ee>
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d0c5      	beq.n	800bc2e <_vfiprintf_r+0x176>
 800bca2:	9105      	str	r1, [sp, #20]
 800bca4:	e7c3      	b.n	800bc2e <_vfiprintf_r+0x176>
 800bca6:	4604      	mov	r4, r0
 800bca8:	2301      	movs	r3, #1
 800bcaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcae:	e7f0      	b.n	800bc92 <_vfiprintf_r+0x1da>
 800bcb0:	ab03      	add	r3, sp, #12
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	462a      	mov	r2, r5
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4b16      	ldr	r3, [pc, #88]	; (800bd14 <_vfiprintf_r+0x25c>)
 800bcba:	a904      	add	r1, sp, #16
 800bcbc:	f7fc f886 	bl	8007dcc <_printf_float>
 800bcc0:	4607      	mov	r7, r0
 800bcc2:	1c78      	adds	r0, r7, #1
 800bcc4:	d1d6      	bne.n	800bc74 <_vfiprintf_r+0x1bc>
 800bcc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc8:	07d9      	lsls	r1, r3, #31
 800bcca:	d405      	bmi.n	800bcd8 <_vfiprintf_r+0x220>
 800bccc:	89ab      	ldrh	r3, [r5, #12]
 800bcce:	059a      	lsls	r2, r3, #22
 800bcd0:	d402      	bmi.n	800bcd8 <_vfiprintf_r+0x220>
 800bcd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd4:	f000 fa9d 	bl	800c212 <__retarget_lock_release_recursive>
 800bcd8:	89ab      	ldrh	r3, [r5, #12]
 800bcda:	065b      	lsls	r3, r3, #25
 800bcdc:	f53f af12 	bmi.w	800bb04 <_vfiprintf_r+0x4c>
 800bce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bce2:	e711      	b.n	800bb08 <_vfiprintf_r+0x50>
 800bce4:	ab03      	add	r3, sp, #12
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	462a      	mov	r2, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <_vfiprintf_r+0x25c>)
 800bcee:	a904      	add	r1, sp, #16
 800bcf0:	f7fc fb08 	bl	8008304 <_printf_i>
 800bcf4:	e7e4      	b.n	800bcc0 <_vfiprintf_r+0x208>
 800bcf6:	bf00      	nop
 800bcf8:	0800cd7c 	.word	0x0800cd7c
 800bcfc:	0800cd9c 	.word	0x0800cd9c
 800bd00:	0800cd5c 	.word	0x0800cd5c
 800bd04:	0800cd0c 	.word	0x0800cd0c
 800bd08:	0800cd12 	.word	0x0800cd12
 800bd0c:	0800cd16 	.word	0x0800cd16
 800bd10:	08007dcd 	.word	0x08007dcd
 800bd14:	0800ba95 	.word	0x0800ba95

0800bd18 <__swbuf_r>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	460e      	mov	r6, r1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	4605      	mov	r5, r0
 800bd20:	b118      	cbz	r0, 800bd2a <__swbuf_r+0x12>
 800bd22:	6983      	ldr	r3, [r0, #24]
 800bd24:	b90b      	cbnz	r3, 800bd2a <__swbuf_r+0x12>
 800bd26:	f000 f9d5 	bl	800c0d4 <__sinit>
 800bd2a:	4b21      	ldr	r3, [pc, #132]	; (800bdb0 <__swbuf_r+0x98>)
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d12b      	bne.n	800bd88 <__swbuf_r+0x70>
 800bd30:	686c      	ldr	r4, [r5, #4]
 800bd32:	69a3      	ldr	r3, [r4, #24]
 800bd34:	60a3      	str	r3, [r4, #8]
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	071a      	lsls	r2, r3, #28
 800bd3a:	d52f      	bpl.n	800bd9c <__swbuf_r+0x84>
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	b36b      	cbz	r3, 800bd9c <__swbuf_r+0x84>
 800bd40:	6923      	ldr	r3, [r4, #16]
 800bd42:	6820      	ldr	r0, [r4, #0]
 800bd44:	b2f6      	uxtb	r6, r6
 800bd46:	1ac0      	subs	r0, r0, r3
 800bd48:	6963      	ldr	r3, [r4, #20]
 800bd4a:	4637      	mov	r7, r6
 800bd4c:	4283      	cmp	r3, r0
 800bd4e:	dc04      	bgt.n	800bd5a <__swbuf_r+0x42>
 800bd50:	4621      	mov	r1, r4
 800bd52:	4628      	mov	r0, r5
 800bd54:	f000 f92a 	bl	800bfac <_fflush_r>
 800bd58:	bb30      	cbnz	r0, 800bda8 <__swbuf_r+0x90>
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	60a3      	str	r3, [r4, #8]
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	701e      	strb	r6, [r3, #0]
 800bd6a:	6963      	ldr	r3, [r4, #20]
 800bd6c:	4283      	cmp	r3, r0
 800bd6e:	d004      	beq.n	800bd7a <__swbuf_r+0x62>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	07db      	lsls	r3, r3, #31
 800bd74:	d506      	bpl.n	800bd84 <__swbuf_r+0x6c>
 800bd76:	2e0a      	cmp	r6, #10
 800bd78:	d104      	bne.n	800bd84 <__swbuf_r+0x6c>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f000 f915 	bl	800bfac <_fflush_r>
 800bd82:	b988      	cbnz	r0, 800bda8 <__swbuf_r+0x90>
 800bd84:	4638      	mov	r0, r7
 800bd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <__swbuf_r+0x9c>)
 800bd8a:	429c      	cmp	r4, r3
 800bd8c:	d101      	bne.n	800bd92 <__swbuf_r+0x7a>
 800bd8e:	68ac      	ldr	r4, [r5, #8]
 800bd90:	e7cf      	b.n	800bd32 <__swbuf_r+0x1a>
 800bd92:	4b09      	ldr	r3, [pc, #36]	; (800bdb8 <__swbuf_r+0xa0>)
 800bd94:	429c      	cmp	r4, r3
 800bd96:	bf08      	it	eq
 800bd98:	68ec      	ldreq	r4, [r5, #12]
 800bd9a:	e7ca      	b.n	800bd32 <__swbuf_r+0x1a>
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 f80c 	bl	800bdbc <__swsetup_r>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d0cb      	beq.n	800bd40 <__swbuf_r+0x28>
 800bda8:	f04f 37ff 	mov.w	r7, #4294967295
 800bdac:	e7ea      	b.n	800bd84 <__swbuf_r+0x6c>
 800bdae:	bf00      	nop
 800bdb0:	0800cd7c 	.word	0x0800cd7c
 800bdb4:	0800cd9c 	.word	0x0800cd9c
 800bdb8:	0800cd5c 	.word	0x0800cd5c

0800bdbc <__swsetup_r>:
 800bdbc:	4b32      	ldr	r3, [pc, #200]	; (800be88 <__swsetup_r+0xcc>)
 800bdbe:	b570      	push	{r4, r5, r6, lr}
 800bdc0:	681d      	ldr	r5, [r3, #0]
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	b125      	cbz	r5, 800bdd2 <__swsetup_r+0x16>
 800bdc8:	69ab      	ldr	r3, [r5, #24]
 800bdca:	b913      	cbnz	r3, 800bdd2 <__swsetup_r+0x16>
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f000 f981 	bl	800c0d4 <__sinit>
 800bdd2:	4b2e      	ldr	r3, [pc, #184]	; (800be8c <__swsetup_r+0xd0>)
 800bdd4:	429c      	cmp	r4, r3
 800bdd6:	d10f      	bne.n	800bdf8 <__swsetup_r+0x3c>
 800bdd8:	686c      	ldr	r4, [r5, #4]
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bde0:	0719      	lsls	r1, r3, #28
 800bde2:	d42c      	bmi.n	800be3e <__swsetup_r+0x82>
 800bde4:	06dd      	lsls	r5, r3, #27
 800bde6:	d411      	bmi.n	800be0c <__swsetup_r+0x50>
 800bde8:	2309      	movs	r3, #9
 800bdea:	6033      	str	r3, [r6, #0]
 800bdec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	e03e      	b.n	800be76 <__swsetup_r+0xba>
 800bdf8:	4b25      	ldr	r3, [pc, #148]	; (800be90 <__swsetup_r+0xd4>)
 800bdfa:	429c      	cmp	r4, r3
 800bdfc:	d101      	bne.n	800be02 <__swsetup_r+0x46>
 800bdfe:	68ac      	ldr	r4, [r5, #8]
 800be00:	e7eb      	b.n	800bdda <__swsetup_r+0x1e>
 800be02:	4b24      	ldr	r3, [pc, #144]	; (800be94 <__swsetup_r+0xd8>)
 800be04:	429c      	cmp	r4, r3
 800be06:	bf08      	it	eq
 800be08:	68ec      	ldreq	r4, [r5, #12]
 800be0a:	e7e6      	b.n	800bdda <__swsetup_r+0x1e>
 800be0c:	0758      	lsls	r0, r3, #29
 800be0e:	d512      	bpl.n	800be36 <__swsetup_r+0x7a>
 800be10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be12:	b141      	cbz	r1, 800be26 <__swsetup_r+0x6a>
 800be14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be18:	4299      	cmp	r1, r3
 800be1a:	d002      	beq.n	800be22 <__swsetup_r+0x66>
 800be1c:	4630      	mov	r0, r6
 800be1e:	f7ff fb2f 	bl	800b480 <_free_r>
 800be22:	2300      	movs	r3, #0
 800be24:	6363      	str	r3, [r4, #52]	; 0x34
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be2c:	81a3      	strh	r3, [r4, #12]
 800be2e:	2300      	movs	r3, #0
 800be30:	6063      	str	r3, [r4, #4]
 800be32:	6923      	ldr	r3, [r4, #16]
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	f043 0308 	orr.w	r3, r3, #8
 800be3c:	81a3      	strh	r3, [r4, #12]
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	b94b      	cbnz	r3, 800be56 <__swsetup_r+0x9a>
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be4c:	d003      	beq.n	800be56 <__swsetup_r+0x9a>
 800be4e:	4621      	mov	r1, r4
 800be50:	4630      	mov	r0, r6
 800be52:	f000 fa05 	bl	800c260 <__smakebuf_r>
 800be56:	89a0      	ldrh	r0, [r4, #12]
 800be58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be5c:	f010 0301 	ands.w	r3, r0, #1
 800be60:	d00a      	beq.n	800be78 <__swsetup_r+0xbc>
 800be62:	2300      	movs	r3, #0
 800be64:	60a3      	str	r3, [r4, #8]
 800be66:	6963      	ldr	r3, [r4, #20]
 800be68:	425b      	negs	r3, r3
 800be6a:	61a3      	str	r3, [r4, #24]
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	b943      	cbnz	r3, 800be82 <__swsetup_r+0xc6>
 800be70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be74:	d1ba      	bne.n	800bdec <__swsetup_r+0x30>
 800be76:	bd70      	pop	{r4, r5, r6, pc}
 800be78:	0781      	lsls	r1, r0, #30
 800be7a:	bf58      	it	pl
 800be7c:	6963      	ldrpl	r3, [r4, #20]
 800be7e:	60a3      	str	r3, [r4, #8]
 800be80:	e7f4      	b.n	800be6c <__swsetup_r+0xb0>
 800be82:	2000      	movs	r0, #0
 800be84:	e7f7      	b.n	800be76 <__swsetup_r+0xba>
 800be86:	bf00      	nop
 800be88:	20000094 	.word	0x20000094
 800be8c:	0800cd7c 	.word	0x0800cd7c
 800be90:	0800cd9c 	.word	0x0800cd9c
 800be94:	0800cd5c 	.word	0x0800cd5c

0800be98 <abort>:
 800be98:	2006      	movs	r0, #6
 800be9a:	b508      	push	{r3, lr}
 800be9c:	f000 fa50 	bl	800c340 <raise>
 800bea0:	2001      	movs	r0, #1
 800bea2:	f7f6 f966 	bl	8002172 <_exit>
	...

0800bea8 <__sflush_r>:
 800bea8:	898a      	ldrh	r2, [r1, #12]
 800beaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beac:	4605      	mov	r5, r0
 800beae:	0710      	lsls	r0, r2, #28
 800beb0:	460c      	mov	r4, r1
 800beb2:	d457      	bmi.n	800bf64 <__sflush_r+0xbc>
 800beb4:	684b      	ldr	r3, [r1, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	dc04      	bgt.n	800bec4 <__sflush_r+0x1c>
 800beba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	dc01      	bgt.n	800bec4 <__sflush_r+0x1c>
 800bec0:	2000      	movs	r0, #0
 800bec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	d0fa      	beq.n	800bec0 <__sflush_r+0x18>
 800beca:	2300      	movs	r3, #0
 800becc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bed0:	682f      	ldr	r7, [r5, #0]
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	d032      	beq.n	800bf3c <__sflush_r+0x94>
 800bed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	075a      	lsls	r2, r3, #29
 800bedc:	d505      	bpl.n	800beea <__sflush_r+0x42>
 800bede:	6863      	ldr	r3, [r4, #4]
 800bee0:	1ac0      	subs	r0, r0, r3
 800bee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bee4:	b10b      	cbz	r3, 800beea <__sflush_r+0x42>
 800bee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bee8:	1ac0      	subs	r0, r0, r3
 800beea:	2300      	movs	r3, #0
 800beec:	4602      	mov	r2, r0
 800beee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bef0:	4628      	mov	r0, r5
 800bef2:	6a21      	ldr	r1, [r4, #32]
 800bef4:	47b0      	blx	r6
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	d106      	bne.n	800bf0a <__sflush_r+0x62>
 800befc:	6829      	ldr	r1, [r5, #0]
 800befe:	291d      	cmp	r1, #29
 800bf00:	d82c      	bhi.n	800bf5c <__sflush_r+0xb4>
 800bf02:	4a29      	ldr	r2, [pc, #164]	; (800bfa8 <__sflush_r+0x100>)
 800bf04:	40ca      	lsrs	r2, r1
 800bf06:	07d6      	lsls	r6, r2, #31
 800bf08:	d528      	bpl.n	800bf5c <__sflush_r+0xb4>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	6062      	str	r2, [r4, #4]
 800bf0e:	6922      	ldr	r2, [r4, #16]
 800bf10:	04d9      	lsls	r1, r3, #19
 800bf12:	6022      	str	r2, [r4, #0]
 800bf14:	d504      	bpl.n	800bf20 <__sflush_r+0x78>
 800bf16:	1c42      	adds	r2, r0, #1
 800bf18:	d101      	bne.n	800bf1e <__sflush_r+0x76>
 800bf1a:	682b      	ldr	r3, [r5, #0]
 800bf1c:	b903      	cbnz	r3, 800bf20 <__sflush_r+0x78>
 800bf1e:	6560      	str	r0, [r4, #84]	; 0x54
 800bf20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf22:	602f      	str	r7, [r5, #0]
 800bf24:	2900      	cmp	r1, #0
 800bf26:	d0cb      	beq.n	800bec0 <__sflush_r+0x18>
 800bf28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf2c:	4299      	cmp	r1, r3
 800bf2e:	d002      	beq.n	800bf36 <__sflush_r+0x8e>
 800bf30:	4628      	mov	r0, r5
 800bf32:	f7ff faa5 	bl	800b480 <_free_r>
 800bf36:	2000      	movs	r0, #0
 800bf38:	6360      	str	r0, [r4, #52]	; 0x34
 800bf3a:	e7c2      	b.n	800bec2 <__sflush_r+0x1a>
 800bf3c:	6a21      	ldr	r1, [r4, #32]
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b0      	blx	r6
 800bf44:	1c41      	adds	r1, r0, #1
 800bf46:	d1c7      	bne.n	800bed8 <__sflush_r+0x30>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d0c4      	beq.n	800bed8 <__sflush_r+0x30>
 800bf4e:	2b1d      	cmp	r3, #29
 800bf50:	d001      	beq.n	800bf56 <__sflush_r+0xae>
 800bf52:	2b16      	cmp	r3, #22
 800bf54:	d101      	bne.n	800bf5a <__sflush_r+0xb2>
 800bf56:	602f      	str	r7, [r5, #0]
 800bf58:	e7b2      	b.n	800bec0 <__sflush_r+0x18>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf60:	81a3      	strh	r3, [r4, #12]
 800bf62:	e7ae      	b.n	800bec2 <__sflush_r+0x1a>
 800bf64:	690f      	ldr	r7, [r1, #16]
 800bf66:	2f00      	cmp	r7, #0
 800bf68:	d0aa      	beq.n	800bec0 <__sflush_r+0x18>
 800bf6a:	0793      	lsls	r3, r2, #30
 800bf6c:	bf18      	it	ne
 800bf6e:	2300      	movne	r3, #0
 800bf70:	680e      	ldr	r6, [r1, #0]
 800bf72:	bf08      	it	eq
 800bf74:	694b      	ldreq	r3, [r1, #20]
 800bf76:	1bf6      	subs	r6, r6, r7
 800bf78:	600f      	str	r7, [r1, #0]
 800bf7a:	608b      	str	r3, [r1, #8]
 800bf7c:	2e00      	cmp	r6, #0
 800bf7e:	dd9f      	ble.n	800bec0 <__sflush_r+0x18>
 800bf80:	4633      	mov	r3, r6
 800bf82:	463a      	mov	r2, r7
 800bf84:	4628      	mov	r0, r5
 800bf86:	6a21      	ldr	r1, [r4, #32]
 800bf88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bf8c:	47e0      	blx	ip
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	dc06      	bgt.n	800bfa0 <__sflush_r+0xf8>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf9c:	81a3      	strh	r3, [r4, #12]
 800bf9e:	e790      	b.n	800bec2 <__sflush_r+0x1a>
 800bfa0:	4407      	add	r7, r0
 800bfa2:	1a36      	subs	r6, r6, r0
 800bfa4:	e7ea      	b.n	800bf7c <__sflush_r+0xd4>
 800bfa6:	bf00      	nop
 800bfa8:	20400001 	.word	0x20400001

0800bfac <_fflush_r>:
 800bfac:	b538      	push	{r3, r4, r5, lr}
 800bfae:	690b      	ldr	r3, [r1, #16]
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	b913      	cbnz	r3, 800bfbc <_fflush_r+0x10>
 800bfb6:	2500      	movs	r5, #0
 800bfb8:	4628      	mov	r0, r5
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	b118      	cbz	r0, 800bfc6 <_fflush_r+0x1a>
 800bfbe:	6983      	ldr	r3, [r0, #24]
 800bfc0:	b90b      	cbnz	r3, 800bfc6 <_fflush_r+0x1a>
 800bfc2:	f000 f887 	bl	800c0d4 <__sinit>
 800bfc6:	4b14      	ldr	r3, [pc, #80]	; (800c018 <_fflush_r+0x6c>)
 800bfc8:	429c      	cmp	r4, r3
 800bfca:	d11b      	bne.n	800c004 <_fflush_r+0x58>
 800bfcc:	686c      	ldr	r4, [r5, #4]
 800bfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0ef      	beq.n	800bfb6 <_fflush_r+0xa>
 800bfd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfd8:	07d0      	lsls	r0, r2, #31
 800bfda:	d404      	bmi.n	800bfe6 <_fflush_r+0x3a>
 800bfdc:	0599      	lsls	r1, r3, #22
 800bfde:	d402      	bmi.n	800bfe6 <_fflush_r+0x3a>
 800bfe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfe2:	f000 f915 	bl	800c210 <__retarget_lock_acquire_recursive>
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	4621      	mov	r1, r4
 800bfea:	f7ff ff5d 	bl	800bea8 <__sflush_r>
 800bfee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bff0:	4605      	mov	r5, r0
 800bff2:	07da      	lsls	r2, r3, #31
 800bff4:	d4e0      	bmi.n	800bfb8 <_fflush_r+0xc>
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	059b      	lsls	r3, r3, #22
 800bffa:	d4dd      	bmi.n	800bfb8 <_fflush_r+0xc>
 800bffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bffe:	f000 f908 	bl	800c212 <__retarget_lock_release_recursive>
 800c002:	e7d9      	b.n	800bfb8 <_fflush_r+0xc>
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <_fflush_r+0x70>)
 800c006:	429c      	cmp	r4, r3
 800c008:	d101      	bne.n	800c00e <_fflush_r+0x62>
 800c00a:	68ac      	ldr	r4, [r5, #8]
 800c00c:	e7df      	b.n	800bfce <_fflush_r+0x22>
 800c00e:	4b04      	ldr	r3, [pc, #16]	; (800c020 <_fflush_r+0x74>)
 800c010:	429c      	cmp	r4, r3
 800c012:	bf08      	it	eq
 800c014:	68ec      	ldreq	r4, [r5, #12]
 800c016:	e7da      	b.n	800bfce <_fflush_r+0x22>
 800c018:	0800cd7c 	.word	0x0800cd7c
 800c01c:	0800cd9c 	.word	0x0800cd9c
 800c020:	0800cd5c 	.word	0x0800cd5c

0800c024 <std>:
 800c024:	2300      	movs	r3, #0
 800c026:	b510      	push	{r4, lr}
 800c028:	4604      	mov	r4, r0
 800c02a:	e9c0 3300 	strd	r3, r3, [r0]
 800c02e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c032:	6083      	str	r3, [r0, #8]
 800c034:	8181      	strh	r1, [r0, #12]
 800c036:	6643      	str	r3, [r0, #100]	; 0x64
 800c038:	81c2      	strh	r2, [r0, #14]
 800c03a:	6183      	str	r3, [r0, #24]
 800c03c:	4619      	mov	r1, r3
 800c03e:	2208      	movs	r2, #8
 800c040:	305c      	adds	r0, #92	; 0x5c
 800c042:	f7fb fe1d 	bl	8007c80 <memset>
 800c046:	4b05      	ldr	r3, [pc, #20]	; (800c05c <std+0x38>)
 800c048:	6224      	str	r4, [r4, #32]
 800c04a:	6263      	str	r3, [r4, #36]	; 0x24
 800c04c:	4b04      	ldr	r3, [pc, #16]	; (800c060 <std+0x3c>)
 800c04e:	62a3      	str	r3, [r4, #40]	; 0x28
 800c050:	4b04      	ldr	r3, [pc, #16]	; (800c064 <std+0x40>)
 800c052:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c054:	4b04      	ldr	r3, [pc, #16]	; (800c068 <std+0x44>)
 800c056:	6323      	str	r3, [r4, #48]	; 0x30
 800c058:	bd10      	pop	{r4, pc}
 800c05a:	bf00      	nop
 800c05c:	0800c379 	.word	0x0800c379
 800c060:	0800c39b 	.word	0x0800c39b
 800c064:	0800c3d3 	.word	0x0800c3d3
 800c068:	0800c3f7 	.word	0x0800c3f7

0800c06c <_cleanup_r>:
 800c06c:	4901      	ldr	r1, [pc, #4]	; (800c074 <_cleanup_r+0x8>)
 800c06e:	f000 b8af 	b.w	800c1d0 <_fwalk_reent>
 800c072:	bf00      	nop
 800c074:	0800bfad 	.word	0x0800bfad

0800c078 <__sfmoreglue>:
 800c078:	2268      	movs	r2, #104	; 0x68
 800c07a:	b570      	push	{r4, r5, r6, lr}
 800c07c:	1e4d      	subs	r5, r1, #1
 800c07e:	4355      	muls	r5, r2
 800c080:	460e      	mov	r6, r1
 800c082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c086:	f7ff fa63 	bl	800b550 <_malloc_r>
 800c08a:	4604      	mov	r4, r0
 800c08c:	b140      	cbz	r0, 800c0a0 <__sfmoreglue+0x28>
 800c08e:	2100      	movs	r1, #0
 800c090:	e9c0 1600 	strd	r1, r6, [r0]
 800c094:	300c      	adds	r0, #12
 800c096:	60a0      	str	r0, [r4, #8]
 800c098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c09c:	f7fb fdf0 	bl	8007c80 <memset>
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}

0800c0a4 <__sfp_lock_acquire>:
 800c0a4:	4801      	ldr	r0, [pc, #4]	; (800c0ac <__sfp_lock_acquire+0x8>)
 800c0a6:	f000 b8b3 	b.w	800c210 <__retarget_lock_acquire_recursive>
 800c0aa:	bf00      	nop
 800c0ac:	2000058d 	.word	0x2000058d

0800c0b0 <__sfp_lock_release>:
 800c0b0:	4801      	ldr	r0, [pc, #4]	; (800c0b8 <__sfp_lock_release+0x8>)
 800c0b2:	f000 b8ae 	b.w	800c212 <__retarget_lock_release_recursive>
 800c0b6:	bf00      	nop
 800c0b8:	2000058d 	.word	0x2000058d

0800c0bc <__sinit_lock_acquire>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	; (800c0c4 <__sinit_lock_acquire+0x8>)
 800c0be:	f000 b8a7 	b.w	800c210 <__retarget_lock_acquire_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	2000058e 	.word	0x2000058e

0800c0c8 <__sinit_lock_release>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__sinit_lock_release+0x8>)
 800c0ca:	f000 b8a2 	b.w	800c212 <__retarget_lock_release_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	2000058e 	.word	0x2000058e

0800c0d4 <__sinit>:
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	f7ff fff0 	bl	800c0bc <__sinit_lock_acquire>
 800c0dc:	69a3      	ldr	r3, [r4, #24]
 800c0de:	b11b      	cbz	r3, 800c0e8 <__sinit+0x14>
 800c0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e4:	f7ff bff0 	b.w	800c0c8 <__sinit_lock_release>
 800c0e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0ec:	6523      	str	r3, [r4, #80]	; 0x50
 800c0ee:	4b13      	ldr	r3, [pc, #76]	; (800c13c <__sinit+0x68>)
 800c0f0:	4a13      	ldr	r2, [pc, #76]	; (800c140 <__sinit+0x6c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0f6:	42a3      	cmp	r3, r4
 800c0f8:	bf08      	it	eq
 800c0fa:	2301      	moveq	r3, #1
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	bf08      	it	eq
 800c100:	61a3      	streq	r3, [r4, #24]
 800c102:	f000 f81f 	bl	800c144 <__sfp>
 800c106:	6060      	str	r0, [r4, #4]
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 f81b 	bl	800c144 <__sfp>
 800c10e:	60a0      	str	r0, [r4, #8]
 800c110:	4620      	mov	r0, r4
 800c112:	f000 f817 	bl	800c144 <__sfp>
 800c116:	2200      	movs	r2, #0
 800c118:	2104      	movs	r1, #4
 800c11a:	60e0      	str	r0, [r4, #12]
 800c11c:	6860      	ldr	r0, [r4, #4]
 800c11e:	f7ff ff81 	bl	800c024 <std>
 800c122:	2201      	movs	r2, #1
 800c124:	2109      	movs	r1, #9
 800c126:	68a0      	ldr	r0, [r4, #8]
 800c128:	f7ff ff7c 	bl	800c024 <std>
 800c12c:	2202      	movs	r2, #2
 800c12e:	2112      	movs	r1, #18
 800c130:	68e0      	ldr	r0, [r4, #12]
 800c132:	f7ff ff77 	bl	800c024 <std>
 800c136:	2301      	movs	r3, #1
 800c138:	61a3      	str	r3, [r4, #24]
 800c13a:	e7d1      	b.n	800c0e0 <__sinit+0xc>
 800c13c:	0800c914 	.word	0x0800c914
 800c140:	0800c06d 	.word	0x0800c06d

0800c144 <__sfp>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	4607      	mov	r7, r0
 800c148:	f7ff ffac 	bl	800c0a4 <__sfp_lock_acquire>
 800c14c:	4b1e      	ldr	r3, [pc, #120]	; (800c1c8 <__sfp+0x84>)
 800c14e:	681e      	ldr	r6, [r3, #0]
 800c150:	69b3      	ldr	r3, [r6, #24]
 800c152:	b913      	cbnz	r3, 800c15a <__sfp+0x16>
 800c154:	4630      	mov	r0, r6
 800c156:	f7ff ffbd 	bl	800c0d4 <__sinit>
 800c15a:	3648      	adds	r6, #72	; 0x48
 800c15c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c160:	3b01      	subs	r3, #1
 800c162:	d503      	bpl.n	800c16c <__sfp+0x28>
 800c164:	6833      	ldr	r3, [r6, #0]
 800c166:	b30b      	cbz	r3, 800c1ac <__sfp+0x68>
 800c168:	6836      	ldr	r6, [r6, #0]
 800c16a:	e7f7      	b.n	800c15c <__sfp+0x18>
 800c16c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c170:	b9d5      	cbnz	r5, 800c1a8 <__sfp+0x64>
 800c172:	4b16      	ldr	r3, [pc, #88]	; (800c1cc <__sfp+0x88>)
 800c174:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c178:	60e3      	str	r3, [r4, #12]
 800c17a:	6665      	str	r5, [r4, #100]	; 0x64
 800c17c:	f000 f847 	bl	800c20e <__retarget_lock_init_recursive>
 800c180:	f7ff ff96 	bl	800c0b0 <__sfp_lock_release>
 800c184:	2208      	movs	r2, #8
 800c186:	4629      	mov	r1, r5
 800c188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c18c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c190:	6025      	str	r5, [r4, #0]
 800c192:	61a5      	str	r5, [r4, #24]
 800c194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c198:	f7fb fd72 	bl	8007c80 <memset>
 800c19c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a8:	3468      	adds	r4, #104	; 0x68
 800c1aa:	e7d9      	b.n	800c160 <__sfp+0x1c>
 800c1ac:	2104      	movs	r1, #4
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f7ff ff62 	bl	800c078 <__sfmoreglue>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	6030      	str	r0, [r6, #0]
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d1d5      	bne.n	800c168 <__sfp+0x24>
 800c1bc:	f7ff ff78 	bl	800c0b0 <__sfp_lock_release>
 800c1c0:	230c      	movs	r3, #12
 800c1c2:	603b      	str	r3, [r7, #0]
 800c1c4:	e7ee      	b.n	800c1a4 <__sfp+0x60>
 800c1c6:	bf00      	nop
 800c1c8:	0800c914 	.word	0x0800c914
 800c1cc:	ffff0001 	.word	0xffff0001

0800c1d0 <_fwalk_reent>:
 800c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	4688      	mov	r8, r1
 800c1d8:	2700      	movs	r7, #0
 800c1da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1e2:	f1b9 0901 	subs.w	r9, r9, #1
 800c1e6:	d505      	bpl.n	800c1f4 <_fwalk_reent+0x24>
 800c1e8:	6824      	ldr	r4, [r4, #0]
 800c1ea:	2c00      	cmp	r4, #0
 800c1ec:	d1f7      	bne.n	800c1de <_fwalk_reent+0xe>
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1f4:	89ab      	ldrh	r3, [r5, #12]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d907      	bls.n	800c20a <_fwalk_reent+0x3a>
 800c1fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1fe:	3301      	adds	r3, #1
 800c200:	d003      	beq.n	800c20a <_fwalk_reent+0x3a>
 800c202:	4629      	mov	r1, r5
 800c204:	4630      	mov	r0, r6
 800c206:	47c0      	blx	r8
 800c208:	4307      	orrs	r7, r0
 800c20a:	3568      	adds	r5, #104	; 0x68
 800c20c:	e7e9      	b.n	800c1e2 <_fwalk_reent+0x12>

0800c20e <__retarget_lock_init_recursive>:
 800c20e:	4770      	bx	lr

0800c210 <__retarget_lock_acquire_recursive>:
 800c210:	4770      	bx	lr

0800c212 <__retarget_lock_release_recursive>:
 800c212:	4770      	bx	lr

0800c214 <__swhatbuf_r>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	460e      	mov	r6, r1
 800c218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21c:	4614      	mov	r4, r2
 800c21e:	2900      	cmp	r1, #0
 800c220:	461d      	mov	r5, r3
 800c222:	b096      	sub	sp, #88	; 0x58
 800c224:	da08      	bge.n	800c238 <__swhatbuf_r+0x24>
 800c226:	2200      	movs	r2, #0
 800c228:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c22c:	602a      	str	r2, [r5, #0]
 800c22e:	061a      	lsls	r2, r3, #24
 800c230:	d410      	bmi.n	800c254 <__swhatbuf_r+0x40>
 800c232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c236:	e00e      	b.n	800c256 <__swhatbuf_r+0x42>
 800c238:	466a      	mov	r2, sp
 800c23a:	f000 f903 	bl	800c444 <_fstat_r>
 800c23e:	2800      	cmp	r0, #0
 800c240:	dbf1      	blt.n	800c226 <__swhatbuf_r+0x12>
 800c242:	9a01      	ldr	r2, [sp, #4]
 800c244:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c248:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c24c:	425a      	negs	r2, r3
 800c24e:	415a      	adcs	r2, r3
 800c250:	602a      	str	r2, [r5, #0]
 800c252:	e7ee      	b.n	800c232 <__swhatbuf_r+0x1e>
 800c254:	2340      	movs	r3, #64	; 0x40
 800c256:	2000      	movs	r0, #0
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	b016      	add	sp, #88	; 0x58
 800c25c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c260 <__smakebuf_r>:
 800c260:	898b      	ldrh	r3, [r1, #12]
 800c262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c264:	079d      	lsls	r5, r3, #30
 800c266:	4606      	mov	r6, r0
 800c268:	460c      	mov	r4, r1
 800c26a:	d507      	bpl.n	800c27c <__smakebuf_r+0x1c>
 800c26c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	6123      	str	r3, [r4, #16]
 800c274:	2301      	movs	r3, #1
 800c276:	6163      	str	r3, [r4, #20]
 800c278:	b002      	add	sp, #8
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	466a      	mov	r2, sp
 800c27e:	ab01      	add	r3, sp, #4
 800c280:	f7ff ffc8 	bl	800c214 <__swhatbuf_r>
 800c284:	9900      	ldr	r1, [sp, #0]
 800c286:	4605      	mov	r5, r0
 800c288:	4630      	mov	r0, r6
 800c28a:	f7ff f961 	bl	800b550 <_malloc_r>
 800c28e:	b948      	cbnz	r0, 800c2a4 <__smakebuf_r+0x44>
 800c290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c294:	059a      	lsls	r2, r3, #22
 800c296:	d4ef      	bmi.n	800c278 <__smakebuf_r+0x18>
 800c298:	f023 0303 	bic.w	r3, r3, #3
 800c29c:	f043 0302 	orr.w	r3, r3, #2
 800c2a0:	81a3      	strh	r3, [r4, #12]
 800c2a2:	e7e3      	b.n	800c26c <__smakebuf_r+0xc>
 800c2a4:	4b0d      	ldr	r3, [pc, #52]	; (800c2dc <__smakebuf_r+0x7c>)
 800c2a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	6020      	str	r0, [r4, #0]
 800c2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	9b00      	ldr	r3, [sp, #0]
 800c2b4:	6120      	str	r0, [r4, #16]
 800c2b6:	6163      	str	r3, [r4, #20]
 800c2b8:	9b01      	ldr	r3, [sp, #4]
 800c2ba:	b15b      	cbz	r3, 800c2d4 <__smakebuf_r+0x74>
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2c2:	f000 f8d1 	bl	800c468 <_isatty_r>
 800c2c6:	b128      	cbz	r0, 800c2d4 <__smakebuf_r+0x74>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f023 0303 	bic.w	r3, r3, #3
 800c2ce:	f043 0301 	orr.w	r3, r3, #1
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	89a0      	ldrh	r0, [r4, #12]
 800c2d6:	4305      	orrs	r5, r0
 800c2d8:	81a5      	strh	r5, [r4, #12]
 800c2da:	e7cd      	b.n	800c278 <__smakebuf_r+0x18>
 800c2dc:	0800c06d 	.word	0x0800c06d

0800c2e0 <_malloc_usable_size_r>:
 800c2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2e4:	1f18      	subs	r0, r3, #4
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bfbc      	itt	lt
 800c2ea:	580b      	ldrlt	r3, [r1, r0]
 800c2ec:	18c0      	addlt	r0, r0, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_raise_r>:
 800c2f0:	291f      	cmp	r1, #31
 800c2f2:	b538      	push	{r3, r4, r5, lr}
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	460d      	mov	r5, r1
 800c2f8:	d904      	bls.n	800c304 <_raise_r+0x14>
 800c2fa:	2316      	movs	r3, #22
 800c2fc:	6003      	str	r3, [r0, #0]
 800c2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c306:	b112      	cbz	r2, 800c30e <_raise_r+0x1e>
 800c308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c30c:	b94b      	cbnz	r3, 800c322 <_raise_r+0x32>
 800c30e:	4620      	mov	r0, r4
 800c310:	f000 f830 	bl	800c374 <_getpid_r>
 800c314:	462a      	mov	r2, r5
 800c316:	4601      	mov	r1, r0
 800c318:	4620      	mov	r0, r4
 800c31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c31e:	f000 b817 	b.w	800c350 <_kill_r>
 800c322:	2b01      	cmp	r3, #1
 800c324:	d00a      	beq.n	800c33c <_raise_r+0x4c>
 800c326:	1c59      	adds	r1, r3, #1
 800c328:	d103      	bne.n	800c332 <_raise_r+0x42>
 800c32a:	2316      	movs	r3, #22
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	2001      	movs	r0, #1
 800c330:	e7e7      	b.n	800c302 <_raise_r+0x12>
 800c332:	2400      	movs	r4, #0
 800c334:	4628      	mov	r0, r5
 800c336:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c33a:	4798      	blx	r3
 800c33c:	2000      	movs	r0, #0
 800c33e:	e7e0      	b.n	800c302 <_raise_r+0x12>

0800c340 <raise>:
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <raise+0xc>)
 800c342:	4601      	mov	r1, r0
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	f7ff bfd3 	b.w	800c2f0 <_raise_r>
 800c34a:	bf00      	nop
 800c34c:	20000094 	.word	0x20000094

0800c350 <_kill_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	2300      	movs	r3, #0
 800c354:	4d06      	ldr	r5, [pc, #24]	; (800c370 <_kill_r+0x20>)
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	4611      	mov	r1, r2
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	f7f5 fef8 	bl	8002152 <_kill>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d102      	bne.n	800c36c <_kill_r+0x1c>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b103      	cbz	r3, 800c36c <_kill_r+0x1c>
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	bf00      	nop
 800c370:	20000588 	.word	0x20000588

0800c374 <_getpid_r>:
 800c374:	f7f5 bee6 	b.w	8002144 <_getpid>

0800c378 <__sread>:
 800c378:	b510      	push	{r4, lr}
 800c37a:	460c      	mov	r4, r1
 800c37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c380:	f000 f894 	bl	800c4ac <_read_r>
 800c384:	2800      	cmp	r0, #0
 800c386:	bfab      	itete	ge
 800c388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c38a:	89a3      	ldrhlt	r3, [r4, #12]
 800c38c:	181b      	addge	r3, r3, r0
 800c38e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c392:	bfac      	ite	ge
 800c394:	6563      	strge	r3, [r4, #84]	; 0x54
 800c396:	81a3      	strhlt	r3, [r4, #12]
 800c398:	bd10      	pop	{r4, pc}

0800c39a <__swrite>:
 800c39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39e:	461f      	mov	r7, r3
 800c3a0:	898b      	ldrh	r3, [r1, #12]
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	05db      	lsls	r3, r3, #23
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	4616      	mov	r6, r2
 800c3aa:	d505      	bpl.n	800c3b8 <__swrite+0x1e>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b4:	f000 f868 	bl	800c488 <_lseek_r>
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	4632      	mov	r2, r6
 800c3bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	463b      	mov	r3, r7
 800c3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ce:	f000 b817 	b.w	800c400 <_write_r>

0800c3d2 <__sseek>:
 800c3d2:	b510      	push	{r4, lr}
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3da:	f000 f855 	bl	800c488 <_lseek_r>
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	bf15      	itete	ne
 800c3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3ee:	81a3      	strheq	r3, [r4, #12]
 800c3f0:	bf18      	it	ne
 800c3f2:	81a3      	strhne	r3, [r4, #12]
 800c3f4:	bd10      	pop	{r4, pc}

0800c3f6 <__sclose>:
 800c3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fa:	f000 b813 	b.w	800c424 <_close_r>
	...

0800c400 <_write_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	4604      	mov	r4, r0
 800c404:	4608      	mov	r0, r1
 800c406:	4611      	mov	r1, r2
 800c408:	2200      	movs	r2, #0
 800c40a:	4d05      	ldr	r5, [pc, #20]	; (800c420 <_write_r+0x20>)
 800c40c:	602a      	str	r2, [r5, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	f7f5 fed6 	bl	80021c0 <_write>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_write_r+0x1e>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_write_r+0x1e>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	20000588 	.word	0x20000588

0800c424 <_close_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	2300      	movs	r3, #0
 800c428:	4d05      	ldr	r5, [pc, #20]	; (800c440 <_close_r+0x1c>)
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	f7f5 fee2 	bl	80021f8 <_close>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_close_r+0x1a>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_close_r+0x1a>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	20000588 	.word	0x20000588

0800c444 <_fstat_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	2300      	movs	r3, #0
 800c448:	4d06      	ldr	r5, [pc, #24]	; (800c464 <_fstat_r+0x20>)
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	4611      	mov	r1, r2
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	f7f5 fedc 	bl	800220e <_fstat>
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	d102      	bne.n	800c460 <_fstat_r+0x1c>
 800c45a:	682b      	ldr	r3, [r5, #0]
 800c45c:	b103      	cbz	r3, 800c460 <_fstat_r+0x1c>
 800c45e:	6023      	str	r3, [r4, #0]
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	20000588 	.word	0x20000588

0800c468 <_isatty_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	2300      	movs	r3, #0
 800c46c:	4d05      	ldr	r5, [pc, #20]	; (800c484 <_isatty_r+0x1c>)
 800c46e:	4604      	mov	r4, r0
 800c470:	4608      	mov	r0, r1
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	f7f5 feda 	bl	800222c <_isatty>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_isatty_r+0x1a>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_isatty_r+0x1a>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	20000588 	.word	0x20000588

0800c488 <_lseek_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4604      	mov	r4, r0
 800c48c:	4608      	mov	r0, r1
 800c48e:	4611      	mov	r1, r2
 800c490:	2200      	movs	r2, #0
 800c492:	4d05      	ldr	r5, [pc, #20]	; (800c4a8 <_lseek_r+0x20>)
 800c494:	602a      	str	r2, [r5, #0]
 800c496:	461a      	mov	r2, r3
 800c498:	f7f5 fed2 	bl	8002240 <_lseek>
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	d102      	bne.n	800c4a6 <_lseek_r+0x1e>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	b103      	cbz	r3, 800c4a6 <_lseek_r+0x1e>
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	bd38      	pop	{r3, r4, r5, pc}
 800c4a8:	20000588 	.word	0x20000588

0800c4ac <_read_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	4608      	mov	r0, r1
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4d05      	ldr	r5, [pc, #20]	; (800c4cc <_read_r+0x20>)
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f7f5 fe63 	bl	8002186 <_read>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_read_r+0x1e>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_read_r+0x1e>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	20000588 	.word	0x20000588

0800c4d0 <log10f>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	f000 f824 	bl	800c520 <__ieee754_log10f>
 800c4d8:	4621      	mov	r1, r4
 800c4da:	4605      	mov	r5, r0
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7f4 fe17 	bl	8001110 <__aeabi_fcmpun>
 800c4e2:	b970      	cbnz	r0, 800c502 <log10f+0x32>
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f7f4 fdf4 	bl	80010d4 <__aeabi_fcmple>
 800c4ec:	b148      	cbz	r0, 800c502 <log10f+0x32>
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f7f4 fddb 	bl	80010ac <__aeabi_fcmpeq>
 800c4f6:	b130      	cbz	r0, 800c506 <log10f+0x36>
 800c4f8:	f7fb fb7a 	bl	8007bf0 <__errno>
 800c4fc:	2322      	movs	r3, #34	; 0x22
 800c4fe:	4d06      	ldr	r5, [pc, #24]	; (800c518 <log10f+0x48>)
 800c500:	6003      	str	r3, [r0, #0]
 800c502:	4628      	mov	r0, r5
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	f7fb fb73 	bl	8007bf0 <__errno>
 800c50a:	2321      	movs	r3, #33	; 0x21
 800c50c:	6003      	str	r3, [r0, #0]
 800c50e:	4803      	ldr	r0, [pc, #12]	; (800c51c <log10f+0x4c>)
 800c510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c514:	f7fc ba2a 	b.w	800896c <nanf>
 800c518:	ff800000 	.word	0xff800000
 800c51c:	0800cd58 	.word	0x0800cd58

0800c520 <__ieee754_log10f>:
 800c520:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800c524:	4601      	mov	r1, r0
 800c526:	4603      	mov	r3, r0
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	d105      	bne.n	800c538 <__ieee754_log10f+0x18>
 800c52c:	2100      	movs	r1, #0
 800c52e:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800c532:	f7f4 fcdb 	bl	8000eec <__aeabi_fdiv>
 800c536:	bd70      	pop	{r4, r5, r6, pc}
 800c538:	2800      	cmp	r0, #0
 800c53a:	da03      	bge.n	800c544 <__ieee754_log10f+0x24>
 800c53c:	f7f4 fb18 	bl	8000b70 <__aeabi_fsub>
 800c540:	2100      	movs	r1, #0
 800c542:	e7f6      	b.n	800c532 <__ieee754_log10f+0x12>
 800c544:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c548:	db02      	blt.n	800c550 <__ieee754_log10f+0x30>
 800c54a:	f7f4 fb13 	bl	8000b74 <__addsf3>
 800c54e:	e7f2      	b.n	800c536 <__ieee754_log10f+0x16>
 800c550:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800c554:	da2d      	bge.n	800c5b2 <__ieee754_log10f+0x92>
 800c556:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c55a:	f7f4 fc13 	bl	8000d84 <__aeabi_fmul>
 800c55e:	f06f 0218 	mvn.w	r2, #24
 800c562:	4603      	mov	r3, r0
 800c564:	15d8      	asrs	r0, r3, #23
 800c566:	387f      	subs	r0, #127	; 0x7f
 800c568:	4410      	add	r0, r2
 800c56a:	0fc6      	lsrs	r6, r0, #31
 800c56c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800c570:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800c574:	f7f4 fbb2 	bl	8000cdc <__aeabi_i2f>
 800c578:	4605      	mov	r5, r0
 800c57a:	f1c6 007f 	rsb	r0, r6, #127	; 0x7f
 800c57e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800c582:	f000 f81f 	bl	800c5c4 <__ieee754_logf>
 800c586:	490c      	ldr	r1, [pc, #48]	; (800c5b8 <__ieee754_log10f+0x98>)
 800c588:	4606      	mov	r6, r0
 800c58a:	4628      	mov	r0, r5
 800c58c:	f7f4 fbfa 	bl	8000d84 <__aeabi_fmul>
 800c590:	490a      	ldr	r1, [pc, #40]	; (800c5bc <__ieee754_log10f+0x9c>)
 800c592:	4604      	mov	r4, r0
 800c594:	4630      	mov	r0, r6
 800c596:	f7f4 fbf5 	bl	8000d84 <__aeabi_fmul>
 800c59a:	4601      	mov	r1, r0
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7f4 fae9 	bl	8000b74 <__addsf3>
 800c5a2:	4907      	ldr	r1, [pc, #28]	; (800c5c0 <__ieee754_log10f+0xa0>)
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f7f4 fbec 	bl	8000d84 <__aeabi_fmul>
 800c5ac:	4601      	mov	r1, r0
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	e7cb      	b.n	800c54a <__ieee754_log10f+0x2a>
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	e7d6      	b.n	800c564 <__ieee754_log10f+0x44>
 800c5b6:	bf00      	nop
 800c5b8:	355427db 	.word	0x355427db
 800c5bc:	3ede5bd9 	.word	0x3ede5bd9
 800c5c0:	3e9a2080 	.word	0x3e9a2080

0800c5c4 <__ieee754_logf>:
 800c5c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800c5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	d106      	bne.n	800c5e0 <__ieee754_logf+0x1c>
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800c5d8:	f7f4 fc88 	bl	8000eec <__aeabi_fdiv>
 800c5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	da03      	bge.n	800c5ec <__ieee754_logf+0x28>
 800c5e4:	f7f4 fac4 	bl	8000b70 <__aeabi_fsub>
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	e7f5      	b.n	800c5d8 <__ieee754_logf+0x14>
 800c5ec:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c5f0:	db02      	blt.n	800c5f8 <__ieee754_logf+0x34>
 800c5f2:	f7f4 fabf 	bl	8000b74 <__addsf3>
 800c5f6:	e7f1      	b.n	800c5dc <__ieee754_logf+0x18>
 800c5f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800c5fc:	da35      	bge.n	800c66a <__ieee754_logf+0xa6>
 800c5fe:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c602:	f7f4 fbbf 	bl	8000d84 <__aeabi_fmul>
 800c606:	f06f 0218 	mvn.w	r2, #24
 800c60a:	4603      	mov	r3, r0
 800c60c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800c610:	15de      	asrs	r6, r3, #23
 800c612:	4b71      	ldr	r3, [pc, #452]	; (800c7d8 <__ieee754_logf+0x214>)
 800c614:	3e7f      	subs	r6, #127	; 0x7f
 800c616:	4423      	add	r3, r4
 800c618:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 800c61c:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 800c620:	4416      	add	r6, r2
 800c622:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c626:	4320      	orrs	r0, r4
 800c628:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 800c62c:	f7f4 faa0 	bl	8000b70 <__aeabi_fsub>
 800c630:	4b6a      	ldr	r3, [pc, #424]	; (800c7dc <__ieee754_logf+0x218>)
 800c632:	f104 020f 	add.w	r2, r4, #15
 800c636:	4013      	ands	r3, r2
 800c638:	4605      	mov	r5, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d13a      	bne.n	800c6b4 <__ieee754_logf+0xf0>
 800c63e:	2100      	movs	r1, #0
 800c640:	f7f4 fd34 	bl	80010ac <__aeabi_fcmpeq>
 800c644:	b198      	cbz	r0, 800c66e <__ieee754_logf+0xaa>
 800c646:	2e00      	cmp	r6, #0
 800c648:	f000 80c4 	beq.w	800c7d4 <__ieee754_logf+0x210>
 800c64c:	4630      	mov	r0, r6
 800c64e:	f7f4 fb45 	bl	8000cdc <__aeabi_i2f>
 800c652:	4963      	ldr	r1, [pc, #396]	; (800c7e0 <__ieee754_logf+0x21c>)
 800c654:	4605      	mov	r5, r0
 800c656:	f7f4 fb95 	bl	8000d84 <__aeabi_fmul>
 800c65a:	4962      	ldr	r1, [pc, #392]	; (800c7e4 <__ieee754_logf+0x220>)
 800c65c:	4604      	mov	r4, r0
 800c65e:	4628      	mov	r0, r5
 800c660:	f7f4 fb90 	bl	8000d84 <__aeabi_fmul>
 800c664:	4601      	mov	r1, r0
 800c666:	4620      	mov	r0, r4
 800c668:	e7c3      	b.n	800c5f2 <__ieee754_logf+0x2e>
 800c66a:	2200      	movs	r2, #0
 800c66c:	e7ce      	b.n	800c60c <__ieee754_logf+0x48>
 800c66e:	495e      	ldr	r1, [pc, #376]	; (800c7e8 <__ieee754_logf+0x224>)
 800c670:	4628      	mov	r0, r5
 800c672:	f7f4 fb87 	bl	8000d84 <__aeabi_fmul>
 800c676:	4601      	mov	r1, r0
 800c678:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800c67c:	f7f4 fa78 	bl	8000b70 <__aeabi_fsub>
 800c680:	4629      	mov	r1, r5
 800c682:	4604      	mov	r4, r0
 800c684:	4628      	mov	r0, r5
 800c686:	f7f4 fb7d 	bl	8000d84 <__aeabi_fmul>
 800c68a:	4601      	mov	r1, r0
 800c68c:	4620      	mov	r0, r4
 800c68e:	f7f4 fb79 	bl	8000d84 <__aeabi_fmul>
 800c692:	4604      	mov	r4, r0
 800c694:	b90e      	cbnz	r6, 800c69a <__ieee754_logf+0xd6>
 800c696:	4621      	mov	r1, r4
 800c698:	e06f      	b.n	800c77a <__ieee754_logf+0x1b6>
 800c69a:	4630      	mov	r0, r6
 800c69c:	f7f4 fb1e 	bl	8000cdc <__aeabi_i2f>
 800c6a0:	494f      	ldr	r1, [pc, #316]	; (800c7e0 <__ieee754_logf+0x21c>)
 800c6a2:	4607      	mov	r7, r0
 800c6a4:	f7f4 fb6e 	bl	8000d84 <__aeabi_fmul>
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	494d      	ldr	r1, [pc, #308]	; (800c7e4 <__ieee754_logf+0x220>)
 800c6ae:	f7f4 fb69 	bl	8000d84 <__aeabi_fmul>
 800c6b2:	e072      	b.n	800c79a <__ieee754_logf+0x1d6>
 800c6b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c6b8:	f7f4 fa5c 	bl	8000b74 <__addsf3>
 800c6bc:	4601      	mov	r1, r0
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f7f4 fc14 	bl	8000eec <__aeabi_fdiv>
 800c6c4:	4681      	mov	r9, r0
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	f7f4 fb08 	bl	8000cdc <__aeabi_i2f>
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	4680      	mov	r8, r0
 800c6d0:	4648      	mov	r0, r9
 800c6d2:	f7f4 fb57 	bl	8000d84 <__aeabi_fmul>
 800c6d6:	4601      	mov	r1, r0
 800c6d8:	4683      	mov	fp, r0
 800c6da:	f7f4 fb53 	bl	8000d84 <__aeabi_fmul>
 800c6de:	4607      	mov	r7, r0
 800c6e0:	4942      	ldr	r1, [pc, #264]	; (800c7ec <__ieee754_logf+0x228>)
 800c6e2:	f7f4 fb4f 	bl	8000d84 <__aeabi_fmul>
 800c6e6:	4942      	ldr	r1, [pc, #264]	; (800c7f0 <__ieee754_logf+0x22c>)
 800c6e8:	f7f4 fa44 	bl	8000b74 <__addsf3>
 800c6ec:	4639      	mov	r1, r7
 800c6ee:	f7f4 fb49 	bl	8000d84 <__aeabi_fmul>
 800c6f2:	4940      	ldr	r1, [pc, #256]	; (800c7f4 <__ieee754_logf+0x230>)
 800c6f4:	f7f4 fa3e 	bl	8000b74 <__addsf3>
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	f7f4 fb43 	bl	8000d84 <__aeabi_fmul>
 800c6fe:	493e      	ldr	r1, [pc, #248]	; (800c7f8 <__ieee754_logf+0x234>)
 800c700:	f7f4 fa38 	bl	8000b74 <__addsf3>
 800c704:	4659      	mov	r1, fp
 800c706:	f7f4 fb3d 	bl	8000d84 <__aeabi_fmul>
 800c70a:	493c      	ldr	r1, [pc, #240]	; (800c7fc <__ieee754_logf+0x238>)
 800c70c:	4683      	mov	fp, r0
 800c70e:	4638      	mov	r0, r7
 800c710:	f7f4 fb38 	bl	8000d84 <__aeabi_fmul>
 800c714:	493a      	ldr	r1, [pc, #232]	; (800c800 <__ieee754_logf+0x23c>)
 800c716:	f7f4 fa2d 	bl	8000b74 <__addsf3>
 800c71a:	4639      	mov	r1, r7
 800c71c:	f7f4 fb32 	bl	8000d84 <__aeabi_fmul>
 800c720:	4938      	ldr	r1, [pc, #224]	; (800c804 <__ieee754_logf+0x240>)
 800c722:	f7f4 fa27 	bl	8000b74 <__addsf3>
 800c726:	4639      	mov	r1, r7
 800c728:	f7f4 fb2c 	bl	8000d84 <__aeabi_fmul>
 800c72c:	4601      	mov	r1, r0
 800c72e:	4658      	mov	r0, fp
 800c730:	f7f4 fa20 	bl	8000b74 <__addsf3>
 800c734:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800c808 <__ieee754_logf+0x244>
 800c738:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 800c73c:	44a2      	add	sl, r4
 800c73e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c742:	ea43 030a 	orr.w	r3, r3, sl
 800c746:	2b00      	cmp	r3, #0
 800c748:	4607      	mov	r7, r0
 800c74a:	dd30      	ble.n	800c7ae <__ieee754_logf+0x1ea>
 800c74c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c750:	4628      	mov	r0, r5
 800c752:	f7f4 fb17 	bl	8000d84 <__aeabi_fmul>
 800c756:	4629      	mov	r1, r5
 800c758:	f7f4 fb14 	bl	8000d84 <__aeabi_fmul>
 800c75c:	4601      	mov	r1, r0
 800c75e:	4604      	mov	r4, r0
 800c760:	4638      	mov	r0, r7
 800c762:	f7f4 fa07 	bl	8000b74 <__addsf3>
 800c766:	4649      	mov	r1, r9
 800c768:	f7f4 fb0c 	bl	8000d84 <__aeabi_fmul>
 800c76c:	4607      	mov	r7, r0
 800c76e:	b946      	cbnz	r6, 800c782 <__ieee754_logf+0x1be>
 800c770:	4601      	mov	r1, r0
 800c772:	4620      	mov	r0, r4
 800c774:	f7f4 f9fc 	bl	8000b70 <__aeabi_fsub>
 800c778:	4601      	mov	r1, r0
 800c77a:	4628      	mov	r0, r5
 800c77c:	f7f4 f9f8 	bl	8000b70 <__aeabi_fsub>
 800c780:	e72c      	b.n	800c5dc <__ieee754_logf+0x18>
 800c782:	4917      	ldr	r1, [pc, #92]	; (800c7e0 <__ieee754_logf+0x21c>)
 800c784:	4640      	mov	r0, r8
 800c786:	f7f4 fafd 	bl	8000d84 <__aeabi_fmul>
 800c78a:	4916      	ldr	r1, [pc, #88]	; (800c7e4 <__ieee754_logf+0x220>)
 800c78c:	4606      	mov	r6, r0
 800c78e:	4640      	mov	r0, r8
 800c790:	f7f4 faf8 	bl	8000d84 <__aeabi_fmul>
 800c794:	4639      	mov	r1, r7
 800c796:	f7f4 f9ed 	bl	8000b74 <__addsf3>
 800c79a:	4601      	mov	r1, r0
 800c79c:	4620      	mov	r0, r4
 800c79e:	f7f4 f9e7 	bl	8000b70 <__aeabi_fsub>
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	f7f4 f9e4 	bl	8000b70 <__aeabi_fsub>
 800c7a8:	4601      	mov	r1, r0
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	e7e6      	b.n	800c77c <__ieee754_logf+0x1b8>
 800c7ae:	4601      	mov	r1, r0
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f7f4 f9dd 	bl	8000b70 <__aeabi_fsub>
 800c7b6:	4649      	mov	r1, r9
 800c7b8:	f7f4 fae4 	bl	8000d84 <__aeabi_fmul>
 800c7bc:	4604      	mov	r4, r0
 800c7be:	2e00      	cmp	r6, #0
 800c7c0:	f43f af69 	beq.w	800c696 <__ieee754_logf+0xd2>
 800c7c4:	4906      	ldr	r1, [pc, #24]	; (800c7e0 <__ieee754_logf+0x21c>)
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	f7f4 fadc 	bl	8000d84 <__aeabi_fmul>
 800c7cc:	4905      	ldr	r1, [pc, #20]	; (800c7e4 <__ieee754_logf+0x220>)
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	4640      	mov	r0, r8
 800c7d2:	e76c      	b.n	800c6ae <__ieee754_logf+0xea>
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	e701      	b.n	800c5dc <__ieee754_logf+0x18>
 800c7d8:	004afb20 	.word	0x004afb20
 800c7dc:	007ffff0 	.word	0x007ffff0
 800c7e0:	3f317180 	.word	0x3f317180
 800c7e4:	3717f7d1 	.word	0x3717f7d1
 800c7e8:	3eaaaaab 	.word	0x3eaaaaab
 800c7ec:	3e178897 	.word	0x3e178897
 800c7f0:	3e3a3325 	.word	0x3e3a3325
 800c7f4:	3e924925 	.word	0x3e924925
 800c7f8:	3f2aaaab 	.word	0x3f2aaaab
 800c7fc:	3e1cd04f 	.word	0x3e1cd04f
 800c800:	3e638e29 	.word	0x3e638e29
 800c804:	3ecccccd 	.word	0x3ecccccd
 800c808:	ffcf5c30 	.word	0xffcf5c30

0800c80c <_init>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr

0800c818 <_fini>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr
