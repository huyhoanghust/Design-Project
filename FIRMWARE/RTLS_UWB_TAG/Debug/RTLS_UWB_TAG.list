
RTLS_UWB_TAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acd4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800ade8  0800ade8  0001ade8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3d4  0800b3d4  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800b3d4  0800b3d4  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b3d4  0800b3d4  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3d4  0800b3d4  0001b3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3d8  0800b3d8  0001b3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800b3dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000268  0800b640  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800b640  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d287  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002301  00000000  00000000  0002d514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002f818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000304e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019486  00000000  00000000  000310c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df36  00000000  00000000  0004a54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881ff  00000000  00000000  00058484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000e06d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	0800adcc 	.word	0x0800adcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	0800adcc 	.word	0x0800adcc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4605      	mov	r5, r0
 800118c:	460c      	mov	r4, r1
 800118e:	2200      	movs	r2, #0
 8001190:	2300      	movs	r3, #0
 8001192:	4628      	mov	r0, r5
 8001194:	4621      	mov	r1, r4
 8001196:	f7ff fc11 	bl	80009bc <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f908 	bl	80003e4 <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f97e 	bl	80004d8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7fe ffc0 	bl	8000168 <__aeabi_dsub>
 80011e8:	f7ff fc4e 	bl	8000a88 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <MX_GPIO_Init+0xe0>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_GPIO_Init+0xe0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WAKEUP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2112      	movs	r1, #18
 8001258:	4820      	ldr	r0, [pc, #128]	; (80012dc <MX_GPIO_Init+0xe4>)
 800125a:	f003 fc27 	bl	8004aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|LED_ACT_Pin|LED_ERR_Pin|LED_SYS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	213a      	movs	r1, #58	; 0x3a
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <MX_GPIO_Init+0xe8>)
 8001264:	f003 fc22 	bl	8004aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTON_Pin;
 8001268:	2301      	movs	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXTON_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_GPIO_Init+0xe4>)
 800127c:	f003 fa92 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin|SPI1_CS_Pin;
 8001280:	2312      	movs	r3, #18
 8001282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2302      	movs	r3, #2
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <MX_GPIO_Init+0xe4>)
 8001298:	f003 fa84 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_GPIO_Init+0xe8>)
 80012b0:	f003 fa78 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_ACT_Pin|LED_ERR_Pin|LED_SYS_Pin;
 80012b4:	233a      	movs	r3, #58	; 0x3a
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_GPIO_Init+0xe8>)
 80012cc:	f003 fa6a 	bl	80047a4 <HAL_GPIO_Init>

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001300:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001304:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00b      	beq.n	8001324 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800130c:	e000      	b.n	8001310 <ITM_SendChar+0x2c>
    {
      __NOP();
 800130e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001310:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f9      	beq.n	800130e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800131a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <dwInteruptHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dwInteruptHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  dwReadSystemEventStatusRegister(&device);
 8001334:	481e      	ldr	r0, [pc, #120]	; (80013b0 <dwInteruptHandler+0x80>)
 8001336:	f001 f89a 	bl	800246e <dwReadSystemEventStatusRegister>
  if (dwIsTransmitDone(&device))
 800133a:	481d      	ldr	r0, [pc, #116]	; (80013b0 <dwInteruptHandler+0x80>)
 800133c:	f001 ff90 	bl	8003260 <dwIsTransmitDone>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <dwInteruptHandler+0x22>
  {
    dwClearTransmitStatus(&device);
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <dwInteruptHandler+0x80>)
 8001348:	f002 f85c 	bl	8003404 <dwClearTransmitStatus>
    sentAck = true;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <dwInteruptHandler+0x84>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
  }
  if (dwIsReceiveDone(&device))
 8001352:	4817      	ldr	r0, [pc, #92]	; (80013b0 <dwInteruptHandler+0x80>)
 8001354:	f001 ffa4 	bl	80032a0 <dwIsReceiveDone>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <dwInteruptHandler+0x3a>
  {
    dwClearReceiveStatus(&device);
 800135e:	4814      	ldr	r0, [pc, #80]	; (80013b0 <dwInteruptHandler+0x80>)
 8001360:	f002 f83e 	bl	80033e0 <dwClearReceiveStatus>
    recievedAck = true;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <dwInteruptHandler+0x88>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
  }
  if (dwIsReceiveTimestampAvailable(&device))
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <dwInteruptHandler+0x80>)
 800136c:	f001 ff88 	bl	8003280 <dwIsReceiveTimestampAvailable>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <dwInteruptHandler+0x4c>
  {
    dwClearReceiveTimestampAvailableStatus(&device);
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <dwInteruptHandler+0x80>)
 8001378:	f002 f816 	bl	80033a8 <dwClearReceiveTimestampAvailableStatus>
  }
  if (dwIsReceiveFailed(&device))
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <dwInteruptHandler+0x80>)
 800137e:	f001 ffad 	bl	80032dc <dwIsReceiveFailed>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <dwInteruptHandler+0x64>
  {
    dwClearReceiveStatus(&device);
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <dwInteruptHandler+0x80>)
 800138a:	f002 f829 	bl	80033e0 <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <dwInteruptHandler+0x80>)
 8001390:	f001 f81e 	bl	80023d0 <dwRxSoftReset>
  }
  if (dwIsReceiveTimeout(&device))
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <dwInteruptHandler+0x80>)
 8001396:	f001 fff7 	bl	8003388 <dwIsReceiveTimeout>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <dwInteruptHandler+0x7c>
  {
    dwClearReceiveStatus(&device);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <dwInteruptHandler+0x80>)
 80013a2:	f002 f81d 	bl	80033e0 <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 80013a6:	4802      	ldr	r0, [pc, #8]	; (80013b0 <dwInteruptHandler+0x80>)
 80013a8:	f001 f812 	bl	80023d0 <dwRxSoftReset>
  }
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200003cd 	.word	0x200003cd
 80013b8:	200003ce 	.word	0x200003ce

080013bc <log_data>:

void log_data(char *string)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7fe fec3 	bl	8000150 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <log_data+0x28>)
 80013d6:	f004 fd69 	bl	8005eac <HAL_UART_Transmit>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000042c 	.word	0x2000042c

080013e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  int i=0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  for(i=0;i<len;i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e009      	b.n	8001412 <_write+0x2a>
  {
    ITM_SendChar((*ptr++));
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	60ba      	str	r2, [r7, #8]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff6c 	bl	80012e4 <ITM_SendChar>
  for(i=0;i<len;i++)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbf1      	blt.n	80013fe <_write+0x16>
  }
  return len;
 800141a:	687b      	ldr	r3, [r7, #4]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0000      	movs	r0, r0
	...

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800142c:	b0b6      	sub	sp, #216	; 0xd8
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f003 f84e 	bl	80044d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 faf6 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f7ff fede 	bl	80011f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800143c:	f000 fb3c 	bl	8001ab8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001440:	f000 fcbe 	bl	8001dc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  log_data("[TAG START]\r\n");
 8001444:	48a3      	ldr	r0, [pc, #652]	; (80016d4 <main+0x2ac>)
 8001446:	f7ff ffb9 	bl	80013bc <log_data>
  MAC80215_PACKET_INIT(txPacket, MAC802154_TYPE_DATA);
 800144a:	4aa3      	ldr	r2, [pc, #652]	; (80016d8 <main+0x2b0>)
 800144c:	7813      	ldrb	r3, [r2, #0]
 800144e:	2101      	movs	r1, #1
 8001450:	f361 0302 	bfi	r3, r1, #0, #3
 8001454:	7013      	strb	r3, [r2, #0]
 8001456:	4aa0      	ldr	r2, [pc, #640]	; (80016d8 <main+0x2b0>)
 8001458:	7813      	ldrb	r3, [r2, #0]
 800145a:	f36f 03c3 	bfc	r3, #3, #1
 800145e:	7013      	strb	r3, [r2, #0]
 8001460:	4a9d      	ldr	r2, [pc, #628]	; (80016d8 <main+0x2b0>)
 8001462:	7813      	ldrb	r3, [r2, #0]
 8001464:	f36f 1304 	bfc	r3, #4, #1
 8001468:	7013      	strb	r3, [r2, #0]
 800146a:	4a9b      	ldr	r2, [pc, #620]	; (80016d8 <main+0x2b0>)
 800146c:	7813      	ldrb	r3, [r2, #0]
 800146e:	f36f 1345 	bfc	r3, #5, #1
 8001472:	7013      	strb	r3, [r2, #0]
 8001474:	4a98      	ldr	r2, [pc, #608]	; (80016d8 <main+0x2b0>)
 8001476:	7813      	ldrb	r3, [r2, #0]
 8001478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147c:	7013      	strb	r3, [r2, #0]
 800147e:	4a96      	ldr	r2, [pc, #600]	; (80016d8 <main+0x2b0>)
 8001480:	7853      	ldrb	r3, [r2, #1]
 8001482:	2102      	movs	r1, #2
 8001484:	f361 0383 	bfi	r3, r1, #2, #2
 8001488:	7053      	strb	r3, [r2, #1]
 800148a:	4a93      	ldr	r2, [pc, #588]	; (80016d8 <main+0x2b0>)
 800148c:	7853      	ldrb	r3, [r2, #1]
 800148e:	2101      	movs	r1, #1
 8001490:	f361 1305 	bfi	r3, r1, #4, #2
 8001494:	7053      	strb	r3, [r2, #1]
 8001496:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <main+0x2b0>)
 8001498:	7853      	ldrb	r3, [r2, #1]
 800149a:	2102      	movs	r1, #2
 800149c:	f361 1387 	bfi	r3, r1, #6, #2
 80014a0:	7053      	strb	r3, [r2, #1]
 80014a2:	4b8d      	ldr	r3, [pc, #564]	; (80016d8 <main+0x2b0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80014aa:	70da      	strb	r2, [r3, #3]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80014b2:	711a      	strb	r2, [r3, #4]
  MAC80215_PACKET_INIT(rxPacket, MAC802154_TYPE_DATA);
 80014b4:	4a89      	ldr	r2, [pc, #548]	; (80016dc <main+0x2b4>)
 80014b6:	7813      	ldrb	r3, [r2, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	f361 0302 	bfi	r3, r1, #0, #3
 80014be:	7013      	strb	r3, [r2, #0]
 80014c0:	4a86      	ldr	r2, [pc, #536]	; (80016dc <main+0x2b4>)
 80014c2:	7813      	ldrb	r3, [r2, #0]
 80014c4:	f36f 03c3 	bfc	r3, #3, #1
 80014c8:	7013      	strb	r3, [r2, #0]
 80014ca:	4a84      	ldr	r2, [pc, #528]	; (80016dc <main+0x2b4>)
 80014cc:	7813      	ldrb	r3, [r2, #0]
 80014ce:	f36f 1304 	bfc	r3, #4, #1
 80014d2:	7013      	strb	r3, [r2, #0]
 80014d4:	4a81      	ldr	r2, [pc, #516]	; (80016dc <main+0x2b4>)
 80014d6:	7813      	ldrb	r3, [r2, #0]
 80014d8:	f36f 1345 	bfc	r3, #5, #1
 80014dc:	7013      	strb	r3, [r2, #0]
 80014de:	4a7f      	ldr	r2, [pc, #508]	; (80016dc <main+0x2b4>)
 80014e0:	7813      	ldrb	r3, [r2, #0]
 80014e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e6:	7013      	strb	r3, [r2, #0]
 80014e8:	4a7c      	ldr	r2, [pc, #496]	; (80016dc <main+0x2b4>)
 80014ea:	7853      	ldrb	r3, [r2, #1]
 80014ec:	2102      	movs	r1, #2
 80014ee:	f361 0383 	bfi	r3, r1, #2, #2
 80014f2:	7053      	strb	r3, [r2, #1]
 80014f4:	4a79      	ldr	r2, [pc, #484]	; (80016dc <main+0x2b4>)
 80014f6:	7853      	ldrb	r3, [r2, #1]
 80014f8:	2101      	movs	r1, #1
 80014fa:	f361 1305 	bfi	r3, r1, #4, #2
 80014fe:	7053      	strb	r3, [r2, #1]
 8001500:	4a76      	ldr	r2, [pc, #472]	; (80016dc <main+0x2b4>)
 8001502:	7853      	ldrb	r3, [r2, #1]
 8001504:	2102      	movs	r1, #2
 8001506:	f361 1387 	bfi	r3, r1, #6, #2
 800150a:	7053      	strb	r3, [r2, #1]
 800150c:	4b73      	ldr	r3, [pc, #460]	; (80016dc <main+0x2b4>)
 800150e:	2200      	movs	r2, #0
 8001510:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8001514:	70da      	strb	r2, [r3, #3]
 8001516:	2200      	movs	r2, #0
 8001518:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800151c:	711a      	strb	r2, [r3, #4]
  // init DW1000
  dwInit(&device);
 800151e:	4870      	ldr	r0, [pc, #448]	; (80016e0 <main+0x2b8>)
 8001520:	f000 fdac 	bl	800207c <dwInit>
  if (dwConfigure(&device) == DW_ERROR_OK)
 8001524:	486e      	ldr	r0, [pc, #440]	; (80016e0 <main+0x2b8>)
 8001526:	f000 fdcb 	bl	80020c0 <dwConfigure>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10c      	bne.n	800154a <main+0x122>
  {
    dwEnableAllLeds(&device);
 8001530:	486b      	ldr	r0, [pc, #428]	; (80016e0 <main+0x2b8>)
 8001532:	f000 fe98 	bl	8002266 <dwEnableAllLeds>
  {
    log_data("[Configure failed]\r\n");
    while (1)
      ;
  }
  dwNewConfiguration(&device);
 8001536:	486a      	ldr	r0, [pc, #424]	; (80016e0 <main+0x2b8>)
 8001538:	f001 fa47 	bl	80029ca <dwNewConfiguration>
  dwSetDefaults(&device);
 800153c:	4868      	ldr	r0, [pc, #416]	; (80016e0 <main+0x2b8>)
 800153e:	f001 fc3d 	bl	8002dbc <dwSetDefaults>
  dwCommitConfiguration(&device);
 8001542:	4867      	ldr	r0, [pc, #412]	; (80016e0 <main+0x2b8>)
 8001544:	f001 fa5b 	bl	80029fe <dwCommitConfiguration>
 8001548:	e003      	b.n	8001552 <main+0x12a>
    log_data("[Configure failed]\r\n");
 800154a:	4866      	ldr	r0, [pc, #408]	; (80016e4 <main+0x2bc>)
 800154c:	f7ff ff36 	bl	80013bc <log_data>
    while (1)
 8001550:	e7fe      	b.n	8001550 <main+0x128>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    dwInteruptHandler();
 8001552:	f7ff feed 	bl	8001330 <dwInteruptHandler>
    // init ranging
    if (initAck)
 8001556:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <main+0x2c0>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <main+0x17c>
    {
      initAck = false;
 8001560:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <main+0x2c0>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
      // memset(&txHandle, 0, sizeof(txHandle));
      // txHandle.typemess = POLL;
      // txHandle.seq = ++curr_seq; // poll message has seq = 1; answer is 2;..
      txPacket.payload[TYPE] = POLL;
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <main+0x2b0>)
 8001568:	2201      	movs	r2, #1
 800156a:	725a      	strb	r2, [r3, #9]
      txPacket.payload[SEQ] = curr_seq;
 800156c:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <main+0x2c4>)
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <main+0x2b0>)
 8001572:	729a      	strb	r2, [r3, #10]
 8001574:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <main+0x2c8>)
 8001576:	881b      	ldrh	r3, [r3, #0]
      memcpy(txPacket.destAddress, anchorAddress, 2);
 8001578:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <main+0x2b0>)
 800157a:	f8a2 3005 	strh.w	r3, [r2, #5]
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <main+0x2cc>)
 8001580:	881b      	ldrh	r3, [r3, #0]
      memcpy(txPacket.sourceAddress, tagBaseAddr, 2);
 8001582:	4a55      	ldr	r2, [pc, #340]	; (80016d8 <main+0x2b0>)
 8001584:	f8a2 3007 	strh.w	r3, [r2, #7]
      // memcpy(txPacket.payload, &txHandle, sizeof(txHandle));
      //  transmision
      dwNewTransmit(&device);
 8001588:	4855      	ldr	r0, [pc, #340]	; (80016e0 <main+0x2b8>)
 800158a:	f001 f9b8 	bl	80028fe <dwNewTransmit>
      dwSetDefaults(&device);
 800158e:	4854      	ldr	r0, [pc, #336]	; (80016e0 <main+0x2b8>)
 8001590:	f001 fc14 	bl	8002dbc <dwSetDefaults>
      dwSetData(&device, (uint8_t *)&txPacket, MAC802154_HEADER_LENGTH + 2); // 2 is length of payload
 8001594:	220b      	movs	r2, #11
 8001596:	4950      	ldr	r1, [pc, #320]	; (80016d8 <main+0x2b0>)
 8001598:	4851      	ldr	r0, [pc, #324]	; (80016e0 <main+0x2b8>)
 800159a:	f001 fc5a 	bl	8002e52 <dwSetData>
      dwStartTransmit(&device);
 800159e:	4850      	ldr	r0, [pc, #320]	; (80016e0 <main+0x2b8>)
 80015a0:	f001 f9c5 	bl	800292e <dwStartTransmit>
      // {
      //   dwReadSystemEventStatusRegister(&device);
      // } while (!(device.sysstatus[0] & (1 << TXFRS_BIT))); //if check TXRFS bit is 1, transmist OKE
      // dwInteruptHandler();
    }
    if (sentAck)
 80015a4:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <main+0x2d0>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d045      	beq.n	800163a <main+0x212>
    {
      // clear flag
      sentAck = false;
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <main+0x2d0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
      dwTimestamp_t departure;
      dwGetTransmitTimestamp(&device, &departure);
 80015b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015b8:	4619      	mov	r1, r3
 80015ba:	4849      	ldr	r0, [pc, #292]	; (80016e0 <main+0x2b8>)
 80015bc:	f001 fcd9 	bl	8002f72 <dwGetTransmitTimestamp>
      departure.timeFull += ANTENNA_DELAY;
 80015c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015c4:	f244 015b 	movw	r1, #16475	; 0x405b
 80015c8:	eb12 0801 	adds.w	r8, r2, r1
 80015cc:	f143 0900 	adc.w	r9, r3, #0
 80015d0:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
      log_data("TxCallBack\r\n");
 80015d4:	4849      	ldr	r0, [pc, #292]	; (80016fc <main+0x2d4>)
 80015d6:	f7ff fef1 	bl	80013bc <log_data>
      switch (txPacket.payload[TYPE])
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <main+0x2b0>)
 80015dc:	7a5b      	ldrb	r3, [r3, #9]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <main+0x1c0>
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d00c      	beq.n	8001600 <main+0x1d8>
 80015e6:	e017      	b.n	8001618 <main+0x1f0>
      {
      case POLL:
        poll_tx = departure;
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <main+0x2d8>)
 80015ea:	461a      	mov	r2, r3
 80015ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f4:	e882 0003 	stmia.w	r2, {r0, r1}
        log_data("POLL\r\n");
 80015f8:	4842      	ldr	r0, [pc, #264]	; (8001704 <main+0x2dc>)
 80015fa:	f7ff fedf 	bl	80013bc <log_data>
        break;
 80015fe:	e00b      	b.n	8001618 <main+0x1f0>
      case FINAL:
        final_tx = departure;
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <main+0x2e0>)
 8001602:	461a      	mov	r2, r3
 8001604:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001608:	e893 0003 	ldmia.w	r3, {r0, r1}
 800160c:	e882 0003 	stmia.w	r2, {r0, r1}
        log_data("FINAL\r\n");
 8001610:	483e      	ldr	r0, [pc, #248]	; (800170c <main+0x2e4>)
 8001612:	f7ff fed3 	bl	80013bc <log_data>
        break;
 8001616:	bf00      	nop
      }
      // config recieve message
      dwSetReceiveWaitTimeout(&device, RX_TIMEOUT);
 8001618:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800161c:	4830      	ldr	r0, [pc, #192]	; (80016e0 <main+0x2b8>)
 800161e:	f000 ffbf 	bl	80025a0 <dwSetReceiveWaitTimeout>
      dwWriteSystemConfigurationRegister(&device);
 8001622:	482f      	ldr	r0, [pc, #188]	; (80016e0 <main+0x2b8>)
 8001624:	f000 ff12 	bl	800244c <dwWriteSystemConfigurationRegister>
      dwNewReceive(&device);
 8001628:	482d      	ldr	r0, [pc, #180]	; (80016e0 <main+0x2b8>)
 800162a:	f001 f924 	bl	8002876 <dwNewReceive>
      dwSetDefaults(&device);
 800162e:	482c      	ldr	r0, [pc, #176]	; (80016e0 <main+0x2b8>)
 8001630:	f001 fbc4 	bl	8002dbc <dwSetDefaults>
      dwStartReceive(&device);
 8001634:	482a      	ldr	r0, [pc, #168]	; (80016e0 <main+0x2b8>)
 8001636:	f001 f936 	bl	80028a6 <dwStartReceive>
      //   dwReadSystemEventStatusRegister(&device);
      // } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
      // dwInteruptHandler();
    }

    if (recievedAck)
 800163a:	4b35      	ldr	r3, [pc, #212]	; (8001710 <main+0x2e8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d086      	beq.n	8001552 <main+0x12a>
    {
      recievedAck = false;
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <main+0x2e8>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
      log_data("RxCallback\r\n");
 800164a:	4832      	ldr	r0, [pc, #200]	; (8001714 <main+0x2ec>)
 800164c:	f7ff feb6 	bl	80013bc <log_data>
      dwTimestamp_t arival;
      // check data length
      int dataLenght = dwGetDataLength(&device);
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <main+0x2b8>)
 8001652:	f001 fc40 	bl	8002ed6 <dwGetDataLength>
 8001656:	4603      	mov	r3, r0
 8001658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (dataLenght == 0)
 800165c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <main+0x240>
      {
        return 0;
 8001664:	2300      	movs	r3, #0
 8001666:	e1a2      	b.n	80019ae <main+0x586>
      }
      memset(&rxPacket, 0, sizeof(rxPacket));
 8001668:	2289      	movs	r2, #137	; 0x89
 800166a:	2100      	movs	r1, #0
 800166c:	481b      	ldr	r0, [pc, #108]	; (80016dc <main+0x2b4>)
 800166e:	f004 fde5 	bl	800623c <memset>
      // get data from anchor and put in rxPacket
      dwGetData(&device, (uint8_t *)&rxPacket, dataLenght);
 8001672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001676:	461a      	mov	r2, r3
 8001678:	4918      	ldr	r1, [pc, #96]	; (80016dc <main+0x2b4>)
 800167a:	4819      	ldr	r0, [pc, #100]	; (80016e0 <main+0x2b8>)
 800167c:	f001 fc63 	bl	8002f46 <dwGetData>
      // check address of tag due to anchor send
      // correct return 0
      if (memcmp(rxPacket.destAddress, tagBaseAddr, 2))
 8001680:	2202      	movs	r2, #2
 8001682:	491c      	ldr	r1, [pc, #112]	; (80016f4 <main+0x2cc>)
 8001684:	4824      	ldr	r0, [pc, #144]	; (8001718 <main+0x2f0>)
 8001686:	f004 fdbb 	bl	8006200 <memcmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <main+0x27e>
      {
        // wrong address and repeat receive
        //  dwSetReceiveWaitTimeout(&device, RX_TIMEOUT);
        //  dwWriteSystemConfigurationRegister(&device);
        dwNewReceive(&device);
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <main+0x2b8>)
 8001692:	f001 f8f0 	bl	8002876 <dwNewReceive>
        dwSetDefaults(&device);
 8001696:	4812      	ldr	r0, [pc, #72]	; (80016e0 <main+0x2b8>)
 8001698:	f001 fb90 	bl	8002dbc <dwSetDefaults>
        dwStartReceive(&device);
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <main+0x2b8>)
 800169e:	f001 f902 	bl	80028a6 <dwStartReceive>
        // do
        // {
        //   dwReadSystemEventStatusRegister(&device);
        // } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
        // dwInteruptHandler();
        return 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e183      	b.n	80019ae <main+0x586>
      }
      else
      {
        // oke address
        switch (rxPacket.payload[TYPE])
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <main+0x2b4>)
 80016a8:	7a5b      	ldrb	r3, [r3, #9]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d002      	beq.n	80016b4 <main+0x28c>
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d076      	beq.n	80017a0 <main+0x378>
 80016b2:	e17b      	b.n	80019ac <main+0x584>
        {
        case ANSWER:
          log_data("ANSWER\r\n");
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <main+0x2f4>)
 80016b6:	f7ff fe81 	bl	80013bc <log_data>
          if (rxPacket.payload[SEQ] != curr_seq + 1) // 2
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <main+0x2b4>)
 80016bc:	7a9b      	ldrb	r3, [r3, #10]
 80016be:	461a      	mov	r2, r3
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <main+0x2c4>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d02c      	beq.n	8001724 <main+0x2fc>
          {
            log_data("wrong sequence number\r\n");
 80016ca:	4815      	ldr	r0, [pc, #84]	; (8001720 <main+0x2f8>)
 80016cc:	f7ff fe76 	bl	80013bc <log_data>
            return 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e16c      	b.n	80019ae <main+0x586>
 80016d4:	0800ade8 	.word	0x0800ade8
 80016d8:	20000344 	.word	0x20000344
 80016dc:	200002b8 	.word	0x200002b8
 80016e0:	20000008 	.word	0x20000008
 80016e4:	0800adf8 	.word	0x0800adf8
 80016e8:	2000006c 	.word	0x2000006c
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000064 	.word	0x20000064
 80016f4:	20000060 	.word	0x20000060
 80016f8:	200003cd 	.word	0x200003cd
 80016fc:	0800ae10 	.word	0x0800ae10
 8001700:	20000288 	.word	0x20000288
 8001704:	0800ae20 	.word	0x0800ae20
 8001708:	200002a8 	.word	0x200002a8
 800170c:	0800ae28 	.word	0x0800ae28
 8001710:	200003ce 	.word	0x200003ce
 8001714:	0800ae30 	.word	0x0800ae30
 8001718:	200002bd 	.word	0x200002bd
 800171c:	0800ae40 	.word	0x0800ae40
 8001720:	0800ae4c 	.word	0x0800ae4c
          }
          dwGetReceiveTimestamp(&device, &arival);
 8001724:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001728:	4619      	mov	r1, r3
 800172a:	48a9      	ldr	r0, [pc, #676]	; (80019d0 <main+0x5a8>)
 800172c:	f001 fc32 	bl	8002f94 <dwGetReceiveTimestamp>
          arival.timeFull -= ANTENNA_DELAY;
 8001730:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001734:	49a7      	ldr	r1, [pc, #668]	; (80019d4 <main+0x5ac>)
 8001736:	eb12 0a01 	adds.w	sl, r2, r1
 800173a:	f143 3bff 	adc.w	fp, r3, #4294967295
 800173e:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
          answer_rx = arival;
 8001742:	4ba5      	ldr	r3, [pc, #660]	; (80019d8 <main+0x5b0>)
 8001744:	461a      	mov	r2, r3
 8001746:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800174a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800174e:	e882 0003 	stmia.w	r2, {r0, r1}
          // clear txpacket
          memset(&txPacket, 0, sizeof(txPacket));
 8001752:	2289      	movs	r2, #137	; 0x89
 8001754:	2100      	movs	r1, #0
 8001756:	48a1      	ldr	r0, [pc, #644]	; (80019dc <main+0x5b4>)
 8001758:	f004 fd70 	bl	800623c <memset>
          txPacket.payload[TYPE] = FINAL;
 800175c:	4b9f      	ldr	r3, [pc, #636]	; (80019dc <main+0x5b4>)
 800175e:	2203      	movs	r2, #3
 8001760:	725a      	strb	r2, [r3, #9]
          txPacket.payload[SEQ] = rxPacket.payload[SEQ] + 1; // 3
 8001762:	4b9f      	ldr	r3, [pc, #636]	; (80019e0 <main+0x5b8>)
 8001764:	7a9b      	ldrb	r3, [r3, #10]
 8001766:	3301      	adds	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b9c      	ldr	r3, [pc, #624]	; (80019dc <main+0x5b4>)
 800176c:	729a      	strb	r2, [r3, #10]
 800176e:	4b9d      	ldr	r3, [pc, #628]	; (80019e4 <main+0x5bc>)
 8001770:	881b      	ldrh	r3, [r3, #0]
          memcpy(txPacket.destAddress, anchorAddress, 2);
 8001772:	4a9a      	ldr	r2, [pc, #616]	; (80019dc <main+0x5b4>)
 8001774:	f8a2 3005 	strh.w	r3, [r2, #5]
 8001778:	4b9b      	ldr	r3, [pc, #620]	; (80019e8 <main+0x5c0>)
 800177a:	881b      	ldrh	r3, [r3, #0]
          memcpy(txPacket.sourceAddress, tagBaseAddr, 2);
 800177c:	4a97      	ldr	r2, [pc, #604]	; (80019dc <main+0x5b4>)
 800177e:	f8a2 3007 	strh.w	r3, [r2, #7]
          dwNewTransmit(&device);
 8001782:	4893      	ldr	r0, [pc, #588]	; (80019d0 <main+0x5a8>)
 8001784:	f001 f8bb 	bl	80028fe <dwNewTransmit>
          dwSetDefaults(&device);
 8001788:	4891      	ldr	r0, [pc, #580]	; (80019d0 <main+0x5a8>)
 800178a:	f001 fb17 	bl	8002dbc <dwSetDefaults>
          dwSetData(&device, (uint8_t *)&txPacket, MAC802154_HEADER_LENGTH + 2); // 2 is length of payload
 800178e:	220b      	movs	r2, #11
 8001790:	4992      	ldr	r1, [pc, #584]	; (80019dc <main+0x5b4>)
 8001792:	488f      	ldr	r0, [pc, #572]	; (80019d0 <main+0x5a8>)
 8001794:	f001 fb5d 	bl	8002e52 <dwSetData>
          dwStartTransmit(&device);
 8001798:	488d      	ldr	r0, [pc, #564]	; (80019d0 <main+0x5a8>)
 800179a:	f001 f8c8 	bl	800292e <dwStartTransmit>
          // do
          // {
          //   dwReadSystemEventStatusRegister(&device);
          // } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
          // dwInteruptHandler();
          break;
 800179e:	e105      	b.n	80019ac <main+0x584>
        case REPORT:
          log_data("REPORT\r\n");
 80017a0:	4892      	ldr	r0, [pc, #584]	; (80019ec <main+0x5c4>)
 80017a2:	f7ff fe0b 	bl	80013bc <log_data>
          // reportpayload to receive timestamp of anchor send to tag to calculate
          // able truy cap cac phan tu trong payload thong qua con tro
          reportPayload_t *reportmess = (reportPayload_t *)(rxPacket.payload + 2);
 80017a6:	4b92      	ldr	r3, [pc, #584]	; (80019f0 <main+0x5c8>)
 80017a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          double tround1, treply1, tround2, treply2, tprop_ctn, tprop, distance;
          if (rxPacket.payload[SEQ] != curr_seq + 3) // 4
 80017ac:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <main+0x5b8>)
 80017ae:	7a9b      	ldrb	r3, [r3, #10]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b90      	ldr	r3, [pc, #576]	; (80019f4 <main+0x5cc>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3303      	adds	r3, #3
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d004      	beq.n	80017c6 <main+0x39e>
          {
            log_data("wrong sequence number\r\n");
 80017bc:	488e      	ldr	r0, [pc, #568]	; (80019f8 <main+0x5d0>)
 80017be:	f7ff fdfd 	bl	80013bc <log_data>
            return 0;
 80017c2:	2300      	movs	r3, #0
        return 0;
 80017c4:	e0f3      	b.n	80019ae <main+0x586>
          }
          memcpy(&poll_rx, &reportmess->pollRx, 5);
 80017c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ca:	2205      	movs	r2, #5
 80017cc:	4619      	mov	r1, r3
 80017ce:	488b      	ldr	r0, [pc, #556]	; (80019fc <main+0x5d4>)
 80017d0:	f004 fd26 	bl	8006220 <memcpy>
          memcpy(&answer_tx, &reportmess->answerTx, 5);
 80017d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017d8:	3305      	adds	r3, #5
 80017da:	2205      	movs	r2, #5
 80017dc:	4619      	mov	r1, r3
 80017de:	4888      	ldr	r0, [pc, #544]	; (8001a00 <main+0x5d8>)
 80017e0:	f004 fd1e 	bl	8006220 <memcpy>
          memcpy(&final_rx, &reportmess->finalRx, 5);
 80017e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017e8:	330a      	adds	r3, #10
 80017ea:	2205      	movs	r2, #5
 80017ec:	4619      	mov	r1, r3
 80017ee:	4885      	ldr	r0, [pc, #532]	; (8001a04 <main+0x5dc>)
 80017f0:	f004 fd16 	bl	8006220 <memcpy>

          tround1 = answer_rx.timeLow32 - poll_tx.timeLow32;
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <main+0x5b0>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b83      	ldr	r3, [pc, #524]	; (8001a08 <main+0x5e0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fdf0 	bl	80003e4 <__aeabi_ui2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
          treply1 = answer_tx.timeLow32 - poll_rx.timeLow32;
 800180c:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <main+0x5d8>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <main+0x5d4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fde4 	bl	80003e4 <__aeabi_ui2d>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
          tround2 = final_rx.timeLow32 - answer_tx.timeLow32;
 8001824:	4b77      	ldr	r3, [pc, #476]	; (8001a04 <main+0x5dc>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <main+0x5d8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fdd8 	bl	80003e4 <__aeabi_ui2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
          treply2 = final_tx.timeLow32 - answer_rx.timeLow32;
 800183c:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <main+0x5e4>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <main+0x5b0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fdcc 	bl	80003e4 <__aeabi_ui2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

          //printf("tround1: %f   treply2: %f\r\r\n", tround1, treply2);
          //printf("tround2: %f   treply1: %f\r\r\n", tround2, treply1);

          // tprop_ctn is value of resigter timer
          tprop_ctn = ((tround1 * tround2) - (treply1 * treply2)) / (tround1 + tround2 + treply1 + treply2);
 8001854:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001858:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800185c:	f7fe fe3c 	bl	80004d8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4614      	mov	r4, r2
 8001866:	461d      	mov	r5, r3
 8001868:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800186c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001870:	f7fe fe32 	bl	80004d8 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fc74 	bl	8000168 <__aeabi_dsub>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4614      	mov	r4, r2
 8001886:	461d      	mov	r5, r3
 8001888:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800188c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001890:	f7fe fc6c 	bl	800016c <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80018a0:	f7fe fc64 	bl	800016c <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80018b0:	f7fe fc5c 	bl	800016c <__adddf3>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe ff36 	bl	800072c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
          //printf("TProp (ctn): %d\r\r\n", (unsigned int)tprop_ctn);

          // tprop is value unit sencond
          tprop = tprop_ctn / tsfreq;
 80018c8:	a33b      	add	r3, pc, #236	; (adr r3, 80019b8 <main+0x590>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80018d2:	f7fe ff2b 	bl	800072c <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
          distance = C * tprop;
 80018de:	a338      	add	r3, pc, #224	; (adr r3, 80019c0 <main+0x598>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80018e8:	f7fe fdf6 	bl	80004d8 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

          //printf("distance of anchor %d is: %5d(mm)", (int)rxPacket.sourceAddress, (unsigned int)distance * 1000);
          char buf1[50], buf2[30], buf3[30];

          sprintf(buf3, "time of flight: %f\r\n", tprop*1000000000000);
 80018f4:	a334      	add	r3, pc, #208	; (adr r3, 80019c8 <main+0x5a0>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80018fe:	f7fe fdeb 	bl	80004d8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800190a:	4941      	ldr	r1, [pc, #260]	; (8001a10 <main+0x5e8>)
 800190c:	f005 fb10 	bl	8006f30 <siprintf>
          log_data(buf3);
 8001910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fd51 	bl	80013bc <log_data>

          sprintf(buf1, "distance: %f(mm)\r\n", distance * 1000);
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <main+0x5ec>)
 8001920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001924:	f7fe fdd8 	bl	80004d8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	f107 000c 	add.w	r0, r7, #12
 8001930:	4939      	ldr	r1, [pc, #228]	; (8001a18 <main+0x5f0>)
 8001932:	f005 fafd 	bl	8006f30 <siprintf>
          log_data(buf1);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fd3e 	bl	80013bc <log_data>

          dwGetReceiveTimestamp(&device, &arival);
 8001940:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001944:	4619      	mov	r1, r3
 8001946:	4822      	ldr	r0, [pc, #136]	; (80019d0 <main+0x5a8>)
 8001948:	f001 fb24 	bl	8002f94 <dwGetReceiveTimestamp>
          arival.timeFull -= ANTENNA_DELAY;
 800194c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001950:	4920      	ldr	r1, [pc, #128]	; (80019d4 <main+0x5ac>)
 8001952:	1851      	adds	r1, r2, r1
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	f143 33ff 	adc.w	r3, r3, #4294967295
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001960:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
          double totaltime;
          totaltime = (arival.timeLow32 - poll_tx.timeLow32) / tsfreq;
 8001964:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <main+0x5e0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd38 	bl	80003e4 <__aeabi_ui2d>
 8001974:	a310      	add	r3, pc, #64	; (adr r3, 80019b8 <main+0x590>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fed7 	bl	800072c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
          sprintf(buf2, "total time: %f\r\n", totaltime);
 8001986:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800198a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800198e:	4923      	ldr	r1, [pc, #140]	; (8001a1c <main+0x5f4>)
 8001990:	f005 face 	bl	8006f30 <siprintf>
          log_data(buf2);
 8001994:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd0f 	bl	80013bc <log_data>

          curr_seq = 1;
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <main+0x5cc>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
          initAck = true;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <main+0x5f8>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
          break;
 80019aa:	bf00      	nop
    dwInteruptHandler();
 80019ac:	e5d1      	b.n	8001552 <main+0x12a>
        }
      }
    }
  }
  /* USER CODE END 3 */
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	37d8      	adds	r7, #216	; 0xd8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b8:	00000000 	.word	0x00000000
 80019bc:	422dc130 	.word	0x422dc130
 80019c0:	4a000000 	.word	0x4a000000
 80019c4:	41b1de78 	.word	0x41b1de78
 80019c8:	a2000000 	.word	0xa2000000
 80019cc:	426d1a94 	.word	0x426d1a94
 80019d0:	20000008 	.word	0x20000008
 80019d4:	ffffbfa5 	.word	0xffffbfa5
 80019d8:	200002a0 	.word	0x200002a0
 80019dc:	20000344 	.word	0x20000344
 80019e0:	200002b8 	.word	0x200002b8
 80019e4:	20000064 	.word	0x20000064
 80019e8:	20000060 	.word	0x20000060
 80019ec:	0800ae64 	.word	0x0800ae64
 80019f0:	200002c3 	.word	0x200002c3
 80019f4:	20000000 	.word	0x20000000
 80019f8:	0800ae4c 	.word	0x0800ae4c
 80019fc:	20000290 	.word	0x20000290
 8001a00:	20000298 	.word	0x20000298
 8001a04:	200002b0 	.word	0x200002b0
 8001a08:	20000288 	.word	0x20000288
 8001a0c:	200002a8 	.word	0x200002a8
 8001a10:	0800ae70 	.word	0x0800ae70
 8001a14:	408f4000 	.word	0x408f4000
 8001a18:	0800ae88 	.word	0x0800ae88
 8001a1c:	0800ae9c 	.word	0x0800ae9c
 8001a20:	2000006c 	.word	0x2000006c

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2228      	movs	r2, #40	; 0x28
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fc02 	bl	800623c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0318 	add.w	r3, r7, #24
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 f835 	bl	8004adc <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a78:	f000 f819 	bl	8001aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	2302      	movs	r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 faa2 	bl	8004fe0 <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001aa2:	f000 f804 	bl	8001aae <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3740      	adds	r7, #64	; 0x40
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab2:	b672      	cpsid	i
}
 8001ab4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <Error_Handler+0x8>

08001ab8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <MX_SPI1_Init+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001aec:	2208      	movs	r2, #8
 8001aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001b04:	220a      	movs	r2, #10
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001b0a:	f003 fbf7 	bl	80052fc <HAL_SPI_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b14:	f7ff ffcb 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200003d0 	.word	0x200003d0
 8001b20:	40013000 	.word	0x40013000

08001b24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12f      	bne.n	8001ba4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b74:	23a0      	movs	r3, #160	; 0xa0
 8001b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b88:	f002 fe0c 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b8c:	2340      	movs	r3, #64	; 0x40
 8001b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001ba0:	f002 fe00 	bl	80047a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40013000 	.word	0x40013000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010800 	.word	0x40010800

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_MspInit+0x5c>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_MspInit+0x5c>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_MspInit+0x60>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_MspInit+0x60>)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <MemManage_Handler+0x4>

08001c2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <BusFault_Handler+0x4>

08001c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <UsageFault_Handler+0x4>

08001c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c62:	f002 fc7b 	bl	800455c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return 1;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <_kill>:

int _kill(int pid, int sig)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c82:	f004 fa93 	bl	80061ac <__errno>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2216      	movs	r2, #22
 8001c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_exit>:

void _exit (int status)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffe7 	bl	8001c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001caa:	e7fe      	b.n	8001caa <_exit+0x12>

08001cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e00a      	b.n	8001cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbe:	f3af 8000 	nop.w
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf0      	blt.n	8001cbe <_read+0x12>
  }

  return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <_isatty>:

int _isatty(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f004 fa18 	bl	80061ac <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20005000 	.word	0x20005000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	20000428 	.word	0x20000428
 8001db0:	20000508 	.word	0x20000508

08001db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_USART1_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART1_UART_Init+0x4c>)
 8001df8:	f004 f808 	bl	8005e0c <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff fe54 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000042c 	.word	0x2000042c
 8001e10:	40013800 	.word	0x40013800

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_UART_MspInit+0x8c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d131      	bne.n	8001e98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_UART_MspInit+0x90>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	4619      	mov	r1, r3
 8001e78:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e7a:	f002 fc93 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e94:	f002 fc86 	bl	80047a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010800 	.word	0x40010800

08001eac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eac:	f7ff ff82 	bl	8001db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb0:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eb2:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ec8:	4c09      	ldr	r4, [pc, #36]	; (8001ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f004 f96f 	bl	80061b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eda:	f7ff faa5 	bl	8001428 <main>
  bx lr
 8001ede:	4770      	bx	lr
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8001ee8:	0800b3dc 	.word	0x0800b3dc
  ldr r2, =_sbss
 8001eec:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8001ef0:	20000508 	.word	0x20000508

08001ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC1_2_IRQHandler>

08001ef6 <setBit>:
static const uint8_t BIAS_900_16[] = {137, 122, 105, 88, 69, 47, 25, 0, 21, 48, 79, 105, 127, 147, 160, 169, 178, 197};
static const uint8_t BIAS_900_64[] = {147, 133, 117, 99, 75, 50, 29, 0, 24, 45, 63, 76, 87, 98, 116, 122, 132, 142};

// Utility functions
static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b089      	sub	sp, #36	; 0x24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	70fb      	strb	r3, [r7, #3]
    unsigned int idx;
    unsigned int shift;
    idx = bit / 8;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d228      	bcs.n	8001f64 <setBit+0x6e>
        return; // TODO proper error handling: out of bounds
    uint8_t *targetByte = &data[idx];
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
    shift = bit % 8;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	617b      	str	r3, [r7, #20]
    if (val)
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <setBit+0x4e>
        *targetByte |= (1 << shift);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	2101      	movs	r1, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e010      	b.n	8001f66 <setBit+0x70>
    else
        *targetByte &= ~(1 << shift);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b25a      	sxtb	r2, r3
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	b25b      	sxtb	r3, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	b25b      	sxtb	r3, r3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e000      	b.n	8001f66 <setBit+0x70>
        return; // TODO proper error handling: out of bounds
 8001f64:	bf00      	nop
}
 8001f66:	3724      	adds	r7, #36	; 0x24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b089      	sub	sp, #36	; 0x24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
    unsigned int idx;
    unsigned int shift;

    idx = bit / 8;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d301      	bcc.n	8001f8c <getBit+0x1e>
        return false; // TODO proper error handling: out of bounds
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e013      	b.n	8001fb4 <getBit+0x46>
    uint8_t targetByte = data[idx];
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	76fb      	strb	r3, [r7, #27]
    shift = bit % 8;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	617b      	str	r3, [r7, #20]
    return (targetByte >> shift) & 0x01;
 8001f9e:	7efa      	ldrb	r2, [r7, #27]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa42 f303 	asr.w	r3, r2, r3
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3724      	adds	r7, #36	; 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
    unsigned int i;
    for (i = 0; i < n; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e00c      	b.n	8001fea <writeValueToBytes+0x2c>
    {
        data[i] = ((val >> (i * 8)) & 0xFF);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	fa42 f103 	asr.w	r1, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3ee      	bcc.n	8001fd0 <writeValueToBytes+0x12>
    }
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <readBytesOTP>:

static void readBytesOTP(dwDeviceTypes_t *dev, uint16_t address, uint8_t data[])
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b088      	sub	sp, #32
 8002002:	af02      	add	r7, sp, #8
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	460b      	mov	r3, r1
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	817b      	strh	r3, [r7, #10]
    uint8_t addressBytes[LEN_OTP_ADDR];
    addressBytes[0] = (address & 0xFF);
 800200c:	897b      	ldrh	r3, [r7, #10]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	753b      	strb	r3, [r7, #20]
    addressBytes[1] = ((address >> 8) & 0xFF);
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	757b      	strb	r3, [r7, #21]
    // set address
    dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2202      	movs	r2, #2
 8002022:	9200      	str	r2, [sp, #0]
 8002024:	2204      	movs	r2, #4
 8002026:	212d      	movs	r1, #45	; 0x2d
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f002 f9e3 	bl	80043f4 <dwSpiWrite>
    // switch into read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 800202e:	2303      	movs	r3, #3
 8002030:	2206      	movs	r2, #6
 8002032:	212d      	movs	r1, #45	; 0x2d
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f002 fa20 	bl	800447a <dwSpiWrite8>
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 800203a:	2301      	movs	r3, #1
 800203c:	2206      	movs	r2, #6
 800203e:	212d      	movs	r1, #45	; 0x2d
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f002 fa1a 	bl	800447a <dwSpiWrite8>
    // read value/block - 4 bytes
    dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8002046:	2304      	movs	r3, #4
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	220a      	movs	r2, #10
 800204e:	212d      	movs	r1, #45	; 0x2d
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f002 f967 	bl	8004324 <dwSpiRead>
    // end read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8002056:	2300      	movs	r3, #0
 8002058:	2206      	movs	r2, #6
 800205a:	212d      	movs	r1, #45	; 0x2d
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f002 fa0c 	bl	800447a <dwSpiWrite8>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <dummyHandler>:

void dummyHandler(dwDeviceTypes_t *dev)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
    ;
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <dwInit>:

void dwInit(dwDeviceTypes_t *dev)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    dev->func = &dwFunc;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <dwInit+0x3c>)
 8002088:	601a      	str	r2, [r3, #0]
    dev->handleSent = dummyHandler;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <dwInit+0x40>)
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
	dev->handleError = dummyHandler;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <dwInit+0x40>)
 8002094:	63da      	str	r2, [r3, #60]	; 0x3c
	dev->handleReceived = dummyHandler;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <dwInit+0x40>)
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
	dev->handleReceiveTimeout = dummyHandler;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <dwInit+0x40>)
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
	dev->handleReceiveFailed = dummyHandler;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a05      	ldr	r2, [pc, #20]	; (80020bc <dwInit+0x40>)
 80020a6:	649a      	str	r2, [r3, #72]	; 0x48
	dev->handleReceiveTimestampAvailable = dummyHandler;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <dwInit+0x40>)
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000074 	.word	0x20000074
 80020bc:	0800206b 	.word	0x0800206b

080020c0 <dwConfigure>:

int dwConfigure(dwDeviceTypes_t *dev)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	6078      	str	r0, [r7, #4]
    dwEnableClock(dev, dwClockAuto);
 80020c8:	2100      	movs	r1, #0
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f91c 	bl	8002308 <dwEnableClock>
    dev->func->delayms(dev, 5);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2105      	movs	r1, #5
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
	dev->func->reset(dev);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
    dev->func->delayms(dev, 5);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2105      	movs	r1, #5
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
    uint32_t deviceID = dwGetDeviceId(dev);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8a9 	bl	800224a <dwGetDeviceId>
 80020f8:	60f8      	str	r0, [r7, #12]
    if (deviceID != 0xdeca0130)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <dwConfigure+0xdc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d001      	beq.n	8002106 <dwConfigure+0x46>
    {
        return DW_ERROR_WRONG_ID;
 8002102:	2301      	movs	r3, #1
 8002104:	e045      	b.n	8002192 <dwConfigure+0xd2>
    }

    memset(dev->networkAndAddress, 0x38, LEN_PANADR);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3309      	adds	r3, #9
 800210a:	2204      	movs	r2, #4
 800210c:	2138      	movs	r1, #56	; 0x38
 800210e:	4618      	mov	r0, r3
 8002110:	f004 f894 	bl	800623c <memset>
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3309      	adds	r3, #9
 8002118:	2204      	movs	r2, #4
 800211a:	9200      	str	r2, [sp, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2103      	movs	r1, #3
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f002 f967 	bl	80043f4 <dwSpiWrite>

    memset(dev->syscfg, 0, LEN_SYS_CFG);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	330d      	adds	r3, #13
 800212a:	2204      	movs	r2, #4
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f004 f884 	bl	800623c <memset>
    dwSetDoubleBuffering(dev, false);
 8002134:	2100      	movs	r1, #0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa87 	bl	800264a <dwSetDoubleBuffering>
    dwSetInterruptPolarity(dev, true);
 800213c:	2101      	movs	r1, #1
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 faa0 	bl	8002684 <dwSetInterruptPolarity>
    dwWriteSystemConfigurationRegister(dev);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f981 	bl	800244c <dwWriteSystemConfigurationRegister>

    dwClearInterrupts(dev);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fb62 	bl	8002814 <dwClearInterrupts>
    dwWriteSystemEventMaskRegister(dev);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f9d0 	bl	80024f6 <dwWriteSystemEventMaskRegister>

    dwEnableClock(dev, dwClockXti);
 8002156:	2101      	movs	r1, #1
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f8d5 	bl	8002308 <dwEnableClock>
    dev->func->delayms(dev, 5);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2105      	movs	r1, #5
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
    dwManageLDE(dev);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f818 	bl	80021a0 <dwManageLDE>
    dev->func->delayms(dev, 5);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2105      	movs	r1, #5
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
    dwEnableClock(dev, dwClockPll);
 800217c:	2102      	movs	r1, #2
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8c2 	bl	8002308 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2105      	movs	r1, #5
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
//    dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
//    dev->func->delayms(dev, 5);
    return DW_ERROR_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	deca0130 	.word	0xdeca0130

080021a0 <dwManageLDE>:

void dwManageLDE(dwDeviceTypes_t *dev)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    uint8_t otpctrl[LEN_OTP_CTRL];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2204      	movs	r2, #4
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 f843 	bl	800623c <memset>
    memset(otpctrl, 0, LEN_OTP_CTRL);
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	2202      	movs	r2, #2
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f83c 	bl	800623c <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2204      	movs	r2, #4
 80021ca:	9200      	str	r2, [sp, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2136      	movs	r1, #54	; 0x36
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f002 f8a7 	bl	8004324 <dwSpiRead>
    dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	2202      	movs	r2, #2
 80021dc:	9200      	str	r2, [sp, #0]
 80021de:	2206      	movs	r2, #6
 80021e0:	212d      	movs	r1, #45	; 0x2d
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f002 f89e 	bl	8004324 <dwSpiRead>
    pmscctrl0[0] = 0x01;
 80021e8:	2301      	movs	r3, #1
 80021ea:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x03;
 80021ec:	2303      	movs	r3, #3
 80021ee:	737b      	strb	r3, [r7, #13]
    otpctrl[0] = 0x00;
 80021f0:	2300      	movs	r3, #0
 80021f2:	723b      	strb	r3, [r7, #8]
    otpctrl[1] = 0x80;
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	727b      	strb	r3, [r7, #9]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2204      	movs	r2, #4
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	2136      	movs	r1, #54	; 0x36
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f002 f8f5 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	2202      	movs	r2, #2
 8002210:	9200      	str	r2, [sp, #0]
 8002212:	2206      	movs	r2, #6
 8002214:	212d      	movs	r1, #45	; 0x2d
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f002 f8ec 	bl	80043f4 <dwSpiWrite>
    dev->func->delayms(dev, 5);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2105      	movs	r1, #5
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
    pmscctrl0[0] = 0x00;
 8002228:	2300      	movs	r3, #0
 800222a:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x02;
 800222c:	2302      	movs	r3, #2
 800222e:	737b      	strb	r3, [r7, #13]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	2204      	movs	r2, #4
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	2136      	movs	r1, #54	; 0x36
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f002 f8d9 	bl	80043f4 <dwSpiWrite>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <dwGetDeviceId>:

uint32_t dwGetDeviceId(dwDeviceTypes_t *dev)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
    return dwSpiRead32(dev, DEV_ID, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f002 f8b7 	bl	80043ca <dwSpiRead32>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDeviceTypes_t *dev)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
    uint32_t reg;
    // Set all 4 GPIO in LED mode
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 800226e:	2200      	movs	r2, #0
 8002270:	2126      	movs	r1, #38	; 0x26
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f002 f8a9 	bl	80043ca <dwSpiRead32>
 8002278:	60f8      	str	r0, [r7, #12]
    reg &= ~0x00003FC0ul;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002280:	60fb      	str	r3, [r7, #12]
    reg |= 0x00001540ul;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 8002288:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	2126      	movs	r1, #38	; 0x26
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f002 f909 	bl	80044a8 <dwSpiWrite32>
    reg = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 800229a:	2200      	movs	r2, #0
 800229c:	2126      	movs	r1, #38	; 0x26
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f002 f893 	bl	80043ca <dwSpiRead32>
 80022a4:	60f8      	str	r0, [r7, #12]
    // Enable debounce clock (used to clock the LED blinking)
    reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2136      	movs	r1, #54	; 0x36
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f002 f88d 	bl	80043ca <dwSpiRead32>
 80022b0:	60f8      	str	r0, [r7, #12]
    reg |= 0x00840000ul;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 80022b8:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	2136      	movs	r1, #54	; 0x36
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f002 f8f1 	bl	80044a8 <dwSpiWrite32>

    // Enable LED blinking and set the rate
    reg = 0x00000110ul;
 80022c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022ca:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2228      	movs	r2, #40	; 0x28
 80022d0:	2136      	movs	r1, #54	; 0x36
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f002 f8e8 	bl	80044a8 <dwSpiWrite32>

    // Trigger a manual blink of the LEDs for test
    reg |= 0x000f0000ul;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80022de:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2228      	movs	r2, #40	; 0x28
 80022e4:	2136      	movs	r1, #54	; 0x36
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f002 f8de 	bl	80044a8 <dwSpiWrite32>
    reg &= ~0x000f0000ul;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80022f2:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2228      	movs	r2, #40	; 0x28
 80022f8:	2136      	movs	r1, #54	; 0x36
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f002 f8d4 	bl	80044a8 <dwSpiWrite32>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <dwEnableClock>:

void dwEnableClock(dwDeviceTypes_t *dev, dwClock_t clock)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2204      	movs	r2, #4
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f003 ff8d 	bl	800623c <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	2204      	movs	r2, #4
 8002328:	9200      	str	r2, [sp, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	2136      	movs	r1, #54	; 0x36
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 fff8 	bl	8004324 <dwSpiRead>
    if (clock == dwClockAuto)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <dwEnableClock+0x4e>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2100      	movs	r1, #0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
        pmscctrl0[0] = dwClockAuto;
 8002346:	2300      	movs	r3, #0
 8002348:	733b      	strb	r3, [r7, #12]
        pmscctrl0[1] &= 0xFE;
 800234a:	7b7b      	ldrb	r3, [r7, #13]
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	737b      	strb	r3, [r7, #13]
 8002354:	e026      	b.n	80023a4 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockXti)
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d110      	bne.n	800237e <dwEnableClock+0x76>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2100      	movs	r1, #0
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 8002368:	7b3b      	ldrb	r3, [r7, #12]
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockXti;
 8002372:	7b3b      	ldrb	r3, [r7, #12]
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	733b      	strb	r3, [r7, #12]
 800237c:	e012      	b.n	80023a4 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockPll)
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d10f      	bne.n	80023a4 <dwEnableClock+0x9c>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2101      	movs	r1, #1
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 8002390:	7b3b      	ldrb	r3, [r7, #12]
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockPll;
 800239a:	7b3b      	ldrb	r3, [r7, #12]
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	733b      	strb	r3, [r7, #12]
    }
    else
    {
        // TODO deliver proper warning
    }
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2201      	movs	r2, #1
 80023aa:	9200      	str	r2, [sp, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2136      	movs	r1, #54	; 0x36
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f002 f81f 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2204      	movs	r2, #4
 80023bc:	9200      	str	r2, [sp, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	2136      	movs	r1, #54	; 0x36
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f002 f816 	bl	80043f4 <dwSpiWrite>
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <dwRxSoftReset>:
/**
    Reset the receiver. Needed after errors or timeouts.
    From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDeviceTypes_t *dev)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2204      	movs	r2, #4
 80023de:	9200      	str	r2, [sp, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2136      	movs	r1, #54	; 0x36
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f001 ff9d 	bl	8004324 <dwSpiRead>
    pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	f023 0310 	bic.w	r3, r3, #16
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2204      	movs	r2, #4
 80023fa:	9200      	str	r2, [sp, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2136      	movs	r1, #54	; 0x36
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f001 fff7 	bl	80043f4 <dwSpiWrite>
    pmscctrl0[3] = pmscctrl0[3] | 0x10;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	b2db      	uxtb	r3, r3
 800240e:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2204      	movs	r2, #4
 8002416:	9200      	str	r2, [sp, #0]
 8002418:	2200      	movs	r2, #0
 800241a:	2136      	movs	r1, #54	; 0x36
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f001 ffe9 	bl	80043f4 <dwSpiWrite>
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */
void dwReadSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af02      	add	r7, sp, #8
 8002430:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	330d      	adds	r3, #13
 8002436:	2204      	movs	r2, #4
 8002438:	9200      	str	r2, [sp, #0]
 800243a:	2200      	movs	r2, #0
 800243c:	2104      	movs	r1, #4
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f001 ff70 	bl	8004324 <dwSpiRead>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	330d      	adds	r3, #13
 8002458:	2204      	movs	r2, #4
 800245a:	9200      	str	r2, [sp, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	2104      	movs	r1, #4
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f001 ffc7 	bl	80043f4 <dwSpiWrite>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDeviceTypes_t *dev)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af02      	add	r7, sp, #8
 8002474:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3319      	adds	r3, #25
 800247a:	2205      	movs	r2, #5
 800247c:	9200      	str	r2, [sp, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	210f      	movs	r1, #15
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 ff4e 	bl	8004324 <dwSpiRead>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3309      	adds	r3, #9
 800249c:	2204      	movs	r2, #4
 800249e:	9200      	str	r2, [sp, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2103      	movs	r1, #3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f001 ff3d 	bl	8004324 <dwSpiRead>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af02      	add	r7, sp, #8
 80024b8:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3309      	adds	r3, #9
 80024be:	2204      	movs	r2, #4
 80024c0:	9200      	str	r2, [sp, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2103      	movs	r1, #3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f001 ff94 	bl	80043f4 <dwSpiWrite>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af02      	add	r7, sp, #8
 80024da:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3311      	adds	r3, #17
 80024e0:	2204      	movs	r2, #4
 80024e2:	9200      	str	r2, [sp, #0]
 80024e4:	2200      	movs	r2, #0
 80024e6:	210e      	movs	r1, #14
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 ff1b 	bl	8004324 <dwSpiRead>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3311      	adds	r3, #17
 8002502:	2204      	movs	r2, #4
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	210e      	movs	r1, #14
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f001 ff72 	bl	80043f4 <dwSpiWrite>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDeviceTypes_t *dev)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3315      	adds	r3, #21
 8002524:	2204      	movs	r2, #4
 8002526:	9200      	str	r2, [sp, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	211f      	movs	r1, #31
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f001 fef9 	bl	8004324 <dwSpiRead>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDeviceTypes_t *dev)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af02      	add	r7, sp, #8
 8002540:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3315      	adds	r3, #21
 8002546:	2204      	movs	r2, #4
 8002548:	9200      	str	r2, [sp, #0]
 800254a:	2200      	movs	r2, #0
 800254c:	211f      	movs	r1, #31
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f001 ff50 	bl	80043f4 <dwSpiWrite>
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	331e      	adds	r3, #30
 8002568:	2205      	movs	r2, #5
 800256a:	9200      	str	r2, [sp, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	2108      	movs	r1, #8
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f001 fed7 	bl	8004324 <dwSpiRead>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af02      	add	r7, sp, #8
 8002584:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	331e      	adds	r3, #30
 800258a:	2205      	movs	r2, #5
 800258c:	9200      	str	r2, [sp, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	2108      	movs	r1, #8
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 ff2e 	bl	80043f4 <dwSpiWrite>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <dwSetReceiveWaitTimeout>:

/******************************************************************/

void dwSetReceiveWaitTimeout(dwDeviceTypes_t *dev, uint16_t timeout)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
    dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
 80025ac:	1cbb      	adds	r3, r7, #2
 80025ae:	2202      	movs	r2, #2
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	210c      	movs	r1, #12
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f001 ff1c 	bl	80043f4 <dwSpiWrite>
    setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout != 0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 000d 	add.w	r0, r3, #13
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	221c      	movs	r2, #28
 80025d0:	2104      	movs	r1, #4
 80025d2:	f7ff fc90 	bl	8001ef6 <setBit>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <dwSetFrameFilter>:

void dwSetFrameFilter(dwDeviceTypes_t *dev, bool val)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f103 000d 	add.w	r0, r3, #13
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	2200      	movs	r2, #0
 80025f4:	2104      	movs	r1, #4
 80025f6:	f7ff fc7e 	bl	8001ef6 <setBit>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <dwSetFrameFilterAllowData>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDeviceTypes_t *dev, bool val)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f103 000d 	add.w	r0, r3, #13
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	2203      	movs	r2, #3
 8002618:	2104      	movs	r1, #4
 800261a:	f7ff fc6c 	bl	8001ef6 <setBit>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <dwSetFrameFilterAllowReserved>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDeviceTypes_t *dev, bool val)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f103 000d 	add.w	r0, r3, #13
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	2206      	movs	r2, #6
 800263c:	2104      	movs	r1, #4
 800263e:	f7ff fc5a 	bl	8001ef6 <setBit>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDeviceTypes_t *dev, bool val)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f103 000d 	add.w	r0, r3, #13
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf14      	ite	ne
 8002662:	2301      	movne	r3, #1
 8002664:	2300      	moveq	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f083 0301 	eor.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	220c      	movs	r2, #12
 8002676:	2104      	movs	r1, #4
 8002678:	f7ff fc3d 	bl	8001ef6 <setBit>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDeviceTypes_t *dev, bool val)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f103 000d 	add.w	r0, r3, #13
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	2209      	movs	r2, #9
 800269a:	2104      	movs	r1, #4
 800269c:	f7ff fc2b 	bl	8001ef6 <setBit>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDeviceTypes_t *dev, bool val)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 000d 	add.w	r0, r3, #13
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	221d      	movs	r2, #29
 80026be:	2104      	movs	r1, #4
 80026c0:	f7ff fc19 	bl	8001ef6 <setBit>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <dwInterruptOnSent>:

void dwInterruptOnSent(dwDeviceTypes_t *dev, bool val)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 0011 	add.w	r0, r3, #17
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	2207      	movs	r2, #7
 80026e2:	2104      	movs	r1, #4
 80026e4:	f7ff fc07 	bl	8001ef6 <setBit>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDeviceTypes_t *dev, bool val)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f103 0011 	add.w	r0, r3, #17
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	220d      	movs	r2, #13
 8002706:	2104      	movs	r1, #4
 8002708:	f7ff fbf5 	bl	8001ef6 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 0011 	add.w	r0, r3, #17
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	220e      	movs	r2, #14
 8002716:	2104      	movs	r1, #4
 8002718:	f7ff fbed 	bl	8001ef6 <setBit>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDeviceTypes_t *dev, bool val)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f103 0011 	add.w	r0, r3, #17
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	2212      	movs	r2, #18
 800273a:	2105      	movs	r1, #5
 800273c:	f7ff fbdb 	bl	8001ef6 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f103 0011 	add.w	r0, r3, #17
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	220f      	movs	r2, #15
 800274a:	2105      	movs	r1, #5
 800274c:	f7ff fbd3 	bl	8001ef6 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f103 0011 	add.w	r0, r3, #17
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	220c      	movs	r2, #12
 800275a:	2105      	movs	r1, #5
 800275c:	f7ff fbcb 	bl	8001ef6 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f103 0011 	add.w	r0, r3, #17
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	2210      	movs	r2, #16
 800276a:	2105      	movs	r1, #5
 800276c:	f7ff fbc3 	bl	8001ef6 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f103 0011 	add.w	r0, r3, #17
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	221a      	movs	r2, #26
 800277a:	2104      	movs	r1, #4
 800277c:	f7ff fbbb 	bl	8001ef6 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0011 	add.w	r0, r3, #17
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	221d      	movs	r2, #29
 800278a:	2104      	movs	r1, #4
 800278c:	f7ff fbb3 	bl	8001ef6 <setBit>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDeviceTypes_t *dev, bool val)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0011 	add.w	r0, r3, #17
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	2211      	movs	r2, #17
 80027ae:	2104      	movs	r1, #4
 80027b0:	f7ff fba1 	bl	8001ef6 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0011 	add.w	r0, r3, #17
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	2215      	movs	r2, #21
 80027be:	2104      	movs	r1, #4
 80027c0:	f7ff fb99 	bl	8001ef6 <setBit>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDeviceTypes_t *dev, bool val)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f103 0011 	add.w	r0, r3, #17
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	220a      	movs	r2, #10
 80027e2:	2104      	movs	r1, #4
 80027e4:	f7ff fb87 	bl	8001ef6 <setBit>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDeviceTypes_t *dev, bool val)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f103 0011 	add.w	r0, r3, #17
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	2203      	movs	r2, #3
 8002806:	2104      	movs	r1, #4
 8002808:	f7ff fb75 	bl	8001ef6 <setBit>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <dwClearInterrupts>:

void dwClearInterrupts(dwDeviceTypes_t *dev)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    memset(dev->sysmask, 0, LEN_SYS_MASK);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3311      	adds	r3, #17
 8002820:	2204      	movs	r2, #4
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fd09 	bl	800623c <memset>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <dwIdle>:

void dwIdle(dwDeviceTypes_t *dev)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af02      	add	r7, sp, #8
 8002838:	6078      	str	r0, [r7, #4]
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2204      	movs	r2, #4
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fcfa 	bl	800623c <memset>
    dev->sysctrl[0] |= 1 << TRXOFF_BIT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	791b      	ldrb	r3, [r3, #4]
 800284c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002850:	b2da      	uxtb	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	711a      	strb	r2, [r3, #4]
    dev->deviceMode = IDLE_MODE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	721a      	strb	r2, [r3, #8]
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2204      	movs	r2, #4
 8002862:	9200      	str	r2, [sp, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	210d      	movs	r1, #13
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f001 fdc3 	bl	80043f4 <dwSpiWrite>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <dwNewReceive>:
    else regval &= DRX_CARRIER_INT_MASK ;                               // make sure upper bits are clear if not sign extending
    return (int32_t) regval ; // cast unsigned value to signed quantity.
}

void dwNewReceive(dwDeviceTypes_t *dev)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffd7 	bl	8002832 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	2204      	movs	r2, #4
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fcd5 	bl	800623c <memset>
    dwClearReceiveStatus(dev);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fda4 	bl	80033e0 <dwClearReceiveStatus>
    dev->deviceMode = RX_MODE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	721a      	strb	r2, [r3, #8]
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <dwStartReceive>:

void dwStartReceive(dwDeviceTypes_t *dev)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af02      	add	r7, sp, #8
 80028ac:	6078      	str	r0, [r7, #4]
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	1d18      	adds	r0, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2200      	movs	r2, #0
 80028d0:	2104      	movs	r1, #4
 80028d2:	f7ff fb10 	bl	8001ef6 <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1d18      	adds	r0, r3, #4
 80028da:	2301      	movs	r3, #1
 80028dc:	2208      	movs	r2, #8
 80028de:	2104      	movs	r1, #4
 80028e0:	f7ff fb09 	bl	8001ef6 <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	2204      	movs	r2, #4
 80028ea:	9200      	str	r2, [sp, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	210d      	movs	r1, #13
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f001 fd7f 	bl	80043f4 <dwSpiWrite>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <dwNewTransmit>:

void dwNewTransmit(dwDeviceTypes_t *dev)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff93 	bl	8002832 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	2204      	movs	r2, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f003 fc91 	bl	800623c <memset>
    dwClearTransmitStatus(dev);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fd72 	bl	8003404 <dwClearTransmitStatus>
    dev->deviceMode = TX_MODE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	721a      	strb	r2, [r3, #8]
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <dwStartTransmit>:

void dwStartTransmit(dwDeviceTypes_t *dev)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af02      	add	r7, sp, #8
 8002934:	6078      	str	r0, [r7, #4]
    dwWriteTransmitFrameControlRegister(dev);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe21 	bl	800257e <dwWriteTransmitFrameControlRegister>
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1d18      	adds	r0, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2200      	movs	r2, #0
 800295e:	2104      	movs	r1, #4
 8002960:	f7ff fac9 	bl	8001ef6 <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1d18      	adds	r0, r3, #4
 8002968:	2301      	movs	r3, #1
 800296a:	2201      	movs	r2, #1
 800296c:	2104      	movs	r1, #4
 800296e:	f7ff fac2 	bl	8001ef6 <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	2204      	movs	r2, #4
 8002978:	9200      	str	r2, [sp, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	210d      	movs	r1, #13
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f001 fd38 	bl	80043f4 <dwSpiWrite>
    if (dev->permanentReceive)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <dwStartTransmit+0x7c>
    {
        memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2204      	movs	r2, #4
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fc50 	bl	800623c <memset>
        dev->deviceMode = RX_MODE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	721a      	strb	r2, [r3, #8]
        dwStartReceive(dev);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff7f 	bl	80028a6 <dwStartReceive>
    }
    else
    {
        dev->deviceMode = IDLE_MODE;
    }
}
 80029a8:	e00b      	b.n	80029c2 <dwStartTransmit+0x94>
    else if (dev->wait4resp)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <dwStartTransmit+0x8e>
        dev->deviceMode = RX_MODE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	721a      	strb	r2, [r3, #8]
}
 80029ba:	e002      	b.n	80029c2 <dwStartTransmit+0x94>
        dev->deviceMode = IDLE_MODE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	721a      	strb	r2, [r3, #8]
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <dwNewConfiguration>:

void dwNewConfiguration(dwDeviceTypes_t *dev)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff2d 	bl	8002832 <dwIdle>
    dwReadNetworkIdAndDeviceAddress(dev);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fd59 	bl	8002490 <dwReadNetworkIdAndDeviceAddress>
    dwReadSystemConfigurationRegister(dev);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fd23 	bl	800242a <dwReadSystemConfigurationRegister>
    dwReadChannelControlRegister(dev);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fd97 	bl	8002518 <dwReadChannelControlRegister>
    dwReadTransmitFrameControlRegister(dev);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fdb6 	bl	800255c <dwReadTransmitFrameControlRegister>
    dwReadSystemEventMaskRegister(dev);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fd6f 	bl	80024d4 <dwReadSystemEventMaskRegister>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <dwCommitConfiguration>:

void dwCommitConfiguration(dwDeviceTypes_t *dev)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	6078      	str	r0, [r7, #4]
    // write all configurations back to device
    dwWriteNetworkIdAndDeviceAddress(dev);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fd53 	bl	80024b2 <dwWriteNetworkIdAndDeviceAddress>
    dwWriteSystemConfigurationRegister(dev);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fd1d 	bl	800244c <dwWriteSystemConfigurationRegister>
    dwWriteChannelControlRegister(dev);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fd91 	bl	800253a <dwWriteChannelControlRegister>
    dwWriteTransmitFrameControlRegister(dev);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fdb0 	bl	800257e <dwWriteTransmitFrameControlRegister>
    dwWriteSystemEventMaskRegister(dev);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fd69 	bl	80024f6 <dwWriteSystemEventMaskRegister>
    // tune according to configuration
    dwTune(dev);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fdc5 	bl	80035b4 <dwTune>
    // uint8_t antennaDelayBytes[LEN_STAMP];
    // writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
    // dev->antennaDelay.setTimestamp(antennaDelayBytes);
    // dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
    // dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
    dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.timeRaw, LEN_TX_ANTD);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3330      	adds	r3, #48	; 0x30
 8002a2e:	2202      	movs	r2, #2
 8002a30:	9200      	str	r2, [sp, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	2118      	movs	r1, #24
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f001 fcdc 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.timeRaw, LEN_LDE_RXANTD);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3330      	adds	r3, #48	; 0x30
 8002a40:	2202      	movs	r2, #2
 8002a42:	9200      	str	r2, [sp, #0]
 8002a44:	f641 0204 	movw	r2, #6148	; 0x1804
 8002a48:	212e      	movs	r1, #46	; 0x2e
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f001 fcd2 	bl	80043f4 <dwSpiWrite>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <dwSuppressFrameCheck>:
    dev->wait4resp = val;
    setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDeviceTypes_t *dev, bool val)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
    dev->frameCheck = !val;
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <dwUseSmartPower>:

void dwUseSmartPower(dwDeviceTypes_t *dev, bool smartPower)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
    dev->smartPower = smartPower;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f103 000d 	add.w	r0, r3, #13
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2212      	movs	r2, #18
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	f7ff fa18 	bl	8001ef6 <setBit>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <dwSetDataRate>:
    delayBytes[1] &= 0xFE;
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}

void dwSetDataRate(dwDeviceTypes_t *dev, uint8_t rate)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
    rate &= 0x03;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[1] &= 0x83;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7fdb      	ldrb	r3, [r3, #31]
 8002ae6:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7fda      	ldrb	r2, [r3, #31]
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015b      	lsls	r3, r3, #5
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	77da      	strb	r2, [r3, #31]
    // special 110kbps flag
    if (rate == TRX_RATE_110KBPS)
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d108      	bne.n	8002b1a <dwSetDataRate+0x4c>
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f103 000d 	add.w	r0, r3, #13
 8002b0e:	2301      	movs	r3, #1
 8002b10:	2216      	movs	r2, #22
 8002b12:	2104      	movs	r1, #4
 8002b14:	f7ff f9ef 	bl	8001ef6 <setBit>
 8002b18:	e007      	b.n	8002b2a <dwSetDataRate+0x5c>
    }
    else
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f103 000d 	add.w	r0, r3, #13
 8002b20:	2300      	movs	r3, #0
 8002b22:	2216      	movs	r2, #22
 8002b24:	2104      	movs	r1, #4
 8002b26:	f7ff f9e6 	bl	8001ef6 <setBit>
    }
    // SFD mode and type (non-configurable, as in Table )
    if (rate == TRX_RATE_6800KBPS)
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d118      	bne.n	8002b62 <dwSetDataRate+0x94>
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f103 0015 	add.w	r0, r3, #21
 8002b36:	2300      	movs	r3, #0
 8002b38:	2211      	movs	r2, #17
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	f7ff f9db 	bl	8001ef6 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f103 0015 	add.w	r0, r3, #21
 8002b46:	2300      	movs	r3, #0
 8002b48:	2214      	movs	r2, #20
 8002b4a:	2104      	movs	r1, #4
 8002b4c:	f7ff f9d3 	bl	8001ef6 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f103 0015 	add.w	r0, r3, #21
 8002b56:	2300      	movs	r3, #0
 8002b58:	2215      	movs	r2, #21
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	f7ff f9cb 	bl	8001ef6 <setBit>
 8002b60:	e017      	b.n	8002b92 <dwSetDataRate+0xc4>
    }
    else
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f103 0015 	add.w	r0, r3, #21
 8002b68:	2301      	movs	r3, #1
 8002b6a:	2211      	movs	r2, #17
 8002b6c:	2104      	movs	r1, #4
 8002b6e:	f7ff f9c2 	bl	8001ef6 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f103 0015 	add.w	r0, r3, #21
 8002b78:	2301      	movs	r3, #1
 8002b7a:	2214      	movs	r2, #20
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	f7ff f9ba 	bl	8001ef6 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f103 0015 	add.w	r0, r3, #21
 8002b88:	2301      	movs	r3, #1
 8002b8a:	2215      	movs	r2, #21
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	f7ff f9b2 	bl	8001ef6 <setBit>
    }
    uint8_t sfdLength;
    if (rate == TRX_RATE_6800KBPS)
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d102      	bne.n	8002b9e <dwSetDataRate+0xd0>
    {
        sfdLength = 0x08;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e007      	b.n	8002bae <dwSetDataRate+0xe0>
    }
    else if (rate == TRX_RATE_850KBPS)
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d102      	bne.n	8002baa <dwSetDataRate+0xdc>
    {
        sfdLength = 0x10;
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e001      	b.n	8002bae <dwSetDataRate+0xe0>
    }
    else
    {
        sfdLength = 0x40;
 8002baa:	2340      	movs	r3, #64	; 0x40
 8002bac:	73fb      	strb	r3, [r7, #15]
    }
    dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8002bae:	f107 030f 	add.w	r3, r7, #15
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	9200      	str	r2, [sp, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2121      	movs	r1, #33	; 0x21
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 fc1a 	bl	80043f4 <dwSpiWrite>
    dev->dataRate = rate;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDeviceTypes_t *dev, uint8_t freq)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
    freq &= 0x03;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xFC;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f883 2020 	strb.w	r2, [r3, #32]
    dev->chanctrl[2] &= 0xF3;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7ddb      	ldrb	r3, [r3, #23]
 8002c0c:	f023 030c 	bic.w	r3, r3, #12
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7dda      	ldrb	r2, [r3, #23]
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	75da      	strb	r2, [r3, #23]
    dev->pulseFrequency = freq;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <dwSetPreambleLength>:
{
    return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDeviceTypes_t *dev, uint8_t prealen)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
    prealen &= 0x0F;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xC3;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c54:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f883 2020 	strb.w	r2, [r3, #32]
    if (prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128)
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <dwSetPreambleLength+0x48>
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d104      	bne.n	8002c8c <dwSetPreambleLength+0x52>
    {
        dev->pacSize = PAC_SIZE_8;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2208      	movs	r2, #8
 8002c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c8a:	e016      	b.n	8002cba <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512)
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	2b09      	cmp	r3, #9
 8002c90:	d002      	beq.n	8002c98 <dwSetPreambleLength+0x5e>
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	2b0d      	cmp	r3, #13
 8002c96:	d104      	bne.n	8002ca2 <dwSetPreambleLength+0x68>
    {
        dev->pacSize = PAC_SIZE_16;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2210      	movs	r2, #16
 8002c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ca0:	e00b      	b.n	8002cba <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_1024)
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d104      	bne.n	8002cb2 <dwSetPreambleLength+0x78>
    {
        dev->pacSize = PAC_SIZE_32;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cb0:	e003      	b.n	8002cba <dwSetPreambleLength+0x80>
    }
    else
    {
        dev->pacSize = PAC_SIZE_64;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    dev->preambleLength = prealen;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDeviceTypes_t *dev, bool val)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
    dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <dwUseExtendedFrameLength+0x16>
 8002cde:	2203      	movs	r2, #3
 8002ce0:	e000      	b.n	8002ce4 <dwUseExtendedFrameLength+0x18>
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    dev->syscfg[2] &= 0xFC;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7bdb      	ldrb	r3, [r3, #15]
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	73da      	strb	r2, [r3, #15]
    dev->syscfg[2] |= dev->extendedFrameLength;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7bda      	ldrb	r2, [r3, #15]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	73da      	strb	r2, [r3, #15]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <dwSetChannel>:
{
    dev->permanentReceive = val;
}

void dwSetChannel(dwDeviceTypes_t *dev, uint8_t channel)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
    channel &= 0xF;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	b25a      	sxtb	r2, r3
 8002d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	755a      	strb	r2, [r3, #21]
    dev->channel = channel;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <dwSetPreambleCode>:

void dwSetPreambleCode(dwDeviceTypes_t *dev, uint8_t preacode)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
    preacode &= 0x1F;
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[2] &= 0x3F;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7ddb      	ldrb	r3, [r3, #23]
 8002d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7ddb      	ldrb	r3, [r3, #23]
 8002d74:	b25a      	sxtb	r2, r3
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[3] = 0x00;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	761a      	strb	r2, [r3, #24]
    dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	b25a      	sxtb	r2, r3
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	b25b      	sxtb	r3, r3
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	761a      	strb	r2, [r3, #24]
    dev->preambleCode = preacode;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <dwSetDefaults>:

void dwSetDefaults(dwDeviceTypes_t *dev)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
    if (dev->deviceMode == TX_MODE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7a1b      	ldrb	r3, [r3, #8]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d03e      	beq.n	8002e4a <dwSetDefaults+0x8e>
    {
    }
    else if (dev->deviceMode == RX_MODE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7a1b      	ldrb	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d03a      	beq.n	8002e4a <dwSetDefaults+0x8e>
    {
    }
    else if (dev->deviceMode == IDLE_MODE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7a1b      	ldrb	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d136      	bne.n	8002e4a <dwSetDefaults+0x8e>
    {
        dwUseExtendedFrameLength(dev, false);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff74 	bl	8002ccc <dwUseExtendedFrameLength>
        dwUseSmartPower(dev, true);
 8002de4:	2101      	movs	r1, #1
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fe50 	bl	8002a8c <dwUseSmartPower>
        dwSuppressFrameCheck(dev, false);
 8002dec:	2100      	movs	r1, #0
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fe32 	bl	8002a58 <dwSuppressFrameCheck>
        // for global frame filtering
        dwSetFrameFilter(dev, false);
 8002df4:	2100      	movs	r1, #0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fbf1 	bl	80025de <dwSetFrameFilter>
        // for data frame (poll, poll_ack, range, range report, range failed) filtering
        dwSetFrameFilterAllowData(dev, false);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fbff 	bl	8002602 <dwSetFrameFilterAllowData>
        // for reserved (blink) frame filtering
        dwSetFrameFilterAllowReserved(dev, false);
 8002e04:	2100      	movs	r1, #0
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fc0d 	bl	8002626 <dwSetFrameFilterAllowReserved>
        // setFrameFilterAllowMAC(true);
        // setFrameFilterAllowBeacon(true);
        // setFrameFilterAllowAcknowledgement(true);
        dwInterruptOnSent(dev, true);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff fc5c 	bl	80026cc <dwInterruptOnSent>
        dwInterruptOnReceived(dev, true);
 8002e14:	2101      	movs	r1, #1
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff fc6a 	bl	80026f0 <dwInterruptOnReceived>
        dwInterruptOnReceiveTimeout(dev, true);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fcba 	bl	8002798 <dwInterruptOnReceiveTimeout>
        dwInterruptOnReceiveFailed(dev, false);
 8002e24:	2100      	movs	r1, #0
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fc7c 	bl	8002724 <dwInterruptOnReceiveFailed>
        dwInterruptOnReceiveTimestampAvailable(dev, false);
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fccc 	bl	80027cc <dwInterruptOnReceiveTimestampAvailable>
        dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fcda 	bl	80027f0 <dwInterruptOnAutomaticAcknowledgeTrigger>
        dwSetReceiverAutoReenable(dev, true);
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fc32 	bl	80026a8 <dwSetReceiverAutoReenable>
        // default mode when powering up the chip
        // still explicitly selected for later tuning
        dwSetMode(dev);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fb89 	bl	800355c <dwSetMode>
    }
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <dwSetData>:

void dwSetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af02      	add	r7, sp, #8
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
    if (dev->frameCheck)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <dwSetData+0x1c>
    {
        n += 2; // two bytes CRC-16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	607b      	str	r3, [r7, #4]
    }
    if (n > LEN_EXT_UWB_FRAMES)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d229      	bcs.n	8002eca <dwSetData+0x78>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    if (n > LEN_UWB_FRAMES && !dev->extendedFrameLength)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b7f      	cmp	r3, #127	; 0x7f
 8002e7a:	d904      	bls.n	8002e86 <dwSetData+0x34>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d023      	beq.n	8002ece <dwSetData+0x7c>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    // transmit data and length
    dwSpiWrite(dev, TX_BUFFER, NO_SUB, data, n);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2109      	movs	r1, #9
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f001 faaf 	bl	80043f4 <dwSpiWrite>
    dev->txfctrl[0] = (uint8_t)(n & 0xFF); // 1 byte (regular length + 1 bit)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	779a      	strb	r2, [r3, #30]
    dev->txfctrl[1] &= 0xE0;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	7fdb      	ldrb	r3, [r3, #31]
 8002ea2:	f023 031f 	bic.w	r3, r3, #31
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((n >> 8) & 0x03); // 2 added bits if extended length
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	7fdb      	ldrb	r3, [r3, #31]
 8002eb0:	b25a      	sxtb	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	77da      	strb	r2, [r3, #31]
 8002ec8:	e002      	b.n	8002ed0 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8002ece:	bf00      	nop
}
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <dwGetDataLength>:

unsigned int dwGetDataLength(dwDeviceTypes_t *dev)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af02      	add	r7, sp, #8
 8002edc:	6078      	str	r0, [r7, #4]
    unsigned int len = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
    if (dev->deviceMode == TX_MODE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7a1b      	ldrb	r3, [r3, #8]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d109      	bne.n	8002efe <dwGetDataLength+0x28>
    {
        // 10 bits of TX frame control register
        len = ((((unsigned int)dev->txfctrl[1] << 8) | (unsigned int)dev->txfctrl[0]) & 0x03FF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7fdb      	ldrb	r3, [r3, #31]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	7f92      	ldrb	r2, [r2, #30]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e013      	b.n	8002f26 <dwGetDataLength+0x50>
    }
    else if (dev->deviceMode == RX_MODE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7a1b      	ldrb	r3, [r3, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10f      	bne.n	8002f26 <dwGetDataLength+0x50>
    {
        // 10 bits of RX frame control register
        uint8_t rxFrameInfo[LEN_RX_FINFO];
        dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	9200      	str	r2, [sp, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2110      	movs	r1, #16
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f001 fa06 	bl	8004324 <dwSpiRead>
        len = ((((unsigned int)rxFrameInfo[1] << 8) | (unsigned int)rxFrameInfo[0]) & 0x03FF);
 8002f18:	7a7b      	ldrb	r3, [r7, #9]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	7a3a      	ldrb	r2, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f24:	60fb      	str	r3, [r7, #12]
    }
    if (dev->frameCheck && len > 2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <dwGetDataLength+0x66>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d902      	bls.n	8002f3c <dwGetDataLength+0x66>
    {
        return len - 2;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b02      	subs	r3, #2
 8002f3a:	e000      	b.n	8002f3e <dwGetDataLength+0x68>
    }
    return len;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <dwGetData>:

void dwGetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
    if (n <= 0)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <dwGetData+0x24>
    {
        return;
    }
    dwSpiRead(dev, RX_BUFFER, NO_SUB, data, n);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2111      	movs	r1, #17
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f001 f9de 	bl	8004324 <dwSpiRead>
 8002f68:	e000      	b.n	8002f6c <dwGetData+0x26>
        return;
 8002f6a:	bf00      	nop
}
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <dwGetTransmitTimestamp>:

void dwGetTransmitTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
    dwSpiRead(dev, TX_TIME, TX_STAMP_SUB, time->timeRaw, LEN_TX_STAMP);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2205      	movs	r2, #5
 8002f80:	9200      	str	r2, [sp, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2117      	movs	r1, #23
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f001 f9cc 	bl	8004324 <dwSpiRead>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <dwGetReceiveTimestamp>:

void dwGetReceiveTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
    time->timeFull = 0;
 8002f9e:	6839      	ldr	r1, [r7, #0]
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9c1 2300 	strd	r2, r3, [r1]
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2205      	movs	r2, #5
 8002fb0:	9200      	str	r2, [sp, #0]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2115      	movs	r1, #21
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f001 f9b4 	bl	8004324 <dwSpiRead>
    // correct timestamp (i.e. consider range bias)
    dwCorrectTimestamp(dev, time);
 8002fbc:	6839      	ldr	r1, [r7, #0]
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f804 	bl	8002fcc <dwCorrectTimestamp>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <dwCorrectTimestamp>:
    time->timeFull = 0;
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
}

void dwCorrectTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *timestamp)
{
 8002fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	b08a      	sub	sp, #40	; 0x28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
    // base line dBm, which is -61, 2 dBm steps, total 18 data points (down to -95 dBm)
    float rxPowerBase = -(dwGetReceivePower(dev) + 61.0f) * 0.5f;
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fa97 	bl	800350c <dwGetReceivePower>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4997      	ldr	r1, [pc, #604]	; (8003240 <dwCorrectTimestamp+0x274>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fdc6 	bl	8000b74 <__addsf3>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fec6 	bl	8000d84 <__aeabi_fmul>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	617b      	str	r3, [r7, #20]

    if (!isfinite(rxPowerBase))
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8003002:	4990      	ldr	r1, [pc, #576]	; (8003244 <dwCorrectTimestamp+0x278>)
 8003004:	4630      	mov	r0, r6
 8003006:	f7fe f883 	bl	8001110 <__aeabi_fcmpun>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8111 	bne.w	8003234 <dwCorrectTimestamp+0x268>
 8003012:	498c      	ldr	r1, [pc, #560]	; (8003244 <dwCorrectTimestamp+0x278>)
 8003014:	4630      	mov	r0, r6
 8003016:	f7fe f871 	bl	80010fc <__aeabi_fcmpgt>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 8109 	bne.w	8003234 <dwCorrectTimestamp+0x268>
    {
        return;
    }
    int rxPowerBaseLow = (int)rxPowerBase;
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7fe f88a 	bl	800113c <__aeabi_f2iz>
 8003028:	4603      	mov	r3, r0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
    int rxPowerBaseHigh = rxPowerBaseLow + 1;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	3301      	adds	r3, #1
 8003030:	623b      	str	r3, [r7, #32]
    if (rxPowerBaseLow <= 0)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	dc04      	bgt.n	8003042 <dwCorrectTimestamp+0x76>
    {
        rxPowerBaseLow = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	e006      	b.n	8003050 <dwCorrectTimestamp+0x84>
    }
    else if (rxPowerBaseHigh >= 17)
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b10      	cmp	r3, #16
 8003046:	dd03      	ble.n	8003050 <dwCorrectTimestamp+0x84>
    {
        rxPowerBaseLow = 17;
 8003048:	2311      	movs	r3, #17
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 17;
 800304c:	2311      	movs	r3, #17
 800304e:	623b      	str	r3, [r7, #32]
    }
    // select range low/high values from corresponding table
    int rangeBiasHigh = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
    int rangeBiasLow = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
    if (dev->channel == CHANNEL_4 || dev->channel == CHANNEL_7)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800305e:	2b04      	cmp	r3, #4
 8003060:	d004      	beq.n	800306c <dwCorrectTimestamp+0xa0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003068:	2b07      	cmp	r3, #7
 800306a:	d157      	bne.n	800311c <dwCorrectTimestamp+0x150>
    {
        // 900 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003072:	2b01      	cmp	r3, #1
 8003074:	d126      	bne.n	80030c4 <dwCorrectTimestamp+0xf8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseHigh] : BIAS_900_16[rxPowerBaseHigh]);
 8003076:	2307      	movs	r3, #7
 8003078:	461a      	mov	r2, r3
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	4293      	cmp	r3, r2
 800307e:	da05      	bge.n	800308c <dwCorrectTimestamp+0xc0>
 8003080:	4a71      	ldr	r2, [pc, #452]	; (8003248 <dwCorrectTimestamp+0x27c>)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	425b      	negs	r3, r3
 800308a:	e003      	b.n	8003094 <dwCorrectTimestamp+0xc8>
 800308c:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <dwCorrectTimestamp+0x27c>)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	4413      	add	r3, r2
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseLow] : BIAS_900_16[rxPowerBaseLow]);
 800309c:	2307      	movs	r3, #7
 800309e:	461a      	mov	r2, r3
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	4293      	cmp	r3, r2
 80030a4:	da05      	bge.n	80030b2 <dwCorrectTimestamp+0xe6>
 80030a6:	4a68      	ldr	r2, [pc, #416]	; (8003248 <dwCorrectTimestamp+0x27c>)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	425b      	negs	r3, r3
 80030b0:	e003      	b.n	80030ba <dwCorrectTimestamp+0xee>
 80030b2:	4a65      	ldr	r2, [pc, #404]	; (8003248 <dwCorrectTimestamp+0x27c>)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80030c2:	e077      	b.n	80031b4 <dwCorrectTimestamp+0x1e8>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d172      	bne.n	80031b4 <dwCorrectTimestamp+0x1e8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseHigh] : BIAS_900_64[rxPowerBaseHigh]);
 80030ce:	2307      	movs	r3, #7
 80030d0:	461a      	mov	r2, r3
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	4293      	cmp	r3, r2
 80030d6:	da05      	bge.n	80030e4 <dwCorrectTimestamp+0x118>
 80030d8:	4a5c      	ldr	r2, [pc, #368]	; (800324c <dwCorrectTimestamp+0x280>)
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	4413      	add	r3, r2
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	425b      	negs	r3, r3
 80030e2:	e003      	b.n	80030ec <dwCorrectTimestamp+0x120>
 80030e4:	4a59      	ldr	r2, [pc, #356]	; (800324c <dwCorrectTimestamp+0x280>)
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	4413      	add	r3, r2
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseLow] : BIAS_900_64[rxPowerBaseLow]);
 80030f4:	2307      	movs	r3, #7
 80030f6:	461a      	mov	r2, r3
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	4293      	cmp	r3, r2
 80030fc:	da05      	bge.n	800310a <dwCorrectTimestamp+0x13e>
 80030fe:	4a53      	ldr	r2, [pc, #332]	; (800324c <dwCorrectTimestamp+0x280>)
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	425b      	negs	r3, r3
 8003108:	e003      	b.n	8003112 <dwCorrectTimestamp+0x146>
 800310a:	4a50      	ldr	r2, [pc, #320]	; (800324c <dwCorrectTimestamp+0x280>)
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800311a:	e04b      	b.n	80031b4 <dwCorrectTimestamp+0x1e8>
        }
    }
    else
    {
        // 500 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003122:	2b01      	cmp	r3, #1
 8003124:	d120      	bne.n	8003168 <dwCorrectTimestamp+0x19c>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseHigh] : BIAS_500_16[rxPowerBaseHigh]);
 8003126:	230a      	movs	r3, #10
 8003128:	461a      	mov	r2, r3
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	4293      	cmp	r3, r2
 800312e:	da05      	bge.n	800313c <dwCorrectTimestamp+0x170>
 8003130:	4a47      	ldr	r2, [pc, #284]	; (8003250 <dwCorrectTimestamp+0x284>)
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	425b      	negs	r3, r3
 800313a:	e003      	b.n	8003144 <dwCorrectTimestamp+0x178>
 800313c:	4a44      	ldr	r2, [pc, #272]	; (8003250 <dwCorrectTimestamp+0x284>)
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseLow] : BIAS_500_16[rxPowerBaseLow]);
 8003146:	230a      	movs	r3, #10
 8003148:	461a      	mov	r2, r3
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	4293      	cmp	r3, r2
 800314e:	da05      	bge.n	800315c <dwCorrectTimestamp+0x190>
 8003150:	4a3f      	ldr	r2, [pc, #252]	; (8003250 <dwCorrectTimestamp+0x284>)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	4413      	add	r3, r2
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	425b      	negs	r3, r3
 800315a:	e003      	b.n	8003164 <dwCorrectTimestamp+0x198>
 800315c:	4a3c      	ldr	r2, [pc, #240]	; (8003250 <dwCorrectTimestamp+0x284>)
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	4413      	add	r3, r2
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	e026      	b.n	80031b6 <dwCorrectTimestamp+0x1ea>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800316e:	2b02      	cmp	r3, #2
 8003170:	d121      	bne.n	80031b6 <dwCorrectTimestamp+0x1ea>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseHigh] : BIAS_500_64[rxPowerBaseHigh]);
 8003172:	2308      	movs	r3, #8
 8003174:	461a      	mov	r2, r3
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	4293      	cmp	r3, r2
 800317a:	da05      	bge.n	8003188 <dwCorrectTimestamp+0x1bc>
 800317c:	4a35      	ldr	r2, [pc, #212]	; (8003254 <dwCorrectTimestamp+0x288>)
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	425b      	negs	r3, r3
 8003186:	e003      	b.n	8003190 <dwCorrectTimestamp+0x1c4>
 8003188:	4a32      	ldr	r2, [pc, #200]	; (8003254 <dwCorrectTimestamp+0x288>)
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	4413      	add	r3, r2
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseLow] : BIAS_500_64[rxPowerBaseLow]);
 8003192:	2308      	movs	r3, #8
 8003194:	461a      	mov	r2, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	4293      	cmp	r3, r2
 800319a:	da05      	bge.n	80031a8 <dwCorrectTimestamp+0x1dc>
 800319c:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <dwCorrectTimestamp+0x288>)
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	4413      	add	r3, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	425b      	negs	r3, r3
 80031a6:	e003      	b.n	80031b0 <dwCorrectTimestamp+0x1e4>
 80031a8:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <dwCorrectTimestamp+0x288>)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	4413      	add	r3, r2
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e000      	b.n	80031b6 <dwCorrectTimestamp+0x1ea>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80031b4:	bf00      	nop
        {
            // TODO proper error handling
        }
    }
    // linear interpolation of bias values
    float rangeBias = rangeBiasLow + (rxPowerBase - rxPowerBaseLow) * (rangeBiasHigh - rangeBiasLow);
 80031b6:	69b8      	ldr	r0, [r7, #24]
 80031b8:	f7fd fd90 	bl	8000cdc <__aeabi_i2f>
 80031bc:	4606      	mov	r6, r0
 80031be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c0:	f7fd fd8c 	bl	8000cdc <__aeabi_i2f>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4619      	mov	r1, r3
 80031c8:	6978      	ldr	r0, [r7, #20]
 80031ca:	f7fd fcd1 	bl	8000b70 <__aeabi_fsub>
 80031ce:	4603      	mov	r3, r0
 80031d0:	469a      	mov	sl, r3
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd fd7f 	bl	8000cdc <__aeabi_i2f>
 80031de:	4603      	mov	r3, r0
 80031e0:	4619      	mov	r1, r3
 80031e2:	4650      	mov	r0, sl
 80031e4:	f7fd fdce 	bl	8000d84 <__aeabi_fmul>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4619      	mov	r1, r3
 80031ec:	4630      	mov	r0, r6
 80031ee:	f7fd fcc1 	bl	8000b74 <__addsf3>
 80031f2:	4603      	mov	r3, r0
 80031f4:	613b      	str	r3, [r7, #16]
    // range bias [mm] to timestamp modification value conversion
    dwTimestamp_t adjustmentTime;
    adjustmentTime.timeFull = (int)(rangeBias * DISTANCE_OF_RADIO_INV * 0.001f);
 80031f6:	4918      	ldr	r1, [pc, #96]	; (8003258 <dwCorrectTimestamp+0x28c>)
 80031f8:	6938      	ldr	r0, [r7, #16]
 80031fa:	f7fd fdc3 	bl	8000d84 <__aeabi_fmul>
 80031fe:	4603      	mov	r3, r0
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <dwCorrectTimestamp+0x290>)
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fdbe 	bl	8000d84 <__aeabi_fmul>
 8003208:	4603      	mov	r3, r0
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd ff96 	bl	800113c <__aeabi_f2iz>
 8003210:	4603      	mov	r3, r0
 8003212:	17da      	asrs	r2, r3, #31
 8003214:	4698      	mov	r8, r3
 8003216:	4691      	mov	r9, r2
 8003218:	e9c7 8902 	strd	r8, r9, [r7, #8]
    // apply correction
    timestamp->timeFull -= adjustmentTime.timeFull;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003226:	1a84      	subs	r4, r0, r2
 8003228:	eb61 0503 	sbc.w	r5, r1, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	e9c3 4500 	strd	r4, r5, [r3]
 8003232:	e000      	b.n	8003236 <dwCorrectTimestamp+0x26a>
        return;
 8003234:	bf00      	nop
}
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323e:	bf00      	nop
 8003240:	42740000 	.word	0x42740000
 8003244:	7f7fffff 	.word	0x7f7fffff
 8003248:	0800aef0 	.word	0x0800aef0
 800324c:	0800af04 	.word	0x0800af04
 8003250:	0800aec8 	.word	0x0800aec8
 8003254:	0800aedc 	.word	0x0800aedc
 8003258:	435523b3 	.word	0x435523b3
 800325c:	3a83126f 	.word	0x3a83126f

08003260 <dwIsTransmitDone>:
{
    dwSpiRead(dev, SYS_TIME, NO_SUB, time->timeRaw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDeviceTypes_t *dev)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3319      	adds	r3, #25
 800326c:	2207      	movs	r2, #7
 800326e:	2105      	movs	r1, #5
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fe7c 	bl	8001f6e <getBit>
 8003276:	4603      	mov	r3, r0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDeviceTypes_t *dev)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3319      	adds	r3, #25
 800328c:	220a      	movs	r2, #10
 800328e:	2105      	movs	r1, #5
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fe6c 	bl	8001f6e <getBit>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDeviceTypes_t *dev)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    if (dev->frameCheck)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <dwIsReceiveDone+0x24>
    {
        return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3319      	adds	r3, #25
 80032b6:	220e      	movs	r2, #14
 80032b8:	2105      	movs	r1, #5
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fe57 	bl	8001f6e <getBit>
 80032c0:	4603      	mov	r3, r0
 80032c2:	e007      	b.n	80032d4 <dwIsReceiveDone+0x34>
    }
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3319      	adds	r3, #25
 80032c8:	220d      	movs	r2, #13
 80032ca:	2105      	movs	r1, #5
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe fe4e 	bl	8001f6e <getBit>
 80032d2:	4603      	mov	r3, r0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDeviceTypes_t *dev)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3319      	adds	r3, #25
 80032e8:	2212      	movs	r2, #18
 80032ea:	2105      	movs	r1, #5
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fe3e 	bl	8001f6e <getBit>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]
    bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3319      	adds	r3, #25
 80032fa:	220f      	movs	r2, #15
 80032fc:	2105      	movs	r1, #5
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fe35 	bl	8001f6e <getBit>
 8003304:	4603      	mov	r3, r0
 8003306:	73bb      	strb	r3, [r7, #14]
    bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3319      	adds	r3, #25
 800330c:	220c      	movs	r2, #12
 800330e:	2105      	movs	r1, #5
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fe2c 	bl	8001f6e <getBit>
 8003316:	4603      	mov	r3, r0
 8003318:	737b      	strb	r3, [r7, #13]
    bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3319      	adds	r3, #25
 800331e:	2210      	movs	r2, #16
 8003320:	2105      	movs	r1, #5
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fe23 	bl	8001f6e <getBit>
 8003328:	4603      	mov	r3, r0
 800332a:	733b      	strb	r3, [r7, #12]

    bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3319      	adds	r3, #25
 8003330:	221a      	movs	r2, #26
 8003332:	2105      	movs	r1, #5
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe fe1a 	bl	8001f6e <getBit>
 800333a:	4603      	mov	r3, r0
 800333c:	72fb      	strb	r3, [r7, #11]
    bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3319      	adds	r3, #25
 8003342:	221d      	movs	r2, #29
 8003344:	2105      	movs	r1, #5
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fe11 	bl	8001f6e <getBit>
 800334c:	4603      	mov	r3, r0
 800334e:	72bb      	strb	r3, [r7, #10]

    return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10e      	bne.n	8003374 <dwIsReceiveFailed+0x98>
 8003356:	7bbb      	ldrb	r3, [r7, #14]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <dwIsReceiveFailed+0x98>
 800335c:	7b7b      	ldrb	r3, [r7, #13]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <dwIsReceiveFailed+0x98>
 8003362:	7b3b      	ldrb	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <dwIsReceiveFailed+0x98>
 8003368:	7afb      	ldrb	r3, [r7, #11]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <dwIsReceiveFailed+0x98>
 800336e:	7abb      	ldrb	r3, [r7, #10]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <dwIsReceiveFailed+0x9c>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <dwIsReceiveFailed+0x9e>
 8003378:	2300      	movs	r3, #0
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDeviceTypes_t *dev)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3319      	adds	r3, #25
 8003394:	2211      	movs	r2, #17
 8003396:	2105      	movs	r1, #5
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fde8 	bl	8001f6e <getBit>
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <dwClearReceiveTimestampAvailableStatus>:
    uint32_t reg = 0xffffffff;
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDeviceTypes_t *dev)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	6078      	str	r0, [r7, #4]
    uint8_t reg[LEN_SYS_STATUS] = {0};
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	2300      	movs	r3, #0
 80033b6:	733b      	strb	r3, [r7, #12]
    setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 80033b8:	f107 0008 	add.w	r0, r7, #8
 80033bc:	2301      	movs	r3, #1
 80033be:	220a      	movs	r2, #10
 80033c0:	2105      	movs	r1, #5
 80033c2:	f7fe fd98 	bl	8001ef6 <setBit>
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	2205      	movs	r2, #5
 80033cc:	9200      	str	r2, [sp, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	210f      	movs	r1, #15
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f001 f80e 	bl	80043f4 <dwSpiWrite>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDeviceTypes_t *dev)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
    // clear latched RX bits (i.e. write 1 to clear)
    uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <dwClearReceiveStatus+0x20>)
 80033ea:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	210f      	movs	r1, #15
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f001 f858 	bl	80044a8 <dwSpiWrite32>
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	2427ff00 	.word	0x2427ff00

08003404 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDeviceTypes_t *dev)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
    // clear latched TX bits
    uint32_t regData = SYS_STATUS_ALL_TX;
 800340c:	23f8      	movs	r3, #248	; 0xf8
 800340e:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	210f      	movs	r1, #15
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 f846 	bl	80044a8 <dwSpiWrite32>
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <spiReadRxInfo>:
    f2 = (unsigned int)fpAmpl2Bytes[0] | ((unsigned int)fpAmpl2Bytes[1] << 8);
    return (float)f2 / noise;
}

static float spiReadRxInfo(dwDeviceTypes_t *dev)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
 800342a:	6078      	str	r0, [r7, #4]
    uint8_t rxFrameInfo[LEN_RX_FINFO];
    dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	2204      	movs	r2, #4
 8003432:	9200      	str	r2, [sp, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	2110      	movs	r1, #16
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 ff73 	bl	8004324 <dwSpiRead>
    return (float)((((unsigned int)rxFrameInfo[2] >> 4) & 0xFF) | ((unsigned int)rxFrameInfo[3] << 4));
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	4313      	orrs	r3, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd fc41 	bl	8000cd4 <__aeabi_ui2f>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <calculatePower>:

static float calculatePower(float base, float N, uint8_t pulseFrequency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]
    float A, corrFac;

    if (TX_PULSE_FREQ_16MHZ == pulseFrequency)
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d104      	bne.n	800347a <calculatePower+0x1e>
    {
        A = 113.77f;
 8003470:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <calculatePower+0x94>)
 8003472:	61fb      	str	r3, [r7, #28]
        corrFac = 2.3334f;
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <calculatePower+0x98>)
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	e003      	b.n	8003482 <calculatePower+0x26>
    }
    else
    {
        A = 121.74f;
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <calculatePower+0x9c>)
 800347c:	61fb      	str	r3, [r7, #28]
        corrFac = 1.1667f;
 800347e:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <calculatePower+0xa0>)
 8003480:	61bb      	str	r3, [r7, #24]
    }

    float estFpPwr = 10.0f * log10f(base / (N * N)) - A;
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	68b8      	ldr	r0, [r7, #8]
 8003486:	f7fd fc7d 	bl	8000d84 <__aeabi_fmul>
 800348a:	4603      	mov	r3, r0
 800348c:	4619      	mov	r1, r3
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7fd fd2c 	bl	8000eec <__aeabi_fdiv>
 8003494:	4603      	mov	r3, r0
 8003496:	4618      	mov	r0, r3
 8003498:	f007 fafa 	bl	800aa90 <log10f>
 800349c:	4603      	mov	r3, r0
 800349e:	4918      	ldr	r1, [pc, #96]	; (8003500 <calculatePower+0xa4>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fc6f 	bl	8000d84 <__aeabi_fmul>
 80034a6:	4603      	mov	r3, r0
 80034a8:	69f9      	ldr	r1, [r7, #28]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fb60 	bl	8000b70 <__aeabi_fsub>
 80034b0:	4603      	mov	r3, r0
 80034b2:	617b      	str	r3, [r7, #20]

    if (estFpPwr <= -88)
 80034b4:	4913      	ldr	r1, [pc, #76]	; (8003504 <calculatePower+0xa8>)
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7fd fe0c 	bl	80010d4 <__aeabi_fcmple>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <calculatePower+0x6a>
    {
        return estFpPwr;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	e010      	b.n	80034e8 <calculatePower+0x8c>
    }
    else
    {
        // approximation of Fig. 22 in user manual for dbm correction
        estFpPwr += (estFpPwr + 88) * corrFac;
 80034c6:	4910      	ldr	r1, [pc, #64]	; (8003508 <calculatePower+0xac>)
 80034c8:	6978      	ldr	r0, [r7, #20]
 80034ca:	f7fd fb53 	bl	8000b74 <__addsf3>
 80034ce:	4603      	mov	r3, r0
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fc56 	bl	8000d84 <__aeabi_fmul>
 80034d8:	4603      	mov	r3, r0
 80034da:	4619      	mov	r1, r3
 80034dc:	6978      	ldr	r0, [r7, #20]
 80034de:	f7fd fb49 	bl	8000b74 <__addsf3>
 80034e2:	4603      	mov	r3, r0
 80034e4:	617b      	str	r3, [r7, #20]
    }

    return estFpPwr;
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	42e38a3d 	.word	0x42e38a3d
 80034f4:	4015566d 	.word	0x4015566d
 80034f8:	42f37ae1 	.word	0x42f37ae1
 80034fc:	3f95566d 	.word	0x3f95566d
 8003500:	41200000 	.word	0x41200000
 8003504:	c2b00000 	.word	0xc2b00000
 8003508:	42b00000 	.word	0x42b00000

0800350c <dwGetReceivePower>:

    return calculatePower(f1 * f1 + f2 * f2 + f3 * f3, N, dev->pulseFrequency);
}

float dwGetReceivePower(dwDeviceTypes_t *dev)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    float C = (float)dwSpiRead16(dev, RX_FQUAL, CIR_PWR_SUB);
 8003514:	2206      	movs	r2, #6
 8003516:	2112      	movs	r1, #18
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 ff41 	bl	80043a0 <dwSpiRead16>
 800351e:	4603      	mov	r3, r0
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fbd7 	bl	8000cd4 <__aeabi_ui2f>
 8003526:	4603      	mov	r3, r0
 8003528:	617b      	str	r3, [r7, #20]
    float N = spiReadRxInfo(dev);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff7a 	bl	8003424 <spiReadRxInfo>
 8003530:	6138      	str	r0, [r7, #16]

    float twoPower17 = 131072.0f;
 8003532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003536:	60fb      	str	r3, [r7, #12]

    return calculatePower(C * twoPower17, N, dev->pulseFrequency);
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7fd fc22 	bl	8000d84 <__aeabi_fmul>
 8003540:	4603      	mov	r3, r0
 8003542:	4618      	mov	r0, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800354a:	461a      	mov	r2, r3
 800354c:	6939      	ldr	r1, [r7, #16]
 800354e:	f7ff ff85 	bl	800345c <calculatePower>
 8003552:	4603      	mov	r3, r0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <dwSetMode>:
    dwSetChannel(dev, dev->channel);
    dwSetPreambleCode(dev, dev->preambleCode);
}

void dwSetMode(dwDeviceTypes_t *dev)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
    dwSetDataRate(dev, dev->dataRate);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff faae 	bl	8002ace <dwSetDataRate>
    dwSetPulseFrequency(dev, dev->pulseFrequency);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fb28 	bl	8002bd0 <dwSetPulseFrequency>
    dwSetPreambleLength(dev, dev->preambleLength);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff fb56 	bl	8002c3a <dwSetPreambleLength>
    // TODO add channel and code to mode tuples
    // TODO add channel and code settings with checks (see Table 58)
    dwSetChannel(dev, dev->channel);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fbbc 	bl	8002d14 <dwSetChannel>
    dwSetPreambleCode(dev, dev->preambleCode);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fbd2 	bl	8002d4e <dwSetPreambleCode>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <dwTune>:

void dwTune(dwDeviceTypes_t *dev)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b098      	sub	sp, #96	; 0x60
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	6078      	str	r0, [r7, #4]
    uint8_t tcpgdelay[LEN_TC_PGDELAY];
    uint8_t fspllcfg[LEN_FS_PLLCFG];
    uint8_t fsplltune[LEN_FS_PLLTUNE];
    uint8_t fsxtalt[LEN_FS_XTALT];
    // AGC_TUNE1
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d108      	bne.n	80035d8 <dwTune+0x24>
    {
        writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 80035c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035ca:	2202      	movs	r2, #2
 80035cc:	f648 0170 	movw	r1, #34928	; 0x8870
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fcf4 	bl	8001fbe <writeValueToBytes>
 80035d6:	e00c      	b.n	80035f2 <dwTune+0x3e>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d107      	bne.n	80035f2 <dwTune+0x3e>
    {
        writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 80035e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035e6:	2202      	movs	r2, #2
 80035e8:	f648 019b 	movw	r1, #34971	; 0x889b
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fce6 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // AGC_TUNE2
    writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 80035f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035f6:	2204      	movs	r2, #4
 80035f8:	49b9      	ldr	r1, [pc, #740]	; (80038e0 <dwTune+0x32c>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fcdf 	bl	8001fbe <writeValueToBytes>
    // AGC_TUNE3
    writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8003600:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003604:	2202      	movs	r2, #2
 8003606:	2135      	movs	r1, #53	; 0x35
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe fcd8 	bl	8001fbe <writeValueToBytes>
    // DRX_TUNE0b (already optimized according to Table 20 of user manual)
    if (dev->dataRate == TRX_RATE_110KBPS)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <dwTune+0x74>
    {
        writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8003618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800361c:	2202      	movs	r2, #2
 800361e:	2116      	movs	r1, #22
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe fccc 	bl	8001fbe <writeValueToBytes>
 8003626:	e018      	b.n	800365a <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_850KBPS)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <dwTune+0x8e>
    {
        writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8003632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003636:	2202      	movs	r2, #2
 8003638:	2106      	movs	r1, #6
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fcbf 	bl	8001fbe <writeValueToBytes>
 8003640:	e00b      	b.n	800365a <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_6800KBPS)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003648:	2b02      	cmp	r3, #2
 800364a:	d106      	bne.n	800365a <dwTune+0xa6>
    {
        writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 800364c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003650:	2202      	movs	r2, #2
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe fcb2 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1a
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <dwTune+0xc0>
    {
        writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8003664:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003668:	2202      	movs	r2, #2
 800366a:	2187      	movs	r1, #135	; 0x87
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fca6 	bl	8001fbe <writeValueToBytes>
 8003672:	e00b      	b.n	800368c <dwTune+0xd8>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800367a:	2b02      	cmp	r3, #2
 800367c:	d106      	bne.n	800368c <dwTune+0xd8>
    {
        writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 800367e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003682:	2202      	movs	r2, #2
 8003684:	218d      	movs	r1, #141	; 0x8d
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fc99 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1b
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003692:	2b06      	cmp	r3, #6
 8003694:	d009      	beq.n	80036aa <dwTune+0xf6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800369c:	2b0a      	cmp	r3, #10
 800369e:	d004      	beq.n	80036aa <dwTune+0xf6>
        dev->preambleLength == TX_PREAMBLE_LEN_4096)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d10c      	bne.n	80036c4 <dwTune+0x110>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d12a      	bne.n	800370a <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 80036b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036b8:	2202      	movs	r2, #2
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fc7e 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80036c2:	e022      	b.n	800370a <dwTune+0x156>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->preambleLength != TX_PREAMBLE_LEN_64)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d011      	beq.n	80036f2 <dwTune+0x13e>
    {
        if (dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d004      	beq.n	80036e2 <dwTune+0x12e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d113      	bne.n	800370a <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 80036e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e6:	2202      	movs	r2, #2
 80036e8:	2120      	movs	r1, #32
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fc67 	bl	8001fbe <writeValueToBytes>
 80036f0:	e00b      	b.n	800370a <dwTune+0x156>
            // TODO proper error/warning handling
        }
    }
    else
    {
        if (dev->dataRate == TRX_RATE_6800KBPS)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d106      	bne.n	800370a <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 80036fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003700:	2202      	movs	r2, #2
 8003702:	2110      	movs	r1, #16
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fc5a 	bl	8001fbe <writeValueToBytes>
        {
            // TODO proper error/warning handling
        }
    }
    // DRX_TUNE2
    if (dev->pacSize == PAC_SIZE_8)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003710:	2b08      	cmp	r3, #8
 8003712:	d119      	bne.n	8003748 <dwTune+0x194>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <dwTune+0x17a>
        {
            writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 800371e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003722:	2204      	movs	r2, #4
 8003724:	496f      	ldr	r1, [pc, #444]	; (80038e4 <dwTune+0x330>)
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fc49 	bl	8001fbe <writeValueToBytes>
 800372c:	e068      	b.n	8003800 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003734:	2b02      	cmp	r3, #2
 8003736:	d163      	bne.n	8003800 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8003738:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800373c:	2204      	movs	r2, #4
 800373e:	496a      	ldr	r1, [pc, #424]	; (80038e8 <dwTune+0x334>)
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fc3c 	bl	8001fbe <writeValueToBytes>
 8003746:	e05b      	b.n	8003800 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_16)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800374e:	2b10      	cmp	r3, #16
 8003750:	d119      	bne.n	8003786 <dwTune+0x1d2>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <dwTune+0x1b8>
        {
            writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 800375c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003760:	2204      	movs	r2, #4
 8003762:	4962      	ldr	r1, [pc, #392]	; (80038ec <dwTune+0x338>)
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fc2a 	bl	8001fbe <writeValueToBytes>
 800376a:	e049      	b.n	8003800 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003772:	2b02      	cmp	r3, #2
 8003774:	d144      	bne.n	8003800 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8003776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800377a:	2204      	movs	r2, #4
 800377c:	495c      	ldr	r1, [pc, #368]	; (80038f0 <dwTune+0x33c>)
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fc1d 	bl	8001fbe <writeValueToBytes>
 8003784:	e03c      	b.n	8003800 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_32)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800378c:	2b20      	cmp	r3, #32
 800378e:	d119      	bne.n	80037c4 <dwTune+0x210>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <dwTune+0x1f6>
        {
            writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 800379a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800379e:	2204      	movs	r2, #4
 80037a0:	4954      	ldr	r1, [pc, #336]	; (80038f4 <dwTune+0x340>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fc0b 	bl	8001fbe <writeValueToBytes>
 80037a8:	e02a      	b.n	8003800 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d125      	bne.n	8003800 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 80037b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037b8:	2204      	movs	r2, #4
 80037ba:	494f      	ldr	r1, [pc, #316]	; (80038f8 <dwTune+0x344>)
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fbfe 	bl	8001fbe <writeValueToBytes>
 80037c2:	e01d      	b.n	8003800 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_64)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d118      	bne.n	8003800 <dwTune+0x24c>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <dwTune+0x234>
        {
            writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 80037d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037dc:	2204      	movs	r2, #4
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <dwTune+0x348>)
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fbec 	bl	8001fbe <writeValueToBytes>
 80037e6:	e00b      	b.n	8003800 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d106      	bne.n	8003800 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 80037f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037f6:	2204      	movs	r2, #4
 80037f8:	4941      	ldr	r1, [pc, #260]	; (8003900 <dwTune+0x34c>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fbdf 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE4H
    if (dev->preambleLength == TX_PREAMBLE_LEN_64)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <dwTune+0x266>
    {
        writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 800380a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800380e:	2202      	movs	r2, #2
 8003810:	2110      	movs	r1, #16
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fbd3 	bl	8001fbe <writeValueToBytes>
 8003818:	e006      	b.n	8003828 <dwTune+0x274>
    }
    else
    {
        writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 800381a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800381e:	2202      	movs	r2, #2
 8003820:	2128      	movs	r1, #40	; 0x28
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fbcb 	bl	8001fbe <writeValueToBytes>
    }
    // RF_RXCTRLH
    if (dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800382e:	2b04      	cmp	r3, #4
 8003830:	d00c      	beq.n	800384c <dwTune+0x298>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003838:	2b07      	cmp	r3, #7
 800383a:	d007      	beq.n	800384c <dwTune+0x298>
    {
        writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 800383c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003840:	2201      	movs	r2, #1
 8003842:	21d8      	movs	r1, #216	; 0xd8
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fbba 	bl	8001fbe <writeValueToBytes>
 800384a:	e006      	b.n	800385a <dwTune+0x2a6>
    }
    else
    {
        writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 800384c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003850:	2201      	movs	r2, #1
 8003852:	21bc      	movs	r1, #188	; 0xbc
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fbb2 	bl	8001fbe <writeValueToBytes>
    }
    // RX_TXCTRL
    if (dev->channel == CHANNEL_1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003860:	2b01      	cmp	r3, #1
 8003862:	d108      	bne.n	8003876 <dwTune+0x2c2>
    {
        writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8003864:	f107 0320 	add.w	r3, r7, #32
 8003868:	2204      	movs	r2, #4
 800386a:	f645 4140 	movw	r1, #23616	; 0x5c40
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fba5 	bl	8001fbe <writeValueToBytes>
 8003874:	e05a      	b.n	800392c <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800387c:	2b02      	cmp	r3, #2
 800387e:	d107      	bne.n	8003890 <dwTune+0x2dc>
    {
        writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8003880:	f107 0320 	add.w	r3, r7, #32
 8003884:	2204      	movs	r2, #4
 8003886:	491f      	ldr	r1, [pc, #124]	; (8003904 <dwTune+0x350>)
 8003888:	4618      	mov	r0, r3
 800388a:	f7fe fb98 	bl	8001fbe <writeValueToBytes>
 800388e:	e04d      	b.n	800392c <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_3)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003896:	2b03      	cmp	r3, #3
 8003898:	d107      	bne.n	80038aa <dwTune+0x2f6>
    {
        writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 800389a:	f107 0320 	add.w	r3, r7, #32
 800389e:	2204      	movs	r2, #4
 80038a0:	4919      	ldr	r1, [pc, #100]	; (8003908 <dwTune+0x354>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fb8b 	bl	8001fbe <writeValueToBytes>
 80038a8:	e040      	b.n	800392c <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_4)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d107      	bne.n	80038c4 <dwTune+0x310>
    {
        writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 80038b4:	f107 0320 	add.w	r3, r7, #32
 80038b8:	2204      	movs	r2, #4
 80038ba:	4914      	ldr	r1, [pc, #80]	; (800390c <dwTune+0x358>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fb7e 	bl	8001fbe <writeValueToBytes>
 80038c2:	e033      	b.n	800392c <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_5)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d122      	bne.n	8003914 <dwTune+0x360>
    {
        writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 80038ce:	f107 0320 	add.w	r3, r7, #32
 80038d2:	2204      	movs	r2, #4
 80038d4:	490e      	ldr	r1, [pc, #56]	; (8003910 <dwTune+0x35c>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fb71 	bl	8001fbe <writeValueToBytes>
 80038dc:	e026      	b.n	800392c <dwTune+0x378>
 80038de:	bf00      	nop
 80038e0:	2502a907 	.word	0x2502a907
 80038e4:	311a002d 	.word	0x311a002d
 80038e8:	313b006b 	.word	0x313b006b
 80038ec:	331a0052 	.word	0x331a0052
 80038f0:	333b00be 	.word	0x333b00be
 80038f4:	351a009a 	.word	0x351a009a
 80038f8:	353b015e 	.word	0x353b015e
 80038fc:	371a011d 	.word	0x371a011d
 8003900:	373b0296 	.word	0x373b0296
 8003904:	00045ca0 	.word	0x00045ca0
 8003908:	00086cc0 	.word	0x00086cc0
 800390c:	00045c80 	.word	0x00045c80
 8003910:	001e3fe0 	.word	0x001e3fe0
    }
    else if (dev->channel == CHANNEL_7)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800391a:	2b07      	cmp	r3, #7
 800391c:	d106      	bne.n	800392c <dwTune+0x378>
    {
        writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 800391e:	f107 0320 	add.w	r3, r7, #32
 8003922:	2204      	movs	r2, #4
 8003924:	49be      	ldr	r1, [pc, #760]	; (8003c20 <dwTune+0x66c>)
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fb49 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TC_PGDELAY
    if (dev->channel == CHANNEL_1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <dwTune+0x392>
    {
        writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8003936:	f107 031c 	add.w	r3, r7, #28
 800393a:	2201      	movs	r2, #1
 800393c:	21c9      	movs	r1, #201	; 0xc9
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fb3d 	bl	8001fbe <writeValueToBytes>
 8003944:	e03f      	b.n	80039c6 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800394c:	2b02      	cmp	r3, #2
 800394e:	d107      	bne.n	8003960 <dwTune+0x3ac>
    {
        writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	2201      	movs	r2, #1
 8003956:	21c2      	movs	r1, #194	; 0xc2
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fb30 	bl	8001fbe <writeValueToBytes>
 800395e:	e032      	b.n	80039c6 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_3)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <dwTune+0x3c6>
    {
        writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 800396a:	f107 031c 	add.w	r3, r7, #28
 800396e:	2201      	movs	r2, #1
 8003970:	21c5      	movs	r1, #197	; 0xc5
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fb23 	bl	8001fbe <writeValueToBytes>
 8003978:	e025      	b.n	80039c6 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_4)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003980:	2b04      	cmp	r3, #4
 8003982:	d107      	bne.n	8003994 <dwTune+0x3e0>
    {
        writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	2201      	movs	r2, #1
 800398a:	2195      	movs	r1, #149	; 0x95
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fb16 	bl	8001fbe <writeValueToBytes>
 8003992:	e018      	b.n	80039c6 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_5)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800399a:	2b05      	cmp	r3, #5
 800399c:	d107      	bne.n	80039ae <dwTune+0x3fa>
    {
        writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 800399e:	f107 031c 	add.w	r3, r7, #28
 80039a2:	2201      	movs	r2, #1
 80039a4:	21c0      	movs	r1, #192	; 0xc0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fb09 	bl	8001fbe <writeValueToBytes>
 80039ac:	e00b      	b.n	80039c6 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_7)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039b4:	2b07      	cmp	r3, #7
 80039b6:	d106      	bne.n	80039c6 <dwTune+0x412>
    {
        writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	2201      	movs	r2, #1
 80039be:	2193      	movs	r1, #147	; 0x93
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe fafc 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // FS_PLLCFG and FS_PLLTUNE
    if (dev->channel == CHANNEL_1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10e      	bne.n	80039ee <dwTune+0x43a>
    {
        writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 80039d0:	f107 0318 	add.w	r3, r7, #24
 80039d4:	2204      	movs	r2, #4
 80039d6:	4993      	ldr	r1, [pc, #588]	; (8003c24 <dwTune+0x670>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe faf0 	bl	8001fbe <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	2201      	movs	r2, #1
 80039e4:	211e      	movs	r1, #30
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fae9 	bl	8001fbe <writeValueToBytes>
 80039ec:	e044      	b.n	8003a78 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d004      	beq.n	8003a02 <dwTune+0x44e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d10e      	bne.n	8003a20 <dwTune+0x46c>
    {
        writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8003a02:	f107 0318 	add.w	r3, r7, #24
 8003a06:	2204      	movs	r2, #4
 8003a08:	4987      	ldr	r1, [pc, #540]	; (8003c28 <dwTune+0x674>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fad7 	bl	8001fbe <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	2201      	movs	r2, #1
 8003a16:	2126      	movs	r1, #38	; 0x26
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe fad0 	bl	8001fbe <writeValueToBytes>
 8003a1e:	e02b      	b.n	8003a78 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_3)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d10e      	bne.n	8003a48 <dwTune+0x494>
    {
        writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 8003a2a:	f107 0318 	add.w	r3, r7, #24
 8003a2e:	2204      	movs	r2, #4
 8003a30:	497e      	ldr	r1, [pc, #504]	; (8003c2c <dwTune+0x678>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fac3 	bl	8001fbe <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2156      	movs	r1, #86	; 0x56
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fabc 	bl	8001fbe <writeValueToBytes>
 8003a46:	e017      	b.n	8003a78 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d004      	beq.n	8003a5c <dwTune+0x4a8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a58:	2b07      	cmp	r3, #7
 8003a5a:	d10d      	bne.n	8003a78 <dwTune+0x4c4>
    {
        writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 8003a5c:	f107 0318 	add.w	r3, r7, #24
 8003a60:	2204      	movs	r2, #4
 8003a62:	4973      	ldr	r1, [pc, #460]	; (8003c30 <dwTune+0x67c>)
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe faaa 	bl	8001fbe <writeValueToBytes>
        writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	2201      	movs	r2, #1
 8003a70:	21a6      	movs	r1, #166	; 0xa6
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe faa3 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_CFG1
    writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 8003a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	210d      	movs	r1, #13
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fa9c 	bl	8001fbe <writeValueToBytes>
    // LDE_CFG2
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <dwTune+0x4ee>
    {
        writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8003a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a94:	2202      	movs	r2, #2
 8003a96:	f241 6107 	movw	r1, #5639	; 0x1607
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fa8f 	bl	8001fbe <writeValueToBytes>
 8003aa0:	e00c      	b.n	8003abc <dwTune+0x508>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d107      	bne.n	8003abc <dwTune+0x508>
    {
        writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 8003aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f240 6107 	movw	r1, #1543	; 0x607
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fa81 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_REPC
    if (dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d004      	beq.n	8003ad0 <dwTune+0x51c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d116      	bne.n	8003afe <dwTune+0x54a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <dwTune+0x538>
        {
            writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f640 3133 	movw	r1, #2867	; 0xb33
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fa6a 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003aea:	e154      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 8003aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003af0:	2202      	movs	r2, #2
 8003af2:	f645 1198 	movw	r1, #22936	; 0x5998
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fa61 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003afc:	e14b      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d004      	beq.n	8003b12 <dwTune+0x55e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d116      	bne.n	8003b40 <dwTune+0x58c>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <dwTune+0x57a>
        {
            writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b20:	2202      	movs	r2, #2
 8003b22:	f640 213d 	movw	r1, #2621	; 0xa3d
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fa49 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b2c:	e133      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 8003b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b32:	2202      	movs	r2, #2
 8003b34:	f245 11ea 	movw	r1, #20970	; 0x51ea
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fa40 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b3e:	e12a      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_4)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d116      	bne.n	8003b78 <dwTune+0x5c4>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <dwTune+0x5b2>
        {
            writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f640 0151 	movw	r1, #2129	; 0x851
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fa2d 	bl	8001fbe <writeValueToBytes>
 8003b64:	e117      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 8003b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f244 218e 	movw	r1, #17038	; 0x428e
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe fa24 	bl	8001fbe <writeValueToBytes>
 8003b76:	e10e      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_5)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d116      	bne.n	8003bb0 <dwTune+0x5fc>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <dwTune+0x5ea>
        {
            writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b90:	2202      	movs	r2, #2
 8003b92:	f640 01a3 	movw	r1, #2211	; 0x8a3
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fa11 	bl	8001fbe <writeValueToBytes>
 8003b9c:	e0fb      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 8003b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f244 511e 	movw	r1, #17694	; 0x451e
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fa08 	bl	8001fbe <writeValueToBytes>
 8003bae:	e0f2      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_6)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d116      	bne.n	8003be8 <dwTune+0x634>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d108      	bne.n	8003bd6 <dwTune+0x622>
        {
            writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f240 51c2 	movw	r1, #1474	; 0x5c2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe f9f5 	bl	8001fbe <writeValueToBytes>
 8003bd4:	e0df      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 8003bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f642 6114 	movw	r1, #11796	; 0x2e14
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe f9ec 	bl	8001fbe <writeValueToBytes>
 8003be6:	e0d6      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_7)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bee:	2b07      	cmp	r3, #7
 8003bf0:	d120      	bne.n	8003c34 <dwTune+0x680>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d108      	bne.n	8003c0e <dwTune+0x65a>
        {
            writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c00:	2202      	movs	r2, #2
 8003c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f9d9 	bl	8001fbe <writeValueToBytes>
 8003c0c:	e0c3      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 8003c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c12:	2202      	movs	r2, #2
 8003c14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe f9d0 	bl	8001fbe <writeValueToBytes>
 8003c1e:	e0ba      	b.n	8003d96 <dwTune+0x7e2>
 8003c20:	001e7de0 	.word	0x001e7de0
 8003c24:	09000407 	.word	0x09000407
 8003c28:	08400508 	.word	0x08400508
 8003c2c:	08401009 	.word	0x08401009
 8003c30:	0800041d 	.word	0x0800041d
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_9)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c3a:	2b09      	cmp	r3, #9
 8003c3c:	d116      	bne.n	8003c6c <dwTune+0x6b8>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <dwTune+0x6a6>
        {
            writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f240 511e 	movw	r1, #1310	; 0x51e
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe f9b3 	bl	8001fbe <writeValueToBytes>
 8003c58:	e09d      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 8003c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f642 01f4 	movw	r1, #10484	; 0x28f4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe f9aa 	bl	8001fbe <writeValueToBytes>
 8003c6a:	e094      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c72:	2b0a      	cmp	r3, #10
 8003c74:	d004      	beq.n	8003c80 <dwTune+0x6cc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c7c:	2b11      	cmp	r3, #17
 8003c7e:	d116      	bne.n	8003cae <dwTune+0x6fa>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <dwTune+0x6e8>
        {
            writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f240 6166 	movw	r1, #1638	; 0x666
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe f992 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003c9a:	e07c      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 8003c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f243 3132 	movw	r1, #13106	; 0x3332
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe f989 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003cac:	e073      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_11)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cb4:	2b0b      	cmp	r3, #11
 8003cb6:	d116      	bne.n	8003ce6 <dwTune+0x732>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <dwTune+0x720>
        {
            writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f240 715c 	movw	r1, #1884	; 0x75c
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe f976 	bl	8001fbe <writeValueToBytes>
 8003cd2:	e060      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 8003cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f643 21e0 	movw	r1, #15072	; 0x3ae0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe f96d 	bl	8001fbe <writeValueToBytes>
 8003ce4:	e057      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_12)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	d116      	bne.n	8003d1e <dwTune+0x76a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <dwTune+0x758>
        {
            writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f240 71ae 	movw	r1, #1966	; 0x7ae
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe f95a 	bl	8001fbe <writeValueToBytes>
 8003d0a:	e044      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 8003d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d10:	2202      	movs	r2, #2
 8003d12:	f643 5170 	movw	r1, #15728	; 0x3d70
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe f951 	bl	8001fbe <writeValueToBytes>
 8003d1c:	e03b      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d24:	2b12      	cmp	r3, #18
 8003d26:	d004      	beq.n	8003d32 <dwTune+0x77e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d2e:	2b13      	cmp	r3, #19
 8003d30:	d116      	bne.n	8003d60 <dwTune+0x7ac>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d108      	bne.n	8003d4e <dwTune+0x79a>
        {
            writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d40:	2202      	movs	r2, #2
 8003d42:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe f939 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003d4c:	e023      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 8003d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d52:	2202      	movs	r2, #2
 8003d54:	f243 51c2 	movw	r1, #13762	; 0x35c2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe f930 	bl	8001fbe <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003d5e:	e01a      	b.n	8003d96 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_20)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d66:	2b14      	cmp	r3, #20
 8003d68:	d115      	bne.n	8003d96 <dwTune+0x7e2>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <dwTune+0x7d2>
        {
            writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f640 01f5 	movw	r1, #2293	; 0x8f5
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f91d 	bl	8001fbe <writeValueToBytes>
 8003d84:	e007      	b.n	8003d96 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8003d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f244 71ae 	movw	r1, #18350	; 0x47ae
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe f914 	bl	8001fbe <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TX_POWER (enabled smart transmit power control)
    if (dev->forceTxPower)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <dwTune+0x800>
    {
        writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	4619      	mov	r1, r3
 8003da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003daa:	2204      	movs	r2, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe f906 	bl	8001fbe <writeValueToBytes>
 8003db2:	e12f      	b.n	8004014 <dwTune+0xa60>
    }
    else if (dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d004      	beq.n	8003dc8 <dwTune+0x814>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d136      	bne.n	8003e36 <dwTune+0x882>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d115      	bne.n	8003dfe <dwTune+0x84a>
        {
            if (dev->smartPower)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <dwTune+0x838>
            {
                writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 8003ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de0:	2204      	movs	r2, #4
 8003de2:	4995      	ldr	r1, [pc, #596]	; (8004038 <dwTune+0xa84>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe f8ea 	bl	8001fbe <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003dea:	e112      	b.n	8004012 <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 8003dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df0:	2204      	movs	r2, #4
 8003df2:	f04f 3175 	mov.w	r1, #1970632053	; 0x75757575
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe f8e1 	bl	8001fbe <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003dfc:	e109      	b.n	8004012 <dwTune+0xa5e>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	f040 8104 	bne.w	8004012 <dwTune+0xa5e>
        {
            if (dev->smartPower)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <dwTune+0x870>
            {
                writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 8003e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e18:	2204      	movs	r2, #4
 8003e1a:	4988      	ldr	r1, [pc, #544]	; (800403c <dwTune+0xa88>)
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe f8ce 	bl	8001fbe <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003e22:	e0f6      	b.n	8004012 <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 8003e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e28:	2204      	movs	r2, #4
 8003e2a:	f04f 3167 	mov.w	r1, #1734829927	; 0x67676767
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f8c5 	bl	8001fbe <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003e34:	e0ed      	b.n	8004012 <dwTune+0xa5e>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d136      	bne.n	8003eae <dwTune+0x8fa>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d115      	bne.n	8003e76 <dwTune+0x8c2>
        {
            if (dev->smartPower)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <dwTune+0x8b0>
            {
                writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8003e54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e58:	2204      	movs	r2, #4
 8003e5a:	4979      	ldr	r1, [pc, #484]	; (8004040 <dwTune+0xa8c>)
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe f8ae 	bl	8001fbe <writeValueToBytes>
 8003e62:	e0d7      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8003e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e68:	2204      	movs	r2, #4
 8003e6a:	f04f 316f 	mov.w	r1, #1869573999	; 0x6f6f6f6f
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe f8a5 	bl	8001fbe <writeValueToBytes>
 8003e74:	e0ce      	b.n	8004014 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	f040 80c9 	bne.w	8004014 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <dwTune+0x8e8>
            {
                writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8003e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e90:	2204      	movs	r2, #4
 8003e92:	496c      	ldr	r1, [pc, #432]	; (8004044 <dwTune+0xa90>)
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe f892 	bl	8001fbe <writeValueToBytes>
 8003e9a:	e0bb      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8003e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	f04f 318b 	mov.w	r1, #2341178251	; 0x8b8b8b8b
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe f889 	bl	8001fbe <writeValueToBytes>
 8003eac:	e0b2      	b.n	8004014 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_4)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d136      	bne.n	8003f26 <dwTune+0x972>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d115      	bne.n	8003eee <dwTune+0x93a>
        {
            if (dev->smartPower)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <dwTune+0x928>
            {
                writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8003ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	495d      	ldr	r1, [pc, #372]	; (8004048 <dwTune+0xa94>)
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe f872 	bl	8001fbe <writeValueToBytes>
 8003eda:	e09b      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8003edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	f04f 315f 	mov.w	r1, #1600085855	; 0x5f5f5f5f
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe f869 	bl	8001fbe <writeValueToBytes>
 8003eec:	e092      	b.n	8004014 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	f040 808d 	bne.w	8004014 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <dwTune+0x960>
            {
                writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8003f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f08:	2204      	movs	r2, #4
 8003f0a:	4950      	ldr	r1, [pc, #320]	; (800404c <dwTune+0xa98>)
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe f856 	bl	8001fbe <writeValueToBytes>
 8003f12:	e07f      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8003f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f18:	2204      	movs	r2, #4
 8003f1a:	f04f 319a 	mov.w	r1, #2593823386	; 0x9a9a9a9a
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe f84d 	bl	8001fbe <writeValueToBytes>
 8003f24:	e076      	b.n	8004014 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_5)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d135      	bne.n	8003f9c <dwTune+0x9e8>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d115      	bne.n	8003f66 <dwTune+0x9b2>
        {
            if (dev->smartPower)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <dwTune+0x9a0>
            {
                writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8003f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f48:	2204      	movs	r2, #4
 8003f4a:	4941      	ldr	r1, [pc, #260]	; (8004050 <dwTune+0xa9c>)
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe f836 	bl	8001fbe <writeValueToBytes>
 8003f52:	e05f      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8003f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f58:	2204      	movs	r2, #4
 8003f5a:	f04f 3148 	mov.w	r1, #1212696648	; 0x48484848
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe f82d 	bl	8001fbe <writeValueToBytes>
 8003f64:	e056      	b.n	8004014 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d151      	bne.n	8004014 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <dwTune+0x9d6>
            {
                writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 8003f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f7e:	2204      	movs	r2, #4
 8003f80:	4934      	ldr	r1, [pc, #208]	; (8004054 <dwTune+0xaa0>)
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe f81b 	bl	8001fbe <writeValueToBytes>
 8003f88:	e044      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 8003f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f04f 3185 	mov.w	r1, #2240120197	; 0x85858585
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe f812 	bl	8001fbe <writeValueToBytes>
 8003f9a:	e03b      	b.n	8004014 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_7)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fa2:	2b07      	cmp	r3, #7
 8003fa4:	d136      	bne.n	8004014 <dwTune+0xa60>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d115      	bne.n	8003fdc <dwTune+0xa28>
        {
            if (dev->smartPower)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <dwTune+0xa16>
            {
                writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8003fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4925      	ldr	r1, [pc, #148]	; (8004058 <dwTune+0xaa4>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fffb 	bl	8001fbe <writeValueToBytes>
 8003fc8:	e024      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8003fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fce:	2204      	movs	r2, #4
 8003fd0:	f04f 3192 	mov.w	r1, #2459079314	; 0x92929292
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fd fff2 	bl	8001fbe <writeValueToBytes>
 8003fda:	e01b      	b.n	8004014 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d116      	bne.n	8004014 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <dwTune+0xa4c>
            {
                writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8003ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	4919      	ldr	r1, [pc, #100]	; (800405c <dwTune+0xaa8>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd ffe0 	bl	8001fbe <writeValueToBytes>
 8003ffe:	e009      	b.n	8004014 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8004000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004004:	2204      	movs	r2, #4
 8004006:	f04f 31d1 	mov.w	r1, #3520188881	; 0xd1d1d1d1
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd ffd7 	bl	8001fbe <writeValueToBytes>
 8004010:	e000      	b.n	8004014 <dwTune+0xa60>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004012:	bf00      	nop
    {
        // TODO proper error/warning handling
    }
    // Crystal calibration from OTP (if available)
    uint8_t buf_otp[4];
    readBytesOTP(dev, 0x01E, buf_otp);
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	461a      	mov	r2, r3
 800401a:	211e      	movs	r1, #30
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7fd ffee 	bl	8001ffe <readBytesOTP>
    if (buf_otp[0] == 0)
 8004022:	7b3b      	ldrb	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11b      	bne.n	8004060 <dwTune+0xaac>
    {
        // No trim value available from OTP, use midrange value of 0x10
        writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	2201      	movs	r2, #1
 800402e:	2170      	movs	r1, #112	; 0x70
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd ffc4 	bl	8001fbe <writeValueToBytes>
 8004036:	e01e      	b.n	8004076 <dwTune+0xac2>
 8004038:	15355575 	.word	0x15355575
 800403c:	07274767 	.word	0x07274767
 8004040:	0f2f4f6f 	.word	0x0f2f4f6f
 8004044:	2b4b6b8b 	.word	0x2b4b6b8b
 8004048:	1f1f3f5f 	.word	0x1f1f3f5f
 800404c:	3a5a7a9a 	.word	0x3a5a7a9a
 8004050:	0e082848 	.word	0x0e082848
 8004054:	25456585 	.word	0x25456585
 8004058:	32527292 	.word	0x32527292
 800405c:	5171b1d1 	.word	0x5171b1d1
    }
    else
    {
        writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8004060:	7b3b      	ldrb	r3, [r7, #12]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	f043 0160 	orr.w	r1, r3, #96	; 0x60
 800406a:	f107 0310 	add.w	r3, r7, #16
 800406e:	2201      	movs	r2, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f7fd ffa4 	bl	8001fbe <writeValueToBytes>
    }
    // write configuration back to chip
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8004076:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800407a:	2202      	movs	r2, #2
 800407c:	9200      	str	r2, [sp, #0]
 800407e:	2204      	movs	r2, #4
 8004080:	2123      	movs	r1, #35	; 0x23
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9b6 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8004088:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800408c:	2204      	movs	r2, #4
 800408e:	9200      	str	r2, [sp, #0]
 8004090:	220c      	movs	r2, #12
 8004092:	2123      	movs	r1, #35	; 0x23
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f9ad 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 800409a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800409e:	2202      	movs	r2, #2
 80040a0:	9200      	str	r2, [sp, #0]
 80040a2:	2212      	movs	r2, #18
 80040a4:	2123      	movs	r1, #35	; 0x23
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9a4 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 80040ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040b0:	2202      	movs	r2, #2
 80040b2:	9200      	str	r2, [sp, #0]
 80040b4:	2202      	movs	r2, #2
 80040b6:	2127      	movs	r1, #39	; 0x27
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f99b 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 80040be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040c2:	2202      	movs	r2, #2
 80040c4:	9200      	str	r2, [sp, #0]
 80040c6:	2204      	movs	r2, #4
 80040c8:	2127      	movs	r1, #39	; 0x27
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f992 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 80040d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040d4:	2202      	movs	r2, #2
 80040d6:	9200      	str	r2, [sp, #0]
 80040d8:	2206      	movs	r2, #6
 80040da:	2127      	movs	r1, #39	; 0x27
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f989 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 80040e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040e6:	2204      	movs	r2, #4
 80040e8:	9200      	str	r2, [sp, #0]
 80040ea:	2208      	movs	r2, #8
 80040ec:	2127      	movs	r1, #39	; 0x27
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f980 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 80040f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040f8:	2202      	movs	r2, #2
 80040fa:	9200      	str	r2, [sp, #0]
 80040fc:	2226      	movs	r2, #38	; 0x26
 80040fe:	2127      	movs	r1, #39	; 0x27
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f977 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 8004106:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800410a:	2201      	movs	r2, #1
 800410c:	9200      	str	r2, [sp, #0]
 800410e:	f640 0206 	movw	r2, #2054	; 0x806
 8004112:	212e      	movs	r1, #46	; 0x2e
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f96d 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 800411a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800411e:	2202      	movs	r2, #2
 8004120:	9200      	str	r2, [sp, #0]
 8004122:	f641 0206 	movw	r2, #6150	; 0x1806
 8004126:	212e      	movs	r1, #46	; 0x2e
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f963 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 800412e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004132:	2202      	movs	r2, #2
 8004134:	9200      	str	r2, [sp, #0]
 8004136:	f642 0204 	movw	r2, #10244	; 0x2804
 800413a:	212e      	movs	r1, #46	; 0x2e
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f959 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8004142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004146:	2204      	movs	r2, #4
 8004148:	9200      	str	r2, [sp, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	211e      	movs	r1, #30
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f950 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8004154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004158:	2201      	movs	r2, #1
 800415a:	9200      	str	r2, [sp, #0]
 800415c:	220b      	movs	r2, #11
 800415e:	2128      	movs	r1, #40	; 0x28
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f947 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8004166:	f107 0320 	add.w	r3, r7, #32
 800416a:	2204      	movs	r2, #4
 800416c:	9200      	str	r2, [sp, #0]
 800416e:	220c      	movs	r2, #12
 8004170:	2128      	movs	r1, #40	; 0x28
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f93e 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8004178:	f107 031c 	add.w	r3, r7, #28
 800417c:	2201      	movs	r2, #1
 800417e:	9200      	str	r2, [sp, #0]
 8004180:	220b      	movs	r2, #11
 8004182:	212a      	movs	r1, #42	; 0x2a
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f935 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 800418a:	f107 0314 	add.w	r3, r7, #20
 800418e:	2201      	movs	r2, #1
 8004190:	9200      	str	r2, [sp, #0]
 8004192:	220b      	movs	r2, #11
 8004194:	212b      	movs	r1, #43	; 0x2b
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f92c 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 800419c:	f107 0318 	add.w	r3, r7, #24
 80041a0:	2204      	movs	r2, #4
 80041a2:	9200      	str	r2, [sp, #0]
 80041a4:	2207      	movs	r2, #7
 80041a6:	212b      	movs	r1, #43	; 0x2b
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f923 	bl	80043f4 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 80041ae:	f107 0310 	add.w	r3, r7, #16
 80041b2:	2201      	movs	r2, #1
 80041b4:	9200      	str	r2, [sp, #0]
 80041b6:	220e      	movs	r2, #14
 80041b8:	212b      	movs	r1, #43	; 0x2b
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f91a 	bl	80043f4 <dwSpiWrite>
}
 80041c0:	bf00      	nop
 80041c2:	3758      	adds	r7, #88	; 0x58
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <spiWrite>:

uint16_t buffer[64];

static void spiWrite(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                     const void *data, size_t dataLength)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2110      	movs	r1, #16
 80041da:	4813      	ldr	r0, [pc, #76]	; (8004228 <spiWrite+0x60>)
 80041dc:	f000 fc66 	bl	8004aac <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4811      	ldr	r0, [pc, #68]	; (800422c <spiWrite+0x64>)
 80041e6:	f002 f81b 	bl	8006220 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295
 80041f2:	490e      	ldr	r1, [pc, #56]	; (800422c <spiWrite+0x64>)
 80041f4:	480e      	ldr	r0, [pc, #56]	; (8004230 <spiWrite+0x68>)
 80041f6:	f001 f905 	bl	8005404 <HAL_SPI_Transmit>
    memcpy(buffer, data, dataLength);
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	480b      	ldr	r0, [pc, #44]	; (800422c <spiWrite+0x64>)
 8004200:	f002 f80e 	bl	8006220 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	b29a      	uxth	r2, r3
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	4907      	ldr	r1, [pc, #28]	; (800422c <spiWrite+0x64>)
 800420e:	4808      	ldr	r0, [pc, #32]	; (8004230 <spiWrite+0x68>)
 8004210:	f001 f8f8 	bl	8005404 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8004214:	2201      	movs	r2, #1
 8004216:	2110      	movs	r1, #16
 8004218:	4803      	ldr	r0, [pc, #12]	; (8004228 <spiWrite+0x60>)
 800421a:	f000 fc47 	bl	8004aac <HAL_GPIO_WritePin>
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40010800 	.word	0x40010800
 800422c:	20000474 	.word	0x20000474
 8004230:	200003d0 	.word	0x200003d0

08004234 <spiRead>:

static void spiRead(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                    void *data, size_t dataLength)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8004242:	2200      	movs	r2, #0
 8004244:	2110      	movs	r1, #16
 8004246:	4813      	ldr	r0, [pc, #76]	; (8004294 <spiRead+0x60>)
 8004248:	f000 fc30 	bl	8004aac <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4811      	ldr	r0, [pc, #68]	; (8004298 <spiRead+0x64>)
 8004252:	f001 ffe5 	bl	8006220 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	b29a      	uxth	r2, r3
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
 800425e:	490e      	ldr	r1, [pc, #56]	; (8004298 <spiRead+0x64>)
 8004260:	480e      	ldr	r0, [pc, #56]	; (800429c <spiRead+0x68>)
 8004262:	f001 f8cf 	bl	8005404 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	b29a      	uxth	r2, r3
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	490a      	ldr	r1, [pc, #40]	; (8004298 <spiRead+0x64>)
 8004270:	480a      	ldr	r0, [pc, #40]	; (800429c <spiRead+0x68>)
 8004272:	f001 fa0a 	bl	800568a <HAL_SPI_Receive>
    memcpy(data, buffer, dataLength);
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4907      	ldr	r1, [pc, #28]	; (8004298 <spiRead+0x64>)
 800427a:	6838      	ldr	r0, [r7, #0]
 800427c:	f001 ffd0 	bl	8006220 <memcpy>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8004280:	2201      	movs	r2, #1
 8004282:	2110      	movs	r1, #16
 8004284:	4803      	ldr	r0, [pc, #12]	; (8004294 <spiRead+0x60>)
 8004286:	f000 fc11 	bl	8004aac <HAL_GPIO_WritePin>
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40010800 	.word	0x40010800
 8004298:	20000474 	.word	0x20000474
 800429c:	200003d0 	.word	0x200003d0

080042a0 <spiSetSpeed>:

static void spiSetSpeed(dwDeviceTypes_t *dev, dwSpiSpeed_t speed)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
    if (speed == dwSpiSpeedLow)
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <spiSetSpeed+0x20>
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <spiSetSpeed+0x34>)
 80042b4:	2220      	movs	r2, #32
 80042b6:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 80042b8:	4806      	ldr	r0, [pc, #24]	; (80042d4 <spiSetSpeed+0x34>)
 80042ba:	f001 f81f 	bl	80052fc <HAL_SPI_Init>
    else
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
        HAL_SPI_Init(&hspi1);
    }
}
 80042be:	e005      	b.n	80042cc <spiSetSpeed+0x2c>
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <spiSetSpeed+0x34>)
 80042c2:	2208      	movs	r2, #8
 80042c4:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 80042c6:	4803      	ldr	r0, [pc, #12]	; (80042d4 <spiSetSpeed+0x34>)
 80042c8:	f001 f818 	bl	80052fc <HAL_SPI_Init>
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200003d0 	.word	0x200003d0

080042d8 <reset>:

static void reset(dwDeviceTypes_t *dev)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042e6:	4808      	ldr	r0, [pc, #32]	; (8004308 <reset+0x30>)
 80042e8:	f000 fbe0 	bl	8004aac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80042ec:	200a      	movs	r0, #10
 80042ee:	f000 f951 	bl	8004594 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80042f2:	2201      	movs	r2, #1
 80042f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042f8:	4803      	ldr	r0, [pc, #12]	; (8004308 <reset+0x30>)
 80042fa:	f000 fbd7 	bl	8004aac <HAL_GPIO_WritePin>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40010c00 	.word	0x40010c00

0800430c <delayms>:
    HAL_Delay(2);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
}

static void delayms(dwDeviceTypes_t *dev, unsigned int delay)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
    HAL_Delay(delay);
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	f000 f93c 	bl	8004594 <HAL_Delay>
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <dwSpiRead>:
#include "dw_spi.h"

void dwSpiRead(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, void *data, size_t length)
{
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	460b      	mov	r3, r1
 8004332:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 8004338:	7afb      	ldrb	r3, [r7, #11]
 800433a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433e:	b2db      	uxtb	r3, r3
 8004340:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01c      	beq.n	8004382 <dwSpiRead+0x5e>
    {
        header[0] |= 0x40;
 8004348:	7c3b      	ldrb	r3, [r7, #16]
 800434a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434e:	b2db      	uxtb	r3, r3
 8004350:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800435a:	b2db      	uxtb	r3, r3
 800435c:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	09db      	lsrs	r3, r3, #7
 8004362:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 8004364:	2302      	movs	r3, #2
 8004366:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <dwSpiRead+0x5e>
        {
            header[1] |= 0x80;
 800436e:	7c7b      	ldrb	r3, [r7, #17]
 8004370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004374:	b2db      	uxtb	r3, r3
 8004376:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 800437e:	2303      	movs	r3, #3
 8004380:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiRead(dev, header, headerLength, data, length);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681c      	ldr	r4, [r3, #0]
 8004388:	f107 0110 	add.w	r1, r7, #16
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	47a0      	blx	r4
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd90      	pop	{r4, r7, pc}

080043a0 <dwSpiRead16>:

uint16_t dwSpiRead16(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	460b      	mov	r3, r1
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	72fb      	strb	r3, [r7, #11]
    uint16_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 80043ae:	f107 0316 	add.w	r3, r7, #22
 80043b2:	7af9      	ldrb	r1, [r7, #11]
 80043b4:	2202      	movs	r2, #2
 80043b6:	9200      	str	r2, [sp, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ffb2 	bl	8004324 <dwSpiRead>
    return data;
 80043c0:	8afb      	ldrh	r3, [r7, #22]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <dwSpiRead32>:

uint32_t dwSpiRead32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b088      	sub	sp, #32
 80043ce:	af02      	add	r7, sp, #8
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	460b      	mov	r3, r1
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	72fb      	strb	r3, [r7, #11]
    uint32_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	7af9      	ldrb	r1, [r7, #11]
 80043de:	2204      	movs	r2, #4
 80043e0:	9200      	str	r2, [sp, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff ff9d 	bl	8004324 <dwSpiRead>
    return data;
 80043ea:	697b      	ldr	r3, [r7, #20]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <dwSpiWrite>:

void dwSpiWrite(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, const void *data, size_t length)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	460b      	mov	r3, r1
 8004402:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 8004404:	2301      	movs	r3, #1
 8004406:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 8004408:	7afb      	ldrb	r3, [r7, #11]
 800440a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440e:	b2db      	uxtb	r3, r3
 8004410:	743b      	strb	r3, [r7, #16]
    header[0] |= 0x80;
 8004412:	7c3b      	ldrb	r3, [r7, #16]
 8004414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004418:	b2db      	uxtb	r3, r3
 800441a:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01c      	beq.n	800445c <dwSpiWrite+0x68>
    {
        header[0] |= 0x40;
 8004422:	7c3b      	ldrb	r3, [r7, #16]
 8004424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004428:	b2db      	uxtb	r3, r3
 800442a:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004434:	b2db      	uxtb	r3, r3
 8004436:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	09db      	lsrs	r3, r3, #7
 800443c:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 800443e:	2302      	movs	r3, #2
 8004440:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <dwSpiWrite+0x68>
        {
            header[1] |= 0x80;
 8004448:	7c7b      	ldrb	r3, [r7, #17]
 800444a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800444e:	b2db      	uxtb	r3, r3
 8004450:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 8004458:	2303      	movs	r3, #3
 800445a:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiWrite(dev, header, headerLength, data, length);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685c      	ldr	r4, [r3, #4]
 8004462:	f107 0110 	add.w	r1, r7, #16
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	47a0      	blx	r4
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	bd90      	pop	{r4, r7, pc}

0800447a <dwSpiWrite8>:

void dwSpiWrite8(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint8_t data)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af02      	add	r7, sp, #8
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	461a      	mov	r2, r3
 8004486:	460b      	mov	r3, r1
 8004488:	72fb      	strb	r3, [r7, #11]
 800448a:	4613      	mov	r3, r2
 800448c:	72bb      	strb	r3, [r7, #10]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 800448e:	f107 030a 	add.w	r3, r7, #10
 8004492:	7af9      	ldrb	r1, [r7, #11]
 8004494:	2201      	movs	r2, #1
 8004496:	9200      	str	r2, [sp, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ffaa 	bl	80043f4 <dwSpiWrite>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <dwSpiWrite32>:

void dwSpiWrite32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint32_t data)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	460b      	mov	r3, r1
 80044b6:	72fb      	strb	r3, [r7, #11]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 80044b8:	463b      	mov	r3, r7
 80044ba:	7af9      	ldrb	r1, [r7, #11]
 80044bc:	2204      	movs	r2, #4
 80044be:	9200      	str	r2, [sp, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff ff96 	bl	80043f4 <dwSpiWrite>
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044d4:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_Init+0x28>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <HAL_Init+0x28>)
 80044da:	f043 0310 	orr.w	r3, r3, #16
 80044de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044e0:	2003      	movs	r0, #3
 80044e2:	f000 f92b 	bl	800473c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044e6:	200f      	movs	r0, #15
 80044e8:	f000 f808 	bl	80044fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044ec:	f7fd fb64 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40022000 	.word	0x40022000

080044fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004504:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_InitTick+0x54>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_InitTick+0x58>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004512:	fbb3 f3f1 	udiv	r3, r3, r1
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f935 	bl	800478a <HAL_SYSTICK_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e00e      	b.n	8004548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b0f      	cmp	r3, #15
 800452e:	d80a      	bhi.n	8004546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004530:	2200      	movs	r2, #0
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	f000 f90b 	bl	8004752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800453c:	4a06      	ldr	r2, [pc, #24]	; (8004558 <HAL_InitTick+0x5c>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000070 	.word	0x20000070
 8004554:	2000008c 	.word	0x2000008c
 8004558:	20000088 	.word	0x20000088

0800455c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_IncTick+0x1c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_IncTick+0x20>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4413      	add	r3, r2
 800456c:	4a03      	ldr	r2, [pc, #12]	; (800457c <HAL_IncTick+0x20>)
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	2000008c 	.word	0x2000008c
 800457c:	200004f4 	.word	0x200004f4

08004580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return uwTick;
 8004584:	4b02      	ldr	r3, [pc, #8]	; (8004590 <HAL_GetTick+0x10>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	200004f4 	.word	0x200004f4

08004594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff fff0 	bl	8004580 <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d005      	beq.n	80045ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <HAL_Delay+0x44>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ba:	bf00      	nop
 80045bc:	f7ff ffe0 	bl	8004580 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d8f7      	bhi.n	80045bc <HAL_Delay+0x28>
  {
  }
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	2000008c 	.word	0x2000008c

080045dc <__NVIC_SetPriorityGrouping>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045f8:	4013      	ands	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800460e:	4a04      	ldr	r2, [pc, #16]	; (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	60d3      	str	r3, [r2, #12]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_GetPriorityGrouping>:
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <__NVIC_GetPriorityGrouping+0x18>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	f003 0307 	and.w	r3, r3, #7
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_SetPriority>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db0a      	blt.n	800466a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	490c      	ldr	r1, [pc, #48]	; (800468c <__NVIC_SetPriority+0x4c>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	0112      	lsls	r2, r2, #4
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	440b      	add	r3, r1
 8004664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004668:	e00a      	b.n	8004680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <__NVIC_SetPriority+0x50>)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	3b04      	subs	r3, #4
 8004678:	0112      	lsls	r2, r2, #4
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	440b      	add	r3, r1
 800467e:	761a      	strb	r2, [r3, #24]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e100 	.word	0xe000e100
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <NVIC_EncodePriority>:
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f1c3 0307 	rsb	r3, r3, #7
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	bf28      	it	cs
 80046b2:	2304      	movcs	r3, #4
 80046b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d902      	bls.n	80046c4 <NVIC_EncodePriority+0x30>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3b03      	subs	r3, #3
 80046c2:	e000      	b.n	80046c6 <NVIC_EncodePriority+0x32>
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	401a      	ands	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046dc:	f04f 31ff 	mov.w	r1, #4294967295
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	43d9      	mvns	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ec:	4313      	orrs	r3, r2
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <SysTick_Config>:
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004708:	d301      	bcc.n	800470e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800470a:	2301      	movs	r3, #1
 800470c:	e00f      	b.n	800472e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <SysTick_Config+0x40>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004716:	210f      	movs	r1, #15
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	f7ff ff90 	bl	8004640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <SysTick_Config+0x40>)
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <SysTick_Config+0x40>)
 8004728:	2207      	movs	r2, #7
 800472a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	e000e010 	.word	0xe000e010

0800473c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff49 	bl	80045dc <__NVIC_SetPriorityGrouping>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	4603      	mov	r3, r0
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004764:	f7ff ff5e 	bl	8004624 <__NVIC_GetPriorityGrouping>
 8004768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	6978      	ldr	r0, [r7, #20]
 8004770:	f7ff ff90 	bl	8004694 <NVIC_EncodePriority>
 8004774:	4602      	mov	r2, r0
 8004776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff5f 	bl	8004640 <__NVIC_SetPriority>
}
 8004782:	bf00      	nop
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ffb0 	bl	80046f8 <SysTick_Config>
 8004798:	4603      	mov	r3, r0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047b2:	2300      	movs	r3, #0
 80047b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047b6:	e169      	b.n	8004a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047b8:	2201      	movs	r2, #1
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	f040 8158 	bne.w	8004a86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4a9a      	ldr	r2, [pc, #616]	; (8004a44 <HAL_GPIO_Init+0x2a0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d05e      	beq.n	800489e <HAL_GPIO_Init+0xfa>
 80047e0:	4a98      	ldr	r2, [pc, #608]	; (8004a44 <HAL_GPIO_Init+0x2a0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d875      	bhi.n	80048d2 <HAL_GPIO_Init+0x12e>
 80047e6:	4a98      	ldr	r2, [pc, #608]	; (8004a48 <HAL_GPIO_Init+0x2a4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d058      	beq.n	800489e <HAL_GPIO_Init+0xfa>
 80047ec:	4a96      	ldr	r2, [pc, #600]	; (8004a48 <HAL_GPIO_Init+0x2a4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d86f      	bhi.n	80048d2 <HAL_GPIO_Init+0x12e>
 80047f2:	4a96      	ldr	r2, [pc, #600]	; (8004a4c <HAL_GPIO_Init+0x2a8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d052      	beq.n	800489e <HAL_GPIO_Init+0xfa>
 80047f8:	4a94      	ldr	r2, [pc, #592]	; (8004a4c <HAL_GPIO_Init+0x2a8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d869      	bhi.n	80048d2 <HAL_GPIO_Init+0x12e>
 80047fe:	4a94      	ldr	r2, [pc, #592]	; (8004a50 <HAL_GPIO_Init+0x2ac>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d04c      	beq.n	800489e <HAL_GPIO_Init+0xfa>
 8004804:	4a92      	ldr	r2, [pc, #584]	; (8004a50 <HAL_GPIO_Init+0x2ac>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d863      	bhi.n	80048d2 <HAL_GPIO_Init+0x12e>
 800480a:	4a92      	ldr	r2, [pc, #584]	; (8004a54 <HAL_GPIO_Init+0x2b0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d046      	beq.n	800489e <HAL_GPIO_Init+0xfa>
 8004810:	4a90      	ldr	r2, [pc, #576]	; (8004a54 <HAL_GPIO_Init+0x2b0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d85d      	bhi.n	80048d2 <HAL_GPIO_Init+0x12e>
 8004816:	2b12      	cmp	r3, #18
 8004818:	d82a      	bhi.n	8004870 <HAL_GPIO_Init+0xcc>
 800481a:	2b12      	cmp	r3, #18
 800481c:	d859      	bhi.n	80048d2 <HAL_GPIO_Init+0x12e>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_GPIO_Init+0x80>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	0800489f 	.word	0x0800489f
 8004828:	08004879 	.word	0x08004879
 800482c:	0800488b 	.word	0x0800488b
 8004830:	080048cd 	.word	0x080048cd
 8004834:	080048d3 	.word	0x080048d3
 8004838:	080048d3 	.word	0x080048d3
 800483c:	080048d3 	.word	0x080048d3
 8004840:	080048d3 	.word	0x080048d3
 8004844:	080048d3 	.word	0x080048d3
 8004848:	080048d3 	.word	0x080048d3
 800484c:	080048d3 	.word	0x080048d3
 8004850:	080048d3 	.word	0x080048d3
 8004854:	080048d3 	.word	0x080048d3
 8004858:	080048d3 	.word	0x080048d3
 800485c:	080048d3 	.word	0x080048d3
 8004860:	080048d3 	.word	0x080048d3
 8004864:	080048d3 	.word	0x080048d3
 8004868:	08004881 	.word	0x08004881
 800486c:	08004895 	.word	0x08004895
 8004870:	4a79      	ldr	r2, [pc, #484]	; (8004a58 <HAL_GPIO_Init+0x2b4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004876:	e02c      	b.n	80048d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	623b      	str	r3, [r7, #32]
          break;
 800487e:	e029      	b.n	80048d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	3304      	adds	r3, #4
 8004886:	623b      	str	r3, [r7, #32]
          break;
 8004888:	e024      	b.n	80048d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	3308      	adds	r3, #8
 8004890:	623b      	str	r3, [r7, #32]
          break;
 8004892:	e01f      	b.n	80048d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	330c      	adds	r3, #12
 800489a:	623b      	str	r3, [r7, #32]
          break;
 800489c:	e01a      	b.n	80048d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80048a6:	2304      	movs	r3, #4
 80048a8:	623b      	str	r3, [r7, #32]
          break;
 80048aa:	e013      	b.n	80048d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048b4:	2308      	movs	r3, #8
 80048b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	611a      	str	r2, [r3, #16]
          break;
 80048be:	e009      	b.n	80048d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048c0:	2308      	movs	r3, #8
 80048c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	615a      	str	r2, [r3, #20]
          break;
 80048ca:	e003      	b.n	80048d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048cc:	2300      	movs	r3, #0
 80048ce:	623b      	str	r3, [r7, #32]
          break;
 80048d0:	e000      	b.n	80048d4 <HAL_GPIO_Init+0x130>
          break;
 80048d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2bff      	cmp	r3, #255	; 0xff
 80048d8:	d801      	bhi.n	80048de <HAL_GPIO_Init+0x13a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	e001      	b.n	80048e2 <HAL_GPIO_Init+0x13e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2bff      	cmp	r3, #255	; 0xff
 80048e8:	d802      	bhi.n	80048f0 <HAL_GPIO_Init+0x14c>
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	e002      	b.n	80048f6 <HAL_GPIO_Init+0x152>
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	3b08      	subs	r3, #8
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	210f      	movs	r1, #15
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	401a      	ands	r2, r3
 8004908:	6a39      	ldr	r1, [r7, #32]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	fa01 f303 	lsl.w	r3, r1, r3
 8004910:	431a      	orrs	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80b1 	beq.w	8004a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004924:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <HAL_GPIO_Init+0x2b8>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4a4c      	ldr	r2, [pc, #304]	; (8004a5c <HAL_GPIO_Init+0x2b8>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6193      	str	r3, [r2, #24]
 8004930:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_GPIO_Init+0x2b8>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800493c:	4a48      	ldr	r2, [pc, #288]	; (8004a60 <HAL_GPIO_Init+0x2bc>)
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	3302      	adds	r3, #2
 8004944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	220f      	movs	r2, #15
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a40      	ldr	r2, [pc, #256]	; (8004a64 <HAL_GPIO_Init+0x2c0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <HAL_GPIO_Init+0x1ec>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3f      	ldr	r2, [pc, #252]	; (8004a68 <HAL_GPIO_Init+0x2c4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00d      	beq.n	800498c <HAL_GPIO_Init+0x1e8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3e      	ldr	r2, [pc, #248]	; (8004a6c <HAL_GPIO_Init+0x2c8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <HAL_GPIO_Init+0x1e4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3d      	ldr	r2, [pc, #244]	; (8004a70 <HAL_GPIO_Init+0x2cc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d101      	bne.n	8004984 <HAL_GPIO_Init+0x1e0>
 8004980:	2303      	movs	r3, #3
 8004982:	e006      	b.n	8004992 <HAL_GPIO_Init+0x1ee>
 8004984:	2304      	movs	r3, #4
 8004986:	e004      	b.n	8004992 <HAL_GPIO_Init+0x1ee>
 8004988:	2302      	movs	r3, #2
 800498a:	e002      	b.n	8004992 <HAL_GPIO_Init+0x1ee>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_GPIO_Init+0x1ee>
 8004990:	2300      	movs	r3, #0
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	f002 0203 	and.w	r2, r2, #3
 8004998:	0092      	lsls	r2, r2, #2
 800499a:	4093      	lsls	r3, r2
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80049a2:	492f      	ldr	r1, [pc, #188]	; (8004a60 <HAL_GPIO_Init+0x2bc>)
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d006      	beq.n	80049ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049bc:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	492c      	ldr	r1, [pc, #176]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]
 80049c8:	e006      	b.n	80049d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049ca:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	4928      	ldr	r1, [pc, #160]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d006      	beq.n	80049f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049e4:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	4922      	ldr	r1, [pc, #136]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
 80049f0:	e006      	b.n	8004a00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	491e      	ldr	r1, [pc, #120]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a0c:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4918      	ldr	r1, [pc, #96]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
 8004a18:	e006      	b.n	8004a28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	4914      	ldr	r1, [pc, #80]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d021      	beq.n	8004a78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	490e      	ldr	r1, [pc, #56]	; (8004a74 <HAL_GPIO_Init+0x2d0>)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
 8004a40:	e021      	b.n	8004a86 <HAL_GPIO_Init+0x2e2>
 8004a42:	bf00      	nop
 8004a44:	10320000 	.word	0x10320000
 8004a48:	10310000 	.word	0x10310000
 8004a4c:	10220000 	.word	0x10220000
 8004a50:	10210000 	.word	0x10210000
 8004a54:	10120000 	.word	0x10120000
 8004a58:	10110000 	.word	0x10110000
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010800 	.word	0x40010800
 8004a68:	40010c00 	.word	0x40010c00
 8004a6c:	40011000 	.word	0x40011000
 8004a70:	40011400 	.word	0x40011400
 8004a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	4909      	ldr	r1, [pc, #36]	; (8004aa8 <HAL_GPIO_Init+0x304>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3301      	adds	r3, #1
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f47f ae8e 	bne.w	80047b8 <HAL_GPIO_Init+0x14>
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	372c      	adds	r7, #44	; 0x2c
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	40010400 	.word	0x40010400

08004aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	807b      	strh	r3, [r7, #2]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004abc:	787b      	ldrb	r3, [r7, #1]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ac8:	e003      	b.n	8004ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aca:	887b      	ldrh	r3, [r7, #2]
 8004acc:	041a      	lsls	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e272      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8087 	beq.w	8004c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004afc:	4b92      	ldr	r3, [pc, #584]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 030c 	and.w	r3, r3, #12
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d00c      	beq.n	8004b22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b08:	4b8f      	ldr	r3, [pc, #572]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d112      	bne.n	8004b3a <HAL_RCC_OscConfig+0x5e>
 8004b14:	4b8c      	ldr	r3, [pc, #560]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d10b      	bne.n	8004b3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b22:	4b89      	ldr	r3, [pc, #548]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d06c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x12c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d168      	bne.n	8004c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e24c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d106      	bne.n	8004b52 <HAL_RCC_OscConfig+0x76>
 8004b44:	4b80      	ldr	r3, [pc, #512]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a7f      	ldr	r2, [pc, #508]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e02e      	b.n	8004bb0 <HAL_RCC_OscConfig+0xd4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x98>
 8004b5a:	4b7b      	ldr	r3, [pc, #492]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7a      	ldr	r2, [pc, #488]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b78      	ldr	r3, [pc, #480]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a77      	ldr	r2, [pc, #476]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e01d      	b.n	8004bb0 <HAL_RCC_OscConfig+0xd4>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0xbc>
 8004b7e:	4b72      	ldr	r3, [pc, #456]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a71      	ldr	r2, [pc, #452]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b6f      	ldr	r3, [pc, #444]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6e      	ldr	r2, [pc, #440]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0xd4>
 8004b98:	4b6b      	ldr	r3, [pc, #428]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6a      	ldr	r2, [pc, #424]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a67      	ldr	r2, [pc, #412]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7ff fce2 	bl	8004580 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7ff fcde 	bl	8004580 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	; 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e200      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b5d      	ldr	r3, [pc, #372]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xe4>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7ff fcce 	bl	8004580 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7ff fcca 	bl	8004580 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1ec      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x10c>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d063      	beq.n	8004cde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c16:	4b4c      	ldr	r3, [pc, #304]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c22:	4b49      	ldr	r3, [pc, #292]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d11c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x18c>
 8004c2e:	4b46      	ldr	r3, [pc, #280]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCC_OscConfig+0x176>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1c0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4939      	ldr	r1, [pc, #228]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e03a      	b.n	8004cde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b36      	ldr	r3, [pc, #216]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c76:	f7ff fc83 	bl	8004580 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7ff fc7f 	bl	8004580 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1a1      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4927      	ldr	r1, [pc, #156]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb8:	f7ff fc62 	bl	8004580 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7ff fc5e 	bl	8004580 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e180      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d03a      	beq.n	8004d60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d019      	beq.n	8004d26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf8:	f7ff fc42 	bl	8004580 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7ff fc3e 	bl	8004580 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e160      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d1e:	2001      	movs	r0, #1
 8004d20:	f000 face 	bl	80052c0 <RCC_Delay>
 8004d24:	e01c      	b.n	8004d60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2c:	f7ff fc28 	bl	8004580 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d32:	e00f      	b.n	8004d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d34:	f7ff fc24 	bl	8004580 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d908      	bls.n	8004d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e146      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	42420000 	.word	0x42420000
 8004d50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d54:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e9      	bne.n	8004d34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80a6 	beq.w	8004eba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d72:	4b8b      	ldr	r3, [pc, #556]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10d      	bne.n	8004d9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7e:	4b88      	ldr	r3, [pc, #544]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	4a87      	ldr	r2, [pc, #540]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d88:	61d3      	str	r3, [r2, #28]
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9a:	4b82      	ldr	r3, [pc, #520]	; (8004fa4 <HAL_RCC_OscConfig+0x4c8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d118      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da6:	4b7f      	ldr	r3, [pc, #508]	; (8004fa4 <HAL_RCC_OscConfig+0x4c8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7e      	ldr	r2, [pc, #504]	; (8004fa4 <HAL_RCC_OscConfig+0x4c8>)
 8004dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db2:	f7ff fbe5 	bl	8004580 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dba:	f7ff fbe1 	bl	8004580 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b64      	cmp	r3, #100	; 0x64
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e103      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	4b75      	ldr	r3, [pc, #468]	; (8004fa4 <HAL_RCC_OscConfig+0x4c8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d106      	bne.n	8004dee <HAL_RCC_OscConfig+0x312>
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4a6e      	ldr	r2, [pc, #440]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	6213      	str	r3, [r2, #32]
 8004dec:	e02d      	b.n	8004e4a <HAL_RCC_OscConfig+0x36e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x334>
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4a69      	ldr	r2, [pc, #420]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6213      	str	r3, [r2, #32]
 8004e02:	4b67      	ldr	r3, [pc, #412]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4a66      	ldr	r2, [pc, #408]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e08:	f023 0304 	bic.w	r3, r3, #4
 8004e0c:	6213      	str	r3, [r2, #32]
 8004e0e:	e01c      	b.n	8004e4a <HAL_RCC_OscConfig+0x36e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCC_OscConfig+0x356>
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	4a60      	ldr	r2, [pc, #384]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e1e:	f043 0304 	orr.w	r3, r3, #4
 8004e22:	6213      	str	r3, [r2, #32]
 8004e24:	4b5e      	ldr	r3, [pc, #376]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	4a5d      	ldr	r2, [pc, #372]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6213      	str	r3, [r2, #32]
 8004e30:	e00b      	b.n	8004e4a <HAL_RCC_OscConfig+0x36e>
 8004e32:	4b5b      	ldr	r3, [pc, #364]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	4a5a      	ldr	r2, [pc, #360]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	6213      	str	r3, [r2, #32]
 8004e3e:	4b58      	ldr	r3, [pc, #352]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	4a57      	ldr	r2, [pc, #348]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d015      	beq.n	8004e7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e52:	f7ff fb95 	bl	8004580 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7ff fb91 	bl	8004580 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0b1      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e70:	4b4b      	ldr	r3, [pc, #300]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ee      	beq.n	8004e5a <HAL_RCC_OscConfig+0x37e>
 8004e7c:	e014      	b.n	8004ea8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7e:	f7ff fb7f 	bl	8004580 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7ff fb7b 	bl	8004580 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e09b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9c:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ee      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eae:	4b3c      	ldr	r3, [pc, #240]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4a3b      	ldr	r2, [pc, #236]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8087 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec4:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d061      	beq.n	8004f94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d146      	bne.n	8004f66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed8:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <HAL_RCC_OscConfig+0x4cc>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7ff fb4f 	bl	8004580 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7ff fb4b 	bl	8004580 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e06d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef8:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d108      	bne.n	8004f20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4921      	ldr	r1, [pc, #132]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a19      	ldr	r1, [r3, #32]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	430b      	orrs	r3, r1
 8004f32:	491b      	ldr	r1, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7ff fb1f 	bl	8004580 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f46:	f7ff fb1b 	bl	8004580 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e03d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f58:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x46a>
 8004f64:	e035      	b.n	8004fd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <HAL_RCC_OscConfig+0x4cc>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7ff fb08 	bl	8004580 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f74:	f7ff fb04 	bl	8004580 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e026      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x498>
 8004f92:	e01e      	b.n	8004fd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e019      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_RCC_OscConfig+0x500>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40021000 	.word	0x40021000

08004fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0d0      	b.n	8005196 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b6a      	ldr	r3, [pc, #424]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d910      	bls.n	8005024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b67      	ldr	r3, [pc, #412]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 0207 	bic.w	r2, r3, #7
 800500a:	4965      	ldr	r1, [pc, #404]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0b8      	b.n	8005196 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d020      	beq.n	8005072 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800503c:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a58      	ldr	r2, [pc, #352]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005046:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005054:	4b53      	ldr	r3, [pc, #332]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a52      	ldr	r2, [pc, #328]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 800505a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800505e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005060:	4b50      	ldr	r3, [pc, #320]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	494d      	ldr	r1, [pc, #308]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 800506e:	4313      	orrs	r3, r2
 8005070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d040      	beq.n	8005100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b47      	ldr	r3, [pc, #284]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d115      	bne.n	80050be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e07f      	b.n	8005196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d107      	bne.n	80050ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509e:	4b41      	ldr	r3, [pc, #260]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e073      	b.n	8005196 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e06b      	b.n	8005196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050be:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f023 0203 	bic.w	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4936      	ldr	r1, [pc, #216]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d0:	f7ff fa56 	bl	8004580 <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d6:	e00a      	b.n	80050ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d8:	f7ff fa52 	bl	8004580 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e053      	b.n	8005196 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ee:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 020c 	and.w	r2, r3, #12
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d1eb      	bne.n	80050d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d210      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 0207 	bic.w	r2, r3, #7
 8005116:	4922      	ldr	r1, [pc, #136]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e032      	b.n	8005196 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4916      	ldr	r1, [pc, #88]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	490e      	ldr	r1, [pc, #56]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800516e:	f000 f821 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 8005172:	4602      	mov	r2, r0
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	5ccb      	ldrb	r3, [r1, r3]
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <HAL_RCC_ClockConfig+0x1cc>)
 8005188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_ClockConfig+0x1d0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff f9b4 	bl	80044fc <HAL_InitTick>

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40022000 	.word	0x40022000
 80051a4:	40021000 	.word	0x40021000
 80051a8:	0800aeb0 	.word	0x0800aeb0
 80051ac:	20000070 	.word	0x20000070
 80051b0:	20000088 	.word	0x20000088

080051b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	2300      	movs	r3, #0
 80051c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCC_GetSysClockFreq+0x94>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d002      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0x30>
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_GetSysClockFreq+0x36>
 80051e2:	e027      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <HAL_RCC_GetSysClockFreq+0x98>)
 80051e6:	613b      	str	r3, [r7, #16]
      break;
 80051e8:	e027      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	0c9b      	lsrs	r3, r3, #18
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	4a17      	ldr	r2, [pc, #92]	; (8005250 <HAL_RCC_GetSysClockFreq+0x9c>)
 80051f4:	5cd3      	ldrb	r3, [r2, r3]
 80051f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d010      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_RCC_GetSysClockFreq+0x94>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	0c5b      	lsrs	r3, r3, #17
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <HAL_RCC_GetSysClockFreq+0xa0>)
 800520e:	5cd3      	ldrb	r3, [r2, r3]
 8005210:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a0d      	ldr	r2, [pc, #52]	; (800524c <HAL_RCC_GetSysClockFreq+0x98>)
 8005216:	fb03 f202 	mul.w	r2, r3, r2
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e004      	b.n	800522e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	613b      	str	r3, [r7, #16]
      break;
 8005232:	e002      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCC_GetSysClockFreq+0x98>)
 8005236:	613b      	str	r3, [r7, #16]
      break;
 8005238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523a:	693b      	ldr	r3, [r7, #16]
}
 800523c:	4618      	mov	r0, r3
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	007a1200 	.word	0x007a1200
 8005250:	0800af18 	.word	0x0800af18
 8005254:	0800af28 	.word	0x0800af28
 8005258:	003d0900 	.word	0x003d0900

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b02      	ldr	r3, [pc, #8]	; (800526c <HAL_RCC_GetHCLKFreq+0x10>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	20000070 	.word	0x20000070

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff2 	bl	800525c <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	0800aec0 	.word	0x0800aec0

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800529c:	f7ff ffde 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	0adb      	lsrs	r3, r3, #11
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800aec0 	.word	0x0800aec0

080052c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <RCC_Delay+0x34>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <RCC_Delay+0x38>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0a5b      	lsrs	r3, r3, #9
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052dc:	bf00      	nop
  }
  while (Delay --);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f9      	bne.n	80052dc <RCC_Delay+0x1c>
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	20000070 	.word	0x20000070
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e076      	b.n	80053fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531e:	d009      	beq.n	8005334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	61da      	str	r2, [r3, #28]
 8005326:	e005      	b.n	8005334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc fbe8 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b8:	ea42 0103 	orr.w	r1, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	0c1a      	lsrs	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f002 0204 	and.w	r2, r2, #4
 80053da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_SPI_Transmit+0x22>
 8005422:	2302      	movs	r3, #2
 8005424:	e12d      	b.n	8005682 <HAL_SPI_Transmit+0x27e>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800542e:	f7ff f8a7 	bl	8004580 <HAL_GetTick>
 8005432:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d002      	beq.n	800544a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005444:	2302      	movs	r3, #2
 8005446:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005448:	e116      	b.n	8005678 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_SPI_Transmit+0x52>
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800545a:	e10d      	b.n	8005678 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2203      	movs	r2, #3
 8005460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d10f      	bne.n	80054c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d007      	beq.n	80054e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ea:	d14f      	bne.n	800558c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_SPI_Transmit+0xf6>
 80054f4:	8afb      	ldrh	r3, [r7, #22]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d142      	bne.n	8005580 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	881a      	ldrh	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800551e:	e02f      	b.n	8005580 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d112      	bne.n	8005554 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	881a      	ldrh	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	; 0x36
 8005552:	e015      	b.n	8005580 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005554:	f7ff f814 	bl	8004580 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d803      	bhi.n	800556c <HAL_SPI_Transmit+0x168>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d102      	bne.n	8005572 <HAL_SPI_Transmit+0x16e>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800557e:	e07b      	b.n	8005678 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1ca      	bne.n	8005520 <HAL_SPI_Transmit+0x11c>
 800558a:	e050      	b.n	800562e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_SPI_Transmit+0x196>
 8005594:	8afb      	ldrh	r3, [r7, #22]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d144      	bne.n	8005624 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055c0:	e030      	b.n	8005624 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d113      	bne.n	80055f8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	7812      	ldrb	r2, [r2, #0]
 80055dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80055f6:	e015      	b.n	8005624 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f8:	f7fe ffc2 	bl	8004580 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d803      	bhi.n	8005610 <HAL_SPI_Transmit+0x20c>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d102      	bne.n	8005616 <HAL_SPI_Transmit+0x212>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005622:	e029      	b.n	8005678 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1c9      	bne.n	80055c2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fbcc 	bl	8005dd0 <SPI_EndRxTxTransaction>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e003      	b.n	8005678 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005680:	7ffb      	ldrb	r3, [r7, #31]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b088      	sub	sp, #32
 800568e:	af02      	add	r7, sp, #8
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d002      	beq.n	80056b0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
 80056ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ae:	e0fb      	b.n	80058a8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b8:	d112      	bne.n	80056e0 <HAL_SPI_Receive+0x56>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10e      	bne.n	80056e0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2204      	movs	r2, #4
 80056c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f8ef 	bl	80058ba <HAL_SPI_TransmitReceive>
 80056dc:	4603      	mov	r3, r0
 80056de:	e0e8      	b.n	80058b2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_SPI_Receive+0x64>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e0e1      	b.n	80058b2 <HAL_SPI_Receive+0x228>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f6:	f7fe ff43 	bl	8004580 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_SPI_Receive+0x7e>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800570c:	e0cc      	b.n	80058a8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2204      	movs	r2, #4
 8005712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	88fa      	ldrh	r2, [r7, #6]
 8005726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005754:	d10f      	bne.n	8005776 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005764:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d007      	beq.n	8005794 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005792:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d16a      	bne.n	8005872 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800579c:	e032      	b.n	8005804 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d115      	bne.n	80057d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f103 020c 	add.w	r2, r3, #12
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057d6:	e015      	b.n	8005804 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d8:	f7fe fed2 	bl	8004580 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d803      	bhi.n	80057f0 <HAL_SPI_Receive+0x166>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Receive+0x16c>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005802:	e051      	b.n	80058a8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1c7      	bne.n	800579e <HAL_SPI_Receive+0x114>
 800580e:	e035      	b.n	800587c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d113      	bne.n	8005846 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	b292      	uxth	r2, r2
 800582a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	1c9a      	adds	r2, r3, #2
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005844:	e015      	b.n	8005872 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005846:	f7fe fe9b 	bl	8004580 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d803      	bhi.n	800585e <HAL_SPI_Receive+0x1d4>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d102      	bne.n	8005864 <HAL_SPI_Receive+0x1da>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005870:	e01a      	b.n	80058a8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1c9      	bne.n	8005810 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 fa53 	bl	8005d2c <SPI_EndRxTransaction>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
 800589e:	e003      	b.n	80058a8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b08c      	sub	sp, #48	; 0x30
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058c8:	2301      	movs	r3, #1
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x26>
 80058dc:	2302      	movs	r3, #2
 80058de:	e198      	b.n	8005c12 <HAL_SPI_TransmitReceive+0x358>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e8:	f7fe fe4a 	bl	8004580 <HAL_GetTick>
 80058ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058fe:	887b      	ldrh	r3, [r7, #2]
 8005900:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005906:	2b01      	cmp	r3, #1
 8005908:	d00f      	beq.n	800592a <HAL_SPI_TransmitReceive+0x70>
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005910:	d107      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x68>
 800591a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800591e:	2b04      	cmp	r3, #4
 8005920:	d003      	beq.n	800592a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005922:	2302      	movs	r3, #2
 8005924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005928:	e16d      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_SPI_TransmitReceive+0x82>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_TransmitReceive+0x82>
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005942:	e160      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b04      	cmp	r3, #4
 800594e:	d003      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2205      	movs	r2, #5
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	887a      	ldrh	r2, [r7, #2]
 8005968:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	887a      	ldrh	r2, [r7, #2]
 800596e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	887a      	ldrh	r2, [r7, #2]
 800597a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d007      	beq.n	80059ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b4:	d17c      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x10a>
 80059be:	8b7b      	ldrh	r3, [r7, #26]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d16a      	bne.n	8005a9a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059e8:	e057      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d11b      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x176>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x176>
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d113      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	1c9a      	adds	r2, r3, #2
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d119      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x1b8>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d014      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	b292      	uxth	r2, r2
 8005a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	1c9a      	adds	r2, r3, #2
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a72:	f7fe fd85 	bl	8004580 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d80b      	bhi.n	8005a9a <HAL_SPI_TransmitReceive+0x1e0>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d007      	beq.n	8005a9a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005a98:	e0b5      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1a2      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x130>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d19d      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x130>
 8005aae:	e080      	b.n	8005bb2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x204>
 8005ab8:	8b7b      	ldrh	r3, [r7, #26]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d16f      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	7812      	ldrb	r2, [r2, #0]
 8005aca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae4:	e05b      	b.n	8005b9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d11c      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x274>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d017      	beq.n	8005b2e <HAL_SPI_TransmitReceive+0x274>
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d114      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	7812      	ldrb	r2, [r2, #0]
 8005b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d119      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x2b6>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d014      	beq.n	8005b70 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b70:	f7fe fd06 	bl	8004580 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d803      	bhi.n	8005b88 <HAL_SPI_TransmitReceive+0x2ce>
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d102      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x2d4>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005b9c:	e033      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d19e      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x22c>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d199      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f90a 	bl	8005dd0 <SPI_EndRxTxTransaction>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d006      	beq.n	8005bd0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005bce:	e01a      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfc:	e003      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3730      	adds	r7, #48	; 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c2c:	f7fe fca8 	bl	8004580 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	4413      	add	r3, r2
 8005c3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c3c:	f7fe fca0 	bl	8004580 <HAL_GetTick>
 8005c40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c42:	4b39      	ldr	r3, [pc, #228]	; (8005d28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	015b      	lsls	r3, r3, #5
 8005c48:	0d1b      	lsrs	r3, r3, #20
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c52:	e054      	b.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d050      	beq.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c5c:	f7fe fc90 	bl	8004580 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d902      	bls.n	8005c72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d13d      	bne.n	8005cee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8a:	d111      	bne.n	8005cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c94:	d004      	beq.n	8005ca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9e:	d107      	bne.n	8005cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb8:	d10f      	bne.n	8005cda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e017      	b.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4013      	ands	r3, r2
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	bf0c      	ite	eq
 8005d0e:	2301      	moveq	r3, #1
 8005d10:	2300      	movne	r3, #0
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d19b      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000070 	.word	0x20000070

08005d2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d40:	d111      	bne.n	8005d66 <SPI_EndRxTransaction+0x3a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d4a:	d004      	beq.n	8005d56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d54:	d107      	bne.n	8005d66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d64:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d6e:	d117      	bne.n	8005da0 <SPI_EndRxTransaction+0x74>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d78:	d112      	bne.n	8005da0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2101      	movs	r1, #1
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f7ff ff49 	bl	8005c1c <SPI_WaitFlagStateUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e013      	b.n	8005dc8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2200      	movs	r2, #0
 8005da8:	2180      	movs	r1, #128	; 0x80
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff ff36 	bl	8005c1c <SPI_WaitFlagStateUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	f043 0220 	orr.w	r2, r3, #32
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e000      	b.n	8005dc8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2200      	movs	r2, #0
 8005de4:	2180      	movs	r1, #128	; 0x80
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff ff18 	bl	8005c1c <SPI_WaitFlagStateUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e000      	b.n	8005e04 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e042      	b.n	8005ea4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fb ffee 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2224      	movs	r2, #36	; 0x24
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f91d 	bl	8006090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d16d      	bne.n	8005fa8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Transmit+0x2c>
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e066      	b.n	8005faa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2221      	movs	r2, #33	; 0x21
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eea:	f7fe fb49 	bl	8004580 <HAL_GetTick>
 8005eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f04:	d108      	bne.n	8005f18 <HAL_UART_Transmit+0x6c>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e003      	b.n	8005f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f20:	e02a      	b.n	8005f78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f840 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e036      	b.n	8005faa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	3302      	adds	r3, #2
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e007      	b.n	8005f6a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	781a      	ldrb	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	3301      	adds	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1cf      	bne.n	8005f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2140      	movs	r1, #64	; 0x40
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f810 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e006      	b.n	8005faa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b090      	sub	sp, #64	; 0x40
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	e050      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d04c      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd2:	f7fe fad5 	bl	8004580 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d241      	bcs.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006002:	637a      	str	r2, [r7, #52]	; 0x34
 8006004:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	613b      	str	r3, [r7, #16]
   return(result);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3314      	adds	r3, #20
 8006034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006036:	623a      	str	r2, [r7, #32]
 8006038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	61bb      	str	r3, [r7, #24]
   return(result);
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e00f      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	429a      	cmp	r2, r3
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	429a      	cmp	r2, r3
 8006082:	d09f      	beq.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3740      	adds	r7, #64	; 0x40
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060ca:	f023 030c 	bic.w	r3, r3, #12
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	430b      	orrs	r3, r1
 80060d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <UART_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060f8:	f7ff f8ce 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	e002      	b.n	8006106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006100:	f7ff f8b6 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009a      	lsls	r2, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <UART_SetConfig+0x118>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	0119      	lsls	r1, r3, #4
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009a      	lsls	r2, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	fbb2 f2f3 	udiv	r2, r2, r3
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <UART_SetConfig+0x118>)
 800613e:	fba3 0302 	umull	r0, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2064      	movs	r0, #100	; 0x64
 8006146:	fb00 f303 	mul.w	r3, r0, r3
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	3332      	adds	r3, #50	; 0x32
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <UART_SetConfig+0x118>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800615c:	4419      	add	r1, r3
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009a      	lsls	r2, r3, #2
 8006168:	441a      	add	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	fbb2 f2f3 	udiv	r2, r2, r3
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <UART_SetConfig+0x118>)
 8006176:	fba3 0302 	umull	r0, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2064      	movs	r0, #100	; 0x64
 800617e:	fb00 f303 	mul.w	r3, r0, r3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	3332      	adds	r3, #50	; 0x32
 8006188:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <UART_SetConfig+0x118>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	440a      	add	r2, r1
 800619a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40013800 	.word	0x40013800
 80061a8:	51eb851f 	.word	0x51eb851f

080061ac <__errno>:
 80061ac:	4b01      	ldr	r3, [pc, #4]	; (80061b4 <__errno+0x8>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000090 	.word	0x20000090

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	2600      	movs	r6, #0
 80061bc:	4d0c      	ldr	r5, [pc, #48]	; (80061f0 <__libc_init_array+0x38>)
 80061be:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061c0:	1b64      	subs	r4, r4, r5
 80061c2:	10a4      	asrs	r4, r4, #2
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	f004 fe00 	bl	800adcc <_init>
 80061cc:	2600      	movs	r6, #0
 80061ce:	4d0a      	ldr	r5, [pc, #40]	; (80061f8 <__libc_init_array+0x40>)
 80061d0:	4c0a      	ldr	r4, [pc, #40]	; (80061fc <__libc_init_array+0x44>)
 80061d2:	1b64      	subs	r4, r4, r5
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e0:	4798      	blx	r3
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ea:	4798      	blx	r3
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	0800b3d4 	.word	0x0800b3d4
 80061f4:	0800b3d4 	.word	0x0800b3d4
 80061f8:	0800b3d4 	.word	0x0800b3d4
 80061fc:	0800b3d8 	.word	0x0800b3d8

08006200 <memcmp>:
 8006200:	b510      	push	{r4, lr}
 8006202:	3901      	subs	r1, #1
 8006204:	4402      	add	r2, r0
 8006206:	4290      	cmp	r0, r2
 8006208:	d101      	bne.n	800620e <memcmp+0xe>
 800620a:	2000      	movs	r0, #0
 800620c:	e005      	b.n	800621a <memcmp+0x1a>
 800620e:	7803      	ldrb	r3, [r0, #0]
 8006210:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006214:	42a3      	cmp	r3, r4
 8006216:	d001      	beq.n	800621c <memcmp+0x1c>
 8006218:	1b18      	subs	r0, r3, r4
 800621a:	bd10      	pop	{r4, pc}
 800621c:	3001      	adds	r0, #1
 800621e:	e7f2      	b.n	8006206 <memcmp+0x6>

08006220 <memcpy>:
 8006220:	440a      	add	r2, r1
 8006222:	4291      	cmp	r1, r2
 8006224:	f100 33ff 	add.w	r3, r0, #4294967295
 8006228:	d100      	bne.n	800622c <memcpy+0xc>
 800622a:	4770      	bx	lr
 800622c:	b510      	push	{r4, lr}
 800622e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006232:	4291      	cmp	r1, r2
 8006234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006238:	d1f9      	bne.n	800622e <memcpy+0xe>
 800623a:	bd10      	pop	{r4, pc}

0800623c <memset>:
 800623c:	4603      	mov	r3, r0
 800623e:	4402      	add	r2, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <__cvt>:
 800624c:	2b00      	cmp	r3, #0
 800624e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006252:	461f      	mov	r7, r3
 8006254:	bfbb      	ittet	lt
 8006256:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800625a:	461f      	movlt	r7, r3
 800625c:	2300      	movge	r3, #0
 800625e:	232d      	movlt	r3, #45	; 0x2d
 8006260:	b088      	sub	sp, #32
 8006262:	4614      	mov	r4, r2
 8006264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006266:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006268:	7013      	strb	r3, [r2, #0]
 800626a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800626c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006270:	f023 0820 	bic.w	r8, r3, #32
 8006274:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006278:	d005      	beq.n	8006286 <__cvt+0x3a>
 800627a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800627e:	d100      	bne.n	8006282 <__cvt+0x36>
 8006280:	3501      	adds	r5, #1
 8006282:	2302      	movs	r3, #2
 8006284:	e000      	b.n	8006288 <__cvt+0x3c>
 8006286:	2303      	movs	r3, #3
 8006288:	aa07      	add	r2, sp, #28
 800628a:	9204      	str	r2, [sp, #16]
 800628c:	aa06      	add	r2, sp, #24
 800628e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006292:	e9cd 3500 	strd	r3, r5, [sp]
 8006296:	4622      	mov	r2, r4
 8006298:	463b      	mov	r3, r7
 800629a:	f001 fd85 	bl	8007da8 <_dtoa_r>
 800629e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062a2:	4606      	mov	r6, r0
 80062a4:	d102      	bne.n	80062ac <__cvt+0x60>
 80062a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062a8:	07db      	lsls	r3, r3, #31
 80062aa:	d522      	bpl.n	80062f2 <__cvt+0xa6>
 80062ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062b0:	eb06 0905 	add.w	r9, r6, r5
 80062b4:	d110      	bne.n	80062d8 <__cvt+0x8c>
 80062b6:	7833      	ldrb	r3, [r6, #0]
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d10a      	bne.n	80062d2 <__cvt+0x86>
 80062bc:	2200      	movs	r2, #0
 80062be:	2300      	movs	r3, #0
 80062c0:	4620      	mov	r0, r4
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7fa fb70 	bl	80009a8 <__aeabi_dcmpeq>
 80062c8:	b918      	cbnz	r0, 80062d2 <__cvt+0x86>
 80062ca:	f1c5 0501 	rsb	r5, r5, #1
 80062ce:	f8ca 5000 	str.w	r5, [sl]
 80062d2:	f8da 3000 	ldr.w	r3, [sl]
 80062d6:	4499      	add	r9, r3
 80062d8:	2200      	movs	r2, #0
 80062da:	2300      	movs	r3, #0
 80062dc:	4620      	mov	r0, r4
 80062de:	4639      	mov	r1, r7
 80062e0:	f7fa fb62 	bl	80009a8 <__aeabi_dcmpeq>
 80062e4:	b108      	cbz	r0, 80062ea <__cvt+0x9e>
 80062e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80062ea:	2230      	movs	r2, #48	; 0x30
 80062ec:	9b07      	ldr	r3, [sp, #28]
 80062ee:	454b      	cmp	r3, r9
 80062f0:	d307      	bcc.n	8006302 <__cvt+0xb6>
 80062f2:	4630      	mov	r0, r6
 80062f4:	9b07      	ldr	r3, [sp, #28]
 80062f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062f8:	1b9b      	subs	r3, r3, r6
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	b008      	add	sp, #32
 80062fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	9107      	str	r1, [sp, #28]
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e7f0      	b.n	80062ec <__cvt+0xa0>

0800630a <__exponent>:
 800630a:	4603      	mov	r3, r0
 800630c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630e:	2900      	cmp	r1, #0
 8006310:	f803 2b02 	strb.w	r2, [r3], #2
 8006314:	bfb6      	itet	lt
 8006316:	222d      	movlt	r2, #45	; 0x2d
 8006318:	222b      	movge	r2, #43	; 0x2b
 800631a:	4249      	neglt	r1, r1
 800631c:	2909      	cmp	r1, #9
 800631e:	7042      	strb	r2, [r0, #1]
 8006320:	dd2b      	ble.n	800637a <__exponent+0x70>
 8006322:	f10d 0407 	add.w	r4, sp, #7
 8006326:	46a4      	mov	ip, r4
 8006328:	270a      	movs	r7, #10
 800632a:	fb91 f6f7 	sdiv	r6, r1, r7
 800632e:	460a      	mov	r2, r1
 8006330:	46a6      	mov	lr, r4
 8006332:	fb07 1516 	mls	r5, r7, r6, r1
 8006336:	2a63      	cmp	r2, #99	; 0x63
 8006338:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800633c:	4631      	mov	r1, r6
 800633e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006346:	dcf0      	bgt.n	800632a <__exponent+0x20>
 8006348:	3130      	adds	r1, #48	; 0x30
 800634a:	f1ae 0502 	sub.w	r5, lr, #2
 800634e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006352:	4629      	mov	r1, r5
 8006354:	1c44      	adds	r4, r0, #1
 8006356:	4561      	cmp	r1, ip
 8006358:	d30a      	bcc.n	8006370 <__exponent+0x66>
 800635a:	f10d 0209 	add.w	r2, sp, #9
 800635e:	eba2 020e 	sub.w	r2, r2, lr
 8006362:	4565      	cmp	r5, ip
 8006364:	bf88      	it	hi
 8006366:	2200      	movhi	r2, #0
 8006368:	4413      	add	r3, r2
 800636a:	1a18      	subs	r0, r3, r0
 800636c:	b003      	add	sp, #12
 800636e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006370:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006374:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006378:	e7ed      	b.n	8006356 <__exponent+0x4c>
 800637a:	2330      	movs	r3, #48	; 0x30
 800637c:	3130      	adds	r1, #48	; 0x30
 800637e:	7083      	strb	r3, [r0, #2]
 8006380:	70c1      	strb	r1, [r0, #3]
 8006382:	1d03      	adds	r3, r0, #4
 8006384:	e7f1      	b.n	800636a <__exponent+0x60>
	...

08006388 <_printf_float>:
 8006388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	b091      	sub	sp, #68	; 0x44
 800638e:	460c      	mov	r4, r1
 8006390:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006394:	4616      	mov	r6, r2
 8006396:	461f      	mov	r7, r3
 8006398:	4605      	mov	r5, r0
 800639a:	f002 fe59 	bl	8009050 <_localeconv_r>
 800639e:	6803      	ldr	r3, [r0, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	9309      	str	r3, [sp, #36]	; 0x24
 80063a4:	f7f9 fed4 	bl	8000150 <strlen>
 80063a8:	2300      	movs	r3, #0
 80063aa:	930e      	str	r3, [sp, #56]	; 0x38
 80063ac:	f8d8 3000 	ldr.w	r3, [r8]
 80063b0:	900a      	str	r0, [sp, #40]	; 0x28
 80063b2:	3307      	adds	r3, #7
 80063b4:	f023 0307 	bic.w	r3, r3, #7
 80063b8:	f103 0208 	add.w	r2, r3, #8
 80063bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063c0:	f8d4 b000 	ldr.w	fp, [r4]
 80063c4:	f8c8 2000 	str.w	r2, [r8]
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80063d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80063d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80063da:	f04f 32ff 	mov.w	r2, #4294967295
 80063de:	4640      	mov	r0, r8
 80063e0:	4b9c      	ldr	r3, [pc, #624]	; (8006654 <_printf_float+0x2cc>)
 80063e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063e4:	f7fa fb12 	bl	8000a0c <__aeabi_dcmpun>
 80063e8:	bb70      	cbnz	r0, 8006448 <_printf_float+0xc0>
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	4640      	mov	r0, r8
 80063f0:	4b98      	ldr	r3, [pc, #608]	; (8006654 <_printf_float+0x2cc>)
 80063f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063f4:	f7fa faec 	bl	80009d0 <__aeabi_dcmple>
 80063f8:	bb30      	cbnz	r0, 8006448 <_printf_float+0xc0>
 80063fa:	2200      	movs	r2, #0
 80063fc:	2300      	movs	r3, #0
 80063fe:	4640      	mov	r0, r8
 8006400:	4651      	mov	r1, sl
 8006402:	f7fa fadb 	bl	80009bc <__aeabi_dcmplt>
 8006406:	b110      	cbz	r0, 800640e <_printf_float+0x86>
 8006408:	232d      	movs	r3, #45	; 0x2d
 800640a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640e:	4b92      	ldr	r3, [pc, #584]	; (8006658 <_printf_float+0x2d0>)
 8006410:	4892      	ldr	r0, [pc, #584]	; (800665c <_printf_float+0x2d4>)
 8006412:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006416:	bf94      	ite	ls
 8006418:	4698      	movls	r8, r3
 800641a:	4680      	movhi	r8, r0
 800641c:	2303      	movs	r3, #3
 800641e:	f04f 0a00 	mov.w	sl, #0
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	f02b 0304 	bic.w	r3, fp, #4
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	4633      	mov	r3, r6
 800642c:	4621      	mov	r1, r4
 800642e:	4628      	mov	r0, r5
 8006430:	9700      	str	r7, [sp, #0]
 8006432:	aa0f      	add	r2, sp, #60	; 0x3c
 8006434:	f000 f9d4 	bl	80067e0 <_printf_common>
 8006438:	3001      	adds	r0, #1
 800643a:	f040 8090 	bne.w	800655e <_printf_float+0x1d6>
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	b011      	add	sp, #68	; 0x44
 8006444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006448:	4642      	mov	r2, r8
 800644a:	4653      	mov	r3, sl
 800644c:	4640      	mov	r0, r8
 800644e:	4651      	mov	r1, sl
 8006450:	f7fa fadc 	bl	8000a0c <__aeabi_dcmpun>
 8006454:	b148      	cbz	r0, 800646a <_printf_float+0xe2>
 8006456:	f1ba 0f00 	cmp.w	sl, #0
 800645a:	bfb8      	it	lt
 800645c:	232d      	movlt	r3, #45	; 0x2d
 800645e:	4880      	ldr	r0, [pc, #512]	; (8006660 <_printf_float+0x2d8>)
 8006460:	bfb8      	it	lt
 8006462:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006466:	4b7f      	ldr	r3, [pc, #508]	; (8006664 <_printf_float+0x2dc>)
 8006468:	e7d3      	b.n	8006412 <_printf_float+0x8a>
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	d142      	bne.n	80064fa <_printf_float+0x172>
 8006474:	2306      	movs	r3, #6
 8006476:	6063      	str	r3, [r4, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	9206      	str	r2, [sp, #24]
 800647c:	aa0e      	add	r2, sp, #56	; 0x38
 800647e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006482:	aa0d      	add	r2, sp, #52	; 0x34
 8006484:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006488:	9203      	str	r2, [sp, #12]
 800648a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800648e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	4642      	mov	r2, r8
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	4628      	mov	r0, r5
 800649c:	4653      	mov	r3, sl
 800649e:	910b      	str	r1, [sp, #44]	; 0x2c
 80064a0:	f7ff fed4 	bl	800624c <__cvt>
 80064a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064a6:	4680      	mov	r8, r0
 80064a8:	2947      	cmp	r1, #71	; 0x47
 80064aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064ac:	d108      	bne.n	80064c0 <_printf_float+0x138>
 80064ae:	1cc8      	adds	r0, r1, #3
 80064b0:	db02      	blt.n	80064b8 <_printf_float+0x130>
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	4299      	cmp	r1, r3
 80064b6:	dd40      	ble.n	800653a <_printf_float+0x1b2>
 80064b8:	f1a9 0902 	sub.w	r9, r9, #2
 80064bc:	fa5f f989 	uxtb.w	r9, r9
 80064c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064c4:	d81f      	bhi.n	8006506 <_printf_float+0x17e>
 80064c6:	464a      	mov	r2, r9
 80064c8:	3901      	subs	r1, #1
 80064ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064ce:	910d      	str	r1, [sp, #52]	; 0x34
 80064d0:	f7ff ff1b 	bl	800630a <__exponent>
 80064d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d6:	4682      	mov	sl, r0
 80064d8:	1813      	adds	r3, r2, r0
 80064da:	2a01      	cmp	r2, #1
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	dc02      	bgt.n	80064e6 <_printf_float+0x15e>
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	07d2      	lsls	r2, r2, #31
 80064e4:	d501      	bpl.n	80064ea <_printf_float+0x162>
 80064e6:	3301      	adds	r3, #1
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d09b      	beq.n	800642a <_printf_float+0xa2>
 80064f2:	232d      	movs	r3, #45	; 0x2d
 80064f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f8:	e797      	b.n	800642a <_printf_float+0xa2>
 80064fa:	2947      	cmp	r1, #71	; 0x47
 80064fc:	d1bc      	bne.n	8006478 <_printf_float+0xf0>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1ba      	bne.n	8006478 <_printf_float+0xf0>
 8006502:	2301      	movs	r3, #1
 8006504:	e7b7      	b.n	8006476 <_printf_float+0xee>
 8006506:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800650a:	d118      	bne.n	800653e <_printf_float+0x1b6>
 800650c:	2900      	cmp	r1, #0
 800650e:	6863      	ldr	r3, [r4, #4]
 8006510:	dd0b      	ble.n	800652a <_printf_float+0x1a2>
 8006512:	6121      	str	r1, [r4, #16]
 8006514:	b913      	cbnz	r3, 800651c <_printf_float+0x194>
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	07d0      	lsls	r0, r2, #31
 800651a:	d502      	bpl.n	8006522 <_printf_float+0x19a>
 800651c:	3301      	adds	r3, #1
 800651e:	440b      	add	r3, r1
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	f04f 0a00 	mov.w	sl, #0
 8006526:	65a1      	str	r1, [r4, #88]	; 0x58
 8006528:	e7df      	b.n	80064ea <_printf_float+0x162>
 800652a:	b913      	cbnz	r3, 8006532 <_printf_float+0x1aa>
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	07d2      	lsls	r2, r2, #31
 8006530:	d501      	bpl.n	8006536 <_printf_float+0x1ae>
 8006532:	3302      	adds	r3, #2
 8006534:	e7f4      	b.n	8006520 <_printf_float+0x198>
 8006536:	2301      	movs	r3, #1
 8006538:	e7f2      	b.n	8006520 <_printf_float+0x198>
 800653a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800653e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006540:	4299      	cmp	r1, r3
 8006542:	db05      	blt.n	8006550 <_printf_float+0x1c8>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	6121      	str	r1, [r4, #16]
 8006548:	07d8      	lsls	r0, r3, #31
 800654a:	d5ea      	bpl.n	8006522 <_printf_float+0x19a>
 800654c:	1c4b      	adds	r3, r1, #1
 800654e:	e7e7      	b.n	8006520 <_printf_float+0x198>
 8006550:	2900      	cmp	r1, #0
 8006552:	bfcc      	ite	gt
 8006554:	2201      	movgt	r2, #1
 8006556:	f1c1 0202 	rsble	r2, r1, #2
 800655a:	4413      	add	r3, r2
 800655c:	e7e0      	b.n	8006520 <_printf_float+0x198>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	055a      	lsls	r2, r3, #21
 8006562:	d407      	bmi.n	8006574 <_printf_float+0x1ec>
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	4642      	mov	r2, r8
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	d12b      	bne.n	80065ca <_printf_float+0x242>
 8006572:	e764      	b.n	800643e <_printf_float+0xb6>
 8006574:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006578:	f240 80dd 	bls.w	8006736 <_printf_float+0x3ae>
 800657c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006580:	2200      	movs	r2, #0
 8006582:	2300      	movs	r3, #0
 8006584:	f7fa fa10 	bl	80009a8 <__aeabi_dcmpeq>
 8006588:	2800      	cmp	r0, #0
 800658a:	d033      	beq.n	80065f4 <_printf_float+0x26c>
 800658c:	2301      	movs	r3, #1
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	4a35      	ldr	r2, [pc, #212]	; (8006668 <_printf_float+0x2e0>)
 8006594:	47b8      	blx	r7
 8006596:	3001      	adds	r0, #1
 8006598:	f43f af51 	beq.w	800643e <_printf_float+0xb6>
 800659c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065a0:	429a      	cmp	r2, r3
 80065a2:	db02      	blt.n	80065aa <_printf_float+0x222>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	07d8      	lsls	r0, r3, #31
 80065a8:	d50f      	bpl.n	80065ca <_printf_float+0x242>
 80065aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	47b8      	blx	r7
 80065b4:	3001      	adds	r0, #1
 80065b6:	f43f af42 	beq.w	800643e <_printf_float+0xb6>
 80065ba:	f04f 0800 	mov.w	r8, #0
 80065be:	f104 091a 	add.w	r9, r4, #26
 80065c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c4:	3b01      	subs	r3, #1
 80065c6:	4543      	cmp	r3, r8
 80065c8:	dc09      	bgt.n	80065de <_printf_float+0x256>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	079b      	lsls	r3, r3, #30
 80065ce:	f100 8102 	bmi.w	80067d6 <_printf_float+0x44e>
 80065d2:	68e0      	ldr	r0, [r4, #12]
 80065d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d6:	4298      	cmp	r0, r3
 80065d8:	bfb8      	it	lt
 80065da:	4618      	movlt	r0, r3
 80065dc:	e731      	b.n	8006442 <_printf_float+0xba>
 80065de:	2301      	movs	r3, #1
 80065e0:	464a      	mov	r2, r9
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	f43f af28 	beq.w	800643e <_printf_float+0xb6>
 80065ee:	f108 0801 	add.w	r8, r8, #1
 80065f2:	e7e6      	b.n	80065c2 <_printf_float+0x23a>
 80065f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	dc38      	bgt.n	800666c <_printf_float+0x2e4>
 80065fa:	2301      	movs	r3, #1
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	4a19      	ldr	r2, [pc, #100]	; (8006668 <_printf_float+0x2e0>)
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	f43f af1a 	beq.w	800643e <_printf_float+0xb6>
 800660a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800660e:	4313      	orrs	r3, r2
 8006610:	d102      	bne.n	8006618 <_printf_float+0x290>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	07d9      	lsls	r1, r3, #31
 8006616:	d5d8      	bpl.n	80065ca <_printf_float+0x242>
 8006618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f af0b 	beq.w	800643e <_printf_float+0xb6>
 8006628:	f04f 0900 	mov.w	r9, #0
 800662c:	f104 0a1a 	add.w	sl, r4, #26
 8006630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006632:	425b      	negs	r3, r3
 8006634:	454b      	cmp	r3, r9
 8006636:	dc01      	bgt.n	800663c <_printf_float+0x2b4>
 8006638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800663a:	e794      	b.n	8006566 <_printf_float+0x1de>
 800663c:	2301      	movs	r3, #1
 800663e:	4652      	mov	r2, sl
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f aef9 	beq.w	800643e <_printf_float+0xb6>
 800664c:	f109 0901 	add.w	r9, r9, #1
 8006650:	e7ee      	b.n	8006630 <_printf_float+0x2a8>
 8006652:	bf00      	nop
 8006654:	7fefffff 	.word	0x7fefffff
 8006658:	0800af30 	.word	0x0800af30
 800665c:	0800af34 	.word	0x0800af34
 8006660:	0800af3c 	.word	0x0800af3c
 8006664:	0800af38 	.word	0x0800af38
 8006668:	0800af40 	.word	0x0800af40
 800666c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800666e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006670:	429a      	cmp	r2, r3
 8006672:	bfa8      	it	ge
 8006674:	461a      	movge	r2, r3
 8006676:	2a00      	cmp	r2, #0
 8006678:	4691      	mov	r9, r2
 800667a:	dc37      	bgt.n	80066ec <_printf_float+0x364>
 800667c:	f04f 0b00 	mov.w	fp, #0
 8006680:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006684:	f104 021a 	add.w	r2, r4, #26
 8006688:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800668c:	ebaa 0309 	sub.w	r3, sl, r9
 8006690:	455b      	cmp	r3, fp
 8006692:	dc33      	bgt.n	80066fc <_printf_float+0x374>
 8006694:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006698:	429a      	cmp	r2, r3
 800669a:	db3b      	blt.n	8006714 <_printf_float+0x38c>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07da      	lsls	r2, r3, #31
 80066a0:	d438      	bmi.n	8006714 <_printf_float+0x38c>
 80066a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066a6:	eba3 020a 	sub.w	r2, r3, sl
 80066aa:	eba3 0901 	sub.w	r9, r3, r1
 80066ae:	4591      	cmp	r9, r2
 80066b0:	bfa8      	it	ge
 80066b2:	4691      	movge	r9, r2
 80066b4:	f1b9 0f00 	cmp.w	r9, #0
 80066b8:	dc34      	bgt.n	8006724 <_printf_float+0x39c>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066c2:	f104 0a1a 	add.w	sl, r4, #26
 80066c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	eba3 0309 	sub.w	r3, r3, r9
 80066d0:	4543      	cmp	r3, r8
 80066d2:	f77f af7a 	ble.w	80065ca <_printf_float+0x242>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4652      	mov	r2, sl
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f aeac 	beq.w	800643e <_printf_float+0xb6>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	e7ec      	b.n	80066c6 <_printf_float+0x33e>
 80066ec:	4613      	mov	r3, r2
 80066ee:	4631      	mov	r1, r6
 80066f0:	4642      	mov	r2, r8
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b8      	blx	r7
 80066f6:	3001      	adds	r0, #1
 80066f8:	d1c0      	bne.n	800667c <_printf_float+0x2f4>
 80066fa:	e6a0      	b.n	800643e <_printf_float+0xb6>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	920b      	str	r2, [sp, #44]	; 0x2c
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	f43f ae99 	beq.w	800643e <_printf_float+0xb6>
 800670c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800670e:	f10b 0b01 	add.w	fp, fp, #1
 8006712:	e7b9      	b.n	8006688 <_printf_float+0x300>
 8006714:	4631      	mov	r1, r6
 8006716:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	d1bf      	bne.n	80066a2 <_printf_float+0x31a>
 8006722:	e68c      	b.n	800643e <_printf_float+0xb6>
 8006724:	464b      	mov	r3, r9
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	eb08 020a 	add.w	r2, r8, sl
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	d1c2      	bne.n	80066ba <_printf_float+0x332>
 8006734:	e683      	b.n	800643e <_printf_float+0xb6>
 8006736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006738:	2a01      	cmp	r2, #1
 800673a:	dc01      	bgt.n	8006740 <_printf_float+0x3b8>
 800673c:	07db      	lsls	r3, r3, #31
 800673e:	d537      	bpl.n	80067b0 <_printf_float+0x428>
 8006740:	2301      	movs	r3, #1
 8006742:	4642      	mov	r2, r8
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	f43f ae77 	beq.w	800643e <_printf_float+0xb6>
 8006750:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f ae6f 	beq.w	800643e <_printf_float+0xb6>
 8006760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006764:	2200      	movs	r2, #0
 8006766:	2300      	movs	r3, #0
 8006768:	f7fa f91e 	bl	80009a8 <__aeabi_dcmpeq>
 800676c:	b9d8      	cbnz	r0, 80067a6 <_printf_float+0x41e>
 800676e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006770:	f108 0201 	add.w	r2, r8, #1
 8006774:	3b01      	subs	r3, #1
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	d10e      	bne.n	800679e <_printf_float+0x416>
 8006780:	e65d      	b.n	800643e <_printf_float+0xb6>
 8006782:	2301      	movs	r3, #1
 8006784:	464a      	mov	r2, r9
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	f43f ae56 	beq.w	800643e <_printf_float+0xb6>
 8006792:	f108 0801 	add.w	r8, r8, #1
 8006796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006798:	3b01      	subs	r3, #1
 800679a:	4543      	cmp	r3, r8
 800679c:	dcf1      	bgt.n	8006782 <_printf_float+0x3fa>
 800679e:	4653      	mov	r3, sl
 80067a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067a4:	e6e0      	b.n	8006568 <_printf_float+0x1e0>
 80067a6:	f04f 0800 	mov.w	r8, #0
 80067aa:	f104 091a 	add.w	r9, r4, #26
 80067ae:	e7f2      	b.n	8006796 <_printf_float+0x40e>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4642      	mov	r2, r8
 80067b4:	e7df      	b.n	8006776 <_printf_float+0x3ee>
 80067b6:	2301      	movs	r3, #1
 80067b8:	464a      	mov	r2, r9
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	f43f ae3c 	beq.w	800643e <_printf_float+0xb6>
 80067c6:	f108 0801 	add.w	r8, r8, #1
 80067ca:	68e3      	ldr	r3, [r4, #12]
 80067cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067ce:	1a5b      	subs	r3, r3, r1
 80067d0:	4543      	cmp	r3, r8
 80067d2:	dcf0      	bgt.n	80067b6 <_printf_float+0x42e>
 80067d4:	e6fd      	b.n	80065d2 <_printf_float+0x24a>
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	f104 0919 	add.w	r9, r4, #25
 80067de:	e7f4      	b.n	80067ca <_printf_float+0x442>

080067e0 <_printf_common>:
 80067e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	4616      	mov	r6, r2
 80067e6:	4699      	mov	r9, r3
 80067e8:	688a      	ldr	r2, [r1, #8]
 80067ea:	690b      	ldr	r3, [r1, #16]
 80067ec:	4607      	mov	r7, r0
 80067ee:	4293      	cmp	r3, r2
 80067f0:	bfb8      	it	lt
 80067f2:	4613      	movlt	r3, r2
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067fa:	460c      	mov	r4, r1
 80067fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006800:	b10a      	cbz	r2, 8006806 <_printf_common+0x26>
 8006802:	3301      	adds	r3, #1
 8006804:	6033      	str	r3, [r6, #0]
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	0699      	lsls	r1, r3, #26
 800680a:	bf42      	ittt	mi
 800680c:	6833      	ldrmi	r3, [r6, #0]
 800680e:	3302      	addmi	r3, #2
 8006810:	6033      	strmi	r3, [r6, #0]
 8006812:	6825      	ldr	r5, [r4, #0]
 8006814:	f015 0506 	ands.w	r5, r5, #6
 8006818:	d106      	bne.n	8006828 <_printf_common+0x48>
 800681a:	f104 0a19 	add.w	sl, r4, #25
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	6832      	ldr	r2, [r6, #0]
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	42ab      	cmp	r3, r5
 8006826:	dc28      	bgt.n	800687a <_printf_common+0x9a>
 8006828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800682c:	1e13      	subs	r3, r2, #0
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	bf18      	it	ne
 8006832:	2301      	movne	r3, #1
 8006834:	0692      	lsls	r2, r2, #26
 8006836:	d42d      	bmi.n	8006894 <_printf_common+0xb4>
 8006838:	4649      	mov	r1, r9
 800683a:	4638      	mov	r0, r7
 800683c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006840:	47c0      	blx	r8
 8006842:	3001      	adds	r0, #1
 8006844:	d020      	beq.n	8006888 <_printf_common+0xa8>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	68e5      	ldr	r5, [r4, #12]
 800684a:	f003 0306 	and.w	r3, r3, #6
 800684e:	2b04      	cmp	r3, #4
 8006850:	bf18      	it	ne
 8006852:	2500      	movne	r5, #0
 8006854:	6832      	ldr	r2, [r6, #0]
 8006856:	f04f 0600 	mov.w	r6, #0
 800685a:	68a3      	ldr	r3, [r4, #8]
 800685c:	bf08      	it	eq
 800685e:	1aad      	subeq	r5, r5, r2
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	bf08      	it	eq
 8006864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006868:	4293      	cmp	r3, r2
 800686a:	bfc4      	itt	gt
 800686c:	1a9b      	subgt	r3, r3, r2
 800686e:	18ed      	addgt	r5, r5, r3
 8006870:	341a      	adds	r4, #26
 8006872:	42b5      	cmp	r5, r6
 8006874:	d11a      	bne.n	80068ac <_printf_common+0xcc>
 8006876:	2000      	movs	r0, #0
 8006878:	e008      	b.n	800688c <_printf_common+0xac>
 800687a:	2301      	movs	r3, #1
 800687c:	4652      	mov	r2, sl
 800687e:	4649      	mov	r1, r9
 8006880:	4638      	mov	r0, r7
 8006882:	47c0      	blx	r8
 8006884:	3001      	adds	r0, #1
 8006886:	d103      	bne.n	8006890 <_printf_common+0xb0>
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006890:	3501      	adds	r5, #1
 8006892:	e7c4      	b.n	800681e <_printf_common+0x3e>
 8006894:	2030      	movs	r0, #48	; 0x30
 8006896:	18e1      	adds	r1, r4, r3
 8006898:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068a2:	4422      	add	r2, r4
 80068a4:	3302      	adds	r3, #2
 80068a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068aa:	e7c5      	b.n	8006838 <_printf_common+0x58>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4622      	mov	r2, r4
 80068b0:	4649      	mov	r1, r9
 80068b2:	4638      	mov	r0, r7
 80068b4:	47c0      	blx	r8
 80068b6:	3001      	adds	r0, #1
 80068b8:	d0e6      	beq.n	8006888 <_printf_common+0xa8>
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7d9      	b.n	8006872 <_printf_common+0x92>
	...

080068c0 <_printf_i>:
 80068c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	7e0f      	ldrb	r7, [r1, #24]
 80068c6:	4691      	mov	r9, r2
 80068c8:	2f78      	cmp	r7, #120	; 0x78
 80068ca:	4680      	mov	r8, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	469a      	mov	sl, r3
 80068d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068d6:	d807      	bhi.n	80068e8 <_printf_i+0x28>
 80068d8:	2f62      	cmp	r7, #98	; 0x62
 80068da:	d80a      	bhi.n	80068f2 <_printf_i+0x32>
 80068dc:	2f00      	cmp	r7, #0
 80068de:	f000 80d9 	beq.w	8006a94 <_printf_i+0x1d4>
 80068e2:	2f58      	cmp	r7, #88	; 0x58
 80068e4:	f000 80a4 	beq.w	8006a30 <_printf_i+0x170>
 80068e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068f0:	e03a      	b.n	8006968 <_printf_i+0xa8>
 80068f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068f6:	2b15      	cmp	r3, #21
 80068f8:	d8f6      	bhi.n	80068e8 <_printf_i+0x28>
 80068fa:	a101      	add	r1, pc, #4	; (adr r1, 8006900 <_printf_i+0x40>)
 80068fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006900:	08006959 	.word	0x08006959
 8006904:	0800696d 	.word	0x0800696d
 8006908:	080068e9 	.word	0x080068e9
 800690c:	080068e9 	.word	0x080068e9
 8006910:	080068e9 	.word	0x080068e9
 8006914:	080068e9 	.word	0x080068e9
 8006918:	0800696d 	.word	0x0800696d
 800691c:	080068e9 	.word	0x080068e9
 8006920:	080068e9 	.word	0x080068e9
 8006924:	080068e9 	.word	0x080068e9
 8006928:	080068e9 	.word	0x080068e9
 800692c:	08006a7b 	.word	0x08006a7b
 8006930:	0800699d 	.word	0x0800699d
 8006934:	08006a5d 	.word	0x08006a5d
 8006938:	080068e9 	.word	0x080068e9
 800693c:	080068e9 	.word	0x080068e9
 8006940:	08006a9d 	.word	0x08006a9d
 8006944:	080068e9 	.word	0x080068e9
 8006948:	0800699d 	.word	0x0800699d
 800694c:	080068e9 	.word	0x080068e9
 8006950:	080068e9 	.word	0x080068e9
 8006954:	08006a65 	.word	0x08006a65
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	1d1a      	adds	r2, r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006968:	2301      	movs	r3, #1
 800696a:	e0a4      	b.n	8006ab6 <_printf_i+0x1f6>
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	6829      	ldr	r1, [r5, #0]
 8006970:	0606      	lsls	r6, r0, #24
 8006972:	f101 0304 	add.w	r3, r1, #4
 8006976:	d50a      	bpl.n	800698e <_printf_i+0xce>
 8006978:	680e      	ldr	r6, [r1, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	2e00      	cmp	r6, #0
 800697e:	da03      	bge.n	8006988 <_printf_i+0xc8>
 8006980:	232d      	movs	r3, #45	; 0x2d
 8006982:	4276      	negs	r6, r6
 8006984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006988:	230a      	movs	r3, #10
 800698a:	485e      	ldr	r0, [pc, #376]	; (8006b04 <_printf_i+0x244>)
 800698c:	e019      	b.n	80069c2 <_printf_i+0x102>
 800698e:	680e      	ldr	r6, [r1, #0]
 8006990:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	bf18      	it	ne
 8006998:	b236      	sxthne	r6, r6
 800699a:	e7ef      	b.n	800697c <_printf_i+0xbc>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	1d19      	adds	r1, r3, #4
 80069a2:	6029      	str	r1, [r5, #0]
 80069a4:	0601      	lsls	r1, r0, #24
 80069a6:	d501      	bpl.n	80069ac <_printf_i+0xec>
 80069a8:	681e      	ldr	r6, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <_printf_i+0xf2>
 80069ac:	0646      	lsls	r6, r0, #25
 80069ae:	d5fb      	bpl.n	80069a8 <_printf_i+0xe8>
 80069b0:	881e      	ldrh	r6, [r3, #0]
 80069b2:	2f6f      	cmp	r7, #111	; 0x6f
 80069b4:	bf0c      	ite	eq
 80069b6:	2308      	moveq	r3, #8
 80069b8:	230a      	movne	r3, #10
 80069ba:	4852      	ldr	r0, [pc, #328]	; (8006b04 <_printf_i+0x244>)
 80069bc:	2100      	movs	r1, #0
 80069be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069c2:	6865      	ldr	r5, [r4, #4]
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	bfa8      	it	ge
 80069c8:	6821      	ldrge	r1, [r4, #0]
 80069ca:	60a5      	str	r5, [r4, #8]
 80069cc:	bfa4      	itt	ge
 80069ce:	f021 0104 	bicge.w	r1, r1, #4
 80069d2:	6021      	strge	r1, [r4, #0]
 80069d4:	b90e      	cbnz	r6, 80069da <_printf_i+0x11a>
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	d04d      	beq.n	8006a76 <_printf_i+0x1b6>
 80069da:	4615      	mov	r5, r2
 80069dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80069e0:	fb03 6711 	mls	r7, r3, r1, r6
 80069e4:	5dc7      	ldrb	r7, [r0, r7]
 80069e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069ea:	4637      	mov	r7, r6
 80069ec:	42bb      	cmp	r3, r7
 80069ee:	460e      	mov	r6, r1
 80069f0:	d9f4      	bls.n	80069dc <_printf_i+0x11c>
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d10b      	bne.n	8006a0e <_printf_i+0x14e>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	07de      	lsls	r6, r3, #31
 80069fa:	d508      	bpl.n	8006a0e <_printf_i+0x14e>
 80069fc:	6923      	ldr	r3, [r4, #16]
 80069fe:	6861      	ldr	r1, [r4, #4]
 8006a00:	4299      	cmp	r1, r3
 8006a02:	bfde      	ittt	le
 8006a04:	2330      	movle	r3, #48	; 0x30
 8006a06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a0e:	1b52      	subs	r2, r2, r5
 8006a10:	6122      	str	r2, [r4, #16]
 8006a12:	464b      	mov	r3, r9
 8006a14:	4621      	mov	r1, r4
 8006a16:	4640      	mov	r0, r8
 8006a18:	f8cd a000 	str.w	sl, [sp]
 8006a1c:	aa03      	add	r2, sp, #12
 8006a1e:	f7ff fedf 	bl	80067e0 <_printf_common>
 8006a22:	3001      	adds	r0, #1
 8006a24:	d14c      	bne.n	8006ac0 <_printf_i+0x200>
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	b004      	add	sp, #16
 8006a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a30:	4834      	ldr	r0, [pc, #208]	; (8006b04 <_printf_i+0x244>)
 8006a32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a36:	6829      	ldr	r1, [r5, #0]
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a3e:	6029      	str	r1, [r5, #0]
 8006a40:	061d      	lsls	r5, r3, #24
 8006a42:	d514      	bpl.n	8006a6e <_printf_i+0x1ae>
 8006a44:	07df      	lsls	r7, r3, #31
 8006a46:	bf44      	itt	mi
 8006a48:	f043 0320 	orrmi.w	r3, r3, #32
 8006a4c:	6023      	strmi	r3, [r4, #0]
 8006a4e:	b91e      	cbnz	r6, 8006a58 <_printf_i+0x198>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	f023 0320 	bic.w	r3, r3, #32
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	2310      	movs	r3, #16
 8006a5a:	e7af      	b.n	80069bc <_printf_i+0xfc>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	f043 0320 	orr.w	r3, r3, #32
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	2378      	movs	r3, #120	; 0x78
 8006a66:	4828      	ldr	r0, [pc, #160]	; (8006b08 <_printf_i+0x248>)
 8006a68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a6c:	e7e3      	b.n	8006a36 <_printf_i+0x176>
 8006a6e:	0659      	lsls	r1, r3, #25
 8006a70:	bf48      	it	mi
 8006a72:	b2b6      	uxthmi	r6, r6
 8006a74:	e7e6      	b.n	8006a44 <_printf_i+0x184>
 8006a76:	4615      	mov	r5, r2
 8006a78:	e7bb      	b.n	80069f2 <_printf_i+0x132>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	6826      	ldr	r6, [r4, #0]
 8006a7e:	1d18      	adds	r0, r3, #4
 8006a80:	6961      	ldr	r1, [r4, #20]
 8006a82:	6028      	str	r0, [r5, #0]
 8006a84:	0635      	lsls	r5, r6, #24
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	d501      	bpl.n	8006a8e <_printf_i+0x1ce>
 8006a8a:	6019      	str	r1, [r3, #0]
 8006a8c:	e002      	b.n	8006a94 <_printf_i+0x1d4>
 8006a8e:	0670      	lsls	r0, r6, #25
 8006a90:	d5fb      	bpl.n	8006a8a <_printf_i+0x1ca>
 8006a92:	8019      	strh	r1, [r3, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	4615      	mov	r5, r2
 8006a98:	6123      	str	r3, [r4, #16]
 8006a9a:	e7ba      	b.n	8006a12 <_printf_i+0x152>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	1d1a      	adds	r2, r3, #4
 8006aa2:	602a      	str	r2, [r5, #0]
 8006aa4:	681d      	ldr	r5, [r3, #0]
 8006aa6:	6862      	ldr	r2, [r4, #4]
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f002 faef 	bl	800908c <memchr>
 8006aae:	b108      	cbz	r0, 8006ab4 <_printf_i+0x1f4>
 8006ab0:	1b40      	subs	r0, r0, r5
 8006ab2:	6060      	str	r0, [r4, #4]
 8006ab4:	6863      	ldr	r3, [r4, #4]
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006abe:	e7a8      	b.n	8006a12 <_printf_i+0x152>
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	6923      	ldr	r3, [r4, #16]
 8006ac8:	47d0      	blx	sl
 8006aca:	3001      	adds	r0, #1
 8006acc:	d0ab      	beq.n	8006a26 <_printf_i+0x166>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	079b      	lsls	r3, r3, #30
 8006ad2:	d413      	bmi.n	8006afc <_printf_i+0x23c>
 8006ad4:	68e0      	ldr	r0, [r4, #12]
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	4298      	cmp	r0, r3
 8006ada:	bfb8      	it	lt
 8006adc:	4618      	movlt	r0, r3
 8006ade:	e7a4      	b.n	8006a2a <_printf_i+0x16a>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4632      	mov	r2, r6
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	47d0      	blx	sl
 8006aea:	3001      	adds	r0, #1
 8006aec:	d09b      	beq.n	8006a26 <_printf_i+0x166>
 8006aee:	3501      	adds	r5, #1
 8006af0:	68e3      	ldr	r3, [r4, #12]
 8006af2:	9903      	ldr	r1, [sp, #12]
 8006af4:	1a5b      	subs	r3, r3, r1
 8006af6:	42ab      	cmp	r3, r5
 8006af8:	dcf2      	bgt.n	8006ae0 <_printf_i+0x220>
 8006afa:	e7eb      	b.n	8006ad4 <_printf_i+0x214>
 8006afc:	2500      	movs	r5, #0
 8006afe:	f104 0619 	add.w	r6, r4, #25
 8006b02:	e7f5      	b.n	8006af0 <_printf_i+0x230>
 8006b04:	0800af42 	.word	0x0800af42
 8006b08:	0800af53 	.word	0x0800af53

08006b0c <_scanf_float>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	b087      	sub	sp, #28
 8006b12:	9303      	str	r3, [sp, #12]
 8006b14:	688b      	ldr	r3, [r1, #8]
 8006b16:	4617      	mov	r7, r2
 8006b18:	1e5a      	subs	r2, r3, #1
 8006b1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b1e:	bf85      	ittet	hi
 8006b20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b24:	195b      	addhi	r3, r3, r5
 8006b26:	2300      	movls	r3, #0
 8006b28:	9302      	strhi	r3, [sp, #8]
 8006b2a:	bf88      	it	hi
 8006b2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b30:	468b      	mov	fp, r1
 8006b32:	f04f 0500 	mov.w	r5, #0
 8006b36:	bf8c      	ite	hi
 8006b38:	608b      	strhi	r3, [r1, #8]
 8006b3a:	9302      	strls	r3, [sp, #8]
 8006b3c:	680b      	ldr	r3, [r1, #0]
 8006b3e:	4680      	mov	r8, r0
 8006b40:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b44:	f84b 3b1c 	str.w	r3, [fp], #28
 8006b48:	460c      	mov	r4, r1
 8006b4a:	465e      	mov	r6, fp
 8006b4c:	46aa      	mov	sl, r5
 8006b4e:	46a9      	mov	r9, r5
 8006b50:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b54:	9501      	str	r5, [sp, #4]
 8006b56:	68a2      	ldr	r2, [r4, #8]
 8006b58:	b152      	cbz	r2, 8006b70 <_scanf_float+0x64>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b4e      	cmp	r3, #78	; 0x4e
 8006b60:	d864      	bhi.n	8006c2c <_scanf_float+0x120>
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d83c      	bhi.n	8006be0 <_scanf_float+0xd4>
 8006b66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006b6a:	b2c8      	uxtb	r0, r1
 8006b6c:	280e      	cmp	r0, #14
 8006b6e:	d93a      	bls.n	8006be6 <_scanf_float+0xda>
 8006b70:	f1b9 0f00 	cmp.w	r9, #0
 8006b74:	d003      	beq.n	8006b7e <_scanf_float+0x72>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b82:	f1ba 0f01 	cmp.w	sl, #1
 8006b86:	f200 8113 	bhi.w	8006db0 <_scanf_float+0x2a4>
 8006b8a:	455e      	cmp	r6, fp
 8006b8c:	f200 8105 	bhi.w	8006d9a <_scanf_float+0x28e>
 8006b90:	2501      	movs	r5, #1
 8006b92:	4628      	mov	r0, r5
 8006b94:	b007      	add	sp, #28
 8006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b9e:	2a0d      	cmp	r2, #13
 8006ba0:	d8e6      	bhi.n	8006b70 <_scanf_float+0x64>
 8006ba2:	a101      	add	r1, pc, #4	; (adr r1, 8006ba8 <_scanf_float+0x9c>)
 8006ba4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ba8:	08006ce7 	.word	0x08006ce7
 8006bac:	08006b71 	.word	0x08006b71
 8006bb0:	08006b71 	.word	0x08006b71
 8006bb4:	08006b71 	.word	0x08006b71
 8006bb8:	08006d47 	.word	0x08006d47
 8006bbc:	08006d1f 	.word	0x08006d1f
 8006bc0:	08006b71 	.word	0x08006b71
 8006bc4:	08006b71 	.word	0x08006b71
 8006bc8:	08006cf5 	.word	0x08006cf5
 8006bcc:	08006b71 	.word	0x08006b71
 8006bd0:	08006b71 	.word	0x08006b71
 8006bd4:	08006b71 	.word	0x08006b71
 8006bd8:	08006b71 	.word	0x08006b71
 8006bdc:	08006cad 	.word	0x08006cad
 8006be0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006be4:	e7db      	b.n	8006b9e <_scanf_float+0x92>
 8006be6:	290e      	cmp	r1, #14
 8006be8:	d8c2      	bhi.n	8006b70 <_scanf_float+0x64>
 8006bea:	a001      	add	r0, pc, #4	; (adr r0, 8006bf0 <_scanf_float+0xe4>)
 8006bec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006bf0:	08006c9f 	.word	0x08006c9f
 8006bf4:	08006b71 	.word	0x08006b71
 8006bf8:	08006c9f 	.word	0x08006c9f
 8006bfc:	08006d33 	.word	0x08006d33
 8006c00:	08006b71 	.word	0x08006b71
 8006c04:	08006c4d 	.word	0x08006c4d
 8006c08:	08006c89 	.word	0x08006c89
 8006c0c:	08006c89 	.word	0x08006c89
 8006c10:	08006c89 	.word	0x08006c89
 8006c14:	08006c89 	.word	0x08006c89
 8006c18:	08006c89 	.word	0x08006c89
 8006c1c:	08006c89 	.word	0x08006c89
 8006c20:	08006c89 	.word	0x08006c89
 8006c24:	08006c89 	.word	0x08006c89
 8006c28:	08006c89 	.word	0x08006c89
 8006c2c:	2b6e      	cmp	r3, #110	; 0x6e
 8006c2e:	d809      	bhi.n	8006c44 <_scanf_float+0x138>
 8006c30:	2b60      	cmp	r3, #96	; 0x60
 8006c32:	d8b2      	bhi.n	8006b9a <_scanf_float+0x8e>
 8006c34:	2b54      	cmp	r3, #84	; 0x54
 8006c36:	d077      	beq.n	8006d28 <_scanf_float+0x21c>
 8006c38:	2b59      	cmp	r3, #89	; 0x59
 8006c3a:	d199      	bne.n	8006b70 <_scanf_float+0x64>
 8006c3c:	2d07      	cmp	r5, #7
 8006c3e:	d197      	bne.n	8006b70 <_scanf_float+0x64>
 8006c40:	2508      	movs	r5, #8
 8006c42:	e029      	b.n	8006c98 <_scanf_float+0x18c>
 8006c44:	2b74      	cmp	r3, #116	; 0x74
 8006c46:	d06f      	beq.n	8006d28 <_scanf_float+0x21c>
 8006c48:	2b79      	cmp	r3, #121	; 0x79
 8006c4a:	e7f6      	b.n	8006c3a <_scanf_float+0x12e>
 8006c4c:	6821      	ldr	r1, [r4, #0]
 8006c4e:	05c8      	lsls	r0, r1, #23
 8006c50:	d51a      	bpl.n	8006c88 <_scanf_float+0x17c>
 8006c52:	9b02      	ldr	r3, [sp, #8]
 8006c54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006c58:	6021      	str	r1, [r4, #0]
 8006c5a:	f109 0901 	add.w	r9, r9, #1
 8006c5e:	b11b      	cbz	r3, 8006c68 <_scanf_float+0x15c>
 8006c60:	3b01      	subs	r3, #1
 8006c62:	3201      	adds	r2, #1
 8006c64:	9302      	str	r3, [sp, #8]
 8006c66:	60a2      	str	r2, [r4, #8]
 8006c68:	68a3      	ldr	r3, [r4, #8]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	3301      	adds	r3, #1
 8006c72:	6123      	str	r3, [r4, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	607b      	str	r3, [r7, #4]
 8006c7c:	f340 8084 	ble.w	8006d88 <_scanf_float+0x27c>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	e766      	b.n	8006b56 <_scanf_float+0x4a>
 8006c88:	eb1a 0f05 	cmn.w	sl, r5
 8006c8c:	f47f af70 	bne.w	8006b70 <_scanf_float+0x64>
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c96:	6022      	str	r2, [r4, #0]
 8006c98:	f806 3b01 	strb.w	r3, [r6], #1
 8006c9c:	e7e4      	b.n	8006c68 <_scanf_float+0x15c>
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	0610      	lsls	r0, r2, #24
 8006ca2:	f57f af65 	bpl.w	8006b70 <_scanf_float+0x64>
 8006ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006caa:	e7f4      	b.n	8006c96 <_scanf_float+0x18a>
 8006cac:	f1ba 0f00 	cmp.w	sl, #0
 8006cb0:	d10e      	bne.n	8006cd0 <_scanf_float+0x1c4>
 8006cb2:	f1b9 0f00 	cmp.w	r9, #0
 8006cb6:	d10e      	bne.n	8006cd6 <_scanf_float+0x1ca>
 8006cb8:	6822      	ldr	r2, [r4, #0]
 8006cba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006cbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006cc2:	d108      	bne.n	8006cd6 <_scanf_float+0x1ca>
 8006cc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cc8:	f04f 0a01 	mov.w	sl, #1
 8006ccc:	6022      	str	r2, [r4, #0]
 8006cce:	e7e3      	b.n	8006c98 <_scanf_float+0x18c>
 8006cd0:	f1ba 0f02 	cmp.w	sl, #2
 8006cd4:	d055      	beq.n	8006d82 <_scanf_float+0x276>
 8006cd6:	2d01      	cmp	r5, #1
 8006cd8:	d002      	beq.n	8006ce0 <_scanf_float+0x1d4>
 8006cda:	2d04      	cmp	r5, #4
 8006cdc:	f47f af48 	bne.w	8006b70 <_scanf_float+0x64>
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	b2ed      	uxtb	r5, r5
 8006ce4:	e7d8      	b.n	8006c98 <_scanf_float+0x18c>
 8006ce6:	f1ba 0f01 	cmp.w	sl, #1
 8006cea:	f47f af41 	bne.w	8006b70 <_scanf_float+0x64>
 8006cee:	f04f 0a02 	mov.w	sl, #2
 8006cf2:	e7d1      	b.n	8006c98 <_scanf_float+0x18c>
 8006cf4:	b97d      	cbnz	r5, 8006d16 <_scanf_float+0x20a>
 8006cf6:	f1b9 0f00 	cmp.w	r9, #0
 8006cfa:	f47f af3c 	bne.w	8006b76 <_scanf_float+0x6a>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d08:	f47f af39 	bne.w	8006b7e <_scanf_float+0x72>
 8006d0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d10:	2501      	movs	r5, #1
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	e7c0      	b.n	8006c98 <_scanf_float+0x18c>
 8006d16:	2d03      	cmp	r5, #3
 8006d18:	d0e2      	beq.n	8006ce0 <_scanf_float+0x1d4>
 8006d1a:	2d05      	cmp	r5, #5
 8006d1c:	e7de      	b.n	8006cdc <_scanf_float+0x1d0>
 8006d1e:	2d02      	cmp	r5, #2
 8006d20:	f47f af26 	bne.w	8006b70 <_scanf_float+0x64>
 8006d24:	2503      	movs	r5, #3
 8006d26:	e7b7      	b.n	8006c98 <_scanf_float+0x18c>
 8006d28:	2d06      	cmp	r5, #6
 8006d2a:	f47f af21 	bne.w	8006b70 <_scanf_float+0x64>
 8006d2e:	2507      	movs	r5, #7
 8006d30:	e7b2      	b.n	8006c98 <_scanf_float+0x18c>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	0591      	lsls	r1, r2, #22
 8006d36:	f57f af1b 	bpl.w	8006b70 <_scanf_float+0x64>
 8006d3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d3e:	6022      	str	r2, [r4, #0]
 8006d40:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d44:	e7a8      	b.n	8006c98 <_scanf_float+0x18c>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006d4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006d50:	d006      	beq.n	8006d60 <_scanf_float+0x254>
 8006d52:	0550      	lsls	r0, r2, #21
 8006d54:	f57f af0c 	bpl.w	8006b70 <_scanf_float+0x64>
 8006d58:	f1b9 0f00 	cmp.w	r9, #0
 8006d5c:	f43f af0f 	beq.w	8006b7e <_scanf_float+0x72>
 8006d60:	0591      	lsls	r1, r2, #22
 8006d62:	bf58      	it	pl
 8006d64:	9901      	ldrpl	r1, [sp, #4]
 8006d66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d6a:	bf58      	it	pl
 8006d6c:	eba9 0101 	subpl.w	r1, r9, r1
 8006d70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006d74:	f04f 0900 	mov.w	r9, #0
 8006d78:	bf58      	it	pl
 8006d7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d7e:	6022      	str	r2, [r4, #0]
 8006d80:	e78a      	b.n	8006c98 <_scanf_float+0x18c>
 8006d82:	f04f 0a03 	mov.w	sl, #3
 8006d86:	e787      	b.n	8006c98 <_scanf_float+0x18c>
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d90:	4798      	blx	r3
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f43f aedf 	beq.w	8006b56 <_scanf_float+0x4a>
 8006d98:	e6ea      	b.n	8006b70 <_scanf_float+0x64>
 8006d9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d9e:	463a      	mov	r2, r7
 8006da0:	4640      	mov	r0, r8
 8006da2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006da6:	4798      	blx	r3
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	6123      	str	r3, [r4, #16]
 8006dae:	e6ec      	b.n	8006b8a <_scanf_float+0x7e>
 8006db0:	1e6b      	subs	r3, r5, #1
 8006db2:	2b06      	cmp	r3, #6
 8006db4:	d825      	bhi.n	8006e02 <_scanf_float+0x2f6>
 8006db6:	2d02      	cmp	r5, #2
 8006db8:	d836      	bhi.n	8006e28 <_scanf_float+0x31c>
 8006dba:	455e      	cmp	r6, fp
 8006dbc:	f67f aee8 	bls.w	8006b90 <_scanf_float+0x84>
 8006dc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc4:	463a      	mov	r2, r7
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dcc:	4798      	blx	r3
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	e7f1      	b.n	8006dba <_scanf_float+0x2ae>
 8006dd6:	9802      	ldr	r0, [sp, #8]
 8006dd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ddc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006de0:	463a      	mov	r2, r7
 8006de2:	9002      	str	r0, [sp, #8]
 8006de4:	4640      	mov	r0, r8
 8006de6:	4798      	blx	r3
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006df2:	fa5f fa8a 	uxtb.w	sl, sl
 8006df6:	f1ba 0f02 	cmp.w	sl, #2
 8006dfa:	d1ec      	bne.n	8006dd6 <_scanf_float+0x2ca>
 8006dfc:	3d03      	subs	r5, #3
 8006dfe:	b2ed      	uxtb	r5, r5
 8006e00:	1b76      	subs	r6, r6, r5
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	05da      	lsls	r2, r3, #23
 8006e06:	d52f      	bpl.n	8006e68 <_scanf_float+0x35c>
 8006e08:	055b      	lsls	r3, r3, #21
 8006e0a:	d510      	bpl.n	8006e2e <_scanf_float+0x322>
 8006e0c:	455e      	cmp	r6, fp
 8006e0e:	f67f aebf 	bls.w	8006b90 <_scanf_float+0x84>
 8006e12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e16:	463a      	mov	r2, r7
 8006e18:	4640      	mov	r0, r8
 8006e1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e1e:	4798      	blx	r3
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	6123      	str	r3, [r4, #16]
 8006e26:	e7f1      	b.n	8006e0c <_scanf_float+0x300>
 8006e28:	46aa      	mov	sl, r5
 8006e2a:	9602      	str	r6, [sp, #8]
 8006e2c:	e7df      	b.n	8006dee <_scanf_float+0x2e2>
 8006e2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	2965      	cmp	r1, #101	; 0x65
 8006e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	d00c      	beq.n	8006e5c <_scanf_float+0x350>
 8006e42:	2945      	cmp	r1, #69	; 0x45
 8006e44:	d00a      	beq.n	8006e5c <_scanf_float+0x350>
 8006e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e4a:	463a      	mov	r2, r7
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4798      	blx	r3
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	1eb5      	subs	r5, r6, #2
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e64:	4798      	blx	r3
 8006e66:	462e      	mov	r6, r5
 8006e68:	6825      	ldr	r5, [r4, #0]
 8006e6a:	f015 0510 	ands.w	r5, r5, #16
 8006e6e:	d155      	bne.n	8006f1c <_scanf_float+0x410>
 8006e70:	7035      	strb	r5, [r6, #0]
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7c:	d11b      	bne.n	8006eb6 <_scanf_float+0x3aa>
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	454b      	cmp	r3, r9
 8006e82:	eba3 0209 	sub.w	r2, r3, r9
 8006e86:	d123      	bne.n	8006ed0 <_scanf_float+0x3c4>
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4659      	mov	r1, fp
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	f000 fe7b 	bl	8007b88 <_strtod_r>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	f012 0f02 	tst.w	r2, #2
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	460f      	mov	r7, r1
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	d021      	beq.n	8006ee6 <_scanf_float+0x3da>
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	9903      	ldr	r1, [sp, #12]
 8006ea6:	600a      	str	r2, [r1, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	e9c3 6700 	strd	r6, r7, [r3]
 8006eae:	68e3      	ldr	r3, [r4, #12]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	60e3      	str	r3, [r4, #12]
 8006eb4:	e66d      	b.n	8006b92 <_scanf_float+0x86>
 8006eb6:	9b04      	ldr	r3, [sp, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0e5      	beq.n	8006e88 <_scanf_float+0x37c>
 8006ebc:	9905      	ldr	r1, [sp, #20]
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	462a      	mov	r2, r5
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	3101      	adds	r1, #1
 8006ec6:	f000 fee1 	bl	8007c8c <_strtol_r>
 8006eca:	9b04      	ldr	r3, [sp, #16]
 8006ecc:	9e05      	ldr	r6, [sp, #20]
 8006ece:	1ac2      	subs	r2, r0, r3
 8006ed0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ed4:	429e      	cmp	r6, r3
 8006ed6:	bf28      	it	cs
 8006ed8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006edc:	4630      	mov	r0, r6
 8006ede:	4910      	ldr	r1, [pc, #64]	; (8006f20 <_scanf_float+0x414>)
 8006ee0:	f000 f826 	bl	8006f30 <siprintf>
 8006ee4:	e7d0      	b.n	8006e88 <_scanf_float+0x37c>
 8006ee6:	f012 0f04 	tst.w	r2, #4
 8006eea:	f103 0204 	add.w	r2, r3, #4
 8006eee:	d1d9      	bne.n	8006ea4 <_scanf_float+0x398>
 8006ef0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006ef4:	f8cc 2000 	str.w	r2, [ip]
 8006ef8:	f8d3 8000 	ldr.w	r8, [r3]
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	f7f9 fd84 	bl	8000a0c <__aeabi_dcmpun>
 8006f04:	b128      	cbz	r0, 8006f12 <_scanf_float+0x406>
 8006f06:	4807      	ldr	r0, [pc, #28]	; (8006f24 <_scanf_float+0x418>)
 8006f08:	f000 f80e 	bl	8006f28 <nanf>
 8006f0c:	f8c8 0000 	str.w	r0, [r8]
 8006f10:	e7cd      	b.n	8006eae <_scanf_float+0x3a2>
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7f9 fdd7 	bl	8000ac8 <__aeabi_d2f>
 8006f1a:	e7f7      	b.n	8006f0c <_scanf_float+0x400>
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	e638      	b.n	8006b92 <_scanf_float+0x86>
 8006f20:	0800af64 	.word	0x0800af64
 8006f24:	0800b370 	.word	0x0800b370

08006f28 <nanf>:
 8006f28:	4800      	ldr	r0, [pc, #0]	; (8006f2c <nanf+0x4>)
 8006f2a:	4770      	bx	lr
 8006f2c:	7fc00000 	.word	0x7fc00000

08006f30 <siprintf>:
 8006f30:	b40e      	push	{r1, r2, r3}
 8006f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f36:	b500      	push	{lr}
 8006f38:	b09c      	sub	sp, #112	; 0x70
 8006f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f3c:	9002      	str	r0, [sp, #8]
 8006f3e:	9006      	str	r0, [sp, #24]
 8006f40:	9107      	str	r1, [sp, #28]
 8006f42:	9104      	str	r1, [sp, #16]
 8006f44:	4808      	ldr	r0, [pc, #32]	; (8006f68 <siprintf+0x38>)
 8006f46:	4909      	ldr	r1, [pc, #36]	; (8006f6c <siprintf+0x3c>)
 8006f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f4c:	9105      	str	r1, [sp, #20]
 8006f4e:	6800      	ldr	r0, [r0, #0]
 8006f50:	a902      	add	r1, sp, #8
 8006f52:	9301      	str	r3, [sp, #4]
 8006f54:	f002 feac 	bl	8009cb0 <_svfiprintf_r>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	b01c      	add	sp, #112	; 0x70
 8006f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f64:	b003      	add	sp, #12
 8006f66:	4770      	bx	lr
 8006f68:	20000090 	.word	0x20000090
 8006f6c:	ffff0208 	.word	0xffff0208

08006f70 <sulp>:
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f74:	460f      	mov	r7, r1
 8006f76:	4690      	mov	r8, r2
 8006f78:	f002 fc06 	bl	8009788 <__ulp>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	d011      	beq.n	8006faa <sulp+0x3a>
 8006f86:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dd0b      	ble.n	8006faa <sulp+0x3a>
 8006f92:	2400      	movs	r4, #0
 8006f94:	051b      	lsls	r3, r3, #20
 8006f96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	f7f9 fa99 	bl	80004d8 <__aeabi_dmul>
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	4620      	mov	r0, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb2:	0000      	movs	r0, r0
 8006fb4:	0000      	movs	r0, r0
	...

08006fb8 <_strtod_l>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	469b      	mov	fp, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	b09f      	sub	sp, #124	; 0x7c
 8006fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8006fc4:	4b9e      	ldr	r3, [pc, #632]	; (8007240 <_strtod_l+0x288>)
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	681f      	ldr	r7, [r3, #0]
 8006fca:	460e      	mov	r6, r1
 8006fcc:	4638      	mov	r0, r7
 8006fce:	9215      	str	r2, [sp, #84]	; 0x54
 8006fd0:	f7f9 f8be 	bl	8000150 <strlen>
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	4604      	mov	r4, r0
 8006fda:	f04f 0900 	mov.w	r9, #0
 8006fde:	9619      	str	r6, [sp, #100]	; 0x64
 8006fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fe2:	781a      	ldrb	r2, [r3, #0]
 8006fe4:	2a2b      	cmp	r2, #43	; 0x2b
 8006fe6:	d04c      	beq.n	8007082 <_strtod_l+0xca>
 8006fe8:	d83a      	bhi.n	8007060 <_strtod_l+0xa8>
 8006fea:	2a0d      	cmp	r2, #13
 8006fec:	d833      	bhi.n	8007056 <_strtod_l+0x9e>
 8006fee:	2a08      	cmp	r2, #8
 8006ff0:	d833      	bhi.n	800705a <_strtod_l+0xa2>
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d03d      	beq.n	8007072 <_strtod_l+0xba>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8006ffa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006ffc:	782b      	ldrb	r3, [r5, #0]
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	f040 80aa 	bne.w	8007158 <_strtod_l+0x1a0>
 8007004:	786b      	ldrb	r3, [r5, #1]
 8007006:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800700a:	2b58      	cmp	r3, #88	; 0x58
 800700c:	d166      	bne.n	80070dc <_strtod_l+0x124>
 800700e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007010:	4650      	mov	r0, sl
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	ab1a      	add	r3, sp, #104	; 0x68
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4a8a      	ldr	r2, [pc, #552]	; (8007244 <_strtod_l+0x28c>)
 800701a:	f8cd b008 	str.w	fp, [sp, #8]
 800701e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007020:	a919      	add	r1, sp, #100	; 0x64
 8007022:	f001 fd17 	bl	8008a54 <__gethex>
 8007026:	f010 0607 	ands.w	r6, r0, #7
 800702a:	4604      	mov	r4, r0
 800702c:	d005      	beq.n	800703a <_strtod_l+0x82>
 800702e:	2e06      	cmp	r6, #6
 8007030:	d129      	bne.n	8007086 <_strtod_l+0xce>
 8007032:	2300      	movs	r3, #0
 8007034:	3501      	adds	r5, #1
 8007036:	9519      	str	r5, [sp, #100]	; 0x64
 8007038:	930a      	str	r3, [sp, #40]	; 0x28
 800703a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 858a 	bne.w	8007b56 <_strtod_l+0xb9e>
 8007042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007044:	b1d3      	cbz	r3, 800707c <_strtod_l+0xc4>
 8007046:	4642      	mov	r2, r8
 8007048:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800704c:	4610      	mov	r0, r2
 800704e:	4619      	mov	r1, r3
 8007050:	b01f      	add	sp, #124	; 0x7c
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	2a20      	cmp	r2, #32
 8007058:	d1cd      	bne.n	8006ff6 <_strtod_l+0x3e>
 800705a:	3301      	adds	r3, #1
 800705c:	9319      	str	r3, [sp, #100]	; 0x64
 800705e:	e7bf      	b.n	8006fe0 <_strtod_l+0x28>
 8007060:	2a2d      	cmp	r2, #45	; 0x2d
 8007062:	d1c8      	bne.n	8006ff6 <_strtod_l+0x3e>
 8007064:	2201      	movs	r2, #1
 8007066:	920a      	str	r2, [sp, #40]	; 0x28
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	9219      	str	r2, [sp, #100]	; 0x64
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1c3      	bne.n	8006ffa <_strtod_l+0x42>
 8007072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007074:	9619      	str	r6, [sp, #100]	; 0x64
 8007076:	2b00      	cmp	r3, #0
 8007078:	f040 856b 	bne.w	8007b52 <_strtod_l+0xb9a>
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	e7e4      	b.n	800704c <_strtod_l+0x94>
 8007082:	2200      	movs	r2, #0
 8007084:	e7ef      	b.n	8007066 <_strtod_l+0xae>
 8007086:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007088:	b13a      	cbz	r2, 800709a <_strtod_l+0xe2>
 800708a:	2135      	movs	r1, #53	; 0x35
 800708c:	a81c      	add	r0, sp, #112	; 0x70
 800708e:	f002 fc7f 	bl	8009990 <__copybits>
 8007092:	4650      	mov	r0, sl
 8007094:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007096:	f002 f847 	bl	8009128 <_Bfree>
 800709a:	3e01      	subs	r6, #1
 800709c:	2e04      	cmp	r6, #4
 800709e:	d806      	bhi.n	80070ae <_strtod_l+0xf6>
 80070a0:	e8df f006 	tbb	[pc, r6]
 80070a4:	1714030a 	.word	0x1714030a
 80070a8:	0a          	.byte	0x0a
 80070a9:	00          	.byte	0x00
 80070aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80070ae:	0721      	lsls	r1, r4, #28
 80070b0:	d5c3      	bpl.n	800703a <_strtod_l+0x82>
 80070b2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80070b6:	e7c0      	b.n	800703a <_strtod_l+0x82>
 80070b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80070ba:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80070be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80070ca:	e7f0      	b.n	80070ae <_strtod_l+0xf6>
 80070cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007248 <_strtod_l+0x290>
 80070d0:	e7ed      	b.n	80070ae <_strtod_l+0xf6>
 80070d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80070d6:	f04f 38ff 	mov.w	r8, #4294967295
 80070da:	e7e8      	b.n	80070ae <_strtod_l+0xf6>
 80070dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	9219      	str	r2, [sp, #100]	; 0x64
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b30      	cmp	r3, #48	; 0x30
 80070e6:	d0f9      	beq.n	80070dc <_strtod_l+0x124>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0a6      	beq.n	800703a <_strtod_l+0x82>
 80070ec:	2301      	movs	r3, #1
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070f2:	220a      	movs	r2, #10
 80070f4:	9308      	str	r3, [sp, #32]
 80070f6:	2300      	movs	r3, #0
 80070f8:	469b      	mov	fp, r3
 80070fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80070fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007100:	7805      	ldrb	r5, [r0, #0]
 8007102:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007106:	b2d9      	uxtb	r1, r3
 8007108:	2909      	cmp	r1, #9
 800710a:	d927      	bls.n	800715c <_strtod_l+0x1a4>
 800710c:	4622      	mov	r2, r4
 800710e:	4639      	mov	r1, r7
 8007110:	f002 fee4 	bl	8009edc <strncmp>
 8007114:	2800      	cmp	r0, #0
 8007116:	d033      	beq.n	8007180 <_strtod_l+0x1c8>
 8007118:	2000      	movs	r0, #0
 800711a:	462a      	mov	r2, r5
 800711c:	465c      	mov	r4, fp
 800711e:	4603      	mov	r3, r0
 8007120:	9004      	str	r0, [sp, #16]
 8007122:	2a65      	cmp	r2, #101	; 0x65
 8007124:	d001      	beq.n	800712a <_strtod_l+0x172>
 8007126:	2a45      	cmp	r2, #69	; 0x45
 8007128:	d114      	bne.n	8007154 <_strtod_l+0x19c>
 800712a:	b91c      	cbnz	r4, 8007134 <_strtod_l+0x17c>
 800712c:	9a07      	ldr	r2, [sp, #28]
 800712e:	4302      	orrs	r2, r0
 8007130:	d09f      	beq.n	8007072 <_strtod_l+0xba>
 8007132:	2400      	movs	r4, #0
 8007134:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007136:	1c72      	adds	r2, r6, #1
 8007138:	9219      	str	r2, [sp, #100]	; 0x64
 800713a:	7872      	ldrb	r2, [r6, #1]
 800713c:	2a2b      	cmp	r2, #43	; 0x2b
 800713e:	d079      	beq.n	8007234 <_strtod_l+0x27c>
 8007140:	2a2d      	cmp	r2, #45	; 0x2d
 8007142:	f000 8083 	beq.w	800724c <_strtod_l+0x294>
 8007146:	2700      	movs	r7, #0
 8007148:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800714c:	2909      	cmp	r1, #9
 800714e:	f240 8083 	bls.w	8007258 <_strtod_l+0x2a0>
 8007152:	9619      	str	r6, [sp, #100]	; 0x64
 8007154:	2500      	movs	r5, #0
 8007156:	e09f      	b.n	8007298 <_strtod_l+0x2e0>
 8007158:	2300      	movs	r3, #0
 800715a:	e7c8      	b.n	80070ee <_strtod_l+0x136>
 800715c:	f1bb 0f08 	cmp.w	fp, #8
 8007160:	bfd5      	itete	le
 8007162:	9906      	ldrle	r1, [sp, #24]
 8007164:	9905      	ldrgt	r1, [sp, #20]
 8007166:	fb02 3301 	mlale	r3, r2, r1, r3
 800716a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800716e:	f100 0001 	add.w	r0, r0, #1
 8007172:	bfd4      	ite	le
 8007174:	9306      	strle	r3, [sp, #24]
 8007176:	9305      	strgt	r3, [sp, #20]
 8007178:	f10b 0b01 	add.w	fp, fp, #1
 800717c:	9019      	str	r0, [sp, #100]	; 0x64
 800717e:	e7be      	b.n	80070fe <_strtod_l+0x146>
 8007180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007182:	191a      	adds	r2, r3, r4
 8007184:	9219      	str	r2, [sp, #100]	; 0x64
 8007186:	5d1a      	ldrb	r2, [r3, r4]
 8007188:	f1bb 0f00 	cmp.w	fp, #0
 800718c:	d036      	beq.n	80071fc <_strtod_l+0x244>
 800718e:	465c      	mov	r4, fp
 8007190:	9004      	str	r0, [sp, #16]
 8007192:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007196:	2b09      	cmp	r3, #9
 8007198:	d912      	bls.n	80071c0 <_strtod_l+0x208>
 800719a:	2301      	movs	r3, #1
 800719c:	e7c1      	b.n	8007122 <_strtod_l+0x16a>
 800719e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071a0:	3001      	adds	r0, #1
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	9219      	str	r2, [sp, #100]	; 0x64
 80071a6:	785a      	ldrb	r2, [r3, #1]
 80071a8:	2a30      	cmp	r2, #48	; 0x30
 80071aa:	d0f8      	beq.n	800719e <_strtod_l+0x1e6>
 80071ac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	f200 84d5 	bhi.w	8007b60 <_strtod_l+0xba8>
 80071b6:	9004      	str	r0, [sp, #16]
 80071b8:	2000      	movs	r0, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071be:	9308      	str	r3, [sp, #32]
 80071c0:	3a30      	subs	r2, #48	; 0x30
 80071c2:	f100 0301 	add.w	r3, r0, #1
 80071c6:	d013      	beq.n	80071f0 <_strtod_l+0x238>
 80071c8:	9904      	ldr	r1, [sp, #16]
 80071ca:	1905      	adds	r5, r0, r4
 80071cc:	4419      	add	r1, r3
 80071ce:	9104      	str	r1, [sp, #16]
 80071d0:	4623      	mov	r3, r4
 80071d2:	210a      	movs	r1, #10
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	d113      	bne.n	8007200 <_strtod_l+0x248>
 80071d8:	1823      	adds	r3, r4, r0
 80071da:	2b08      	cmp	r3, #8
 80071dc:	f104 0401 	add.w	r4, r4, #1
 80071e0:	4404      	add	r4, r0
 80071e2:	dc1b      	bgt.n	800721c <_strtod_l+0x264>
 80071e4:	230a      	movs	r3, #10
 80071e6:	9906      	ldr	r1, [sp, #24]
 80071e8:	fb03 2301 	mla	r3, r3, r1, r2
 80071ec:	9306      	str	r3, [sp, #24]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071f2:	4618      	mov	r0, r3
 80071f4:	1c51      	adds	r1, r2, #1
 80071f6:	9119      	str	r1, [sp, #100]	; 0x64
 80071f8:	7852      	ldrb	r2, [r2, #1]
 80071fa:	e7ca      	b.n	8007192 <_strtod_l+0x1da>
 80071fc:	4658      	mov	r0, fp
 80071fe:	e7d3      	b.n	80071a8 <_strtod_l+0x1f0>
 8007200:	2b08      	cmp	r3, #8
 8007202:	dc04      	bgt.n	800720e <_strtod_l+0x256>
 8007204:	9f06      	ldr	r7, [sp, #24]
 8007206:	434f      	muls	r7, r1
 8007208:	9706      	str	r7, [sp, #24]
 800720a:	3301      	adds	r3, #1
 800720c:	e7e2      	b.n	80071d4 <_strtod_l+0x21c>
 800720e:	1c5f      	adds	r7, r3, #1
 8007210:	2f10      	cmp	r7, #16
 8007212:	bfde      	ittt	le
 8007214:	9f05      	ldrle	r7, [sp, #20]
 8007216:	434f      	mulle	r7, r1
 8007218:	9705      	strle	r7, [sp, #20]
 800721a:	e7f6      	b.n	800720a <_strtod_l+0x252>
 800721c:	2c10      	cmp	r4, #16
 800721e:	bfdf      	itttt	le
 8007220:	230a      	movle	r3, #10
 8007222:	9905      	ldrle	r1, [sp, #20]
 8007224:	fb03 2301 	mlale	r3, r3, r1, r2
 8007228:	9305      	strle	r3, [sp, #20]
 800722a:	e7e0      	b.n	80071ee <_strtod_l+0x236>
 800722c:	2300      	movs	r3, #0
 800722e:	9304      	str	r3, [sp, #16]
 8007230:	2301      	movs	r3, #1
 8007232:	e77b      	b.n	800712c <_strtod_l+0x174>
 8007234:	2700      	movs	r7, #0
 8007236:	1cb2      	adds	r2, r6, #2
 8007238:	9219      	str	r2, [sp, #100]	; 0x64
 800723a:	78b2      	ldrb	r2, [r6, #2]
 800723c:	e784      	b.n	8007148 <_strtod_l+0x190>
 800723e:	bf00      	nop
 8007240:	0800b1b8 	.word	0x0800b1b8
 8007244:	0800af6c 	.word	0x0800af6c
 8007248:	7ff00000 	.word	0x7ff00000
 800724c:	2701      	movs	r7, #1
 800724e:	e7f2      	b.n	8007236 <_strtod_l+0x27e>
 8007250:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007252:	1c51      	adds	r1, r2, #1
 8007254:	9119      	str	r1, [sp, #100]	; 0x64
 8007256:	7852      	ldrb	r2, [r2, #1]
 8007258:	2a30      	cmp	r2, #48	; 0x30
 800725a:	d0f9      	beq.n	8007250 <_strtod_l+0x298>
 800725c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007260:	2908      	cmp	r1, #8
 8007262:	f63f af77 	bhi.w	8007154 <_strtod_l+0x19c>
 8007266:	f04f 0e0a 	mov.w	lr, #10
 800726a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800726e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007270:	9209      	str	r2, [sp, #36]	; 0x24
 8007272:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007274:	1c51      	adds	r1, r2, #1
 8007276:	9119      	str	r1, [sp, #100]	; 0x64
 8007278:	7852      	ldrb	r2, [r2, #1]
 800727a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800727e:	2d09      	cmp	r5, #9
 8007280:	d935      	bls.n	80072ee <_strtod_l+0x336>
 8007282:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007284:	1b49      	subs	r1, r1, r5
 8007286:	2908      	cmp	r1, #8
 8007288:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800728c:	dc02      	bgt.n	8007294 <_strtod_l+0x2dc>
 800728e:	4565      	cmp	r5, ip
 8007290:	bfa8      	it	ge
 8007292:	4665      	movge	r5, ip
 8007294:	b107      	cbz	r7, 8007298 <_strtod_l+0x2e0>
 8007296:	426d      	negs	r5, r5
 8007298:	2c00      	cmp	r4, #0
 800729a:	d14c      	bne.n	8007336 <_strtod_l+0x37e>
 800729c:	9907      	ldr	r1, [sp, #28]
 800729e:	4301      	orrs	r1, r0
 80072a0:	f47f aecb 	bne.w	800703a <_strtod_l+0x82>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f47f aee4 	bne.w	8007072 <_strtod_l+0xba>
 80072aa:	2a69      	cmp	r2, #105	; 0x69
 80072ac:	d026      	beq.n	80072fc <_strtod_l+0x344>
 80072ae:	dc23      	bgt.n	80072f8 <_strtod_l+0x340>
 80072b0:	2a49      	cmp	r2, #73	; 0x49
 80072b2:	d023      	beq.n	80072fc <_strtod_l+0x344>
 80072b4:	2a4e      	cmp	r2, #78	; 0x4e
 80072b6:	f47f aedc 	bne.w	8007072 <_strtod_l+0xba>
 80072ba:	499d      	ldr	r1, [pc, #628]	; (8007530 <_strtod_l+0x578>)
 80072bc:	a819      	add	r0, sp, #100	; 0x64
 80072be:	f001 fe17 	bl	8008ef0 <__match>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	f43f aed5 	beq.w	8007072 <_strtod_l+0xba>
 80072c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b28      	cmp	r3, #40	; 0x28
 80072ce:	d12c      	bne.n	800732a <_strtod_l+0x372>
 80072d0:	4998      	ldr	r1, [pc, #608]	; (8007534 <_strtod_l+0x57c>)
 80072d2:	aa1c      	add	r2, sp, #112	; 0x70
 80072d4:	a819      	add	r0, sp, #100	; 0x64
 80072d6:	f001 fe1f 	bl	8008f18 <__hexnan>
 80072da:	2805      	cmp	r0, #5
 80072dc:	d125      	bne.n	800732a <_strtod_l+0x372>
 80072de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80072e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80072e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80072ec:	e6a5      	b.n	800703a <_strtod_l+0x82>
 80072ee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80072f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80072f6:	e7bc      	b.n	8007272 <_strtod_l+0x2ba>
 80072f8:	2a6e      	cmp	r2, #110	; 0x6e
 80072fa:	e7dc      	b.n	80072b6 <_strtod_l+0x2fe>
 80072fc:	498e      	ldr	r1, [pc, #568]	; (8007538 <_strtod_l+0x580>)
 80072fe:	a819      	add	r0, sp, #100	; 0x64
 8007300:	f001 fdf6 	bl	8008ef0 <__match>
 8007304:	2800      	cmp	r0, #0
 8007306:	f43f aeb4 	beq.w	8007072 <_strtod_l+0xba>
 800730a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800730c:	498b      	ldr	r1, [pc, #556]	; (800753c <_strtod_l+0x584>)
 800730e:	3b01      	subs	r3, #1
 8007310:	a819      	add	r0, sp, #100	; 0x64
 8007312:	9319      	str	r3, [sp, #100]	; 0x64
 8007314:	f001 fdec 	bl	8008ef0 <__match>
 8007318:	b910      	cbnz	r0, 8007320 <_strtod_l+0x368>
 800731a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800731c:	3301      	adds	r3, #1
 800731e:	9319      	str	r3, [sp, #100]	; 0x64
 8007320:	f04f 0800 	mov.w	r8, #0
 8007324:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007540 <_strtod_l+0x588>
 8007328:	e687      	b.n	800703a <_strtod_l+0x82>
 800732a:	4886      	ldr	r0, [pc, #536]	; (8007544 <_strtod_l+0x58c>)
 800732c:	f002 fdc0 	bl	8009eb0 <nan>
 8007330:	4680      	mov	r8, r0
 8007332:	4689      	mov	r9, r1
 8007334:	e681      	b.n	800703a <_strtod_l+0x82>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	f1bb 0f00 	cmp.w	fp, #0
 800733c:	bf08      	it	eq
 800733e:	46a3      	moveq	fp, r4
 8007340:	1aeb      	subs	r3, r5, r3
 8007342:	2c10      	cmp	r4, #16
 8007344:	9806      	ldr	r0, [sp, #24]
 8007346:	4626      	mov	r6, r4
 8007348:	9307      	str	r3, [sp, #28]
 800734a:	bfa8      	it	ge
 800734c:	2610      	movge	r6, #16
 800734e:	f7f9 f849 	bl	80003e4 <__aeabi_ui2d>
 8007352:	2c09      	cmp	r4, #9
 8007354:	4680      	mov	r8, r0
 8007356:	4689      	mov	r9, r1
 8007358:	dd13      	ble.n	8007382 <_strtod_l+0x3ca>
 800735a:	4b7b      	ldr	r3, [pc, #492]	; (8007548 <_strtod_l+0x590>)
 800735c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007360:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007364:	f7f9 f8b8 	bl	80004d8 <__aeabi_dmul>
 8007368:	4680      	mov	r8, r0
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	4689      	mov	r9, r1
 800736e:	f7f9 f839 	bl	80003e4 <__aeabi_ui2d>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4640      	mov	r0, r8
 8007378:	4649      	mov	r1, r9
 800737a:	f7f8 fef7 	bl	800016c <__adddf3>
 800737e:	4680      	mov	r8, r0
 8007380:	4689      	mov	r9, r1
 8007382:	2c0f      	cmp	r4, #15
 8007384:	dc36      	bgt.n	80073f4 <_strtod_l+0x43c>
 8007386:	9b07      	ldr	r3, [sp, #28]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f43f ae56 	beq.w	800703a <_strtod_l+0x82>
 800738e:	dd22      	ble.n	80073d6 <_strtod_l+0x41e>
 8007390:	2b16      	cmp	r3, #22
 8007392:	dc09      	bgt.n	80073a8 <_strtod_l+0x3f0>
 8007394:	496c      	ldr	r1, [pc, #432]	; (8007548 <_strtod_l+0x590>)
 8007396:	4642      	mov	r2, r8
 8007398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800739c:	464b      	mov	r3, r9
 800739e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a2:	f7f9 f899 	bl	80004d8 <__aeabi_dmul>
 80073a6:	e7c3      	b.n	8007330 <_strtod_l+0x378>
 80073a8:	9a07      	ldr	r2, [sp, #28]
 80073aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80073ae:	4293      	cmp	r3, r2
 80073b0:	db20      	blt.n	80073f4 <_strtod_l+0x43c>
 80073b2:	4d65      	ldr	r5, [pc, #404]	; (8007548 <_strtod_l+0x590>)
 80073b4:	f1c4 040f 	rsb	r4, r4, #15
 80073b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80073bc:	4642      	mov	r2, r8
 80073be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073c2:	464b      	mov	r3, r9
 80073c4:	f7f9 f888 	bl	80004d8 <__aeabi_dmul>
 80073c8:	9b07      	ldr	r3, [sp, #28]
 80073ca:	1b1c      	subs	r4, r3, r4
 80073cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80073d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073d4:	e7e5      	b.n	80073a2 <_strtod_l+0x3ea>
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	3316      	adds	r3, #22
 80073da:	db0b      	blt.n	80073f4 <_strtod_l+0x43c>
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	4640      	mov	r0, r8
 80073e0:	1b5d      	subs	r5, r3, r5
 80073e2:	4b59      	ldr	r3, [pc, #356]	; (8007548 <_strtod_l+0x590>)
 80073e4:	4649      	mov	r1, r9
 80073e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80073ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073ee:	f7f9 f99d 	bl	800072c <__aeabi_ddiv>
 80073f2:	e79d      	b.n	8007330 <_strtod_l+0x378>
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	1ba6      	subs	r6, r4, r6
 80073f8:	441e      	add	r6, r3
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	dd74      	ble.n	80074e8 <_strtod_l+0x530>
 80073fe:	f016 030f 	ands.w	r3, r6, #15
 8007402:	d00a      	beq.n	800741a <_strtod_l+0x462>
 8007404:	4950      	ldr	r1, [pc, #320]	; (8007548 <_strtod_l+0x590>)
 8007406:	4642      	mov	r2, r8
 8007408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800740c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007410:	464b      	mov	r3, r9
 8007412:	f7f9 f861 	bl	80004d8 <__aeabi_dmul>
 8007416:	4680      	mov	r8, r0
 8007418:	4689      	mov	r9, r1
 800741a:	f036 060f 	bics.w	r6, r6, #15
 800741e:	d052      	beq.n	80074c6 <_strtod_l+0x50e>
 8007420:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007424:	dd27      	ble.n	8007476 <_strtod_l+0x4be>
 8007426:	f04f 0b00 	mov.w	fp, #0
 800742a:	f8cd b010 	str.w	fp, [sp, #16]
 800742e:	f8cd b020 	str.w	fp, [sp, #32]
 8007432:	f8cd b018 	str.w	fp, [sp, #24]
 8007436:	2322      	movs	r3, #34	; 0x22
 8007438:	f04f 0800 	mov.w	r8, #0
 800743c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007540 <_strtod_l+0x588>
 8007440:	f8ca 3000 	str.w	r3, [sl]
 8007444:	9b08      	ldr	r3, [sp, #32]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f43f adf7 	beq.w	800703a <_strtod_l+0x82>
 800744c:	4650      	mov	r0, sl
 800744e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007450:	f001 fe6a 	bl	8009128 <_Bfree>
 8007454:	4650      	mov	r0, sl
 8007456:	9906      	ldr	r1, [sp, #24]
 8007458:	f001 fe66 	bl	8009128 <_Bfree>
 800745c:	4650      	mov	r0, sl
 800745e:	9904      	ldr	r1, [sp, #16]
 8007460:	f001 fe62 	bl	8009128 <_Bfree>
 8007464:	4650      	mov	r0, sl
 8007466:	9908      	ldr	r1, [sp, #32]
 8007468:	f001 fe5e 	bl	8009128 <_Bfree>
 800746c:	4659      	mov	r1, fp
 800746e:	4650      	mov	r0, sl
 8007470:	f001 fe5a 	bl	8009128 <_Bfree>
 8007474:	e5e1      	b.n	800703a <_strtod_l+0x82>
 8007476:	4b35      	ldr	r3, [pc, #212]	; (800754c <_strtod_l+0x594>)
 8007478:	4640      	mov	r0, r8
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	2300      	movs	r3, #0
 800747e:	4649      	mov	r1, r9
 8007480:	461f      	mov	r7, r3
 8007482:	1136      	asrs	r6, r6, #4
 8007484:	2e01      	cmp	r6, #1
 8007486:	dc21      	bgt.n	80074cc <_strtod_l+0x514>
 8007488:	b10b      	cbz	r3, 800748e <_strtod_l+0x4d6>
 800748a:	4680      	mov	r8, r0
 800748c:	4689      	mov	r9, r1
 800748e:	4b2f      	ldr	r3, [pc, #188]	; (800754c <_strtod_l+0x594>)
 8007490:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007494:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007498:	4642      	mov	r2, r8
 800749a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800749e:	464b      	mov	r3, r9
 80074a0:	f7f9 f81a 	bl	80004d8 <__aeabi_dmul>
 80074a4:	4b26      	ldr	r3, [pc, #152]	; (8007540 <_strtod_l+0x588>)
 80074a6:	460a      	mov	r2, r1
 80074a8:	400b      	ands	r3, r1
 80074aa:	4929      	ldr	r1, [pc, #164]	; (8007550 <_strtod_l+0x598>)
 80074ac:	4680      	mov	r8, r0
 80074ae:	428b      	cmp	r3, r1
 80074b0:	d8b9      	bhi.n	8007426 <_strtod_l+0x46e>
 80074b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074b6:	428b      	cmp	r3, r1
 80074b8:	bf86      	itte	hi
 80074ba:	f04f 38ff 	movhi.w	r8, #4294967295
 80074be:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007554 <_strtod_l+0x59c>
 80074c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80074c6:	2300      	movs	r3, #0
 80074c8:	9305      	str	r3, [sp, #20]
 80074ca:	e07f      	b.n	80075cc <_strtod_l+0x614>
 80074cc:	07f2      	lsls	r2, r6, #31
 80074ce:	d505      	bpl.n	80074dc <_strtod_l+0x524>
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f7f8 ffff 	bl	80004d8 <__aeabi_dmul>
 80074da:	2301      	movs	r3, #1
 80074dc:	9a05      	ldr	r2, [sp, #20]
 80074de:	3701      	adds	r7, #1
 80074e0:	3208      	adds	r2, #8
 80074e2:	1076      	asrs	r6, r6, #1
 80074e4:	9205      	str	r2, [sp, #20]
 80074e6:	e7cd      	b.n	8007484 <_strtod_l+0x4cc>
 80074e8:	d0ed      	beq.n	80074c6 <_strtod_l+0x50e>
 80074ea:	4276      	negs	r6, r6
 80074ec:	f016 020f 	ands.w	r2, r6, #15
 80074f0:	d00a      	beq.n	8007508 <_strtod_l+0x550>
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <_strtod_l+0x590>)
 80074f4:	4640      	mov	r0, r8
 80074f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074fa:	4649      	mov	r1, r9
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f9 f914 	bl	800072c <__aeabi_ddiv>
 8007504:	4680      	mov	r8, r0
 8007506:	4689      	mov	r9, r1
 8007508:	1136      	asrs	r6, r6, #4
 800750a:	d0dc      	beq.n	80074c6 <_strtod_l+0x50e>
 800750c:	2e1f      	cmp	r6, #31
 800750e:	dd23      	ble.n	8007558 <_strtod_l+0x5a0>
 8007510:	f04f 0b00 	mov.w	fp, #0
 8007514:	f8cd b010 	str.w	fp, [sp, #16]
 8007518:	f8cd b020 	str.w	fp, [sp, #32]
 800751c:	f8cd b018 	str.w	fp, [sp, #24]
 8007520:	2322      	movs	r3, #34	; 0x22
 8007522:	f04f 0800 	mov.w	r8, #0
 8007526:	f04f 0900 	mov.w	r9, #0
 800752a:	f8ca 3000 	str.w	r3, [sl]
 800752e:	e789      	b.n	8007444 <_strtod_l+0x48c>
 8007530:	0800af3d 	.word	0x0800af3d
 8007534:	0800af80 	.word	0x0800af80
 8007538:	0800af35 	.word	0x0800af35
 800753c:	0800b0c4 	.word	0x0800b0c4
 8007540:	7ff00000 	.word	0x7ff00000
 8007544:	0800b370 	.word	0x0800b370
 8007548:	0800b250 	.word	0x0800b250
 800754c:	0800b228 	.word	0x0800b228
 8007550:	7ca00000 	.word	0x7ca00000
 8007554:	7fefffff 	.word	0x7fefffff
 8007558:	f016 0310 	ands.w	r3, r6, #16
 800755c:	bf18      	it	ne
 800755e:	236a      	movne	r3, #106	; 0x6a
 8007560:	4640      	mov	r0, r8
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	4649      	mov	r1, r9
 8007566:	2300      	movs	r3, #0
 8007568:	4fb0      	ldr	r7, [pc, #704]	; (800782c <_strtod_l+0x874>)
 800756a:	07f2      	lsls	r2, r6, #31
 800756c:	d504      	bpl.n	8007578 <_strtod_l+0x5c0>
 800756e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007572:	f7f8 ffb1 	bl	80004d8 <__aeabi_dmul>
 8007576:	2301      	movs	r3, #1
 8007578:	1076      	asrs	r6, r6, #1
 800757a:	f107 0708 	add.w	r7, r7, #8
 800757e:	d1f4      	bne.n	800756a <_strtod_l+0x5b2>
 8007580:	b10b      	cbz	r3, 8007586 <_strtod_l+0x5ce>
 8007582:	4680      	mov	r8, r0
 8007584:	4689      	mov	r9, r1
 8007586:	9b05      	ldr	r3, [sp, #20]
 8007588:	b1c3      	cbz	r3, 80075bc <_strtod_l+0x604>
 800758a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800758e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007592:	2b00      	cmp	r3, #0
 8007594:	4649      	mov	r1, r9
 8007596:	dd11      	ble.n	80075bc <_strtod_l+0x604>
 8007598:	2b1f      	cmp	r3, #31
 800759a:	f340 8127 	ble.w	80077ec <_strtod_l+0x834>
 800759e:	2b34      	cmp	r3, #52	; 0x34
 80075a0:	bfd8      	it	le
 80075a2:	f04f 33ff 	movle.w	r3, #4294967295
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	bfcf      	iteee	gt
 80075ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80075b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80075b4:	fa03 f202 	lslle.w	r2, r3, r2
 80075b8:	ea02 0901 	andle.w	r9, r2, r1
 80075bc:	2200      	movs	r2, #0
 80075be:	2300      	movs	r3, #0
 80075c0:	4640      	mov	r0, r8
 80075c2:	4649      	mov	r1, r9
 80075c4:	f7f9 f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d1a1      	bne.n	8007510 <_strtod_l+0x558>
 80075cc:	9b06      	ldr	r3, [sp, #24]
 80075ce:	465a      	mov	r2, fp
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4650      	mov	r0, sl
 80075d4:	4623      	mov	r3, r4
 80075d6:	9908      	ldr	r1, [sp, #32]
 80075d8:	f001 fe0e 	bl	80091f8 <__s2b>
 80075dc:	9008      	str	r0, [sp, #32]
 80075de:	2800      	cmp	r0, #0
 80075e0:	f43f af21 	beq.w	8007426 <_strtod_l+0x46e>
 80075e4:	9b04      	ldr	r3, [sp, #16]
 80075e6:	f04f 0b00 	mov.w	fp, #0
 80075ea:	1b5d      	subs	r5, r3, r5
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	f8cd b010 	str.w	fp, [sp, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bfb4      	ite	lt
 80075f6:	462b      	movlt	r3, r5
 80075f8:	2300      	movge	r3, #0
 80075fa:	930e      	str	r3, [sp, #56]	; 0x38
 80075fc:	9b07      	ldr	r3, [sp, #28]
 80075fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007602:	9314      	str	r3, [sp, #80]	; 0x50
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	4650      	mov	r0, sl
 8007608:	6859      	ldr	r1, [r3, #4]
 800760a:	f001 fd4d 	bl	80090a8 <_Balloc>
 800760e:	9006      	str	r0, [sp, #24]
 8007610:	2800      	cmp	r0, #0
 8007612:	f43f af10 	beq.w	8007436 <_strtod_l+0x47e>
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	300c      	adds	r0, #12
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	f103 010c 	add.w	r1, r3, #12
 8007620:	3202      	adds	r2, #2
 8007622:	0092      	lsls	r2, r2, #2
 8007624:	f7fe fdfc 	bl	8006220 <memcpy>
 8007628:	ab1c      	add	r3, sp, #112	; 0x70
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	ab1b      	add	r3, sp, #108	; 0x6c
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	4650      	mov	r0, sl
 8007636:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800763a:	f002 f91f 	bl	800987c <__d2b>
 800763e:	901a      	str	r0, [sp, #104]	; 0x68
 8007640:	2800      	cmp	r0, #0
 8007642:	f43f aef8 	beq.w	8007436 <_strtod_l+0x47e>
 8007646:	2101      	movs	r1, #1
 8007648:	4650      	mov	r0, sl
 800764a:	f001 fe6d 	bl	8009328 <__i2b>
 800764e:	4603      	mov	r3, r0
 8007650:	9004      	str	r0, [sp, #16]
 8007652:	2800      	cmp	r0, #0
 8007654:	f43f aeef 	beq.w	8007436 <_strtod_l+0x47e>
 8007658:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800765a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800765c:	2d00      	cmp	r5, #0
 800765e:	bfab      	itete	ge
 8007660:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007662:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007664:	18ee      	addge	r6, r5, r3
 8007666:	1b5c      	sublt	r4, r3, r5
 8007668:	9b05      	ldr	r3, [sp, #20]
 800766a:	bfa8      	it	ge
 800766c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800766e:	eba5 0503 	sub.w	r5, r5, r3
 8007672:	4415      	add	r5, r2
 8007674:	4b6e      	ldr	r3, [pc, #440]	; (8007830 <_strtod_l+0x878>)
 8007676:	f105 35ff 	add.w	r5, r5, #4294967295
 800767a:	bfb8      	it	lt
 800767c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800767e:	429d      	cmp	r5, r3
 8007680:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007684:	f280 80c4 	bge.w	8007810 <_strtod_l+0x858>
 8007688:	1b5b      	subs	r3, r3, r5
 800768a:	2b1f      	cmp	r3, #31
 800768c:	f04f 0701 	mov.w	r7, #1
 8007690:	eba2 0203 	sub.w	r2, r2, r3
 8007694:	f300 80b1 	bgt.w	80077fa <_strtod_l+0x842>
 8007698:	2500      	movs	r5, #0
 800769a:	fa07 f303 	lsl.w	r3, r7, r3
 800769e:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a0:	18b7      	adds	r7, r6, r2
 80076a2:	9b05      	ldr	r3, [sp, #20]
 80076a4:	42be      	cmp	r6, r7
 80076a6:	4414      	add	r4, r2
 80076a8:	441c      	add	r4, r3
 80076aa:	4633      	mov	r3, r6
 80076ac:	bfa8      	it	ge
 80076ae:	463b      	movge	r3, r7
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	bfa8      	it	ge
 80076b4:	4623      	movge	r3, r4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bfc2      	ittt	gt
 80076ba:	1aff      	subgt	r7, r7, r3
 80076bc:	1ae4      	subgt	r4, r4, r3
 80076be:	1af6      	subgt	r6, r6, r3
 80076c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd17      	ble.n	80076f6 <_strtod_l+0x73e>
 80076c6:	461a      	mov	r2, r3
 80076c8:	4650      	mov	r0, sl
 80076ca:	9904      	ldr	r1, [sp, #16]
 80076cc:	f001 feea 	bl	80094a4 <__pow5mult>
 80076d0:	9004      	str	r0, [sp, #16]
 80076d2:	2800      	cmp	r0, #0
 80076d4:	f43f aeaf 	beq.w	8007436 <_strtod_l+0x47e>
 80076d8:	4601      	mov	r1, r0
 80076da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076dc:	4650      	mov	r0, sl
 80076de:	f001 fe39 	bl	8009354 <__multiply>
 80076e2:	9009      	str	r0, [sp, #36]	; 0x24
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f43f aea6 	beq.w	8007436 <_strtod_l+0x47e>
 80076ea:	4650      	mov	r0, sl
 80076ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076ee:	f001 fd1b 	bl	8009128 <_Bfree>
 80076f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f4:	931a      	str	r3, [sp, #104]	; 0x68
 80076f6:	2f00      	cmp	r7, #0
 80076f8:	f300 808e 	bgt.w	8007818 <_strtod_l+0x860>
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dd08      	ble.n	8007714 <_strtod_l+0x75c>
 8007702:	4650      	mov	r0, sl
 8007704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007706:	9906      	ldr	r1, [sp, #24]
 8007708:	f001 fecc 	bl	80094a4 <__pow5mult>
 800770c:	9006      	str	r0, [sp, #24]
 800770e:	2800      	cmp	r0, #0
 8007710:	f43f ae91 	beq.w	8007436 <_strtod_l+0x47e>
 8007714:	2c00      	cmp	r4, #0
 8007716:	dd08      	ble.n	800772a <_strtod_l+0x772>
 8007718:	4622      	mov	r2, r4
 800771a:	4650      	mov	r0, sl
 800771c:	9906      	ldr	r1, [sp, #24]
 800771e:	f001 ff1b 	bl	8009558 <__lshift>
 8007722:	9006      	str	r0, [sp, #24]
 8007724:	2800      	cmp	r0, #0
 8007726:	f43f ae86 	beq.w	8007436 <_strtod_l+0x47e>
 800772a:	2e00      	cmp	r6, #0
 800772c:	dd08      	ble.n	8007740 <_strtod_l+0x788>
 800772e:	4632      	mov	r2, r6
 8007730:	4650      	mov	r0, sl
 8007732:	9904      	ldr	r1, [sp, #16]
 8007734:	f001 ff10 	bl	8009558 <__lshift>
 8007738:	9004      	str	r0, [sp, #16]
 800773a:	2800      	cmp	r0, #0
 800773c:	f43f ae7b 	beq.w	8007436 <_strtod_l+0x47e>
 8007740:	4650      	mov	r0, sl
 8007742:	9a06      	ldr	r2, [sp, #24]
 8007744:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007746:	f001 ff93 	bl	8009670 <__mdiff>
 800774a:	4683      	mov	fp, r0
 800774c:	2800      	cmp	r0, #0
 800774e:	f43f ae72 	beq.w	8007436 <_strtod_l+0x47e>
 8007752:	2400      	movs	r4, #0
 8007754:	68c3      	ldr	r3, [r0, #12]
 8007756:	9904      	ldr	r1, [sp, #16]
 8007758:	60c4      	str	r4, [r0, #12]
 800775a:	930b      	str	r3, [sp, #44]	; 0x2c
 800775c:	f001 ff6c 	bl	8009638 <__mcmp>
 8007760:	42a0      	cmp	r0, r4
 8007762:	da6b      	bge.n	800783c <_strtod_l+0x884>
 8007764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007766:	ea53 0308 	orrs.w	r3, r3, r8
 800776a:	f040 8091 	bne.w	8007890 <_strtod_l+0x8d8>
 800776e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007772:	2b00      	cmp	r3, #0
 8007774:	f040 808c 	bne.w	8007890 <_strtod_l+0x8d8>
 8007778:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800777c:	0d1b      	lsrs	r3, r3, #20
 800777e:	051b      	lsls	r3, r3, #20
 8007780:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007784:	f240 8084 	bls.w	8007890 <_strtod_l+0x8d8>
 8007788:	f8db 3014 	ldr.w	r3, [fp, #20]
 800778c:	b91b      	cbnz	r3, 8007796 <_strtod_l+0x7de>
 800778e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007792:	2b01      	cmp	r3, #1
 8007794:	dd7c      	ble.n	8007890 <_strtod_l+0x8d8>
 8007796:	4659      	mov	r1, fp
 8007798:	2201      	movs	r2, #1
 800779a:	4650      	mov	r0, sl
 800779c:	f001 fedc 	bl	8009558 <__lshift>
 80077a0:	9904      	ldr	r1, [sp, #16]
 80077a2:	4683      	mov	fp, r0
 80077a4:	f001 ff48 	bl	8009638 <__mcmp>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	dd71      	ble.n	8007890 <_strtod_l+0x8d8>
 80077ac:	9905      	ldr	r1, [sp, #20]
 80077ae:	464b      	mov	r3, r9
 80077b0:	4a20      	ldr	r2, [pc, #128]	; (8007834 <_strtod_l+0x87c>)
 80077b2:	2900      	cmp	r1, #0
 80077b4:	f000 808c 	beq.w	80078d0 <_strtod_l+0x918>
 80077b8:	ea02 0109 	and.w	r1, r2, r9
 80077bc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077c0:	f300 8086 	bgt.w	80078d0 <_strtod_l+0x918>
 80077c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077c8:	f77f aeaa 	ble.w	8007520 <_strtod_l+0x568>
 80077cc:	4640      	mov	r0, r8
 80077ce:	4649      	mov	r1, r9
 80077d0:	4b19      	ldr	r3, [pc, #100]	; (8007838 <_strtod_l+0x880>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 fe80 	bl	80004d8 <__aeabi_dmul>
 80077d8:	460b      	mov	r3, r1
 80077da:	4303      	orrs	r3, r0
 80077dc:	bf08      	it	eq
 80077de:	2322      	moveq	r3, #34	; 0x22
 80077e0:	4680      	mov	r8, r0
 80077e2:	4689      	mov	r9, r1
 80077e4:	bf08      	it	eq
 80077e6:	f8ca 3000 	streq.w	r3, [sl]
 80077ea:	e62f      	b.n	800744c <_strtod_l+0x494>
 80077ec:	f04f 32ff 	mov.w	r2, #4294967295
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	ea03 0808 	and.w	r8, r3, r8
 80077f8:	e6e0      	b.n	80075bc <_strtod_l+0x604>
 80077fa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80077fe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007802:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007806:	35e2      	adds	r5, #226	; 0xe2
 8007808:	fa07 f505 	lsl.w	r5, r7, r5
 800780c:	970f      	str	r7, [sp, #60]	; 0x3c
 800780e:	e747      	b.n	80076a0 <_strtod_l+0x6e8>
 8007810:	2301      	movs	r3, #1
 8007812:	2500      	movs	r5, #0
 8007814:	930f      	str	r3, [sp, #60]	; 0x3c
 8007816:	e743      	b.n	80076a0 <_strtod_l+0x6e8>
 8007818:	463a      	mov	r2, r7
 800781a:	4650      	mov	r0, sl
 800781c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800781e:	f001 fe9b 	bl	8009558 <__lshift>
 8007822:	901a      	str	r0, [sp, #104]	; 0x68
 8007824:	2800      	cmp	r0, #0
 8007826:	f47f af69 	bne.w	80076fc <_strtod_l+0x744>
 800782a:	e604      	b.n	8007436 <_strtod_l+0x47e>
 800782c:	0800af98 	.word	0x0800af98
 8007830:	fffffc02 	.word	0xfffffc02
 8007834:	7ff00000 	.word	0x7ff00000
 8007838:	39500000 	.word	0x39500000
 800783c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007840:	d165      	bne.n	800790e <_strtod_l+0x956>
 8007842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007848:	b35a      	cbz	r2, 80078a2 <_strtod_l+0x8ea>
 800784a:	4a99      	ldr	r2, [pc, #612]	; (8007ab0 <_strtod_l+0xaf8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d12b      	bne.n	80078a8 <_strtod_l+0x8f0>
 8007850:	9b05      	ldr	r3, [sp, #20]
 8007852:	4641      	mov	r1, r8
 8007854:	b303      	cbz	r3, 8007898 <_strtod_l+0x8e0>
 8007856:	464a      	mov	r2, r9
 8007858:	4b96      	ldr	r3, [pc, #600]	; (8007ab4 <_strtod_l+0xafc>)
 800785a:	4013      	ands	r3, r2
 800785c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007860:	f04f 32ff 	mov.w	r2, #4294967295
 8007864:	d81b      	bhi.n	800789e <_strtod_l+0x8e6>
 8007866:	0d1b      	lsrs	r3, r3, #20
 8007868:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	4299      	cmp	r1, r3
 8007872:	d119      	bne.n	80078a8 <_strtod_l+0x8f0>
 8007874:	4b90      	ldr	r3, [pc, #576]	; (8007ab8 <_strtod_l+0xb00>)
 8007876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007878:	429a      	cmp	r2, r3
 800787a:	d102      	bne.n	8007882 <_strtod_l+0x8ca>
 800787c:	3101      	adds	r1, #1
 800787e:	f43f adda 	beq.w	8007436 <_strtod_l+0x47e>
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	4b8b      	ldr	r3, [pc, #556]	; (8007ab4 <_strtod_l+0xafc>)
 8007888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800788a:	401a      	ands	r2, r3
 800788c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d19a      	bne.n	80077cc <_strtod_l+0x814>
 8007896:	e5d9      	b.n	800744c <_strtod_l+0x494>
 8007898:	f04f 33ff 	mov.w	r3, #4294967295
 800789c:	e7e8      	b.n	8007870 <_strtod_l+0x8b8>
 800789e:	4613      	mov	r3, r2
 80078a0:	e7e6      	b.n	8007870 <_strtod_l+0x8b8>
 80078a2:	ea53 0308 	orrs.w	r3, r3, r8
 80078a6:	d081      	beq.n	80077ac <_strtod_l+0x7f4>
 80078a8:	b1e5      	cbz	r5, 80078e4 <_strtod_l+0x92c>
 80078aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ac:	421d      	tst	r5, r3
 80078ae:	d0ef      	beq.n	8007890 <_strtod_l+0x8d8>
 80078b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b2:	4640      	mov	r0, r8
 80078b4:	4649      	mov	r1, r9
 80078b6:	9a05      	ldr	r2, [sp, #20]
 80078b8:	b1c3      	cbz	r3, 80078ec <_strtod_l+0x934>
 80078ba:	f7ff fb59 	bl	8006f70 <sulp>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078c6:	f7f8 fc51 	bl	800016c <__adddf3>
 80078ca:	4680      	mov	r8, r0
 80078cc:	4689      	mov	r9, r1
 80078ce:	e7df      	b.n	8007890 <_strtod_l+0x8d8>
 80078d0:	4013      	ands	r3, r2
 80078d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078d6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80078da:	f04f 38ff 	mov.w	r8, #4294967295
 80078de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80078e2:	e7d5      	b.n	8007890 <_strtod_l+0x8d8>
 80078e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e6:	ea13 0f08 	tst.w	r3, r8
 80078ea:	e7e0      	b.n	80078ae <_strtod_l+0x8f6>
 80078ec:	f7ff fb40 	bl	8006f70 <sulp>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078f8:	f7f8 fc36 	bl	8000168 <__aeabi_dsub>
 80078fc:	2200      	movs	r2, #0
 80078fe:	2300      	movs	r3, #0
 8007900:	4680      	mov	r8, r0
 8007902:	4689      	mov	r9, r1
 8007904:	f7f9 f850 	bl	80009a8 <__aeabi_dcmpeq>
 8007908:	2800      	cmp	r0, #0
 800790a:	d0c1      	beq.n	8007890 <_strtod_l+0x8d8>
 800790c:	e608      	b.n	8007520 <_strtod_l+0x568>
 800790e:	4658      	mov	r0, fp
 8007910:	9904      	ldr	r1, [sp, #16]
 8007912:	f002 f80f 	bl	8009934 <__ratio>
 8007916:	2200      	movs	r2, #0
 8007918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	f7f9 f856 	bl	80009d0 <__aeabi_dcmple>
 8007924:	2800      	cmp	r0, #0
 8007926:	d070      	beq.n	8007a0a <_strtod_l+0xa52>
 8007928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d042      	beq.n	80079b4 <_strtod_l+0x9fc>
 800792e:	2600      	movs	r6, #0
 8007930:	4f62      	ldr	r7, [pc, #392]	; (8007abc <_strtod_l+0xb04>)
 8007932:	4d62      	ldr	r5, [pc, #392]	; (8007abc <_strtod_l+0xb04>)
 8007934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800793a:	0d1b      	lsrs	r3, r3, #20
 800793c:	051b      	lsls	r3, r3, #20
 800793e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007942:	4b5f      	ldr	r3, [pc, #380]	; (8007ac0 <_strtod_l+0xb08>)
 8007944:	429a      	cmp	r2, r3
 8007946:	f040 80c3 	bne.w	8007ad0 <_strtod_l+0xb18>
 800794a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794c:	4640      	mov	r0, r8
 800794e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007952:	4649      	mov	r1, r9
 8007954:	f001 ff18 	bl	8009788 <__ulp>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4630      	mov	r0, r6
 800795e:	4639      	mov	r1, r7
 8007960:	f7f8 fdba 	bl	80004d8 <__aeabi_dmul>
 8007964:	4642      	mov	r2, r8
 8007966:	464b      	mov	r3, r9
 8007968:	f7f8 fc00 	bl	800016c <__adddf3>
 800796c:	460b      	mov	r3, r1
 800796e:	4951      	ldr	r1, [pc, #324]	; (8007ab4 <_strtod_l+0xafc>)
 8007970:	4a54      	ldr	r2, [pc, #336]	; (8007ac4 <_strtod_l+0xb0c>)
 8007972:	4019      	ands	r1, r3
 8007974:	4291      	cmp	r1, r2
 8007976:	4680      	mov	r8, r0
 8007978:	d95d      	bls.n	8007a36 <_strtod_l+0xa7e>
 800797a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800797c:	4b4e      	ldr	r3, [pc, #312]	; (8007ab8 <_strtod_l+0xb00>)
 800797e:	429a      	cmp	r2, r3
 8007980:	d103      	bne.n	800798a <_strtod_l+0x9d2>
 8007982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007984:	3301      	adds	r3, #1
 8007986:	f43f ad56 	beq.w	8007436 <_strtod_l+0x47e>
 800798a:	f04f 38ff 	mov.w	r8, #4294967295
 800798e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007ab8 <_strtod_l+0xb00>
 8007992:	4650      	mov	r0, sl
 8007994:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007996:	f001 fbc7 	bl	8009128 <_Bfree>
 800799a:	4650      	mov	r0, sl
 800799c:	9906      	ldr	r1, [sp, #24]
 800799e:	f001 fbc3 	bl	8009128 <_Bfree>
 80079a2:	4650      	mov	r0, sl
 80079a4:	9904      	ldr	r1, [sp, #16]
 80079a6:	f001 fbbf 	bl	8009128 <_Bfree>
 80079aa:	4659      	mov	r1, fp
 80079ac:	4650      	mov	r0, sl
 80079ae:	f001 fbbb 	bl	8009128 <_Bfree>
 80079b2:	e627      	b.n	8007604 <_strtod_l+0x64c>
 80079b4:	f1b8 0f00 	cmp.w	r8, #0
 80079b8:	d119      	bne.n	80079ee <_strtod_l+0xa36>
 80079ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c0:	b9e3      	cbnz	r3, 80079fc <_strtod_l+0xa44>
 80079c2:	2200      	movs	r2, #0
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	4b3c      	ldr	r3, [pc, #240]	; (8007abc <_strtod_l+0xb04>)
 80079ca:	f7f8 fff7 	bl	80009bc <__aeabi_dcmplt>
 80079ce:	b9c8      	cbnz	r0, 8007a04 <_strtod_l+0xa4c>
 80079d0:	2200      	movs	r2, #0
 80079d2:	4630      	mov	r0, r6
 80079d4:	4639      	mov	r1, r7
 80079d6:	4b3c      	ldr	r3, [pc, #240]	; (8007ac8 <_strtod_l+0xb10>)
 80079d8:	f7f8 fd7e 	bl	80004d8 <__aeabi_dmul>
 80079dc:	4604      	mov	r4, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80079e4:	9416      	str	r4, [sp, #88]	; 0x58
 80079e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80079e8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80079ec:	e7a2      	b.n	8007934 <_strtod_l+0x97c>
 80079ee:	f1b8 0f01 	cmp.w	r8, #1
 80079f2:	d103      	bne.n	80079fc <_strtod_l+0xa44>
 80079f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f43f ad92 	beq.w	8007520 <_strtod_l+0x568>
 80079fc:	2600      	movs	r6, #0
 80079fe:	2400      	movs	r4, #0
 8007a00:	4f32      	ldr	r7, [pc, #200]	; (8007acc <_strtod_l+0xb14>)
 8007a02:	e796      	b.n	8007932 <_strtod_l+0x97a>
 8007a04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007a06:	4d30      	ldr	r5, [pc, #192]	; (8007ac8 <_strtod_l+0xb10>)
 8007a08:	e7ea      	b.n	80079e0 <_strtod_l+0xa28>
 8007a0a:	4b2f      	ldr	r3, [pc, #188]	; (8007ac8 <_strtod_l+0xb10>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 fd61 	bl	80004d8 <__aeabi_dmul>
 8007a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a18:	4604      	mov	r4, r0
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	b933      	cbnz	r3, 8007a2c <_strtod_l+0xa74>
 8007a1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a22:	9010      	str	r0, [sp, #64]	; 0x40
 8007a24:	9311      	str	r3, [sp, #68]	; 0x44
 8007a26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a2a:	e783      	b.n	8007934 <_strtod_l+0x97c>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a34:	e7f7      	b.n	8007a26 <_strtod_l+0xa6e>
 8007a36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1a8      	bne.n	8007992 <_strtod_l+0x9da>
 8007a40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a46:	0d1b      	lsrs	r3, r3, #20
 8007a48:	051b      	lsls	r3, r3, #20
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d1a1      	bne.n	8007992 <_strtod_l+0x9da>
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f9 fb99 	bl	8001188 <__aeabi_d2lz>
 8007a56:	f7f8 fd11 	bl	800047c <__aeabi_l2d>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f8 fb81 	bl	8000168 <__aeabi_dsub>
 8007a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a6c:	ea43 0308 	orr.w	r3, r3, r8
 8007a70:	4313      	orrs	r3, r2
 8007a72:	4604      	mov	r4, r0
 8007a74:	460d      	mov	r5, r1
 8007a76:	d066      	beq.n	8007b46 <_strtod_l+0xb8e>
 8007a78:	a309      	add	r3, pc, #36	; (adr r3, 8007aa0 <_strtod_l+0xae8>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	f7f8 ff9d 	bl	80009bc <__aeabi_dcmplt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f47f ace2 	bne.w	800744c <_strtod_l+0x494>
 8007a88:	a307      	add	r3, pc, #28	; (adr r3, 8007aa8 <_strtod_l+0xaf0>)
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	4629      	mov	r1, r5
 8007a92:	f7f8 ffb1 	bl	80009f8 <__aeabi_dcmpgt>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f43f af7b 	beq.w	8007992 <_strtod_l+0x9da>
 8007a9c:	e4d6      	b.n	800744c <_strtod_l+0x494>
 8007a9e:	bf00      	nop
 8007aa0:	94a03595 	.word	0x94a03595
 8007aa4:	3fdfffff 	.word	0x3fdfffff
 8007aa8:	35afe535 	.word	0x35afe535
 8007aac:	3fe00000 	.word	0x3fe00000
 8007ab0:	000fffff 	.word	0x000fffff
 8007ab4:	7ff00000 	.word	0x7ff00000
 8007ab8:	7fefffff 	.word	0x7fefffff
 8007abc:	3ff00000 	.word	0x3ff00000
 8007ac0:	7fe00000 	.word	0x7fe00000
 8007ac4:	7c9fffff 	.word	0x7c9fffff
 8007ac8:	3fe00000 	.word	0x3fe00000
 8007acc:	bff00000 	.word	0xbff00000
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	b313      	cbz	r3, 8007b1a <_strtod_l+0xb62>
 8007ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ad6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ada:	d81e      	bhi.n	8007b1a <_strtod_l+0xb62>
 8007adc:	a326      	add	r3, pc, #152	; (adr r3, 8007b78 <_strtod_l+0xbc0>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 ff73 	bl	80009d0 <__aeabi_dcmple>
 8007aea:	b190      	cbz	r0, 8007b12 <_strtod_l+0xb5a>
 8007aec:	4629      	mov	r1, r5
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7f8 ffca 	bl	8000a88 <__aeabi_d2uiz>
 8007af4:	2801      	cmp	r0, #1
 8007af6:	bf38      	it	cc
 8007af8:	2001      	movcc	r0, #1
 8007afa:	f7f8 fc73 	bl	80003e4 <__aeabi_ui2d>
 8007afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b00:	4604      	mov	r4, r0
 8007b02:	460d      	mov	r5, r1
 8007b04:	b9d3      	cbnz	r3, 8007b3c <_strtod_l+0xb84>
 8007b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b0a:	9012      	str	r0, [sp, #72]	; 0x48
 8007b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007b12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007b18:	1a9f      	subs	r7, r3, r2
 8007b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b1e:	f001 fe33 	bl	8009788 <__ulp>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 fcd5 	bl	80004d8 <__aeabi_dmul>
 8007b2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b32:	f7f8 fb1b 	bl	800016c <__adddf3>
 8007b36:	4680      	mov	r8, r0
 8007b38:	4689      	mov	r9, r1
 8007b3a:	e77e      	b.n	8007a3a <_strtod_l+0xa82>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007b44:	e7e3      	b.n	8007b0e <_strtod_l+0xb56>
 8007b46:	a30e      	add	r3, pc, #56	; (adr r3, 8007b80 <_strtod_l+0xbc8>)
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f7f8 ff36 	bl	80009bc <__aeabi_dcmplt>
 8007b50:	e7a1      	b.n	8007a96 <_strtod_l+0xade>
 8007b52:	2300      	movs	r3, #0
 8007b54:	930a      	str	r3, [sp, #40]	; 0x28
 8007b56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	f7ff ba71 	b.w	8007042 <_strtod_l+0x8a>
 8007b60:	2a65      	cmp	r2, #101	; 0x65
 8007b62:	f43f ab63 	beq.w	800722c <_strtod_l+0x274>
 8007b66:	2a45      	cmp	r2, #69	; 0x45
 8007b68:	f43f ab60 	beq.w	800722c <_strtod_l+0x274>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f7ff bb95 	b.w	800729c <_strtod_l+0x2e4>
 8007b72:	bf00      	nop
 8007b74:	f3af 8000 	nop.w
 8007b78:	ffc00000 	.word	0xffc00000
 8007b7c:	41dfffff 	.word	0x41dfffff
 8007b80:	94a03595 	.word	0x94a03595
 8007b84:	3fcfffff 	.word	0x3fcfffff

08007b88 <_strtod_r>:
 8007b88:	4b01      	ldr	r3, [pc, #4]	; (8007b90 <_strtod_r+0x8>)
 8007b8a:	f7ff ba15 	b.w	8006fb8 <_strtod_l>
 8007b8e:	bf00      	nop
 8007b90:	200000f8 	.word	0x200000f8

08007b94 <_strtol_l.constprop.0>:
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9a:	4680      	mov	r8, r0
 8007b9c:	d001      	beq.n	8007ba2 <_strtol_l.constprop.0+0xe>
 8007b9e:	2b24      	cmp	r3, #36	; 0x24
 8007ba0:	d906      	bls.n	8007bb0 <_strtol_l.constprop.0+0x1c>
 8007ba2:	f7fe fb03 	bl	80061ac <__errno>
 8007ba6:	2316      	movs	r3, #22
 8007ba8:	6003      	str	r3, [r0, #0]
 8007baa:	2000      	movs	r0, #0
 8007bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	4f35      	ldr	r7, [pc, #212]	; (8007c88 <_strtol_l.constprop.0+0xf4>)
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bba:	5de6      	ldrb	r6, [r4, r7]
 8007bbc:	f016 0608 	ands.w	r6, r6, #8
 8007bc0:	d1f8      	bne.n	8007bb4 <_strtol_l.constprop.0+0x20>
 8007bc2:	2c2d      	cmp	r4, #45	; 0x2d
 8007bc4:	d12f      	bne.n	8007c26 <_strtol_l.constprop.0+0x92>
 8007bc6:	2601      	movs	r6, #1
 8007bc8:	782c      	ldrb	r4, [r5, #0]
 8007bca:	1c85      	adds	r5, r0, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d057      	beq.n	8007c80 <_strtol_l.constprop.0+0xec>
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	d109      	bne.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007bd4:	2c30      	cmp	r4, #48	; 0x30
 8007bd6:	d107      	bne.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007bd8:	7828      	ldrb	r0, [r5, #0]
 8007bda:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bde:	2858      	cmp	r0, #88	; 0x58
 8007be0:	d149      	bne.n	8007c76 <_strtol_l.constprop.0+0xe2>
 8007be2:	2310      	movs	r3, #16
 8007be4:	786c      	ldrb	r4, [r5, #1]
 8007be6:	3502      	adds	r5, #2
 8007be8:	2700      	movs	r7, #0
 8007bea:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007bee:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007bf2:	fbbe f9f3 	udiv	r9, lr, r3
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	fb03 ea19 	mls	sl, r3, r9, lr
 8007bfc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007c00:	f1bc 0f09 	cmp.w	ip, #9
 8007c04:	d814      	bhi.n	8007c30 <_strtol_l.constprop.0+0x9c>
 8007c06:	4664      	mov	r4, ip
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	dd22      	ble.n	8007c52 <_strtol_l.constprop.0+0xbe>
 8007c0c:	2f00      	cmp	r7, #0
 8007c0e:	db1d      	blt.n	8007c4c <_strtol_l.constprop.0+0xb8>
 8007c10:	4581      	cmp	r9, r0
 8007c12:	d31b      	bcc.n	8007c4c <_strtol_l.constprop.0+0xb8>
 8007c14:	d101      	bne.n	8007c1a <_strtol_l.constprop.0+0x86>
 8007c16:	45a2      	cmp	sl, r4
 8007c18:	db18      	blt.n	8007c4c <_strtol_l.constprop.0+0xb8>
 8007c1a:	2701      	movs	r7, #1
 8007c1c:	fb00 4003 	mla	r0, r0, r3, r4
 8007c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c24:	e7ea      	b.n	8007bfc <_strtol_l.constprop.0+0x68>
 8007c26:	2c2b      	cmp	r4, #43	; 0x2b
 8007c28:	bf04      	itt	eq
 8007c2a:	782c      	ldrbeq	r4, [r5, #0]
 8007c2c:	1c85      	addeq	r5, r0, #2
 8007c2e:	e7cd      	b.n	8007bcc <_strtol_l.constprop.0+0x38>
 8007c30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007c34:	f1bc 0f19 	cmp.w	ip, #25
 8007c38:	d801      	bhi.n	8007c3e <_strtol_l.constprop.0+0xaa>
 8007c3a:	3c37      	subs	r4, #55	; 0x37
 8007c3c:	e7e4      	b.n	8007c08 <_strtol_l.constprop.0+0x74>
 8007c3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007c42:	f1bc 0f19 	cmp.w	ip, #25
 8007c46:	d804      	bhi.n	8007c52 <_strtol_l.constprop.0+0xbe>
 8007c48:	3c57      	subs	r4, #87	; 0x57
 8007c4a:	e7dd      	b.n	8007c08 <_strtol_l.constprop.0+0x74>
 8007c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c50:	e7e6      	b.n	8007c20 <_strtol_l.constprop.0+0x8c>
 8007c52:	2f00      	cmp	r7, #0
 8007c54:	da07      	bge.n	8007c66 <_strtol_l.constprop.0+0xd2>
 8007c56:	2322      	movs	r3, #34	; 0x22
 8007c58:	4670      	mov	r0, lr
 8007c5a:	f8c8 3000 	str.w	r3, [r8]
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	d0a4      	beq.n	8007bac <_strtol_l.constprop.0+0x18>
 8007c62:	1e69      	subs	r1, r5, #1
 8007c64:	e005      	b.n	8007c72 <_strtol_l.constprop.0+0xde>
 8007c66:	b106      	cbz	r6, 8007c6a <_strtol_l.constprop.0+0xd6>
 8007c68:	4240      	negs	r0, r0
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d09e      	beq.n	8007bac <_strtol_l.constprop.0+0x18>
 8007c6e:	2f00      	cmp	r7, #0
 8007c70:	d1f7      	bne.n	8007c62 <_strtol_l.constprop.0+0xce>
 8007c72:	6011      	str	r1, [r2, #0]
 8007c74:	e79a      	b.n	8007bac <_strtol_l.constprop.0+0x18>
 8007c76:	2430      	movs	r4, #48	; 0x30
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1b5      	bne.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	e7b3      	b.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007c80:	2c30      	cmp	r4, #48	; 0x30
 8007c82:	d0a9      	beq.n	8007bd8 <_strtol_l.constprop.0+0x44>
 8007c84:	230a      	movs	r3, #10
 8007c86:	e7af      	b.n	8007be8 <_strtol_l.constprop.0+0x54>
 8007c88:	0800afc1 	.word	0x0800afc1

08007c8c <_strtol_r>:
 8007c8c:	f7ff bf82 	b.w	8007b94 <_strtol_l.constprop.0>

08007c90 <quorem>:
 8007c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	6903      	ldr	r3, [r0, #16]
 8007c96:	690c      	ldr	r4, [r1, #16]
 8007c98:	4607      	mov	r7, r0
 8007c9a:	42a3      	cmp	r3, r4
 8007c9c:	f2c0 8082 	blt.w	8007da4 <quorem+0x114>
 8007ca0:	3c01      	subs	r4, #1
 8007ca2:	f100 0514 	add.w	r5, r0, #20
 8007ca6:	f101 0814 	add.w	r8, r1, #20
 8007caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cc8:	d331      	bcc.n	8007d2e <quorem+0x9e>
 8007cca:	f04f 0e00 	mov.w	lr, #0
 8007cce:	4640      	mov	r0, r8
 8007cd0:	46ac      	mov	ip, r5
 8007cd2:	46f2      	mov	sl, lr
 8007cd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cd8:	b293      	uxth	r3, r2
 8007cda:	fb06 e303 	mla	r3, r6, r3, lr
 8007cde:	0c12      	lsrs	r2, r2, #16
 8007ce0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	fb06 e202 	mla	r2, r6, r2, lr
 8007cea:	ebaa 0303 	sub.w	r3, sl, r3
 8007cee:	f8dc a000 	ldr.w	sl, [ip]
 8007cf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cf6:	fa1f fa8a 	uxth.w	sl, sl
 8007cfa:	4453      	add	r3, sl
 8007cfc:	f8dc a000 	ldr.w	sl, [ip]
 8007d00:	b292      	uxth	r2, r2
 8007d02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d10:	4581      	cmp	r9, r0
 8007d12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d16:	f84c 3b04 	str.w	r3, [ip], #4
 8007d1a:	d2db      	bcs.n	8007cd4 <quorem+0x44>
 8007d1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d20:	b92b      	cbnz	r3, 8007d2e <quorem+0x9e>
 8007d22:	9b01      	ldr	r3, [sp, #4]
 8007d24:	3b04      	subs	r3, #4
 8007d26:	429d      	cmp	r5, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	d32f      	bcc.n	8007d8c <quorem+0xfc>
 8007d2c:	613c      	str	r4, [r7, #16]
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f001 fc82 	bl	8009638 <__mcmp>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	db25      	blt.n	8007d84 <quorem+0xf4>
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f04f 0c00 	mov.w	ip, #0
 8007d3e:	3601      	adds	r6, #1
 8007d40:	f858 1b04 	ldr.w	r1, [r8], #4
 8007d44:	f8d0 e000 	ldr.w	lr, [r0]
 8007d48:	b28b      	uxth	r3, r1
 8007d4a:	ebac 0303 	sub.w	r3, ip, r3
 8007d4e:	fa1f f28e 	uxth.w	r2, lr
 8007d52:	4413      	add	r3, r2
 8007d54:	0c0a      	lsrs	r2, r1, #16
 8007d56:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d64:	45c1      	cmp	r9, r8
 8007d66:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d6a:	f840 3b04 	str.w	r3, [r0], #4
 8007d6e:	d2e7      	bcs.n	8007d40 <quorem+0xb0>
 8007d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d78:	b922      	cbnz	r2, 8007d84 <quorem+0xf4>
 8007d7a:	3b04      	subs	r3, #4
 8007d7c:	429d      	cmp	r5, r3
 8007d7e:	461a      	mov	r2, r3
 8007d80:	d30a      	bcc.n	8007d98 <quorem+0x108>
 8007d82:	613c      	str	r4, [r7, #16]
 8007d84:	4630      	mov	r0, r6
 8007d86:	b003      	add	sp, #12
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	6812      	ldr	r2, [r2, #0]
 8007d8e:	3b04      	subs	r3, #4
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d1cb      	bne.n	8007d2c <quorem+0x9c>
 8007d94:	3c01      	subs	r4, #1
 8007d96:	e7c6      	b.n	8007d26 <quorem+0x96>
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	3b04      	subs	r3, #4
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d1f0      	bne.n	8007d82 <quorem+0xf2>
 8007da0:	3c01      	subs	r4, #1
 8007da2:	e7eb      	b.n	8007d7c <quorem+0xec>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7ee      	b.n	8007d86 <quorem+0xf6>

08007da8 <_dtoa_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	4616      	mov	r6, r2
 8007dae:	461f      	mov	r7, r3
 8007db0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007db2:	b099      	sub	sp, #100	; 0x64
 8007db4:	4605      	mov	r5, r0
 8007db6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007dba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007dbe:	b974      	cbnz	r4, 8007dde <_dtoa_r+0x36>
 8007dc0:	2010      	movs	r0, #16
 8007dc2:	f001 f949 	bl	8009058 <malloc>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6268      	str	r0, [r5, #36]	; 0x24
 8007dca:	b920      	cbnz	r0, 8007dd6 <_dtoa_r+0x2e>
 8007dcc:	21ea      	movs	r1, #234	; 0xea
 8007dce:	4ba8      	ldr	r3, [pc, #672]	; (8008070 <_dtoa_r+0x2c8>)
 8007dd0:	48a8      	ldr	r0, [pc, #672]	; (8008074 <_dtoa_r+0x2cc>)
 8007dd2:	f002 f8a5 	bl	8009f20 <__assert_func>
 8007dd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dda:	6004      	str	r4, [r0, #0]
 8007ddc:	60c4      	str	r4, [r0, #12]
 8007dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	b151      	cbz	r1, 8007dfa <_dtoa_r+0x52>
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	2301      	movs	r3, #1
 8007de8:	4093      	lsls	r3, r2
 8007dea:	604a      	str	r2, [r1, #4]
 8007dec:	608b      	str	r3, [r1, #8]
 8007dee:	4628      	mov	r0, r5
 8007df0:	f001 f99a 	bl	8009128 <_Bfree>
 8007df4:	2200      	movs	r2, #0
 8007df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	1e3b      	subs	r3, r7, #0
 8007dfc:	bfaf      	iteee	ge
 8007dfe:	2300      	movge	r3, #0
 8007e00:	2201      	movlt	r2, #1
 8007e02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e06:	9305      	strlt	r3, [sp, #20]
 8007e08:	bfa8      	it	ge
 8007e0a:	f8c8 3000 	strge.w	r3, [r8]
 8007e0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007e12:	4b99      	ldr	r3, [pc, #612]	; (8008078 <_dtoa_r+0x2d0>)
 8007e14:	bfb8      	it	lt
 8007e16:	f8c8 2000 	strlt.w	r2, [r8]
 8007e1a:	ea33 0309 	bics.w	r3, r3, r9
 8007e1e:	d119      	bne.n	8007e54 <_dtoa_r+0xac>
 8007e20:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e2c:	4333      	orrs	r3, r6
 8007e2e:	f000 857f 	beq.w	8008930 <_dtoa_r+0xb88>
 8007e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e34:	b953      	cbnz	r3, 8007e4c <_dtoa_r+0xa4>
 8007e36:	4b91      	ldr	r3, [pc, #580]	; (800807c <_dtoa_r+0x2d4>)
 8007e38:	e022      	b.n	8007e80 <_dtoa_r+0xd8>
 8007e3a:	4b91      	ldr	r3, [pc, #580]	; (8008080 <_dtoa_r+0x2d8>)
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	9803      	ldr	r0, [sp, #12]
 8007e46:	b019      	add	sp, #100	; 0x64
 8007e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4c:	4b8b      	ldr	r3, [pc, #556]	; (800807c <_dtoa_r+0x2d4>)
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	3303      	adds	r3, #3
 8007e52:	e7f5      	b.n	8007e40 <_dtoa_r+0x98>
 8007e54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007e5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e60:	2200      	movs	r2, #0
 8007e62:	2300      	movs	r3, #0
 8007e64:	f7f8 fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8007e68:	4680      	mov	r8, r0
 8007e6a:	b158      	cbz	r0, 8007e84 <_dtoa_r+0xdc>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8558 	beq.w	800892a <_dtoa_r+0xb82>
 8007e7a:	4882      	ldr	r0, [pc, #520]	; (8008084 <_dtoa_r+0x2dc>)
 8007e7c:	6018      	str	r0, [r3, #0]
 8007e7e:	1e43      	subs	r3, r0, #1
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	e7df      	b.n	8007e44 <_dtoa_r+0x9c>
 8007e84:	ab16      	add	r3, sp, #88	; 0x58
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	ab17      	add	r3, sp, #92	; 0x5c
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e92:	f001 fcf3 	bl	800987c <__d2b>
 8007e96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e9a:	4683      	mov	fp, r0
 8007e9c:	2c00      	cmp	r4, #0
 8007e9e:	d07f      	beq.n	8007fa0 <_dtoa_r+0x1f8>
 8007ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007eb2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007eb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4b72      	ldr	r3, [pc, #456]	; (8008088 <_dtoa_r+0x2e0>)
 8007ebe:	f7f8 f953 	bl	8000168 <__aeabi_dsub>
 8007ec2:	a365      	add	r3, pc, #404	; (adr r3, 8008058 <_dtoa_r+0x2b0>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 fb06 	bl	80004d8 <__aeabi_dmul>
 8007ecc:	a364      	add	r3, pc, #400	; (adr r3, 8008060 <_dtoa_r+0x2b8>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f7f8 f94b 	bl	800016c <__adddf3>
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	4620      	mov	r0, r4
 8007eda:	460f      	mov	r7, r1
 8007edc:	f7f8 fa92 	bl	8000404 <__aeabi_i2d>
 8007ee0:	a361      	add	r3, pc, #388	; (adr r3, 8008068 <_dtoa_r+0x2c0>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 faf7 	bl	80004d8 <__aeabi_dmul>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 f93b 	bl	800016c <__adddf3>
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460f      	mov	r7, r1
 8007efa:	f7f8 fd9d 	bl	8000a38 <__aeabi_d2iz>
 8007efe:	2200      	movs	r2, #0
 8007f00:	4682      	mov	sl, r0
 8007f02:	2300      	movs	r3, #0
 8007f04:	4630      	mov	r0, r6
 8007f06:	4639      	mov	r1, r7
 8007f08:	f7f8 fd58 	bl	80009bc <__aeabi_dcmplt>
 8007f0c:	b148      	cbz	r0, 8007f22 <_dtoa_r+0x17a>
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f7f8 fa78 	bl	8000404 <__aeabi_i2d>
 8007f14:	4632      	mov	r2, r6
 8007f16:	463b      	mov	r3, r7
 8007f18:	f7f8 fd46 	bl	80009a8 <__aeabi_dcmpeq>
 8007f1c:	b908      	cbnz	r0, 8007f22 <_dtoa_r+0x17a>
 8007f1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f22:	f1ba 0f16 	cmp.w	sl, #22
 8007f26:	d858      	bhi.n	8007fda <_dtoa_r+0x232>
 8007f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f2c:	4b57      	ldr	r3, [pc, #348]	; (800808c <_dtoa_r+0x2e4>)
 8007f2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 fd41 	bl	80009bc <__aeabi_dcmplt>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d04f      	beq.n	8007fde <_dtoa_r+0x236>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f48:	1b1c      	subs	r4, r3, r4
 8007f4a:	1e63      	subs	r3, r4, #1
 8007f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4e:	bf49      	itett	mi
 8007f50:	f1c4 0301 	rsbmi	r3, r4, #1
 8007f54:	2300      	movpl	r3, #0
 8007f56:	9306      	strmi	r3, [sp, #24]
 8007f58:	2300      	movmi	r3, #0
 8007f5a:	bf54      	ite	pl
 8007f5c:	9306      	strpl	r3, [sp, #24]
 8007f5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007f60:	f1ba 0f00 	cmp.w	sl, #0
 8007f64:	db3d      	blt.n	8007fe2 <_dtoa_r+0x23a>
 8007f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f68:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f6c:	4453      	add	r3, sl
 8007f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f70:	2300      	movs	r3, #0
 8007f72:	930a      	str	r3, [sp, #40]	; 0x28
 8007f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	f200 808c 	bhi.w	8008094 <_dtoa_r+0x2ec>
 8007f7c:	2b05      	cmp	r3, #5
 8007f7e:	bfc4      	itt	gt
 8007f80:	3b04      	subgt	r3, #4
 8007f82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f86:	bfc8      	it	gt
 8007f88:	2400      	movgt	r4, #0
 8007f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f8e:	bfd8      	it	le
 8007f90:	2401      	movle	r4, #1
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	f200 808a 	bhi.w	80080ac <_dtoa_r+0x304>
 8007f98:	e8df f003 	tbb	[pc, r3]
 8007f9c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007fa0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007fa4:	441c      	add	r4, r3
 8007fa6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	bfc3      	ittte	gt
 8007fae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fb2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007fb6:	fa09 f303 	lslgt.w	r3, r9, r3
 8007fba:	f1c3 0320 	rsble	r3, r3, #32
 8007fbe:	bfc6      	itte	gt
 8007fc0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007fc4:	4318      	orrgt	r0, r3
 8007fc6:	fa06 f003 	lslle.w	r0, r6, r3
 8007fca:	f7f8 fa0b 	bl	80003e4 <__aeabi_ui2d>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007fd4:	3c01      	subs	r4, #1
 8007fd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fd8:	e76f      	b.n	8007eba <_dtoa_r+0x112>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e7b2      	b.n	8007f44 <_dtoa_r+0x19c>
 8007fde:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fe0:	e7b1      	b.n	8007f46 <_dtoa_r+0x19e>
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	eba3 030a 	sub.w	r3, r3, sl
 8007fe8:	9306      	str	r3, [sp, #24]
 8007fea:	f1ca 0300 	rsb	r3, sl, #0
 8007fee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8007ff4:	e7be      	b.n	8007f74 <_dtoa_r+0x1cc>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dc58      	bgt.n	80080b2 <_dtoa_r+0x30a>
 8008000:	f04f 0901 	mov.w	r9, #1
 8008004:	464b      	mov	r3, r9
 8008006:	f8cd 9020 	str.w	r9, [sp, #32]
 800800a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800800e:	2200      	movs	r2, #0
 8008010:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008012:	6042      	str	r2, [r0, #4]
 8008014:	2204      	movs	r2, #4
 8008016:	f102 0614 	add.w	r6, r2, #20
 800801a:	429e      	cmp	r6, r3
 800801c:	6841      	ldr	r1, [r0, #4]
 800801e:	d94e      	bls.n	80080be <_dtoa_r+0x316>
 8008020:	4628      	mov	r0, r5
 8008022:	f001 f841 	bl	80090a8 <_Balloc>
 8008026:	9003      	str	r0, [sp, #12]
 8008028:	2800      	cmp	r0, #0
 800802a:	d14c      	bne.n	80080c6 <_dtoa_r+0x31e>
 800802c:	4602      	mov	r2, r0
 800802e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008032:	4b17      	ldr	r3, [pc, #92]	; (8008090 <_dtoa_r+0x2e8>)
 8008034:	e6cc      	b.n	8007dd0 <_dtoa_r+0x28>
 8008036:	2301      	movs	r3, #1
 8008038:	e7de      	b.n	8007ff8 <_dtoa_r+0x250>
 800803a:	2300      	movs	r3, #0
 800803c:	930b      	str	r3, [sp, #44]	; 0x2c
 800803e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008040:	eb0a 0903 	add.w	r9, sl, r3
 8008044:	f109 0301 	add.w	r3, r9, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	bfb8      	it	lt
 800804e:	2301      	movlt	r3, #1
 8008050:	e7dd      	b.n	800800e <_dtoa_r+0x266>
 8008052:	2301      	movs	r3, #1
 8008054:	e7f2      	b.n	800803c <_dtoa_r+0x294>
 8008056:	bf00      	nop
 8008058:	636f4361 	.word	0x636f4361
 800805c:	3fd287a7 	.word	0x3fd287a7
 8008060:	8b60c8b3 	.word	0x8b60c8b3
 8008064:	3fc68a28 	.word	0x3fc68a28
 8008068:	509f79fb 	.word	0x509f79fb
 800806c:	3fd34413 	.word	0x3fd34413
 8008070:	0800b0ce 	.word	0x0800b0ce
 8008074:	0800b0e5 	.word	0x0800b0e5
 8008078:	7ff00000 	.word	0x7ff00000
 800807c:	0800b0ca 	.word	0x0800b0ca
 8008080:	0800b0c1 	.word	0x0800b0c1
 8008084:	0800af41 	.word	0x0800af41
 8008088:	3ff80000 	.word	0x3ff80000
 800808c:	0800b250 	.word	0x0800b250
 8008090:	0800b140 	.word	0x0800b140
 8008094:	2401      	movs	r4, #1
 8008096:	2300      	movs	r3, #0
 8008098:	940b      	str	r4, [sp, #44]	; 0x2c
 800809a:	9322      	str	r3, [sp, #136]	; 0x88
 800809c:	f04f 39ff 	mov.w	r9, #4294967295
 80080a0:	2200      	movs	r2, #0
 80080a2:	2312      	movs	r3, #18
 80080a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80080a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80080aa:	e7b0      	b.n	800800e <_dtoa_r+0x266>
 80080ac:	2301      	movs	r3, #1
 80080ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80080b0:	e7f4      	b.n	800809c <_dtoa_r+0x2f4>
 80080b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80080b6:	464b      	mov	r3, r9
 80080b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80080bc:	e7a7      	b.n	800800e <_dtoa_r+0x266>
 80080be:	3101      	adds	r1, #1
 80080c0:	6041      	str	r1, [r0, #4]
 80080c2:	0052      	lsls	r2, r2, #1
 80080c4:	e7a7      	b.n	8008016 <_dtoa_r+0x26e>
 80080c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080c8:	9a03      	ldr	r2, [sp, #12]
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	2b0e      	cmp	r3, #14
 80080d0:	f200 80a8 	bhi.w	8008224 <_dtoa_r+0x47c>
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	f000 80a5 	beq.w	8008224 <_dtoa_r+0x47c>
 80080da:	f1ba 0f00 	cmp.w	sl, #0
 80080de:	dd34      	ble.n	800814a <_dtoa_r+0x3a2>
 80080e0:	4a9a      	ldr	r2, [pc, #616]	; (800834c <_dtoa_r+0x5a4>)
 80080e2:	f00a 030f 	and.w	r3, sl, #15
 80080e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80080ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80080f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80080fa:	d016      	beq.n	800812a <_dtoa_r+0x382>
 80080fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008100:	4b93      	ldr	r3, [pc, #588]	; (8008350 <_dtoa_r+0x5a8>)
 8008102:	2703      	movs	r7, #3
 8008104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008108:	f7f8 fb10 	bl	800072c <__aeabi_ddiv>
 800810c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008110:	f004 040f 	and.w	r4, r4, #15
 8008114:	4e8e      	ldr	r6, [pc, #568]	; (8008350 <_dtoa_r+0x5a8>)
 8008116:	b954      	cbnz	r4, 800812e <_dtoa_r+0x386>
 8008118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800811c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008120:	f7f8 fb04 	bl	800072c <__aeabi_ddiv>
 8008124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008128:	e029      	b.n	800817e <_dtoa_r+0x3d6>
 800812a:	2702      	movs	r7, #2
 800812c:	e7f2      	b.n	8008114 <_dtoa_r+0x36c>
 800812e:	07e1      	lsls	r1, r4, #31
 8008130:	d508      	bpl.n	8008144 <_dtoa_r+0x39c>
 8008132:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008136:	e9d6 2300 	ldrd	r2, r3, [r6]
 800813a:	f7f8 f9cd 	bl	80004d8 <__aeabi_dmul>
 800813e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008142:	3701      	adds	r7, #1
 8008144:	1064      	asrs	r4, r4, #1
 8008146:	3608      	adds	r6, #8
 8008148:	e7e5      	b.n	8008116 <_dtoa_r+0x36e>
 800814a:	f000 80a5 	beq.w	8008298 <_dtoa_r+0x4f0>
 800814e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008152:	f1ca 0400 	rsb	r4, sl, #0
 8008156:	4b7d      	ldr	r3, [pc, #500]	; (800834c <_dtoa_r+0x5a4>)
 8008158:	f004 020f 	and.w	r2, r4, #15
 800815c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f7f8 f9b8 	bl	80004d8 <__aeabi_dmul>
 8008168:	2702      	movs	r7, #2
 800816a:	2300      	movs	r3, #0
 800816c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008170:	4e77      	ldr	r6, [pc, #476]	; (8008350 <_dtoa_r+0x5a8>)
 8008172:	1124      	asrs	r4, r4, #4
 8008174:	2c00      	cmp	r4, #0
 8008176:	f040 8084 	bne.w	8008282 <_dtoa_r+0x4da>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1d2      	bne.n	8008124 <_dtoa_r+0x37c>
 800817e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 808b 	beq.w	800829c <_dtoa_r+0x4f4>
 8008186:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800818a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800818e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008192:	2200      	movs	r2, #0
 8008194:	4b6f      	ldr	r3, [pc, #444]	; (8008354 <_dtoa_r+0x5ac>)
 8008196:	f7f8 fc11 	bl	80009bc <__aeabi_dcmplt>
 800819a:	2800      	cmp	r0, #0
 800819c:	d07e      	beq.n	800829c <_dtoa_r+0x4f4>
 800819e:	9b08      	ldr	r3, [sp, #32]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d07b      	beq.n	800829c <_dtoa_r+0x4f4>
 80081a4:	f1b9 0f00 	cmp.w	r9, #0
 80081a8:	dd38      	ble.n	800821c <_dtoa_r+0x474>
 80081aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081ae:	2200      	movs	r2, #0
 80081b0:	4b69      	ldr	r3, [pc, #420]	; (8008358 <_dtoa_r+0x5b0>)
 80081b2:	f7f8 f991 	bl	80004d8 <__aeabi_dmul>
 80081b6:	464c      	mov	r4, r9
 80081b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081bc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80081c0:	3701      	adds	r7, #1
 80081c2:	4638      	mov	r0, r7
 80081c4:	f7f8 f91e 	bl	8000404 <__aeabi_i2d>
 80081c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081cc:	f7f8 f984 	bl	80004d8 <__aeabi_dmul>
 80081d0:	2200      	movs	r2, #0
 80081d2:	4b62      	ldr	r3, [pc, #392]	; (800835c <_dtoa_r+0x5b4>)
 80081d4:	f7f7 ffca 	bl	800016c <__adddf3>
 80081d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081e0:	9611      	str	r6, [sp, #68]	; 0x44
 80081e2:	2c00      	cmp	r4, #0
 80081e4:	d15d      	bne.n	80082a2 <_dtoa_r+0x4fa>
 80081e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	4b5c      	ldr	r3, [pc, #368]	; (8008360 <_dtoa_r+0x5b8>)
 80081ee:	f7f7 ffbb 	bl	8000168 <__aeabi_dsub>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081fa:	4633      	mov	r3, r6
 80081fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081fe:	f7f8 fbfb 	bl	80009f8 <__aeabi_dcmpgt>
 8008202:	2800      	cmp	r0, #0
 8008204:	f040 829c 	bne.w	8008740 <_dtoa_r+0x998>
 8008208:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800820c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800820e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008212:	f7f8 fbd3 	bl	80009bc <__aeabi_dcmplt>
 8008216:	2800      	cmp	r0, #0
 8008218:	f040 8290 	bne.w	800873c <_dtoa_r+0x994>
 800821c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008220:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008226:	2b00      	cmp	r3, #0
 8008228:	f2c0 8152 	blt.w	80084d0 <_dtoa_r+0x728>
 800822c:	f1ba 0f0e 	cmp.w	sl, #14
 8008230:	f300 814e 	bgt.w	80084d0 <_dtoa_r+0x728>
 8008234:	4b45      	ldr	r3, [pc, #276]	; (800834c <_dtoa_r+0x5a4>)
 8008236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800823a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800823e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008242:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008244:	2b00      	cmp	r3, #0
 8008246:	f280 80db 	bge.w	8008400 <_dtoa_r+0x658>
 800824a:	9b08      	ldr	r3, [sp, #32]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f300 80d7 	bgt.w	8008400 <_dtoa_r+0x658>
 8008252:	f040 8272 	bne.w	800873a <_dtoa_r+0x992>
 8008256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800825a:	2200      	movs	r2, #0
 800825c:	4b40      	ldr	r3, [pc, #256]	; (8008360 <_dtoa_r+0x5b8>)
 800825e:	f7f8 f93b 	bl	80004d8 <__aeabi_dmul>
 8008262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008266:	f7f8 fbbd 	bl	80009e4 <__aeabi_dcmpge>
 800826a:	9c08      	ldr	r4, [sp, #32]
 800826c:	4626      	mov	r6, r4
 800826e:	2800      	cmp	r0, #0
 8008270:	f040 8248 	bne.w	8008704 <_dtoa_r+0x95c>
 8008274:	2331      	movs	r3, #49	; 0x31
 8008276:	9f03      	ldr	r7, [sp, #12]
 8008278:	f10a 0a01 	add.w	sl, sl, #1
 800827c:	f807 3b01 	strb.w	r3, [r7], #1
 8008280:	e244      	b.n	800870c <_dtoa_r+0x964>
 8008282:	07e2      	lsls	r2, r4, #31
 8008284:	d505      	bpl.n	8008292 <_dtoa_r+0x4ea>
 8008286:	e9d6 2300 	ldrd	r2, r3, [r6]
 800828a:	f7f8 f925 	bl	80004d8 <__aeabi_dmul>
 800828e:	2301      	movs	r3, #1
 8008290:	3701      	adds	r7, #1
 8008292:	1064      	asrs	r4, r4, #1
 8008294:	3608      	adds	r6, #8
 8008296:	e76d      	b.n	8008174 <_dtoa_r+0x3cc>
 8008298:	2702      	movs	r7, #2
 800829a:	e770      	b.n	800817e <_dtoa_r+0x3d6>
 800829c:	46d0      	mov	r8, sl
 800829e:	9c08      	ldr	r4, [sp, #32]
 80082a0:	e78f      	b.n	80081c2 <_dtoa_r+0x41a>
 80082a2:	9903      	ldr	r1, [sp, #12]
 80082a4:	4b29      	ldr	r3, [pc, #164]	; (800834c <_dtoa_r+0x5a4>)
 80082a6:	4421      	add	r1, r4
 80082a8:	9112      	str	r1, [sp, #72]	; 0x48
 80082aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d055      	beq.n	8008368 <_dtoa_r+0x5c0>
 80082bc:	2000      	movs	r0, #0
 80082be:	4929      	ldr	r1, [pc, #164]	; (8008364 <_dtoa_r+0x5bc>)
 80082c0:	f7f8 fa34 	bl	800072c <__aeabi_ddiv>
 80082c4:	463b      	mov	r3, r7
 80082c6:	4632      	mov	r2, r6
 80082c8:	f7f7 ff4e 	bl	8000168 <__aeabi_dsub>
 80082cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082d0:	9f03      	ldr	r7, [sp, #12]
 80082d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082d6:	f7f8 fbaf 	bl	8000a38 <__aeabi_d2iz>
 80082da:	4604      	mov	r4, r0
 80082dc:	f7f8 f892 	bl	8000404 <__aeabi_i2d>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e8:	f7f7 ff3e 	bl	8000168 <__aeabi_dsub>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	3430      	adds	r4, #48	; 0x30
 80082f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082fa:	f807 4b01 	strb.w	r4, [r7], #1
 80082fe:	f7f8 fb5d 	bl	80009bc <__aeabi_dcmplt>
 8008302:	2800      	cmp	r0, #0
 8008304:	d174      	bne.n	80083f0 <_dtoa_r+0x648>
 8008306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830a:	2000      	movs	r0, #0
 800830c:	4911      	ldr	r1, [pc, #68]	; (8008354 <_dtoa_r+0x5ac>)
 800830e:	f7f7 ff2b 	bl	8000168 <__aeabi_dsub>
 8008312:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008316:	f7f8 fb51 	bl	80009bc <__aeabi_dcmplt>
 800831a:	2800      	cmp	r0, #0
 800831c:	f040 80b7 	bne.w	800848e <_dtoa_r+0x6e6>
 8008320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008322:	429f      	cmp	r7, r3
 8008324:	f43f af7a 	beq.w	800821c <_dtoa_r+0x474>
 8008328:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800832c:	2200      	movs	r2, #0
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <_dtoa_r+0x5b0>)
 8008330:	f7f8 f8d2 	bl	80004d8 <__aeabi_dmul>
 8008334:	2200      	movs	r2, #0
 8008336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800833a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800833e:	4b06      	ldr	r3, [pc, #24]	; (8008358 <_dtoa_r+0x5b0>)
 8008340:	f7f8 f8ca 	bl	80004d8 <__aeabi_dmul>
 8008344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008348:	e7c3      	b.n	80082d2 <_dtoa_r+0x52a>
 800834a:	bf00      	nop
 800834c:	0800b250 	.word	0x0800b250
 8008350:	0800b228 	.word	0x0800b228
 8008354:	3ff00000 	.word	0x3ff00000
 8008358:	40240000 	.word	0x40240000
 800835c:	401c0000 	.word	0x401c0000
 8008360:	40140000 	.word	0x40140000
 8008364:	3fe00000 	.word	0x3fe00000
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 f8b4 	bl	80004d8 <__aeabi_dmul>
 8008370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008372:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008376:	9c03      	ldr	r4, [sp, #12]
 8008378:	9314      	str	r3, [sp, #80]	; 0x50
 800837a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800837e:	f7f8 fb5b 	bl	8000a38 <__aeabi_d2iz>
 8008382:	9015      	str	r0, [sp, #84]	; 0x54
 8008384:	f7f8 f83e 	bl	8000404 <__aeabi_i2d>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008390:	f7f7 feea 	bl	8000168 <__aeabi_dsub>
 8008394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008396:	4606      	mov	r6, r0
 8008398:	3330      	adds	r3, #48	; 0x30
 800839a:	f804 3b01 	strb.w	r3, [r4], #1
 800839e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083a0:	460f      	mov	r7, r1
 80083a2:	429c      	cmp	r4, r3
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	d124      	bne.n	80083f4 <_dtoa_r+0x64c>
 80083aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083ae:	4bb0      	ldr	r3, [pc, #704]	; (8008670 <_dtoa_r+0x8c8>)
 80083b0:	f7f7 fedc 	bl	800016c <__adddf3>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 fb1c 	bl	80009f8 <__aeabi_dcmpgt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d163      	bne.n	800848c <_dtoa_r+0x6e4>
 80083c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083c8:	2000      	movs	r0, #0
 80083ca:	49a9      	ldr	r1, [pc, #676]	; (8008670 <_dtoa_r+0x8c8>)
 80083cc:	f7f7 fecc 	bl	8000168 <__aeabi_dsub>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f8 faf0 	bl	80009bc <__aeabi_dcmplt>
 80083dc:	2800      	cmp	r0, #0
 80083de:	f43f af1d 	beq.w	800821c <_dtoa_r+0x474>
 80083e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80083e4:	1e7b      	subs	r3, r7, #1
 80083e6:	9314      	str	r3, [sp, #80]	; 0x50
 80083e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80083ec:	2b30      	cmp	r3, #48	; 0x30
 80083ee:	d0f8      	beq.n	80083e2 <_dtoa_r+0x63a>
 80083f0:	46c2      	mov	sl, r8
 80083f2:	e03b      	b.n	800846c <_dtoa_r+0x6c4>
 80083f4:	4b9f      	ldr	r3, [pc, #636]	; (8008674 <_dtoa_r+0x8cc>)
 80083f6:	f7f8 f86f 	bl	80004d8 <__aeabi_dmul>
 80083fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083fe:	e7bc      	b.n	800837a <_dtoa_r+0x5d2>
 8008400:	9f03      	ldr	r7, [sp, #12]
 8008402:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f8 f98d 	bl	800072c <__aeabi_ddiv>
 8008412:	f7f8 fb11 	bl	8000a38 <__aeabi_d2iz>
 8008416:	4604      	mov	r4, r0
 8008418:	f7f7 fff4 	bl	8000404 <__aeabi_i2d>
 800841c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008420:	f7f8 f85a 	bl	80004d8 <__aeabi_dmul>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4640      	mov	r0, r8
 800842a:	4649      	mov	r1, r9
 800842c:	f7f7 fe9c 	bl	8000168 <__aeabi_dsub>
 8008430:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008434:	f807 6b01 	strb.w	r6, [r7], #1
 8008438:	9e03      	ldr	r6, [sp, #12]
 800843a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800843e:	1bbe      	subs	r6, r7, r6
 8008440:	45b4      	cmp	ip, r6
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	d136      	bne.n	80084b6 <_dtoa_r+0x70e>
 8008448:	f7f7 fe90 	bl	800016c <__adddf3>
 800844c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008450:	4680      	mov	r8, r0
 8008452:	4689      	mov	r9, r1
 8008454:	f7f8 fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8008458:	bb58      	cbnz	r0, 80084b2 <_dtoa_r+0x70a>
 800845a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800845e:	4640      	mov	r0, r8
 8008460:	4649      	mov	r1, r9
 8008462:	f7f8 faa1 	bl	80009a8 <__aeabi_dcmpeq>
 8008466:	b108      	cbz	r0, 800846c <_dtoa_r+0x6c4>
 8008468:	07e1      	lsls	r1, r4, #31
 800846a:	d422      	bmi.n	80084b2 <_dtoa_r+0x70a>
 800846c:	4628      	mov	r0, r5
 800846e:	4659      	mov	r1, fp
 8008470:	f000 fe5a 	bl	8009128 <_Bfree>
 8008474:	2300      	movs	r3, #0
 8008476:	703b      	strb	r3, [r7, #0]
 8008478:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800847a:	f10a 0001 	add.w	r0, sl, #1
 800847e:	6018      	str	r0, [r3, #0]
 8008480:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008482:	2b00      	cmp	r3, #0
 8008484:	f43f acde 	beq.w	8007e44 <_dtoa_r+0x9c>
 8008488:	601f      	str	r7, [r3, #0]
 800848a:	e4db      	b.n	8007e44 <_dtoa_r+0x9c>
 800848c:	4627      	mov	r7, r4
 800848e:	463b      	mov	r3, r7
 8008490:	461f      	mov	r7, r3
 8008492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008496:	2a39      	cmp	r2, #57	; 0x39
 8008498:	d107      	bne.n	80084aa <_dtoa_r+0x702>
 800849a:	9a03      	ldr	r2, [sp, #12]
 800849c:	429a      	cmp	r2, r3
 800849e:	d1f7      	bne.n	8008490 <_dtoa_r+0x6e8>
 80084a0:	2230      	movs	r2, #48	; 0x30
 80084a2:	9903      	ldr	r1, [sp, #12]
 80084a4:	f108 0801 	add.w	r8, r8, #1
 80084a8:	700a      	strb	r2, [r1, #0]
 80084aa:	781a      	ldrb	r2, [r3, #0]
 80084ac:	3201      	adds	r2, #1
 80084ae:	701a      	strb	r2, [r3, #0]
 80084b0:	e79e      	b.n	80083f0 <_dtoa_r+0x648>
 80084b2:	46d0      	mov	r8, sl
 80084b4:	e7eb      	b.n	800848e <_dtoa_r+0x6e6>
 80084b6:	2200      	movs	r2, #0
 80084b8:	4b6e      	ldr	r3, [pc, #440]	; (8008674 <_dtoa_r+0x8cc>)
 80084ba:	f7f8 f80d 	bl	80004d8 <__aeabi_dmul>
 80084be:	2200      	movs	r2, #0
 80084c0:	2300      	movs	r3, #0
 80084c2:	4680      	mov	r8, r0
 80084c4:	4689      	mov	r9, r1
 80084c6:	f7f8 fa6f 	bl	80009a8 <__aeabi_dcmpeq>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d09b      	beq.n	8008406 <_dtoa_r+0x65e>
 80084ce:	e7cd      	b.n	800846c <_dtoa_r+0x6c4>
 80084d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	f000 80d0 	beq.w	8008678 <_dtoa_r+0x8d0>
 80084d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084da:	2a01      	cmp	r2, #1
 80084dc:	f300 80ae 	bgt.w	800863c <_dtoa_r+0x894>
 80084e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	f000 80a6 	beq.w	8008634 <_dtoa_r+0x88c>
 80084e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084ee:	9f06      	ldr	r7, [sp, #24]
 80084f0:	9a06      	ldr	r2, [sp, #24]
 80084f2:	2101      	movs	r1, #1
 80084f4:	441a      	add	r2, r3
 80084f6:	9206      	str	r2, [sp, #24]
 80084f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084fa:	4628      	mov	r0, r5
 80084fc:	441a      	add	r2, r3
 80084fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008500:	f000 ff12 	bl	8009328 <__i2b>
 8008504:	4606      	mov	r6, r0
 8008506:	2f00      	cmp	r7, #0
 8008508:	dd0c      	ble.n	8008524 <_dtoa_r+0x77c>
 800850a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	dd09      	ble.n	8008524 <_dtoa_r+0x77c>
 8008510:	42bb      	cmp	r3, r7
 8008512:	bfa8      	it	ge
 8008514:	463b      	movge	r3, r7
 8008516:	9a06      	ldr	r2, [sp, #24]
 8008518:	1aff      	subs	r7, r7, r3
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	9206      	str	r2, [sp, #24]
 800851e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	9309      	str	r3, [sp, #36]	; 0x24
 8008524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008526:	b1f3      	cbz	r3, 8008566 <_dtoa_r+0x7be>
 8008528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80a8 	beq.w	8008680 <_dtoa_r+0x8d8>
 8008530:	2c00      	cmp	r4, #0
 8008532:	dd10      	ble.n	8008556 <_dtoa_r+0x7ae>
 8008534:	4631      	mov	r1, r6
 8008536:	4622      	mov	r2, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f000 ffb3 	bl	80094a4 <__pow5mult>
 800853e:	465a      	mov	r2, fp
 8008540:	4601      	mov	r1, r0
 8008542:	4606      	mov	r6, r0
 8008544:	4628      	mov	r0, r5
 8008546:	f000 ff05 	bl	8009354 <__multiply>
 800854a:	4680      	mov	r8, r0
 800854c:	4659      	mov	r1, fp
 800854e:	4628      	mov	r0, r5
 8008550:	f000 fdea 	bl	8009128 <_Bfree>
 8008554:	46c3      	mov	fp, r8
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	1b1a      	subs	r2, r3, r4
 800855a:	d004      	beq.n	8008566 <_dtoa_r+0x7be>
 800855c:	4659      	mov	r1, fp
 800855e:	4628      	mov	r0, r5
 8008560:	f000 ffa0 	bl	80094a4 <__pow5mult>
 8008564:	4683      	mov	fp, r0
 8008566:	2101      	movs	r1, #1
 8008568:	4628      	mov	r0, r5
 800856a:	f000 fedd 	bl	8009328 <__i2b>
 800856e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008570:	4604      	mov	r4, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	f340 8086 	ble.w	8008684 <_dtoa_r+0x8dc>
 8008578:	461a      	mov	r2, r3
 800857a:	4601      	mov	r1, r0
 800857c:	4628      	mov	r0, r5
 800857e:	f000 ff91 	bl	80094a4 <__pow5mult>
 8008582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008584:	4604      	mov	r4, r0
 8008586:	2b01      	cmp	r3, #1
 8008588:	dd7f      	ble.n	800868a <_dtoa_r+0x8e2>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008594:	6918      	ldr	r0, [r3, #16]
 8008596:	f000 fe79 	bl	800928c <__hi0bits>
 800859a:	f1c0 0020 	rsb	r0, r0, #32
 800859e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a0:	4418      	add	r0, r3
 80085a2:	f010 001f 	ands.w	r0, r0, #31
 80085a6:	f000 8092 	beq.w	80086ce <_dtoa_r+0x926>
 80085aa:	f1c0 0320 	rsb	r3, r0, #32
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	f340 808a 	ble.w	80086c8 <_dtoa_r+0x920>
 80085b4:	f1c0 001c 	rsb	r0, r0, #28
 80085b8:	9b06      	ldr	r3, [sp, #24]
 80085ba:	4407      	add	r7, r0
 80085bc:	4403      	add	r3, r0
 80085be:	9306      	str	r3, [sp, #24]
 80085c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c2:	4403      	add	r3, r0
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	9b06      	ldr	r3, [sp, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dd05      	ble.n	80085d8 <_dtoa_r+0x830>
 80085cc:	4659      	mov	r1, fp
 80085ce:	461a      	mov	r2, r3
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 ffc1 	bl	8009558 <__lshift>
 80085d6:	4683      	mov	fp, r0
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dd05      	ble.n	80085ea <_dtoa_r+0x842>
 80085de:	4621      	mov	r1, r4
 80085e0:	461a      	mov	r2, r3
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 ffb8 	bl	8009558 <__lshift>
 80085e8:	4604      	mov	r4, r0
 80085ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d070      	beq.n	80086d2 <_dtoa_r+0x92a>
 80085f0:	4621      	mov	r1, r4
 80085f2:	4658      	mov	r0, fp
 80085f4:	f001 f820 	bl	8009638 <__mcmp>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	da6a      	bge.n	80086d2 <_dtoa_r+0x92a>
 80085fc:	2300      	movs	r3, #0
 80085fe:	4659      	mov	r1, fp
 8008600:	220a      	movs	r2, #10
 8008602:	4628      	mov	r0, r5
 8008604:	f000 fdb2 	bl	800916c <__multadd>
 8008608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800860a:	4683      	mov	fp, r0
 800860c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 8194 	beq.w	800893e <_dtoa_r+0xb96>
 8008616:	4631      	mov	r1, r6
 8008618:	2300      	movs	r3, #0
 800861a:	220a      	movs	r2, #10
 800861c:	4628      	mov	r0, r5
 800861e:	f000 fda5 	bl	800916c <__multadd>
 8008622:	f1b9 0f00 	cmp.w	r9, #0
 8008626:	4606      	mov	r6, r0
 8008628:	f300 8093 	bgt.w	8008752 <_dtoa_r+0x9aa>
 800862c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800862e:	2b02      	cmp	r3, #2
 8008630:	dc57      	bgt.n	80086e2 <_dtoa_r+0x93a>
 8008632:	e08e      	b.n	8008752 <_dtoa_r+0x9aa>
 8008634:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800863a:	e757      	b.n	80084ec <_dtoa_r+0x744>
 800863c:	9b08      	ldr	r3, [sp, #32]
 800863e:	1e5c      	subs	r4, r3, #1
 8008640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008642:	42a3      	cmp	r3, r4
 8008644:	bfb7      	itett	lt
 8008646:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008648:	1b1c      	subge	r4, r3, r4
 800864a:	1ae2      	sublt	r2, r4, r3
 800864c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800864e:	bfbe      	ittt	lt
 8008650:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008652:	189b      	addlt	r3, r3, r2
 8008654:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	bfb8      	it	lt
 800865a:	2400      	movlt	r4, #0
 800865c:	2b00      	cmp	r3, #0
 800865e:	bfbb      	ittet	lt
 8008660:	9b06      	ldrlt	r3, [sp, #24]
 8008662:	9a08      	ldrlt	r2, [sp, #32]
 8008664:	9f06      	ldrge	r7, [sp, #24]
 8008666:	1a9f      	sublt	r7, r3, r2
 8008668:	bfac      	ite	ge
 800866a:	9b08      	ldrge	r3, [sp, #32]
 800866c:	2300      	movlt	r3, #0
 800866e:	e73f      	b.n	80084f0 <_dtoa_r+0x748>
 8008670:	3fe00000 	.word	0x3fe00000
 8008674:	40240000 	.word	0x40240000
 8008678:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800867a:	9f06      	ldr	r7, [sp, #24]
 800867c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800867e:	e742      	b.n	8008506 <_dtoa_r+0x75e>
 8008680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008682:	e76b      	b.n	800855c <_dtoa_r+0x7b4>
 8008684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008686:	2b01      	cmp	r3, #1
 8008688:	dc19      	bgt.n	80086be <_dtoa_r+0x916>
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	b9bb      	cbnz	r3, 80086be <_dtoa_r+0x916>
 800868e:	9b05      	ldr	r3, [sp, #20]
 8008690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008694:	b99b      	cbnz	r3, 80086be <_dtoa_r+0x916>
 8008696:	9b05      	ldr	r3, [sp, #20]
 8008698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800869c:	0d1b      	lsrs	r3, r3, #20
 800869e:	051b      	lsls	r3, r3, #20
 80086a0:	b183      	cbz	r3, 80086c4 <_dtoa_r+0x91c>
 80086a2:	f04f 0801 	mov.w	r8, #1
 80086a6:	9b06      	ldr	r3, [sp, #24]
 80086a8:	3301      	adds	r3, #1
 80086aa:	9306      	str	r3, [sp, #24]
 80086ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ae:	3301      	adds	r3, #1
 80086b0:	9309      	str	r3, [sp, #36]	; 0x24
 80086b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f47f af6a 	bne.w	800858e <_dtoa_r+0x7e6>
 80086ba:	2001      	movs	r0, #1
 80086bc:	e76f      	b.n	800859e <_dtoa_r+0x7f6>
 80086be:	f04f 0800 	mov.w	r8, #0
 80086c2:	e7f6      	b.n	80086b2 <_dtoa_r+0x90a>
 80086c4:	4698      	mov	r8, r3
 80086c6:	e7f4      	b.n	80086b2 <_dtoa_r+0x90a>
 80086c8:	f43f af7d 	beq.w	80085c6 <_dtoa_r+0x81e>
 80086cc:	4618      	mov	r0, r3
 80086ce:	301c      	adds	r0, #28
 80086d0:	e772      	b.n	80085b8 <_dtoa_r+0x810>
 80086d2:	9b08      	ldr	r3, [sp, #32]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dc36      	bgt.n	8008746 <_dtoa_r+0x99e>
 80086d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086da:	2b02      	cmp	r3, #2
 80086dc:	dd33      	ble.n	8008746 <_dtoa_r+0x99e>
 80086de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086e2:	f1b9 0f00 	cmp.w	r9, #0
 80086e6:	d10d      	bne.n	8008704 <_dtoa_r+0x95c>
 80086e8:	4621      	mov	r1, r4
 80086ea:	464b      	mov	r3, r9
 80086ec:	2205      	movs	r2, #5
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 fd3c 	bl	800916c <__multadd>
 80086f4:	4601      	mov	r1, r0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4658      	mov	r0, fp
 80086fa:	f000 ff9d 	bl	8009638 <__mcmp>
 80086fe:	2800      	cmp	r0, #0
 8008700:	f73f adb8 	bgt.w	8008274 <_dtoa_r+0x4cc>
 8008704:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008706:	9f03      	ldr	r7, [sp, #12]
 8008708:	ea6f 0a03 	mvn.w	sl, r3
 800870c:	f04f 0800 	mov.w	r8, #0
 8008710:	4621      	mov	r1, r4
 8008712:	4628      	mov	r0, r5
 8008714:	f000 fd08 	bl	8009128 <_Bfree>
 8008718:	2e00      	cmp	r6, #0
 800871a:	f43f aea7 	beq.w	800846c <_dtoa_r+0x6c4>
 800871e:	f1b8 0f00 	cmp.w	r8, #0
 8008722:	d005      	beq.n	8008730 <_dtoa_r+0x988>
 8008724:	45b0      	cmp	r8, r6
 8008726:	d003      	beq.n	8008730 <_dtoa_r+0x988>
 8008728:	4641      	mov	r1, r8
 800872a:	4628      	mov	r0, r5
 800872c:	f000 fcfc 	bl	8009128 <_Bfree>
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	f000 fcf8 	bl	8009128 <_Bfree>
 8008738:	e698      	b.n	800846c <_dtoa_r+0x6c4>
 800873a:	2400      	movs	r4, #0
 800873c:	4626      	mov	r6, r4
 800873e:	e7e1      	b.n	8008704 <_dtoa_r+0x95c>
 8008740:	46c2      	mov	sl, r8
 8008742:	4626      	mov	r6, r4
 8008744:	e596      	b.n	8008274 <_dtoa_r+0x4cc>
 8008746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80fd 	beq.w	800894c <_dtoa_r+0xba4>
 8008752:	2f00      	cmp	r7, #0
 8008754:	dd05      	ble.n	8008762 <_dtoa_r+0x9ba>
 8008756:	4631      	mov	r1, r6
 8008758:	463a      	mov	r2, r7
 800875a:	4628      	mov	r0, r5
 800875c:	f000 fefc 	bl	8009558 <__lshift>
 8008760:	4606      	mov	r6, r0
 8008762:	f1b8 0f00 	cmp.w	r8, #0
 8008766:	d05c      	beq.n	8008822 <_dtoa_r+0xa7a>
 8008768:	4628      	mov	r0, r5
 800876a:	6871      	ldr	r1, [r6, #4]
 800876c:	f000 fc9c 	bl	80090a8 <_Balloc>
 8008770:	4607      	mov	r7, r0
 8008772:	b928      	cbnz	r0, 8008780 <_dtoa_r+0x9d8>
 8008774:	4602      	mov	r2, r0
 8008776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800877a:	4b7f      	ldr	r3, [pc, #508]	; (8008978 <_dtoa_r+0xbd0>)
 800877c:	f7ff bb28 	b.w	8007dd0 <_dtoa_r+0x28>
 8008780:	6932      	ldr	r2, [r6, #16]
 8008782:	f106 010c 	add.w	r1, r6, #12
 8008786:	3202      	adds	r2, #2
 8008788:	0092      	lsls	r2, r2, #2
 800878a:	300c      	adds	r0, #12
 800878c:	f7fd fd48 	bl	8006220 <memcpy>
 8008790:	2201      	movs	r2, #1
 8008792:	4639      	mov	r1, r7
 8008794:	4628      	mov	r0, r5
 8008796:	f000 fedf 	bl	8009558 <__lshift>
 800879a:	46b0      	mov	r8, r6
 800879c:	4606      	mov	r6, r0
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	9308      	str	r3, [sp, #32]
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	444b      	add	r3, r9
 80087a8:	930a      	str	r3, [sp, #40]	; 0x28
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	9309      	str	r3, [sp, #36]	; 0x24
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	4621      	mov	r1, r4
 80087b6:	3b01      	subs	r3, #1
 80087b8:	4658      	mov	r0, fp
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	f7ff fa68 	bl	8007c90 <quorem>
 80087c0:	4603      	mov	r3, r0
 80087c2:	4641      	mov	r1, r8
 80087c4:	3330      	adds	r3, #48	; 0x30
 80087c6:	9006      	str	r0, [sp, #24]
 80087c8:	4658      	mov	r0, fp
 80087ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80087cc:	f000 ff34 	bl	8009638 <__mcmp>
 80087d0:	4632      	mov	r2, r6
 80087d2:	4681      	mov	r9, r0
 80087d4:	4621      	mov	r1, r4
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 ff4a 	bl	8009670 <__mdiff>
 80087dc:	68c2      	ldr	r2, [r0, #12]
 80087de:	4607      	mov	r7, r0
 80087e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e2:	bb02      	cbnz	r2, 8008826 <_dtoa_r+0xa7e>
 80087e4:	4601      	mov	r1, r0
 80087e6:	4658      	mov	r0, fp
 80087e8:	f000 ff26 	bl	8009638 <__mcmp>
 80087ec:	4602      	mov	r2, r0
 80087ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f0:	4639      	mov	r1, r7
 80087f2:	4628      	mov	r0, r5
 80087f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80087f8:	f000 fc96 	bl	8009128 <_Bfree>
 80087fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008800:	9f08      	ldr	r7, [sp, #32]
 8008802:	ea43 0102 	orr.w	r1, r3, r2
 8008806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008808:	430b      	orrs	r3, r1
 800880a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800880c:	d10d      	bne.n	800882a <_dtoa_r+0xa82>
 800880e:	2b39      	cmp	r3, #57	; 0x39
 8008810:	d029      	beq.n	8008866 <_dtoa_r+0xabe>
 8008812:	f1b9 0f00 	cmp.w	r9, #0
 8008816:	dd01      	ble.n	800881c <_dtoa_r+0xa74>
 8008818:	9b06      	ldr	r3, [sp, #24]
 800881a:	3331      	adds	r3, #49	; 0x31
 800881c:	9a04      	ldr	r2, [sp, #16]
 800881e:	7013      	strb	r3, [r2, #0]
 8008820:	e776      	b.n	8008710 <_dtoa_r+0x968>
 8008822:	4630      	mov	r0, r6
 8008824:	e7b9      	b.n	800879a <_dtoa_r+0x9f2>
 8008826:	2201      	movs	r2, #1
 8008828:	e7e2      	b.n	80087f0 <_dtoa_r+0xa48>
 800882a:	f1b9 0f00 	cmp.w	r9, #0
 800882e:	db06      	blt.n	800883e <_dtoa_r+0xa96>
 8008830:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008832:	ea41 0909 	orr.w	r9, r1, r9
 8008836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008838:	ea59 0101 	orrs.w	r1, r9, r1
 800883c:	d120      	bne.n	8008880 <_dtoa_r+0xad8>
 800883e:	2a00      	cmp	r2, #0
 8008840:	ddec      	ble.n	800881c <_dtoa_r+0xa74>
 8008842:	4659      	mov	r1, fp
 8008844:	2201      	movs	r2, #1
 8008846:	4628      	mov	r0, r5
 8008848:	9308      	str	r3, [sp, #32]
 800884a:	f000 fe85 	bl	8009558 <__lshift>
 800884e:	4621      	mov	r1, r4
 8008850:	4683      	mov	fp, r0
 8008852:	f000 fef1 	bl	8009638 <__mcmp>
 8008856:	2800      	cmp	r0, #0
 8008858:	9b08      	ldr	r3, [sp, #32]
 800885a:	dc02      	bgt.n	8008862 <_dtoa_r+0xaba>
 800885c:	d1de      	bne.n	800881c <_dtoa_r+0xa74>
 800885e:	07da      	lsls	r2, r3, #31
 8008860:	d5dc      	bpl.n	800881c <_dtoa_r+0xa74>
 8008862:	2b39      	cmp	r3, #57	; 0x39
 8008864:	d1d8      	bne.n	8008818 <_dtoa_r+0xa70>
 8008866:	2339      	movs	r3, #57	; 0x39
 8008868:	9a04      	ldr	r2, [sp, #16]
 800886a:	7013      	strb	r3, [r2, #0]
 800886c:	463b      	mov	r3, r7
 800886e:	461f      	mov	r7, r3
 8008870:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008874:	3b01      	subs	r3, #1
 8008876:	2a39      	cmp	r2, #57	; 0x39
 8008878:	d050      	beq.n	800891c <_dtoa_r+0xb74>
 800887a:	3201      	adds	r2, #1
 800887c:	701a      	strb	r2, [r3, #0]
 800887e:	e747      	b.n	8008710 <_dtoa_r+0x968>
 8008880:	2a00      	cmp	r2, #0
 8008882:	dd03      	ble.n	800888c <_dtoa_r+0xae4>
 8008884:	2b39      	cmp	r3, #57	; 0x39
 8008886:	d0ee      	beq.n	8008866 <_dtoa_r+0xabe>
 8008888:	3301      	adds	r3, #1
 800888a:	e7c7      	b.n	800881c <_dtoa_r+0xa74>
 800888c:	9a08      	ldr	r2, [sp, #32]
 800888e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008890:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008894:	428a      	cmp	r2, r1
 8008896:	d02a      	beq.n	80088ee <_dtoa_r+0xb46>
 8008898:	4659      	mov	r1, fp
 800889a:	2300      	movs	r3, #0
 800889c:	220a      	movs	r2, #10
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 fc64 	bl	800916c <__multadd>
 80088a4:	45b0      	cmp	r8, r6
 80088a6:	4683      	mov	fp, r0
 80088a8:	f04f 0300 	mov.w	r3, #0
 80088ac:	f04f 020a 	mov.w	r2, #10
 80088b0:	4641      	mov	r1, r8
 80088b2:	4628      	mov	r0, r5
 80088b4:	d107      	bne.n	80088c6 <_dtoa_r+0xb1e>
 80088b6:	f000 fc59 	bl	800916c <__multadd>
 80088ba:	4680      	mov	r8, r0
 80088bc:	4606      	mov	r6, r0
 80088be:	9b08      	ldr	r3, [sp, #32]
 80088c0:	3301      	adds	r3, #1
 80088c2:	9308      	str	r3, [sp, #32]
 80088c4:	e775      	b.n	80087b2 <_dtoa_r+0xa0a>
 80088c6:	f000 fc51 	bl	800916c <__multadd>
 80088ca:	4631      	mov	r1, r6
 80088cc:	4680      	mov	r8, r0
 80088ce:	2300      	movs	r3, #0
 80088d0:	220a      	movs	r2, #10
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 fc4a 	bl	800916c <__multadd>
 80088d8:	4606      	mov	r6, r0
 80088da:	e7f0      	b.n	80088be <_dtoa_r+0xb16>
 80088dc:	f1b9 0f00 	cmp.w	r9, #0
 80088e0:	bfcc      	ite	gt
 80088e2:	464f      	movgt	r7, r9
 80088e4:	2701      	movle	r7, #1
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	9a03      	ldr	r2, [sp, #12]
 80088ec:	4417      	add	r7, r2
 80088ee:	4659      	mov	r1, fp
 80088f0:	2201      	movs	r2, #1
 80088f2:	4628      	mov	r0, r5
 80088f4:	9308      	str	r3, [sp, #32]
 80088f6:	f000 fe2f 	bl	8009558 <__lshift>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4683      	mov	fp, r0
 80088fe:	f000 fe9b 	bl	8009638 <__mcmp>
 8008902:	2800      	cmp	r0, #0
 8008904:	dcb2      	bgt.n	800886c <_dtoa_r+0xac4>
 8008906:	d102      	bne.n	800890e <_dtoa_r+0xb66>
 8008908:	9b08      	ldr	r3, [sp, #32]
 800890a:	07db      	lsls	r3, r3, #31
 800890c:	d4ae      	bmi.n	800886c <_dtoa_r+0xac4>
 800890e:	463b      	mov	r3, r7
 8008910:	461f      	mov	r7, r3
 8008912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008916:	2a30      	cmp	r2, #48	; 0x30
 8008918:	d0fa      	beq.n	8008910 <_dtoa_r+0xb68>
 800891a:	e6f9      	b.n	8008710 <_dtoa_r+0x968>
 800891c:	9a03      	ldr	r2, [sp, #12]
 800891e:	429a      	cmp	r2, r3
 8008920:	d1a5      	bne.n	800886e <_dtoa_r+0xac6>
 8008922:	2331      	movs	r3, #49	; 0x31
 8008924:	f10a 0a01 	add.w	sl, sl, #1
 8008928:	e779      	b.n	800881e <_dtoa_r+0xa76>
 800892a:	4b14      	ldr	r3, [pc, #80]	; (800897c <_dtoa_r+0xbd4>)
 800892c:	f7ff baa8 	b.w	8007e80 <_dtoa_r+0xd8>
 8008930:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008932:	2b00      	cmp	r3, #0
 8008934:	f47f aa81 	bne.w	8007e3a <_dtoa_r+0x92>
 8008938:	4b11      	ldr	r3, [pc, #68]	; (8008980 <_dtoa_r+0xbd8>)
 800893a:	f7ff baa1 	b.w	8007e80 <_dtoa_r+0xd8>
 800893e:	f1b9 0f00 	cmp.w	r9, #0
 8008942:	dc03      	bgt.n	800894c <_dtoa_r+0xba4>
 8008944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008946:	2b02      	cmp	r3, #2
 8008948:	f73f aecb 	bgt.w	80086e2 <_dtoa_r+0x93a>
 800894c:	9f03      	ldr	r7, [sp, #12]
 800894e:	4621      	mov	r1, r4
 8008950:	4658      	mov	r0, fp
 8008952:	f7ff f99d 	bl	8007c90 <quorem>
 8008956:	9a03      	ldr	r2, [sp, #12]
 8008958:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800895c:	f807 3b01 	strb.w	r3, [r7], #1
 8008960:	1aba      	subs	r2, r7, r2
 8008962:	4591      	cmp	r9, r2
 8008964:	ddba      	ble.n	80088dc <_dtoa_r+0xb34>
 8008966:	4659      	mov	r1, fp
 8008968:	2300      	movs	r3, #0
 800896a:	220a      	movs	r2, #10
 800896c:	4628      	mov	r0, r5
 800896e:	f000 fbfd 	bl	800916c <__multadd>
 8008972:	4683      	mov	fp, r0
 8008974:	e7eb      	b.n	800894e <_dtoa_r+0xba6>
 8008976:	bf00      	nop
 8008978:	0800b140 	.word	0x0800b140
 800897c:	0800af40 	.word	0x0800af40
 8008980:	0800b0c1 	.word	0x0800b0c1

08008984 <rshift>:
 8008984:	6903      	ldr	r3, [r0, #16]
 8008986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800898a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800898e:	f100 0414 	add.w	r4, r0, #20
 8008992:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008996:	dd46      	ble.n	8008a26 <rshift+0xa2>
 8008998:	f011 011f 	ands.w	r1, r1, #31
 800899c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089a4:	d10c      	bne.n	80089c0 <rshift+0x3c>
 80089a6:	4629      	mov	r1, r5
 80089a8:	f100 0710 	add.w	r7, r0, #16
 80089ac:	42b1      	cmp	r1, r6
 80089ae:	d335      	bcc.n	8008a1c <rshift+0x98>
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	1eea      	subs	r2, r5, #3
 80089b6:	4296      	cmp	r6, r2
 80089b8:	bf38      	it	cc
 80089ba:	2300      	movcc	r3, #0
 80089bc:	4423      	add	r3, r4
 80089be:	e015      	b.n	80089ec <rshift+0x68>
 80089c0:	46a1      	mov	r9, r4
 80089c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089c6:	f1c1 0820 	rsb	r8, r1, #32
 80089ca:	40cf      	lsrs	r7, r1
 80089cc:	f105 0e04 	add.w	lr, r5, #4
 80089d0:	4576      	cmp	r6, lr
 80089d2:	46f4      	mov	ip, lr
 80089d4:	d816      	bhi.n	8008a04 <rshift+0x80>
 80089d6:	1a9a      	subs	r2, r3, r2
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	3a04      	subs	r2, #4
 80089dc:	3501      	adds	r5, #1
 80089de:	42ae      	cmp	r6, r5
 80089e0:	bf38      	it	cc
 80089e2:	2200      	movcc	r2, #0
 80089e4:	18a3      	adds	r3, r4, r2
 80089e6:	50a7      	str	r7, [r4, r2]
 80089e8:	b107      	cbz	r7, 80089ec <rshift+0x68>
 80089ea:	3304      	adds	r3, #4
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	eba3 0204 	sub.w	r2, r3, r4
 80089f2:	bf08      	it	eq
 80089f4:	2300      	moveq	r3, #0
 80089f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089fa:	6102      	str	r2, [r0, #16]
 80089fc:	bf08      	it	eq
 80089fe:	6143      	streq	r3, [r0, #20]
 8008a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a04:	f8dc c000 	ldr.w	ip, [ip]
 8008a08:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a0c:	ea4c 0707 	orr.w	r7, ip, r7
 8008a10:	f849 7b04 	str.w	r7, [r9], #4
 8008a14:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a18:	40cf      	lsrs	r7, r1
 8008a1a:	e7d9      	b.n	80089d0 <rshift+0x4c>
 8008a1c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a20:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a24:	e7c2      	b.n	80089ac <rshift+0x28>
 8008a26:	4623      	mov	r3, r4
 8008a28:	e7e0      	b.n	80089ec <rshift+0x68>

08008a2a <__hexdig_fun>:
 8008a2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d802      	bhi.n	8008a38 <__hexdig_fun+0xe>
 8008a32:	3820      	subs	r0, #32
 8008a34:	b2c0      	uxtb	r0, r0
 8008a36:	4770      	bx	lr
 8008a38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a3c:	2b05      	cmp	r3, #5
 8008a3e:	d801      	bhi.n	8008a44 <__hexdig_fun+0x1a>
 8008a40:	3847      	subs	r0, #71	; 0x47
 8008a42:	e7f7      	b.n	8008a34 <__hexdig_fun+0xa>
 8008a44:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a48:	2b05      	cmp	r3, #5
 8008a4a:	d801      	bhi.n	8008a50 <__hexdig_fun+0x26>
 8008a4c:	3827      	subs	r0, #39	; 0x27
 8008a4e:	e7f1      	b.n	8008a34 <__hexdig_fun+0xa>
 8008a50:	2000      	movs	r0, #0
 8008a52:	4770      	bx	lr

08008a54 <__gethex>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	b08b      	sub	sp, #44	; 0x2c
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	4bb2      	ldr	r3, [pc, #712]	; (8008d28 <__gethex+0x2d4>)
 8008a5e:	9002      	str	r0, [sp, #8]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	468b      	mov	fp, r1
 8008a64:	4618      	mov	r0, r3
 8008a66:	4690      	mov	r8, r2
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	f7f7 fb71 	bl	8000150 <strlen>
 8008a6e:	4682      	mov	sl, r0
 8008a70:	9b03      	ldr	r3, [sp, #12]
 8008a72:	f8db 2000 	ldr.w	r2, [fp]
 8008a76:	4403      	add	r3, r0
 8008a78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a7c:	9306      	str	r3, [sp, #24]
 8008a7e:	1c93      	adds	r3, r2, #2
 8008a80:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a84:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a88:	32fe      	adds	r2, #254	; 0xfe
 8008a8a:	18d1      	adds	r1, r2, r3
 8008a8c:	461f      	mov	r7, r3
 8008a8e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a92:	9101      	str	r1, [sp, #4]
 8008a94:	2830      	cmp	r0, #48	; 0x30
 8008a96:	d0f8      	beq.n	8008a8a <__gethex+0x36>
 8008a98:	f7ff ffc7 	bl	8008a2a <__hexdig_fun>
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d13a      	bne.n	8008b18 <__gethex+0xc4>
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	9903      	ldr	r1, [sp, #12]
 8008aa8:	f001 fa18 	bl	8009edc <strncmp>
 8008aac:	4605      	mov	r5, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d166      	bne.n	8008b80 <__gethex+0x12c>
 8008ab2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ab6:	eb07 060a 	add.w	r6, r7, sl
 8008aba:	f7ff ffb6 	bl	8008a2a <__hexdig_fun>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d060      	beq.n	8008b84 <__gethex+0x130>
 8008ac2:	4633      	mov	r3, r6
 8008ac4:	7818      	ldrb	r0, [r3, #0]
 8008ac6:	461f      	mov	r7, r3
 8008ac8:	2830      	cmp	r0, #48	; 0x30
 8008aca:	f103 0301 	add.w	r3, r3, #1
 8008ace:	d0f9      	beq.n	8008ac4 <__gethex+0x70>
 8008ad0:	f7ff ffab 	bl	8008a2a <__hexdig_fun>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	fab0 f480 	clz	r4, r0
 8008ada:	4635      	mov	r5, r6
 8008adc:	0964      	lsrs	r4, r4, #5
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	463a      	mov	r2, r7
 8008ae2:	4616      	mov	r6, r2
 8008ae4:	7830      	ldrb	r0, [r6, #0]
 8008ae6:	3201      	adds	r2, #1
 8008ae8:	f7ff ff9f 	bl	8008a2a <__hexdig_fun>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d1f8      	bne.n	8008ae2 <__gethex+0x8e>
 8008af0:	4652      	mov	r2, sl
 8008af2:	4630      	mov	r0, r6
 8008af4:	9903      	ldr	r1, [sp, #12]
 8008af6:	f001 f9f1 	bl	8009edc <strncmp>
 8008afa:	b980      	cbnz	r0, 8008b1e <__gethex+0xca>
 8008afc:	b94d      	cbnz	r5, 8008b12 <__gethex+0xbe>
 8008afe:	eb06 050a 	add.w	r5, r6, sl
 8008b02:	462a      	mov	r2, r5
 8008b04:	4616      	mov	r6, r2
 8008b06:	7830      	ldrb	r0, [r6, #0]
 8008b08:	3201      	adds	r2, #1
 8008b0a:	f7ff ff8e 	bl	8008a2a <__hexdig_fun>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d1f8      	bne.n	8008b04 <__gethex+0xb0>
 8008b12:	1bad      	subs	r5, r5, r6
 8008b14:	00ad      	lsls	r5, r5, #2
 8008b16:	e004      	b.n	8008b22 <__gethex+0xce>
 8008b18:	2400      	movs	r4, #0
 8008b1a:	4625      	mov	r5, r4
 8008b1c:	e7e0      	b.n	8008ae0 <__gethex+0x8c>
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	d1f7      	bne.n	8008b12 <__gethex+0xbe>
 8008b22:	7833      	ldrb	r3, [r6, #0]
 8008b24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b28:	2b50      	cmp	r3, #80	; 0x50
 8008b2a:	d139      	bne.n	8008ba0 <__gethex+0x14c>
 8008b2c:	7873      	ldrb	r3, [r6, #1]
 8008b2e:	2b2b      	cmp	r3, #43	; 0x2b
 8008b30:	d02a      	beq.n	8008b88 <__gethex+0x134>
 8008b32:	2b2d      	cmp	r3, #45	; 0x2d
 8008b34:	d02c      	beq.n	8008b90 <__gethex+0x13c>
 8008b36:	f04f 0900 	mov.w	r9, #0
 8008b3a:	1c71      	adds	r1, r6, #1
 8008b3c:	7808      	ldrb	r0, [r1, #0]
 8008b3e:	f7ff ff74 	bl	8008a2a <__hexdig_fun>
 8008b42:	1e43      	subs	r3, r0, #1
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b18      	cmp	r3, #24
 8008b48:	d82a      	bhi.n	8008ba0 <__gethex+0x14c>
 8008b4a:	f1a0 0210 	sub.w	r2, r0, #16
 8008b4e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b52:	f7ff ff6a 	bl	8008a2a <__hexdig_fun>
 8008b56:	1e43      	subs	r3, r0, #1
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b18      	cmp	r3, #24
 8008b5c:	d91b      	bls.n	8008b96 <__gethex+0x142>
 8008b5e:	f1b9 0f00 	cmp.w	r9, #0
 8008b62:	d000      	beq.n	8008b66 <__gethex+0x112>
 8008b64:	4252      	negs	r2, r2
 8008b66:	4415      	add	r5, r2
 8008b68:	f8cb 1000 	str.w	r1, [fp]
 8008b6c:	b1d4      	cbz	r4, 8008ba4 <__gethex+0x150>
 8008b6e:	9b01      	ldr	r3, [sp, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf14      	ite	ne
 8008b74:	2700      	movne	r7, #0
 8008b76:	2706      	moveq	r7, #6
 8008b78:	4638      	mov	r0, r7
 8008b7a:	b00b      	add	sp, #44	; 0x2c
 8008b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b80:	463e      	mov	r6, r7
 8008b82:	4625      	mov	r5, r4
 8008b84:	2401      	movs	r4, #1
 8008b86:	e7cc      	b.n	8008b22 <__gethex+0xce>
 8008b88:	f04f 0900 	mov.w	r9, #0
 8008b8c:	1cb1      	adds	r1, r6, #2
 8008b8e:	e7d5      	b.n	8008b3c <__gethex+0xe8>
 8008b90:	f04f 0901 	mov.w	r9, #1
 8008b94:	e7fa      	b.n	8008b8c <__gethex+0x138>
 8008b96:	230a      	movs	r3, #10
 8008b98:	fb03 0202 	mla	r2, r3, r2, r0
 8008b9c:	3a10      	subs	r2, #16
 8008b9e:	e7d6      	b.n	8008b4e <__gethex+0xfa>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	e7e1      	b.n	8008b68 <__gethex+0x114>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	1bf3      	subs	r3, r6, r7
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	2b07      	cmp	r3, #7
 8008bac:	dc0a      	bgt.n	8008bc4 <__gethex+0x170>
 8008bae:	9802      	ldr	r0, [sp, #8]
 8008bb0:	f000 fa7a 	bl	80090a8 <_Balloc>
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	b940      	cbnz	r0, 8008bca <__gethex+0x176>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	21de      	movs	r1, #222	; 0xde
 8008bbc:	4b5b      	ldr	r3, [pc, #364]	; (8008d2c <__gethex+0x2d8>)
 8008bbe:	485c      	ldr	r0, [pc, #368]	; (8008d30 <__gethex+0x2dc>)
 8008bc0:	f001 f9ae 	bl	8009f20 <__assert_func>
 8008bc4:	3101      	adds	r1, #1
 8008bc6:	105b      	asrs	r3, r3, #1
 8008bc8:	e7ef      	b.n	8008baa <__gethex+0x156>
 8008bca:	f04f 0b00 	mov.w	fp, #0
 8008bce:	f100 0914 	add.w	r9, r0, #20
 8008bd2:	f1ca 0301 	rsb	r3, sl, #1
 8008bd6:	f8cd 9010 	str.w	r9, [sp, #16]
 8008bda:	f8cd b004 	str.w	fp, [sp, #4]
 8008bde:	9308      	str	r3, [sp, #32]
 8008be0:	42b7      	cmp	r7, r6
 8008be2:	d33f      	bcc.n	8008c64 <__gethex+0x210>
 8008be4:	9f04      	ldr	r7, [sp, #16]
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	f847 3b04 	str.w	r3, [r7], #4
 8008bec:	eba7 0709 	sub.w	r7, r7, r9
 8008bf0:	10bf      	asrs	r7, r7, #2
 8008bf2:	6127      	str	r7, [r4, #16]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fb49 	bl	800928c <__hi0bits>
 8008bfa:	017f      	lsls	r7, r7, #5
 8008bfc:	f8d8 6000 	ldr.w	r6, [r8]
 8008c00:	1a3f      	subs	r7, r7, r0
 8008c02:	42b7      	cmp	r7, r6
 8008c04:	dd62      	ble.n	8008ccc <__gethex+0x278>
 8008c06:	1bbf      	subs	r7, r7, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 fee3 	bl	80099d6 <__any_on>
 8008c10:	4682      	mov	sl, r0
 8008c12:	b1a8      	cbz	r0, 8008c40 <__gethex+0x1ec>
 8008c14:	f04f 0a01 	mov.w	sl, #1
 8008c18:	1e7b      	subs	r3, r7, #1
 8008c1a:	1159      	asrs	r1, r3, #5
 8008c1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c20:	f003 021f 	and.w	r2, r3, #31
 8008c24:	fa0a f202 	lsl.w	r2, sl, r2
 8008c28:	420a      	tst	r2, r1
 8008c2a:	d009      	beq.n	8008c40 <__gethex+0x1ec>
 8008c2c:	4553      	cmp	r3, sl
 8008c2e:	dd05      	ble.n	8008c3c <__gethex+0x1e8>
 8008c30:	4620      	mov	r0, r4
 8008c32:	1eb9      	subs	r1, r7, #2
 8008c34:	f000 fecf 	bl	80099d6 <__any_on>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d144      	bne.n	8008cc6 <__gethex+0x272>
 8008c3c:	f04f 0a02 	mov.w	sl, #2
 8008c40:	4639      	mov	r1, r7
 8008c42:	4620      	mov	r0, r4
 8008c44:	f7ff fe9e 	bl	8008984 <rshift>
 8008c48:	443d      	add	r5, r7
 8008c4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c4e:	42ab      	cmp	r3, r5
 8008c50:	da4a      	bge.n	8008ce8 <__gethex+0x294>
 8008c52:	4621      	mov	r1, r4
 8008c54:	9802      	ldr	r0, [sp, #8]
 8008c56:	f000 fa67 	bl	8009128 <_Bfree>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c5e:	27a3      	movs	r7, #163	; 0xa3
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	e789      	b.n	8008b78 <__gethex+0x124>
 8008c64:	1e73      	subs	r3, r6, #1
 8008c66:	9a06      	ldr	r2, [sp, #24]
 8008c68:	9307      	str	r3, [sp, #28]
 8008c6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d019      	beq.n	8008ca6 <__gethex+0x252>
 8008c72:	f1bb 0f20 	cmp.w	fp, #32
 8008c76:	d107      	bne.n	8008c88 <__gethex+0x234>
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	9a01      	ldr	r2, [sp, #4]
 8008c7c:	f843 2b04 	str.w	r2, [r3], #4
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	2300      	movs	r3, #0
 8008c84:	469b      	mov	fp, r3
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c8c:	f7ff fecd 	bl	8008a2a <__hexdig_fun>
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	f000 000f 	and.w	r0, r0, #15
 8008c96:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c9a:	4303      	orrs	r3, r0
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	f10b 0b04 	add.w	fp, fp, #4
 8008ca2:	9b07      	ldr	r3, [sp, #28]
 8008ca4:	e00d      	b.n	8008cc2 <__gethex+0x26e>
 8008ca6:	9a08      	ldr	r2, [sp, #32]
 8008ca8:	1e73      	subs	r3, r6, #1
 8008caa:	4413      	add	r3, r2
 8008cac:	42bb      	cmp	r3, r7
 8008cae:	d3e0      	bcc.n	8008c72 <__gethex+0x21e>
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	4652      	mov	r2, sl
 8008cb4:	9903      	ldr	r1, [sp, #12]
 8008cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb8:	f001 f910 	bl	8009edc <strncmp>
 8008cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d1d7      	bne.n	8008c72 <__gethex+0x21e>
 8008cc2:	461e      	mov	r6, r3
 8008cc4:	e78c      	b.n	8008be0 <__gethex+0x18c>
 8008cc6:	f04f 0a03 	mov.w	sl, #3
 8008cca:	e7b9      	b.n	8008c40 <__gethex+0x1ec>
 8008ccc:	da09      	bge.n	8008ce2 <__gethex+0x28e>
 8008cce:	1bf7      	subs	r7, r6, r7
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	463a      	mov	r2, r7
 8008cd4:	9802      	ldr	r0, [sp, #8]
 8008cd6:	f000 fc3f 	bl	8009558 <__lshift>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	1bed      	subs	r5, r5, r7
 8008cde:	f100 0914 	add.w	r9, r0, #20
 8008ce2:	f04f 0a00 	mov.w	sl, #0
 8008ce6:	e7b0      	b.n	8008c4a <__gethex+0x1f6>
 8008ce8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cec:	42a8      	cmp	r0, r5
 8008cee:	dd72      	ble.n	8008dd6 <__gethex+0x382>
 8008cf0:	1b45      	subs	r5, r0, r5
 8008cf2:	42ae      	cmp	r6, r5
 8008cf4:	dc35      	bgt.n	8008d62 <__gethex+0x30e>
 8008cf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d029      	beq.n	8008d52 <__gethex+0x2fe>
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d02b      	beq.n	8008d5a <__gethex+0x306>
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d11c      	bne.n	8008d40 <__gethex+0x2ec>
 8008d06:	42ae      	cmp	r6, r5
 8008d08:	d11a      	bne.n	8008d40 <__gethex+0x2ec>
 8008d0a:	2e01      	cmp	r6, #1
 8008d0c:	d112      	bne.n	8008d34 <__gethex+0x2e0>
 8008d0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d12:	9a05      	ldr	r2, [sp, #20]
 8008d14:	2762      	movs	r7, #98	; 0x62
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	f8c9 3000 	str.w	r3, [r9]
 8008d20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d22:	601c      	str	r4, [r3, #0]
 8008d24:	e728      	b.n	8008b78 <__gethex+0x124>
 8008d26:	bf00      	nop
 8008d28:	0800b1b8 	.word	0x0800b1b8
 8008d2c:	0800b140 	.word	0x0800b140
 8008d30:	0800b151 	.word	0x0800b151
 8008d34:	4620      	mov	r0, r4
 8008d36:	1e71      	subs	r1, r6, #1
 8008d38:	f000 fe4d 	bl	80099d6 <__any_on>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d1e6      	bne.n	8008d0e <__gethex+0x2ba>
 8008d40:	4621      	mov	r1, r4
 8008d42:	9802      	ldr	r0, [sp, #8]
 8008d44:	f000 f9f0 	bl	8009128 <_Bfree>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d4c:	2750      	movs	r7, #80	; 0x50
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	e712      	b.n	8008b78 <__gethex+0x124>
 8008d52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1f3      	bne.n	8008d40 <__gethex+0x2ec>
 8008d58:	e7d9      	b.n	8008d0e <__gethex+0x2ba>
 8008d5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1d6      	bne.n	8008d0e <__gethex+0x2ba>
 8008d60:	e7ee      	b.n	8008d40 <__gethex+0x2ec>
 8008d62:	1e6f      	subs	r7, r5, #1
 8008d64:	f1ba 0f00 	cmp.w	sl, #0
 8008d68:	d132      	bne.n	8008dd0 <__gethex+0x37c>
 8008d6a:	b127      	cbz	r7, 8008d76 <__gethex+0x322>
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fe31 	bl	80099d6 <__any_on>
 8008d74:	4682      	mov	sl, r0
 8008d76:	2101      	movs	r1, #1
 8008d78:	117b      	asrs	r3, r7, #5
 8008d7a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d7e:	f007 071f 	and.w	r7, r7, #31
 8008d82:	fa01 f707 	lsl.w	r7, r1, r7
 8008d86:	421f      	tst	r7, r3
 8008d88:	f04f 0702 	mov.w	r7, #2
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4620      	mov	r0, r4
 8008d90:	bf18      	it	ne
 8008d92:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d96:	1b76      	subs	r6, r6, r5
 8008d98:	f7ff fdf4 	bl	8008984 <rshift>
 8008d9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	d048      	beq.n	8008e38 <__gethex+0x3e4>
 8008da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d015      	beq.n	8008dda <__gethex+0x386>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d017      	beq.n	8008de2 <__gethex+0x38e>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d109      	bne.n	8008dca <__gethex+0x376>
 8008db6:	f01a 0f02 	tst.w	sl, #2
 8008dba:	d006      	beq.n	8008dca <__gethex+0x376>
 8008dbc:	f8d9 0000 	ldr.w	r0, [r9]
 8008dc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008dc4:	f01a 0f01 	tst.w	sl, #1
 8008dc8:	d10e      	bne.n	8008de8 <__gethex+0x394>
 8008dca:	f047 0710 	orr.w	r7, r7, #16
 8008dce:	e033      	b.n	8008e38 <__gethex+0x3e4>
 8008dd0:	f04f 0a01 	mov.w	sl, #1
 8008dd4:	e7cf      	b.n	8008d76 <__gethex+0x322>
 8008dd6:	2701      	movs	r7, #1
 8008dd8:	e7e2      	b.n	8008da0 <__gethex+0x34c>
 8008dda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ddc:	f1c3 0301 	rsb	r3, r3, #1
 8008de0:	9315      	str	r3, [sp, #84]	; 0x54
 8008de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f0      	beq.n	8008dca <__gethex+0x376>
 8008de8:	f04f 0c00 	mov.w	ip, #0
 8008dec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008df0:	f104 0314 	add.w	r3, r4, #20
 8008df4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008df8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e06:	d01c      	beq.n	8008e42 <__gethex+0x3ee>
 8008e08:	3201      	adds	r2, #1
 8008e0a:	6002      	str	r2, [r0, #0]
 8008e0c:	2f02      	cmp	r7, #2
 8008e0e:	f104 0314 	add.w	r3, r4, #20
 8008e12:	d13d      	bne.n	8008e90 <__gethex+0x43c>
 8008e14:	f8d8 2000 	ldr.w	r2, [r8]
 8008e18:	3a01      	subs	r2, #1
 8008e1a:	42b2      	cmp	r2, r6
 8008e1c:	d10a      	bne.n	8008e34 <__gethex+0x3e0>
 8008e1e:	2201      	movs	r2, #1
 8008e20:	1171      	asrs	r1, r6, #5
 8008e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e26:	f006 061f 	and.w	r6, r6, #31
 8008e2a:	fa02 f606 	lsl.w	r6, r2, r6
 8008e2e:	421e      	tst	r6, r3
 8008e30:	bf18      	it	ne
 8008e32:	4617      	movne	r7, r2
 8008e34:	f047 0720 	orr.w	r7, r7, #32
 8008e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e3a:	601c      	str	r4, [r3, #0]
 8008e3c:	9b05      	ldr	r3, [sp, #20]
 8008e3e:	601d      	str	r5, [r3, #0]
 8008e40:	e69a      	b.n	8008b78 <__gethex+0x124>
 8008e42:	4299      	cmp	r1, r3
 8008e44:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e48:	d8d8      	bhi.n	8008dfc <__gethex+0x3a8>
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	459b      	cmp	fp, r3
 8008e4e:	db17      	blt.n	8008e80 <__gethex+0x42c>
 8008e50:	6861      	ldr	r1, [r4, #4]
 8008e52:	9802      	ldr	r0, [sp, #8]
 8008e54:	3101      	adds	r1, #1
 8008e56:	f000 f927 	bl	80090a8 <_Balloc>
 8008e5a:	4681      	mov	r9, r0
 8008e5c:	b918      	cbnz	r0, 8008e66 <__gethex+0x412>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	2184      	movs	r1, #132	; 0x84
 8008e62:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <__gethex+0x474>)
 8008e64:	e6ab      	b.n	8008bbe <__gethex+0x16a>
 8008e66:	6922      	ldr	r2, [r4, #16]
 8008e68:	f104 010c 	add.w	r1, r4, #12
 8008e6c:	3202      	adds	r2, #2
 8008e6e:	0092      	lsls	r2, r2, #2
 8008e70:	300c      	adds	r0, #12
 8008e72:	f7fd f9d5 	bl	8006220 <memcpy>
 8008e76:	4621      	mov	r1, r4
 8008e78:	9802      	ldr	r0, [sp, #8]
 8008e7a:	f000 f955 	bl	8009128 <_Bfree>
 8008e7e:	464c      	mov	r4, r9
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	6122      	str	r2, [r4, #16]
 8008e86:	2201      	movs	r2, #1
 8008e88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e8c:	615a      	str	r2, [r3, #20]
 8008e8e:	e7bd      	b.n	8008e0c <__gethex+0x3b8>
 8008e90:	6922      	ldr	r2, [r4, #16]
 8008e92:	455a      	cmp	r2, fp
 8008e94:	dd0b      	ble.n	8008eae <__gethex+0x45a>
 8008e96:	2101      	movs	r1, #1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7ff fd73 	bl	8008984 <rshift>
 8008e9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ea2:	3501      	adds	r5, #1
 8008ea4:	42ab      	cmp	r3, r5
 8008ea6:	f6ff aed4 	blt.w	8008c52 <__gethex+0x1fe>
 8008eaa:	2701      	movs	r7, #1
 8008eac:	e7c2      	b.n	8008e34 <__gethex+0x3e0>
 8008eae:	f016 061f 	ands.w	r6, r6, #31
 8008eb2:	d0fa      	beq.n	8008eaa <__gethex+0x456>
 8008eb4:	4453      	add	r3, sl
 8008eb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008eba:	f000 f9e7 	bl	800928c <__hi0bits>
 8008ebe:	f1c6 0620 	rsb	r6, r6, #32
 8008ec2:	42b0      	cmp	r0, r6
 8008ec4:	dbe7      	blt.n	8008e96 <__gethex+0x442>
 8008ec6:	e7f0      	b.n	8008eaa <__gethex+0x456>
 8008ec8:	0800b140 	.word	0x0800b140

08008ecc <L_shift>:
 8008ecc:	f1c2 0208 	rsb	r2, r2, #8
 8008ed0:	0092      	lsls	r2, r2, #2
 8008ed2:	b570      	push	{r4, r5, r6, lr}
 8008ed4:	f1c2 0620 	rsb	r6, r2, #32
 8008ed8:	6843      	ldr	r3, [r0, #4]
 8008eda:	6804      	ldr	r4, [r0, #0]
 8008edc:	fa03 f506 	lsl.w	r5, r3, r6
 8008ee0:	432c      	orrs	r4, r5
 8008ee2:	40d3      	lsrs	r3, r2
 8008ee4:	6004      	str	r4, [r0, #0]
 8008ee6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008eea:	4288      	cmp	r0, r1
 8008eec:	d3f4      	bcc.n	8008ed8 <L_shift+0xc>
 8008eee:	bd70      	pop	{r4, r5, r6, pc}

08008ef0 <__match>:
 8008ef0:	b530      	push	{r4, r5, lr}
 8008ef2:	6803      	ldr	r3, [r0, #0]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008efa:	b914      	cbnz	r4, 8008f02 <__match+0x12>
 8008efc:	6003      	str	r3, [r0, #0]
 8008efe:	2001      	movs	r0, #1
 8008f00:	bd30      	pop	{r4, r5, pc}
 8008f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f0a:	2d19      	cmp	r5, #25
 8008f0c:	bf98      	it	ls
 8008f0e:	3220      	addls	r2, #32
 8008f10:	42a2      	cmp	r2, r4
 8008f12:	d0f0      	beq.n	8008ef6 <__match+0x6>
 8008f14:	2000      	movs	r0, #0
 8008f16:	e7f3      	b.n	8008f00 <__match+0x10>

08008f18 <__hexnan>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	2500      	movs	r5, #0
 8008f1e:	680b      	ldr	r3, [r1, #0]
 8008f20:	4682      	mov	sl, r0
 8008f22:	115e      	asrs	r6, r3, #5
 8008f24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f28:	f013 031f 	ands.w	r3, r3, #31
 8008f2c:	bf18      	it	ne
 8008f2e:	3604      	addne	r6, #4
 8008f30:	1f37      	subs	r7, r6, #4
 8008f32:	46b9      	mov	r9, r7
 8008f34:	463c      	mov	r4, r7
 8008f36:	46ab      	mov	fp, r5
 8008f38:	b087      	sub	sp, #28
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	6802      	ldr	r2, [r0, #0]
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f44:	9502      	str	r5, [sp, #8]
 8008f46:	7851      	ldrb	r1, [r2, #1]
 8008f48:	1c53      	adds	r3, r2, #1
 8008f4a:	9303      	str	r3, [sp, #12]
 8008f4c:	b341      	cbz	r1, 8008fa0 <__hexnan+0x88>
 8008f4e:	4608      	mov	r0, r1
 8008f50:	9205      	str	r2, [sp, #20]
 8008f52:	9104      	str	r1, [sp, #16]
 8008f54:	f7ff fd69 	bl	8008a2a <__hexdig_fun>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d14f      	bne.n	8008ffc <__hexnan+0xe4>
 8008f5c:	9904      	ldr	r1, [sp, #16]
 8008f5e:	9a05      	ldr	r2, [sp, #20]
 8008f60:	2920      	cmp	r1, #32
 8008f62:	d818      	bhi.n	8008f96 <__hexnan+0x7e>
 8008f64:	9b02      	ldr	r3, [sp, #8]
 8008f66:	459b      	cmp	fp, r3
 8008f68:	dd13      	ble.n	8008f92 <__hexnan+0x7a>
 8008f6a:	454c      	cmp	r4, r9
 8008f6c:	d206      	bcs.n	8008f7c <__hexnan+0x64>
 8008f6e:	2d07      	cmp	r5, #7
 8008f70:	dc04      	bgt.n	8008f7c <__hexnan+0x64>
 8008f72:	462a      	mov	r2, r5
 8008f74:	4649      	mov	r1, r9
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7ff ffa8 	bl	8008ecc <L_shift>
 8008f7c:	4544      	cmp	r4, r8
 8008f7e:	d950      	bls.n	8009022 <__hexnan+0x10a>
 8008f80:	2300      	movs	r3, #0
 8008f82:	f1a4 0904 	sub.w	r9, r4, #4
 8008f86:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f8a:	461d      	mov	r5, r3
 8008f8c:	464c      	mov	r4, r9
 8008f8e:	f8cd b008 	str.w	fp, [sp, #8]
 8008f92:	9a03      	ldr	r2, [sp, #12]
 8008f94:	e7d7      	b.n	8008f46 <__hexnan+0x2e>
 8008f96:	2929      	cmp	r1, #41	; 0x29
 8008f98:	d156      	bne.n	8009048 <__hexnan+0x130>
 8008f9a:	3202      	adds	r2, #2
 8008f9c:	f8ca 2000 	str.w	r2, [sl]
 8008fa0:	f1bb 0f00 	cmp.w	fp, #0
 8008fa4:	d050      	beq.n	8009048 <__hexnan+0x130>
 8008fa6:	454c      	cmp	r4, r9
 8008fa8:	d206      	bcs.n	8008fb8 <__hexnan+0xa0>
 8008faa:	2d07      	cmp	r5, #7
 8008fac:	dc04      	bgt.n	8008fb8 <__hexnan+0xa0>
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f7ff ff8a 	bl	8008ecc <L_shift>
 8008fb8:	4544      	cmp	r4, r8
 8008fba:	d934      	bls.n	8009026 <__hexnan+0x10e>
 8008fbc:	4623      	mov	r3, r4
 8008fbe:	f1a8 0204 	sub.w	r2, r8, #4
 8008fc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fc6:	429f      	cmp	r7, r3
 8008fc8:	f842 1f04 	str.w	r1, [r2, #4]!
 8008fcc:	d2f9      	bcs.n	8008fc2 <__hexnan+0xaa>
 8008fce:	1b3b      	subs	r3, r7, r4
 8008fd0:	f023 0303 	bic.w	r3, r3, #3
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	3401      	adds	r4, #1
 8008fd8:	3e03      	subs	r6, #3
 8008fda:	42b4      	cmp	r4, r6
 8008fdc:	bf88      	it	hi
 8008fde:	2304      	movhi	r3, #4
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4443      	add	r3, r8
 8008fe4:	f843 2b04 	str.w	r2, [r3], #4
 8008fe8:	429f      	cmp	r7, r3
 8008fea:	d2fb      	bcs.n	8008fe4 <__hexnan+0xcc>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	b91b      	cbnz	r3, 8008ff8 <__hexnan+0xe0>
 8008ff0:	4547      	cmp	r7, r8
 8008ff2:	d127      	bne.n	8009044 <__hexnan+0x12c>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	2005      	movs	r0, #5
 8008ffa:	e026      	b.n	800904a <__hexnan+0x132>
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	2d08      	cmp	r5, #8
 8009000:	f10b 0b01 	add.w	fp, fp, #1
 8009004:	dd06      	ble.n	8009014 <__hexnan+0xfc>
 8009006:	4544      	cmp	r4, r8
 8009008:	d9c3      	bls.n	8008f92 <__hexnan+0x7a>
 800900a:	2300      	movs	r3, #0
 800900c:	2501      	movs	r5, #1
 800900e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009012:	3c04      	subs	r4, #4
 8009014:	6822      	ldr	r2, [r4, #0]
 8009016:	f000 000f 	and.w	r0, r0, #15
 800901a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800901e:	6022      	str	r2, [r4, #0]
 8009020:	e7b7      	b.n	8008f92 <__hexnan+0x7a>
 8009022:	2508      	movs	r5, #8
 8009024:	e7b5      	b.n	8008f92 <__hexnan+0x7a>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0df      	beq.n	8008fec <__hexnan+0xd4>
 800902c:	f04f 32ff 	mov.w	r2, #4294967295
 8009030:	f1c3 0320 	rsb	r3, r3, #32
 8009034:	fa22 f303 	lsr.w	r3, r2, r3
 8009038:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800903c:	401a      	ands	r2, r3
 800903e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009042:	e7d3      	b.n	8008fec <__hexnan+0xd4>
 8009044:	3f04      	subs	r7, #4
 8009046:	e7d1      	b.n	8008fec <__hexnan+0xd4>
 8009048:	2004      	movs	r0, #4
 800904a:	b007      	add	sp, #28
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009050 <_localeconv_r>:
 8009050:	4800      	ldr	r0, [pc, #0]	; (8009054 <_localeconv_r+0x4>)
 8009052:	4770      	bx	lr
 8009054:	200001e8 	.word	0x200001e8

08009058 <malloc>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <malloc+0xc>)
 800905a:	4601      	mov	r1, r0
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f000 bd57 	b.w	8009b10 <_malloc_r>
 8009062:	bf00      	nop
 8009064:	20000090 	.word	0x20000090

08009068 <__ascii_mbtowc>:
 8009068:	b082      	sub	sp, #8
 800906a:	b901      	cbnz	r1, 800906e <__ascii_mbtowc+0x6>
 800906c:	a901      	add	r1, sp, #4
 800906e:	b142      	cbz	r2, 8009082 <__ascii_mbtowc+0x1a>
 8009070:	b14b      	cbz	r3, 8009086 <__ascii_mbtowc+0x1e>
 8009072:	7813      	ldrb	r3, [r2, #0]
 8009074:	600b      	str	r3, [r1, #0]
 8009076:	7812      	ldrb	r2, [r2, #0]
 8009078:	1e10      	subs	r0, r2, #0
 800907a:	bf18      	it	ne
 800907c:	2001      	movne	r0, #1
 800907e:	b002      	add	sp, #8
 8009080:	4770      	bx	lr
 8009082:	4610      	mov	r0, r2
 8009084:	e7fb      	b.n	800907e <__ascii_mbtowc+0x16>
 8009086:	f06f 0001 	mvn.w	r0, #1
 800908a:	e7f8      	b.n	800907e <__ascii_mbtowc+0x16>

0800908c <memchr>:
 800908c:	4603      	mov	r3, r0
 800908e:	b510      	push	{r4, lr}
 8009090:	b2c9      	uxtb	r1, r1
 8009092:	4402      	add	r2, r0
 8009094:	4293      	cmp	r3, r2
 8009096:	4618      	mov	r0, r3
 8009098:	d101      	bne.n	800909e <memchr+0x12>
 800909a:	2000      	movs	r0, #0
 800909c:	e003      	b.n	80090a6 <memchr+0x1a>
 800909e:	7804      	ldrb	r4, [r0, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	428c      	cmp	r4, r1
 80090a4:	d1f6      	bne.n	8009094 <memchr+0x8>
 80090a6:	bd10      	pop	{r4, pc}

080090a8 <_Balloc>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090ac:	4604      	mov	r4, r0
 80090ae:	460d      	mov	r5, r1
 80090b0:	b976      	cbnz	r6, 80090d0 <_Balloc+0x28>
 80090b2:	2010      	movs	r0, #16
 80090b4:	f7ff ffd0 	bl	8009058 <malloc>
 80090b8:	4602      	mov	r2, r0
 80090ba:	6260      	str	r0, [r4, #36]	; 0x24
 80090bc:	b920      	cbnz	r0, 80090c8 <_Balloc+0x20>
 80090be:	2166      	movs	r1, #102	; 0x66
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <_Balloc+0x78>)
 80090c2:	4818      	ldr	r0, [pc, #96]	; (8009124 <_Balloc+0x7c>)
 80090c4:	f000 ff2c 	bl	8009f20 <__assert_func>
 80090c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090cc:	6006      	str	r6, [r0, #0]
 80090ce:	60c6      	str	r6, [r0, #12]
 80090d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090d2:	68f3      	ldr	r3, [r6, #12]
 80090d4:	b183      	cbz	r3, 80090f8 <_Balloc+0x50>
 80090d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090de:	b9b8      	cbnz	r0, 8009110 <_Balloc+0x68>
 80090e0:	2101      	movs	r1, #1
 80090e2:	fa01 f605 	lsl.w	r6, r1, r5
 80090e6:	1d72      	adds	r2, r6, #5
 80090e8:	4620      	mov	r0, r4
 80090ea:	0092      	lsls	r2, r2, #2
 80090ec:	f000 fc94 	bl	8009a18 <_calloc_r>
 80090f0:	b160      	cbz	r0, 800910c <_Balloc+0x64>
 80090f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090f6:	e00e      	b.n	8009116 <_Balloc+0x6e>
 80090f8:	2221      	movs	r2, #33	; 0x21
 80090fa:	2104      	movs	r1, #4
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fc8b 	bl	8009a18 <_calloc_r>
 8009102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009104:	60f0      	str	r0, [r6, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e4      	bne.n	80090d6 <_Balloc+0x2e>
 800910c:	2000      	movs	r0, #0
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	6802      	ldr	r2, [r0, #0]
 8009112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009116:	2300      	movs	r3, #0
 8009118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800911c:	e7f7      	b.n	800910e <_Balloc+0x66>
 800911e:	bf00      	nop
 8009120:	0800b0ce 	.word	0x0800b0ce
 8009124:	0800b1cc 	.word	0x0800b1cc

08009128 <_Bfree>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800912c:	4605      	mov	r5, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b976      	cbnz	r6, 8009150 <_Bfree+0x28>
 8009132:	2010      	movs	r0, #16
 8009134:	f7ff ff90 	bl	8009058 <malloc>
 8009138:	4602      	mov	r2, r0
 800913a:	6268      	str	r0, [r5, #36]	; 0x24
 800913c:	b920      	cbnz	r0, 8009148 <_Bfree+0x20>
 800913e:	218a      	movs	r1, #138	; 0x8a
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <_Bfree+0x3c>)
 8009142:	4809      	ldr	r0, [pc, #36]	; (8009168 <_Bfree+0x40>)
 8009144:	f000 feec 	bl	8009f20 <__assert_func>
 8009148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800914c:	6006      	str	r6, [r0, #0]
 800914e:	60c6      	str	r6, [r0, #12]
 8009150:	b13c      	cbz	r4, 8009162 <_Bfree+0x3a>
 8009152:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009154:	6862      	ldr	r2, [r4, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800915c:	6021      	str	r1, [r4, #0]
 800915e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	0800b0ce 	.word	0x0800b0ce
 8009168:	0800b1cc 	.word	0x0800b1cc

0800916c <__multadd>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	4607      	mov	r7, r0
 8009172:	460c      	mov	r4, r1
 8009174:	461e      	mov	r6, r3
 8009176:	2000      	movs	r0, #0
 8009178:	690d      	ldr	r5, [r1, #16]
 800917a:	f101 0c14 	add.w	ip, r1, #20
 800917e:	f8dc 3000 	ldr.w	r3, [ip]
 8009182:	3001      	adds	r0, #1
 8009184:	b299      	uxth	r1, r3
 8009186:	fb02 6101 	mla	r1, r2, r1, r6
 800918a:	0c1e      	lsrs	r6, r3, #16
 800918c:	0c0b      	lsrs	r3, r1, #16
 800918e:	fb02 3306 	mla	r3, r2, r6, r3
 8009192:	b289      	uxth	r1, r1
 8009194:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009198:	4285      	cmp	r5, r0
 800919a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800919e:	f84c 1b04 	str.w	r1, [ip], #4
 80091a2:	dcec      	bgt.n	800917e <__multadd+0x12>
 80091a4:	b30e      	cbz	r6, 80091ea <__multadd+0x7e>
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	42ab      	cmp	r3, r5
 80091aa:	dc19      	bgt.n	80091e0 <__multadd+0x74>
 80091ac:	6861      	ldr	r1, [r4, #4]
 80091ae:	4638      	mov	r0, r7
 80091b0:	3101      	adds	r1, #1
 80091b2:	f7ff ff79 	bl	80090a8 <_Balloc>
 80091b6:	4680      	mov	r8, r0
 80091b8:	b928      	cbnz	r0, 80091c6 <__multadd+0x5a>
 80091ba:	4602      	mov	r2, r0
 80091bc:	21b5      	movs	r1, #181	; 0xb5
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <__multadd+0x84>)
 80091c0:	480c      	ldr	r0, [pc, #48]	; (80091f4 <__multadd+0x88>)
 80091c2:	f000 fead 	bl	8009f20 <__assert_func>
 80091c6:	6922      	ldr	r2, [r4, #16]
 80091c8:	f104 010c 	add.w	r1, r4, #12
 80091cc:	3202      	adds	r2, #2
 80091ce:	0092      	lsls	r2, r2, #2
 80091d0:	300c      	adds	r0, #12
 80091d2:	f7fd f825 	bl	8006220 <memcpy>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4638      	mov	r0, r7
 80091da:	f7ff ffa5 	bl	8009128 <_Bfree>
 80091de:	4644      	mov	r4, r8
 80091e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091e4:	3501      	adds	r5, #1
 80091e6:	615e      	str	r6, [r3, #20]
 80091e8:	6125      	str	r5, [r4, #16]
 80091ea:	4620      	mov	r0, r4
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	0800b140 	.word	0x0800b140
 80091f4:	0800b1cc 	.word	0x0800b1cc

080091f8 <__s2b>:
 80091f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091fc:	4615      	mov	r5, r2
 80091fe:	2209      	movs	r2, #9
 8009200:	461f      	mov	r7, r3
 8009202:	3308      	adds	r3, #8
 8009204:	460c      	mov	r4, r1
 8009206:	fb93 f3f2 	sdiv	r3, r3, r2
 800920a:	4606      	mov	r6, r0
 800920c:	2201      	movs	r2, #1
 800920e:	2100      	movs	r1, #0
 8009210:	429a      	cmp	r2, r3
 8009212:	db09      	blt.n	8009228 <__s2b+0x30>
 8009214:	4630      	mov	r0, r6
 8009216:	f7ff ff47 	bl	80090a8 <_Balloc>
 800921a:	b940      	cbnz	r0, 800922e <__s2b+0x36>
 800921c:	4602      	mov	r2, r0
 800921e:	21ce      	movs	r1, #206	; 0xce
 8009220:	4b18      	ldr	r3, [pc, #96]	; (8009284 <__s2b+0x8c>)
 8009222:	4819      	ldr	r0, [pc, #100]	; (8009288 <__s2b+0x90>)
 8009224:	f000 fe7c 	bl	8009f20 <__assert_func>
 8009228:	0052      	lsls	r2, r2, #1
 800922a:	3101      	adds	r1, #1
 800922c:	e7f0      	b.n	8009210 <__s2b+0x18>
 800922e:	9b08      	ldr	r3, [sp, #32]
 8009230:	2d09      	cmp	r5, #9
 8009232:	6143      	str	r3, [r0, #20]
 8009234:	f04f 0301 	mov.w	r3, #1
 8009238:	6103      	str	r3, [r0, #16]
 800923a:	dd16      	ble.n	800926a <__s2b+0x72>
 800923c:	f104 0909 	add.w	r9, r4, #9
 8009240:	46c8      	mov	r8, r9
 8009242:	442c      	add	r4, r5
 8009244:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009248:	4601      	mov	r1, r0
 800924a:	220a      	movs	r2, #10
 800924c:	4630      	mov	r0, r6
 800924e:	3b30      	subs	r3, #48	; 0x30
 8009250:	f7ff ff8c 	bl	800916c <__multadd>
 8009254:	45a0      	cmp	r8, r4
 8009256:	d1f5      	bne.n	8009244 <__s2b+0x4c>
 8009258:	f1a5 0408 	sub.w	r4, r5, #8
 800925c:	444c      	add	r4, r9
 800925e:	1b2d      	subs	r5, r5, r4
 8009260:	1963      	adds	r3, r4, r5
 8009262:	42bb      	cmp	r3, r7
 8009264:	db04      	blt.n	8009270 <__s2b+0x78>
 8009266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926a:	2509      	movs	r5, #9
 800926c:	340a      	adds	r4, #10
 800926e:	e7f6      	b.n	800925e <__s2b+0x66>
 8009270:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009274:	4601      	mov	r1, r0
 8009276:	220a      	movs	r2, #10
 8009278:	4630      	mov	r0, r6
 800927a:	3b30      	subs	r3, #48	; 0x30
 800927c:	f7ff ff76 	bl	800916c <__multadd>
 8009280:	e7ee      	b.n	8009260 <__s2b+0x68>
 8009282:	bf00      	nop
 8009284:	0800b140 	.word	0x0800b140
 8009288:	0800b1cc 	.word	0x0800b1cc

0800928c <__hi0bits>:
 800928c:	0c02      	lsrs	r2, r0, #16
 800928e:	0412      	lsls	r2, r2, #16
 8009290:	4603      	mov	r3, r0
 8009292:	b9ca      	cbnz	r2, 80092c8 <__hi0bits+0x3c>
 8009294:	0403      	lsls	r3, r0, #16
 8009296:	2010      	movs	r0, #16
 8009298:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800929c:	bf04      	itt	eq
 800929e:	021b      	lsleq	r3, r3, #8
 80092a0:	3008      	addeq	r0, #8
 80092a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80092a6:	bf04      	itt	eq
 80092a8:	011b      	lsleq	r3, r3, #4
 80092aa:	3004      	addeq	r0, #4
 80092ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80092b0:	bf04      	itt	eq
 80092b2:	009b      	lsleq	r3, r3, #2
 80092b4:	3002      	addeq	r0, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	db05      	blt.n	80092c6 <__hi0bits+0x3a>
 80092ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80092be:	f100 0001 	add.w	r0, r0, #1
 80092c2:	bf08      	it	eq
 80092c4:	2020      	moveq	r0, #32
 80092c6:	4770      	bx	lr
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7e5      	b.n	8009298 <__hi0bits+0xc>

080092cc <__lo0bits>:
 80092cc:	6803      	ldr	r3, [r0, #0]
 80092ce:	4602      	mov	r2, r0
 80092d0:	f013 0007 	ands.w	r0, r3, #7
 80092d4:	d00b      	beq.n	80092ee <__lo0bits+0x22>
 80092d6:	07d9      	lsls	r1, r3, #31
 80092d8:	d421      	bmi.n	800931e <__lo0bits+0x52>
 80092da:	0798      	lsls	r0, r3, #30
 80092dc:	bf49      	itett	mi
 80092de:	085b      	lsrmi	r3, r3, #1
 80092e0:	089b      	lsrpl	r3, r3, #2
 80092e2:	2001      	movmi	r0, #1
 80092e4:	6013      	strmi	r3, [r2, #0]
 80092e6:	bf5c      	itt	pl
 80092e8:	2002      	movpl	r0, #2
 80092ea:	6013      	strpl	r3, [r2, #0]
 80092ec:	4770      	bx	lr
 80092ee:	b299      	uxth	r1, r3
 80092f0:	b909      	cbnz	r1, 80092f6 <__lo0bits+0x2a>
 80092f2:	2010      	movs	r0, #16
 80092f4:	0c1b      	lsrs	r3, r3, #16
 80092f6:	b2d9      	uxtb	r1, r3
 80092f8:	b909      	cbnz	r1, 80092fe <__lo0bits+0x32>
 80092fa:	3008      	adds	r0, #8
 80092fc:	0a1b      	lsrs	r3, r3, #8
 80092fe:	0719      	lsls	r1, r3, #28
 8009300:	bf04      	itt	eq
 8009302:	091b      	lsreq	r3, r3, #4
 8009304:	3004      	addeq	r0, #4
 8009306:	0799      	lsls	r1, r3, #30
 8009308:	bf04      	itt	eq
 800930a:	089b      	lsreq	r3, r3, #2
 800930c:	3002      	addeq	r0, #2
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	d403      	bmi.n	800931a <__lo0bits+0x4e>
 8009312:	085b      	lsrs	r3, r3, #1
 8009314:	f100 0001 	add.w	r0, r0, #1
 8009318:	d003      	beq.n	8009322 <__lo0bits+0x56>
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4770      	bx	lr
 800931e:	2000      	movs	r0, #0
 8009320:	4770      	bx	lr
 8009322:	2020      	movs	r0, #32
 8009324:	4770      	bx	lr
	...

08009328 <__i2b>:
 8009328:	b510      	push	{r4, lr}
 800932a:	460c      	mov	r4, r1
 800932c:	2101      	movs	r1, #1
 800932e:	f7ff febb 	bl	80090a8 <_Balloc>
 8009332:	4602      	mov	r2, r0
 8009334:	b928      	cbnz	r0, 8009342 <__i2b+0x1a>
 8009336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800933a:	4b04      	ldr	r3, [pc, #16]	; (800934c <__i2b+0x24>)
 800933c:	4804      	ldr	r0, [pc, #16]	; (8009350 <__i2b+0x28>)
 800933e:	f000 fdef 	bl	8009f20 <__assert_func>
 8009342:	2301      	movs	r3, #1
 8009344:	6144      	str	r4, [r0, #20]
 8009346:	6103      	str	r3, [r0, #16]
 8009348:	bd10      	pop	{r4, pc}
 800934a:	bf00      	nop
 800934c:	0800b140 	.word	0x0800b140
 8009350:	0800b1cc 	.word	0x0800b1cc

08009354 <__multiply>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	4691      	mov	r9, r2
 800935a:	690a      	ldr	r2, [r1, #16]
 800935c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009360:	460c      	mov	r4, r1
 8009362:	429a      	cmp	r2, r3
 8009364:	bfbe      	ittt	lt
 8009366:	460b      	movlt	r3, r1
 8009368:	464c      	movlt	r4, r9
 800936a:	4699      	movlt	r9, r3
 800936c:	6927      	ldr	r7, [r4, #16]
 800936e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009372:	68a3      	ldr	r3, [r4, #8]
 8009374:	6861      	ldr	r1, [r4, #4]
 8009376:	eb07 060a 	add.w	r6, r7, sl
 800937a:	42b3      	cmp	r3, r6
 800937c:	b085      	sub	sp, #20
 800937e:	bfb8      	it	lt
 8009380:	3101      	addlt	r1, #1
 8009382:	f7ff fe91 	bl	80090a8 <_Balloc>
 8009386:	b930      	cbnz	r0, 8009396 <__multiply+0x42>
 8009388:	4602      	mov	r2, r0
 800938a:	f240 115d 	movw	r1, #349	; 0x15d
 800938e:	4b43      	ldr	r3, [pc, #268]	; (800949c <__multiply+0x148>)
 8009390:	4843      	ldr	r0, [pc, #268]	; (80094a0 <__multiply+0x14c>)
 8009392:	f000 fdc5 	bl	8009f20 <__assert_func>
 8009396:	f100 0514 	add.w	r5, r0, #20
 800939a:	462b      	mov	r3, r5
 800939c:	2200      	movs	r2, #0
 800939e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093a2:	4543      	cmp	r3, r8
 80093a4:	d321      	bcc.n	80093ea <__multiply+0x96>
 80093a6:	f104 0314 	add.w	r3, r4, #20
 80093aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093ae:	f109 0314 	add.w	r3, r9, #20
 80093b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093b6:	9202      	str	r2, [sp, #8]
 80093b8:	1b3a      	subs	r2, r7, r4
 80093ba:	3a15      	subs	r2, #21
 80093bc:	f022 0203 	bic.w	r2, r2, #3
 80093c0:	3204      	adds	r2, #4
 80093c2:	f104 0115 	add.w	r1, r4, #21
 80093c6:	428f      	cmp	r7, r1
 80093c8:	bf38      	it	cc
 80093ca:	2204      	movcc	r2, #4
 80093cc:	9201      	str	r2, [sp, #4]
 80093ce:	9a02      	ldr	r2, [sp, #8]
 80093d0:	9303      	str	r3, [sp, #12]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d80c      	bhi.n	80093f0 <__multiply+0x9c>
 80093d6:	2e00      	cmp	r6, #0
 80093d8:	dd03      	ble.n	80093e2 <__multiply+0x8e>
 80093da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d059      	beq.n	8009496 <__multiply+0x142>
 80093e2:	6106      	str	r6, [r0, #16]
 80093e4:	b005      	add	sp, #20
 80093e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ea:	f843 2b04 	str.w	r2, [r3], #4
 80093ee:	e7d8      	b.n	80093a2 <__multiply+0x4e>
 80093f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80093f4:	f1ba 0f00 	cmp.w	sl, #0
 80093f8:	d023      	beq.n	8009442 <__multiply+0xee>
 80093fa:	46a9      	mov	r9, r5
 80093fc:	f04f 0c00 	mov.w	ip, #0
 8009400:	f104 0e14 	add.w	lr, r4, #20
 8009404:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009408:	f8d9 1000 	ldr.w	r1, [r9]
 800940c:	fa1f fb82 	uxth.w	fp, r2
 8009410:	b289      	uxth	r1, r1
 8009412:	fb0a 110b 	mla	r1, sl, fp, r1
 8009416:	4461      	add	r1, ip
 8009418:	f8d9 c000 	ldr.w	ip, [r9]
 800941c:	0c12      	lsrs	r2, r2, #16
 800941e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009422:	fb0a c202 	mla	r2, sl, r2, ip
 8009426:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800942a:	b289      	uxth	r1, r1
 800942c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009430:	4577      	cmp	r7, lr
 8009432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009436:	f849 1b04 	str.w	r1, [r9], #4
 800943a:	d8e3      	bhi.n	8009404 <__multiply+0xb0>
 800943c:	9a01      	ldr	r2, [sp, #4]
 800943e:	f845 c002 	str.w	ip, [r5, r2]
 8009442:	9a03      	ldr	r2, [sp, #12]
 8009444:	3304      	adds	r3, #4
 8009446:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800944a:	f1b9 0f00 	cmp.w	r9, #0
 800944e:	d020      	beq.n	8009492 <__multiply+0x13e>
 8009450:	46ae      	mov	lr, r5
 8009452:	f04f 0a00 	mov.w	sl, #0
 8009456:	6829      	ldr	r1, [r5, #0]
 8009458:	f104 0c14 	add.w	ip, r4, #20
 800945c:	f8bc b000 	ldrh.w	fp, [ip]
 8009460:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009464:	b289      	uxth	r1, r1
 8009466:	fb09 220b 	mla	r2, r9, fp, r2
 800946a:	4492      	add	sl, r2
 800946c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009470:	f84e 1b04 	str.w	r1, [lr], #4
 8009474:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009478:	f8be 1000 	ldrh.w	r1, [lr]
 800947c:	0c12      	lsrs	r2, r2, #16
 800947e:	fb09 1102 	mla	r1, r9, r2, r1
 8009482:	4567      	cmp	r7, ip
 8009484:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009488:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800948c:	d8e6      	bhi.n	800945c <__multiply+0x108>
 800948e:	9a01      	ldr	r2, [sp, #4]
 8009490:	50a9      	str	r1, [r5, r2]
 8009492:	3504      	adds	r5, #4
 8009494:	e79b      	b.n	80093ce <__multiply+0x7a>
 8009496:	3e01      	subs	r6, #1
 8009498:	e79d      	b.n	80093d6 <__multiply+0x82>
 800949a:	bf00      	nop
 800949c:	0800b140 	.word	0x0800b140
 80094a0:	0800b1cc 	.word	0x0800b1cc

080094a4 <__pow5mult>:
 80094a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a8:	4615      	mov	r5, r2
 80094aa:	f012 0203 	ands.w	r2, r2, #3
 80094ae:	4606      	mov	r6, r0
 80094b0:	460f      	mov	r7, r1
 80094b2:	d007      	beq.n	80094c4 <__pow5mult+0x20>
 80094b4:	4c25      	ldr	r4, [pc, #148]	; (800954c <__pow5mult+0xa8>)
 80094b6:	3a01      	subs	r2, #1
 80094b8:	2300      	movs	r3, #0
 80094ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094be:	f7ff fe55 	bl	800916c <__multadd>
 80094c2:	4607      	mov	r7, r0
 80094c4:	10ad      	asrs	r5, r5, #2
 80094c6:	d03d      	beq.n	8009544 <__pow5mult+0xa0>
 80094c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094ca:	b97c      	cbnz	r4, 80094ec <__pow5mult+0x48>
 80094cc:	2010      	movs	r0, #16
 80094ce:	f7ff fdc3 	bl	8009058 <malloc>
 80094d2:	4602      	mov	r2, r0
 80094d4:	6270      	str	r0, [r6, #36]	; 0x24
 80094d6:	b928      	cbnz	r0, 80094e4 <__pow5mult+0x40>
 80094d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094dc:	4b1c      	ldr	r3, [pc, #112]	; (8009550 <__pow5mult+0xac>)
 80094de:	481d      	ldr	r0, [pc, #116]	; (8009554 <__pow5mult+0xb0>)
 80094e0:	f000 fd1e 	bl	8009f20 <__assert_func>
 80094e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094e8:	6004      	str	r4, [r0, #0]
 80094ea:	60c4      	str	r4, [r0, #12]
 80094ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094f4:	b94c      	cbnz	r4, 800950a <__pow5mult+0x66>
 80094f6:	f240 2171 	movw	r1, #625	; 0x271
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7ff ff14 	bl	8009328 <__i2b>
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	f8c8 0008 	str.w	r0, [r8, #8]
 8009508:	6003      	str	r3, [r0, #0]
 800950a:	f04f 0900 	mov.w	r9, #0
 800950e:	07eb      	lsls	r3, r5, #31
 8009510:	d50a      	bpl.n	8009528 <__pow5mult+0x84>
 8009512:	4639      	mov	r1, r7
 8009514:	4622      	mov	r2, r4
 8009516:	4630      	mov	r0, r6
 8009518:	f7ff ff1c 	bl	8009354 <__multiply>
 800951c:	4680      	mov	r8, r0
 800951e:	4639      	mov	r1, r7
 8009520:	4630      	mov	r0, r6
 8009522:	f7ff fe01 	bl	8009128 <_Bfree>
 8009526:	4647      	mov	r7, r8
 8009528:	106d      	asrs	r5, r5, #1
 800952a:	d00b      	beq.n	8009544 <__pow5mult+0xa0>
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	b938      	cbnz	r0, 8009540 <__pow5mult+0x9c>
 8009530:	4622      	mov	r2, r4
 8009532:	4621      	mov	r1, r4
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff ff0d 	bl	8009354 <__multiply>
 800953a:	6020      	str	r0, [r4, #0]
 800953c:	f8c0 9000 	str.w	r9, [r0]
 8009540:	4604      	mov	r4, r0
 8009542:	e7e4      	b.n	800950e <__pow5mult+0x6a>
 8009544:	4638      	mov	r0, r7
 8009546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954a:	bf00      	nop
 800954c:	0800b318 	.word	0x0800b318
 8009550:	0800b0ce 	.word	0x0800b0ce
 8009554:	0800b1cc 	.word	0x0800b1cc

08009558 <__lshift>:
 8009558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800955c:	460c      	mov	r4, r1
 800955e:	4607      	mov	r7, r0
 8009560:	4691      	mov	r9, r2
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	6849      	ldr	r1, [r1, #4]
 8009566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800956a:	68a3      	ldr	r3, [r4, #8]
 800956c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009570:	f108 0601 	add.w	r6, r8, #1
 8009574:	42b3      	cmp	r3, r6
 8009576:	db0b      	blt.n	8009590 <__lshift+0x38>
 8009578:	4638      	mov	r0, r7
 800957a:	f7ff fd95 	bl	80090a8 <_Balloc>
 800957e:	4605      	mov	r5, r0
 8009580:	b948      	cbnz	r0, 8009596 <__lshift+0x3e>
 8009582:	4602      	mov	r2, r0
 8009584:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009588:	4b29      	ldr	r3, [pc, #164]	; (8009630 <__lshift+0xd8>)
 800958a:	482a      	ldr	r0, [pc, #168]	; (8009634 <__lshift+0xdc>)
 800958c:	f000 fcc8 	bl	8009f20 <__assert_func>
 8009590:	3101      	adds	r1, #1
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	e7ee      	b.n	8009574 <__lshift+0x1c>
 8009596:	2300      	movs	r3, #0
 8009598:	f100 0114 	add.w	r1, r0, #20
 800959c:	f100 0210 	add.w	r2, r0, #16
 80095a0:	4618      	mov	r0, r3
 80095a2:	4553      	cmp	r3, sl
 80095a4:	db37      	blt.n	8009616 <__lshift+0xbe>
 80095a6:	6920      	ldr	r0, [r4, #16]
 80095a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095ac:	f104 0314 	add.w	r3, r4, #20
 80095b0:	f019 091f 	ands.w	r9, r9, #31
 80095b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095bc:	d02f      	beq.n	800961e <__lshift+0xc6>
 80095be:	468a      	mov	sl, r1
 80095c0:	f04f 0c00 	mov.w	ip, #0
 80095c4:	f1c9 0e20 	rsb	lr, r9, #32
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	fa02 f209 	lsl.w	r2, r2, r9
 80095ce:	ea42 020c 	orr.w	r2, r2, ip
 80095d2:	f84a 2b04 	str.w	r2, [sl], #4
 80095d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095da:	4298      	cmp	r0, r3
 80095dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80095e0:	d8f2      	bhi.n	80095c8 <__lshift+0x70>
 80095e2:	1b03      	subs	r3, r0, r4
 80095e4:	3b15      	subs	r3, #21
 80095e6:	f023 0303 	bic.w	r3, r3, #3
 80095ea:	3304      	adds	r3, #4
 80095ec:	f104 0215 	add.w	r2, r4, #21
 80095f0:	4290      	cmp	r0, r2
 80095f2:	bf38      	it	cc
 80095f4:	2304      	movcc	r3, #4
 80095f6:	f841 c003 	str.w	ip, [r1, r3]
 80095fa:	f1bc 0f00 	cmp.w	ip, #0
 80095fe:	d001      	beq.n	8009604 <__lshift+0xac>
 8009600:	f108 0602 	add.w	r6, r8, #2
 8009604:	3e01      	subs	r6, #1
 8009606:	4638      	mov	r0, r7
 8009608:	4621      	mov	r1, r4
 800960a:	612e      	str	r6, [r5, #16]
 800960c:	f7ff fd8c 	bl	8009128 <_Bfree>
 8009610:	4628      	mov	r0, r5
 8009612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009616:	f842 0f04 	str.w	r0, [r2, #4]!
 800961a:	3301      	adds	r3, #1
 800961c:	e7c1      	b.n	80095a2 <__lshift+0x4a>
 800961e:	3904      	subs	r1, #4
 8009620:	f853 2b04 	ldr.w	r2, [r3], #4
 8009624:	4298      	cmp	r0, r3
 8009626:	f841 2f04 	str.w	r2, [r1, #4]!
 800962a:	d8f9      	bhi.n	8009620 <__lshift+0xc8>
 800962c:	e7ea      	b.n	8009604 <__lshift+0xac>
 800962e:	bf00      	nop
 8009630:	0800b140 	.word	0x0800b140
 8009634:	0800b1cc 	.word	0x0800b1cc

08009638 <__mcmp>:
 8009638:	4603      	mov	r3, r0
 800963a:	690a      	ldr	r2, [r1, #16]
 800963c:	6900      	ldr	r0, [r0, #16]
 800963e:	b530      	push	{r4, r5, lr}
 8009640:	1a80      	subs	r0, r0, r2
 8009642:	d10d      	bne.n	8009660 <__mcmp+0x28>
 8009644:	3314      	adds	r3, #20
 8009646:	3114      	adds	r1, #20
 8009648:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800964c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009650:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009654:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009658:	4295      	cmp	r5, r2
 800965a:	d002      	beq.n	8009662 <__mcmp+0x2a>
 800965c:	d304      	bcc.n	8009668 <__mcmp+0x30>
 800965e:	2001      	movs	r0, #1
 8009660:	bd30      	pop	{r4, r5, pc}
 8009662:	42a3      	cmp	r3, r4
 8009664:	d3f4      	bcc.n	8009650 <__mcmp+0x18>
 8009666:	e7fb      	b.n	8009660 <__mcmp+0x28>
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	e7f8      	b.n	8009660 <__mcmp+0x28>
	...

08009670 <__mdiff>:
 8009670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	460d      	mov	r5, r1
 8009676:	4607      	mov	r7, r0
 8009678:	4611      	mov	r1, r2
 800967a:	4628      	mov	r0, r5
 800967c:	4614      	mov	r4, r2
 800967e:	f7ff ffdb 	bl	8009638 <__mcmp>
 8009682:	1e06      	subs	r6, r0, #0
 8009684:	d111      	bne.n	80096aa <__mdiff+0x3a>
 8009686:	4631      	mov	r1, r6
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff fd0d 	bl	80090a8 <_Balloc>
 800968e:	4602      	mov	r2, r0
 8009690:	b928      	cbnz	r0, 800969e <__mdiff+0x2e>
 8009692:	f240 2132 	movw	r1, #562	; 0x232
 8009696:	4b3a      	ldr	r3, [pc, #232]	; (8009780 <__mdiff+0x110>)
 8009698:	483a      	ldr	r0, [pc, #232]	; (8009784 <__mdiff+0x114>)
 800969a:	f000 fc41 	bl	8009f20 <__assert_func>
 800969e:	2301      	movs	r3, #1
 80096a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80096a4:	4610      	mov	r0, r2
 80096a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096aa:	bfa4      	itt	ge
 80096ac:	4623      	movge	r3, r4
 80096ae:	462c      	movge	r4, r5
 80096b0:	4638      	mov	r0, r7
 80096b2:	6861      	ldr	r1, [r4, #4]
 80096b4:	bfa6      	itte	ge
 80096b6:	461d      	movge	r5, r3
 80096b8:	2600      	movge	r6, #0
 80096ba:	2601      	movlt	r6, #1
 80096bc:	f7ff fcf4 	bl	80090a8 <_Balloc>
 80096c0:	4602      	mov	r2, r0
 80096c2:	b918      	cbnz	r0, 80096cc <__mdiff+0x5c>
 80096c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096c8:	4b2d      	ldr	r3, [pc, #180]	; (8009780 <__mdiff+0x110>)
 80096ca:	e7e5      	b.n	8009698 <__mdiff+0x28>
 80096cc:	f102 0814 	add.w	r8, r2, #20
 80096d0:	46c2      	mov	sl, r8
 80096d2:	f04f 0c00 	mov.w	ip, #0
 80096d6:	6927      	ldr	r7, [r4, #16]
 80096d8:	60c6      	str	r6, [r0, #12]
 80096da:	692e      	ldr	r6, [r5, #16]
 80096dc:	f104 0014 	add.w	r0, r4, #20
 80096e0:	f105 0914 	add.w	r9, r5, #20
 80096e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80096e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096ec:	3410      	adds	r4, #16
 80096ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80096f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80096f6:	fa1f f18b 	uxth.w	r1, fp
 80096fa:	448c      	add	ip, r1
 80096fc:	b299      	uxth	r1, r3
 80096fe:	0c1b      	lsrs	r3, r3, #16
 8009700:	ebac 0101 	sub.w	r1, ip, r1
 8009704:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009708:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800970c:	b289      	uxth	r1, r1
 800970e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009712:	454e      	cmp	r6, r9
 8009714:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009718:	f84a 3b04 	str.w	r3, [sl], #4
 800971c:	d8e7      	bhi.n	80096ee <__mdiff+0x7e>
 800971e:	1b73      	subs	r3, r6, r5
 8009720:	3b15      	subs	r3, #21
 8009722:	f023 0303 	bic.w	r3, r3, #3
 8009726:	3515      	adds	r5, #21
 8009728:	3304      	adds	r3, #4
 800972a:	42ae      	cmp	r6, r5
 800972c:	bf38      	it	cc
 800972e:	2304      	movcc	r3, #4
 8009730:	4418      	add	r0, r3
 8009732:	4443      	add	r3, r8
 8009734:	461e      	mov	r6, r3
 8009736:	4605      	mov	r5, r0
 8009738:	4575      	cmp	r5, lr
 800973a:	d30e      	bcc.n	800975a <__mdiff+0xea>
 800973c:	f10e 0103 	add.w	r1, lr, #3
 8009740:	1a09      	subs	r1, r1, r0
 8009742:	f021 0103 	bic.w	r1, r1, #3
 8009746:	3803      	subs	r0, #3
 8009748:	4586      	cmp	lr, r0
 800974a:	bf38      	it	cc
 800974c:	2100      	movcc	r1, #0
 800974e:	4419      	add	r1, r3
 8009750:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009754:	b18b      	cbz	r3, 800977a <__mdiff+0x10a>
 8009756:	6117      	str	r7, [r2, #16]
 8009758:	e7a4      	b.n	80096a4 <__mdiff+0x34>
 800975a:	f855 8b04 	ldr.w	r8, [r5], #4
 800975e:	fa1f f188 	uxth.w	r1, r8
 8009762:	4461      	add	r1, ip
 8009764:	140c      	asrs	r4, r1, #16
 8009766:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800976a:	b289      	uxth	r1, r1
 800976c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009770:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009774:	f846 1b04 	str.w	r1, [r6], #4
 8009778:	e7de      	b.n	8009738 <__mdiff+0xc8>
 800977a:	3f01      	subs	r7, #1
 800977c:	e7e8      	b.n	8009750 <__mdiff+0xe0>
 800977e:	bf00      	nop
 8009780:	0800b140 	.word	0x0800b140
 8009784:	0800b1cc 	.word	0x0800b1cc

08009788 <__ulp>:
 8009788:	4b11      	ldr	r3, [pc, #68]	; (80097d0 <__ulp+0x48>)
 800978a:	400b      	ands	r3, r1
 800978c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009790:	2b00      	cmp	r3, #0
 8009792:	dd02      	ble.n	800979a <__ulp+0x12>
 8009794:	2000      	movs	r0, #0
 8009796:	4619      	mov	r1, r3
 8009798:	4770      	bx	lr
 800979a:	425b      	negs	r3, r3
 800979c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80097a0:	f04f 0000 	mov.w	r0, #0
 80097a4:	f04f 0100 	mov.w	r1, #0
 80097a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097ac:	da04      	bge.n	80097b8 <__ulp+0x30>
 80097ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097b2:	fa43 f102 	asr.w	r1, r3, r2
 80097b6:	4770      	bx	lr
 80097b8:	f1a2 0314 	sub.w	r3, r2, #20
 80097bc:	2b1e      	cmp	r3, #30
 80097be:	bfd6      	itet	le
 80097c0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80097c4:	2301      	movgt	r3, #1
 80097c6:	fa22 f303 	lsrle.w	r3, r2, r3
 80097ca:	4618      	mov	r0, r3
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	7ff00000 	.word	0x7ff00000

080097d4 <__b2d>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	6907      	ldr	r7, [r0, #16]
 80097da:	f100 0914 	add.w	r9, r0, #20
 80097de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80097e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80097e6:	f1a7 0804 	sub.w	r8, r7, #4
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff fd4e 	bl	800928c <__hi0bits>
 80097f0:	f1c0 0320 	rsb	r3, r0, #32
 80097f4:	280a      	cmp	r0, #10
 80097f6:	600b      	str	r3, [r1, #0]
 80097f8:	491f      	ldr	r1, [pc, #124]	; (8009878 <__b2d+0xa4>)
 80097fa:	dc17      	bgt.n	800982c <__b2d+0x58>
 80097fc:	45c1      	cmp	r9, r8
 80097fe:	bf28      	it	cs
 8009800:	2200      	movcs	r2, #0
 8009802:	f1c0 0c0b 	rsb	ip, r0, #11
 8009806:	fa26 f30c 	lsr.w	r3, r6, ip
 800980a:	bf38      	it	cc
 800980c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009810:	ea43 0501 	orr.w	r5, r3, r1
 8009814:	f100 0315 	add.w	r3, r0, #21
 8009818:	fa06 f303 	lsl.w	r3, r6, r3
 800981c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009820:	ea43 0402 	orr.w	r4, r3, r2
 8009824:	4620      	mov	r0, r4
 8009826:	4629      	mov	r1, r5
 8009828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982c:	45c1      	cmp	r9, r8
 800982e:	bf2e      	itee	cs
 8009830:	2200      	movcs	r2, #0
 8009832:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009836:	f1a7 0808 	subcc.w	r8, r7, #8
 800983a:	f1b0 030b 	subs.w	r3, r0, #11
 800983e:	d016      	beq.n	800986e <__b2d+0x9a>
 8009840:	f1c3 0720 	rsb	r7, r3, #32
 8009844:	fa22 f107 	lsr.w	r1, r2, r7
 8009848:	45c8      	cmp	r8, r9
 800984a:	fa06 f603 	lsl.w	r6, r6, r3
 800984e:	ea46 0601 	orr.w	r6, r6, r1
 8009852:	bf94      	ite	ls
 8009854:	2100      	movls	r1, #0
 8009856:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800985a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800985e:	fa02 f003 	lsl.w	r0, r2, r3
 8009862:	40f9      	lsrs	r1, r7
 8009864:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009868:	ea40 0401 	orr.w	r4, r0, r1
 800986c:	e7da      	b.n	8009824 <__b2d+0x50>
 800986e:	4614      	mov	r4, r2
 8009870:	ea46 0501 	orr.w	r5, r6, r1
 8009874:	e7d6      	b.n	8009824 <__b2d+0x50>
 8009876:	bf00      	nop
 8009878:	3ff00000 	.word	0x3ff00000

0800987c <__d2b>:
 800987c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009880:	2101      	movs	r1, #1
 8009882:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009886:	4690      	mov	r8, r2
 8009888:	461d      	mov	r5, r3
 800988a:	f7ff fc0d 	bl	80090a8 <_Balloc>
 800988e:	4604      	mov	r4, r0
 8009890:	b930      	cbnz	r0, 80098a0 <__d2b+0x24>
 8009892:	4602      	mov	r2, r0
 8009894:	f240 310a 	movw	r1, #778	; 0x30a
 8009898:	4b24      	ldr	r3, [pc, #144]	; (800992c <__d2b+0xb0>)
 800989a:	4825      	ldr	r0, [pc, #148]	; (8009930 <__d2b+0xb4>)
 800989c:	f000 fb40 	bl	8009f20 <__assert_func>
 80098a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80098a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80098a8:	bb2d      	cbnz	r5, 80098f6 <__d2b+0x7a>
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	f1b8 0300 	subs.w	r3, r8, #0
 80098b0:	d026      	beq.n	8009900 <__d2b+0x84>
 80098b2:	4668      	mov	r0, sp
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	f7ff fd09 	bl	80092cc <__lo0bits>
 80098ba:	9900      	ldr	r1, [sp, #0]
 80098bc:	b1f0      	cbz	r0, 80098fc <__d2b+0x80>
 80098be:	9a01      	ldr	r2, [sp, #4]
 80098c0:	f1c0 0320 	rsb	r3, r0, #32
 80098c4:	fa02 f303 	lsl.w	r3, r2, r3
 80098c8:	430b      	orrs	r3, r1
 80098ca:	40c2      	lsrs	r2, r0
 80098cc:	6163      	str	r3, [r4, #20]
 80098ce:	9201      	str	r2, [sp, #4]
 80098d0:	9b01      	ldr	r3, [sp, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bf14      	ite	ne
 80098d6:	2102      	movne	r1, #2
 80098d8:	2101      	moveq	r1, #1
 80098da:	61a3      	str	r3, [r4, #24]
 80098dc:	6121      	str	r1, [r4, #16]
 80098de:	b1c5      	cbz	r5, 8009912 <__d2b+0x96>
 80098e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098e4:	4405      	add	r5, r0
 80098e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098ea:	603d      	str	r5, [r7, #0]
 80098ec:	6030      	str	r0, [r6, #0]
 80098ee:	4620      	mov	r0, r4
 80098f0:	b002      	add	sp, #8
 80098f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098fa:	e7d6      	b.n	80098aa <__d2b+0x2e>
 80098fc:	6161      	str	r1, [r4, #20]
 80098fe:	e7e7      	b.n	80098d0 <__d2b+0x54>
 8009900:	a801      	add	r0, sp, #4
 8009902:	f7ff fce3 	bl	80092cc <__lo0bits>
 8009906:	2101      	movs	r1, #1
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	6121      	str	r1, [r4, #16]
 800990c:	6163      	str	r3, [r4, #20]
 800990e:	3020      	adds	r0, #32
 8009910:	e7e5      	b.n	80098de <__d2b+0x62>
 8009912:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009916:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800991a:	6038      	str	r0, [r7, #0]
 800991c:	6918      	ldr	r0, [r3, #16]
 800991e:	f7ff fcb5 	bl	800928c <__hi0bits>
 8009922:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009926:	6031      	str	r1, [r6, #0]
 8009928:	e7e1      	b.n	80098ee <__d2b+0x72>
 800992a:	bf00      	nop
 800992c:	0800b140 	.word	0x0800b140
 8009930:	0800b1cc 	.word	0x0800b1cc

08009934 <__ratio>:
 8009934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	4688      	mov	r8, r1
 800993a:	4669      	mov	r1, sp
 800993c:	4681      	mov	r9, r0
 800993e:	f7ff ff49 	bl	80097d4 <__b2d>
 8009942:	460f      	mov	r7, r1
 8009944:	4604      	mov	r4, r0
 8009946:	460d      	mov	r5, r1
 8009948:	4640      	mov	r0, r8
 800994a:	a901      	add	r1, sp, #4
 800994c:	f7ff ff42 	bl	80097d4 <__b2d>
 8009950:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009954:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009958:	468b      	mov	fp, r1
 800995a:	eba3 0c02 	sub.w	ip, r3, r2
 800995e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009962:	1a9b      	subs	r3, r3, r2
 8009964:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009968:	2b00      	cmp	r3, #0
 800996a:	bfd5      	itete	le
 800996c:	460a      	movle	r2, r1
 800996e:	462a      	movgt	r2, r5
 8009970:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009974:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009978:	bfd8      	it	le
 800997a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800997e:	465b      	mov	r3, fp
 8009980:	4602      	mov	r2, r0
 8009982:	4639      	mov	r1, r7
 8009984:	4620      	mov	r0, r4
 8009986:	f7f6 fed1 	bl	800072c <__aeabi_ddiv>
 800998a:	b003      	add	sp, #12
 800998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009990 <__copybits>:
 8009990:	3901      	subs	r1, #1
 8009992:	b570      	push	{r4, r5, r6, lr}
 8009994:	1149      	asrs	r1, r1, #5
 8009996:	6914      	ldr	r4, [r2, #16]
 8009998:	3101      	adds	r1, #1
 800999a:	f102 0314 	add.w	r3, r2, #20
 800999e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099a6:	1f05      	subs	r5, r0, #4
 80099a8:	42a3      	cmp	r3, r4
 80099aa:	d30c      	bcc.n	80099c6 <__copybits+0x36>
 80099ac:	1aa3      	subs	r3, r4, r2
 80099ae:	3b11      	subs	r3, #17
 80099b0:	f023 0303 	bic.w	r3, r3, #3
 80099b4:	3211      	adds	r2, #17
 80099b6:	42a2      	cmp	r2, r4
 80099b8:	bf88      	it	hi
 80099ba:	2300      	movhi	r3, #0
 80099bc:	4418      	add	r0, r3
 80099be:	2300      	movs	r3, #0
 80099c0:	4288      	cmp	r0, r1
 80099c2:	d305      	bcc.n	80099d0 <__copybits+0x40>
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
 80099c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80099ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80099ce:	e7eb      	b.n	80099a8 <__copybits+0x18>
 80099d0:	f840 3b04 	str.w	r3, [r0], #4
 80099d4:	e7f4      	b.n	80099c0 <__copybits+0x30>

080099d6 <__any_on>:
 80099d6:	f100 0214 	add.w	r2, r0, #20
 80099da:	6900      	ldr	r0, [r0, #16]
 80099dc:	114b      	asrs	r3, r1, #5
 80099de:	4298      	cmp	r0, r3
 80099e0:	b510      	push	{r4, lr}
 80099e2:	db11      	blt.n	8009a08 <__any_on+0x32>
 80099e4:	dd0a      	ble.n	80099fc <__any_on+0x26>
 80099e6:	f011 011f 	ands.w	r1, r1, #31
 80099ea:	d007      	beq.n	80099fc <__any_on+0x26>
 80099ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099f0:	fa24 f001 	lsr.w	r0, r4, r1
 80099f4:	fa00 f101 	lsl.w	r1, r0, r1
 80099f8:	428c      	cmp	r4, r1
 80099fa:	d10b      	bne.n	8009a14 <__any_on+0x3e>
 80099fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d803      	bhi.n	8009a0c <__any_on+0x36>
 8009a04:	2000      	movs	r0, #0
 8009a06:	bd10      	pop	{r4, pc}
 8009a08:	4603      	mov	r3, r0
 8009a0a:	e7f7      	b.n	80099fc <__any_on+0x26>
 8009a0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a10:	2900      	cmp	r1, #0
 8009a12:	d0f5      	beq.n	8009a00 <__any_on+0x2a>
 8009a14:	2001      	movs	r0, #1
 8009a16:	e7f6      	b.n	8009a06 <__any_on+0x30>

08009a18 <_calloc_r>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8009a1e:	b934      	cbnz	r4, 8009a2e <_calloc_r+0x16>
 8009a20:	4629      	mov	r1, r5
 8009a22:	f000 f875 	bl	8009b10 <_malloc_r>
 8009a26:	4606      	mov	r6, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <_calloc_r+0x1e>
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	220c      	movs	r2, #12
 8009a30:	2600      	movs	r6, #0
 8009a32:	6002      	str	r2, [r0, #0]
 8009a34:	e7f9      	b.n	8009a2a <_calloc_r+0x12>
 8009a36:	462a      	mov	r2, r5
 8009a38:	4621      	mov	r1, r4
 8009a3a:	f7fc fbff 	bl	800623c <memset>
 8009a3e:	e7f4      	b.n	8009a2a <_calloc_r+0x12>

08009a40 <_free_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4605      	mov	r5, r0
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d040      	beq.n	8009aca <_free_r+0x8a>
 8009a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a4c:	1f0c      	subs	r4, r1, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfb8      	it	lt
 8009a52:	18e4      	addlt	r4, r4, r3
 8009a54:	f000 faae 	bl	8009fb4 <__malloc_lock>
 8009a58:	4a1c      	ldr	r2, [pc, #112]	; (8009acc <_free_r+0x8c>)
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	b933      	cbnz	r3, 8009a6c <_free_r+0x2c>
 8009a5e:	6063      	str	r3, [r4, #4]
 8009a60:	6014      	str	r4, [r2, #0]
 8009a62:	4628      	mov	r0, r5
 8009a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a68:	f000 baaa 	b.w	8009fc0 <__malloc_unlock>
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	d908      	bls.n	8009a82 <_free_r+0x42>
 8009a70:	6820      	ldr	r0, [r4, #0]
 8009a72:	1821      	adds	r1, r4, r0
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf01      	itttt	eq
 8009a78:	6819      	ldreq	r1, [r3, #0]
 8009a7a:	685b      	ldreq	r3, [r3, #4]
 8009a7c:	1809      	addeq	r1, r1, r0
 8009a7e:	6021      	streq	r1, [r4, #0]
 8009a80:	e7ed      	b.n	8009a5e <_free_r+0x1e>
 8009a82:	461a      	mov	r2, r3
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	b10b      	cbz	r3, 8009a8c <_free_r+0x4c>
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d9fa      	bls.n	8009a82 <_free_r+0x42>
 8009a8c:	6811      	ldr	r1, [r2, #0]
 8009a8e:	1850      	adds	r0, r2, r1
 8009a90:	42a0      	cmp	r0, r4
 8009a92:	d10b      	bne.n	8009aac <_free_r+0x6c>
 8009a94:	6820      	ldr	r0, [r4, #0]
 8009a96:	4401      	add	r1, r0
 8009a98:	1850      	adds	r0, r2, r1
 8009a9a:	4283      	cmp	r3, r0
 8009a9c:	6011      	str	r1, [r2, #0]
 8009a9e:	d1e0      	bne.n	8009a62 <_free_r+0x22>
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4401      	add	r1, r0
 8009aa6:	6011      	str	r1, [r2, #0]
 8009aa8:	6053      	str	r3, [r2, #4]
 8009aaa:	e7da      	b.n	8009a62 <_free_r+0x22>
 8009aac:	d902      	bls.n	8009ab4 <_free_r+0x74>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	e7d6      	b.n	8009a62 <_free_r+0x22>
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	1821      	adds	r1, r4, r0
 8009ab8:	428b      	cmp	r3, r1
 8009aba:	bf01      	itttt	eq
 8009abc:	6819      	ldreq	r1, [r3, #0]
 8009abe:	685b      	ldreq	r3, [r3, #4]
 8009ac0:	1809      	addeq	r1, r1, r0
 8009ac2:	6021      	streq	r1, [r4, #0]
 8009ac4:	6063      	str	r3, [r4, #4]
 8009ac6:	6054      	str	r4, [r2, #4]
 8009ac8:	e7cb      	b.n	8009a62 <_free_r+0x22>
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	200004f8 	.word	0x200004f8

08009ad0 <sbrk_aligned>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4e0e      	ldr	r6, [pc, #56]	; (8009b0c <sbrk_aligned+0x3c>)
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	6831      	ldr	r1, [r6, #0]
 8009ad8:	4605      	mov	r5, r0
 8009ada:	b911      	cbnz	r1, 8009ae2 <sbrk_aligned+0x12>
 8009adc:	f000 f9ee 	bl	8009ebc <_sbrk_r>
 8009ae0:	6030      	str	r0, [r6, #0]
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 f9e9 	bl	8009ebc <_sbrk_r>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	d00a      	beq.n	8009b04 <sbrk_aligned+0x34>
 8009aee:	1cc4      	adds	r4, r0, #3
 8009af0:	f024 0403 	bic.w	r4, r4, #3
 8009af4:	42a0      	cmp	r0, r4
 8009af6:	d007      	beq.n	8009b08 <sbrk_aligned+0x38>
 8009af8:	1a21      	subs	r1, r4, r0
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 f9de 	bl	8009ebc <_sbrk_r>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d101      	bne.n	8009b08 <sbrk_aligned+0x38>
 8009b04:	f04f 34ff 	mov.w	r4, #4294967295
 8009b08:	4620      	mov	r0, r4
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	200004fc 	.word	0x200004fc

08009b10 <_malloc_r>:
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	1ccd      	adds	r5, r1, #3
 8009b16:	f025 0503 	bic.w	r5, r5, #3
 8009b1a:	3508      	adds	r5, #8
 8009b1c:	2d0c      	cmp	r5, #12
 8009b1e:	bf38      	it	cc
 8009b20:	250c      	movcc	r5, #12
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	4607      	mov	r7, r0
 8009b26:	db01      	blt.n	8009b2c <_malloc_r+0x1c>
 8009b28:	42a9      	cmp	r1, r5
 8009b2a:	d905      	bls.n	8009b38 <_malloc_r+0x28>
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	2600      	movs	r6, #0
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	4630      	mov	r0, r6
 8009b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b38:	4e2e      	ldr	r6, [pc, #184]	; (8009bf4 <_malloc_r+0xe4>)
 8009b3a:	f000 fa3b 	bl	8009fb4 <__malloc_lock>
 8009b3e:	6833      	ldr	r3, [r6, #0]
 8009b40:	461c      	mov	r4, r3
 8009b42:	bb34      	cbnz	r4, 8009b92 <_malloc_r+0x82>
 8009b44:	4629      	mov	r1, r5
 8009b46:	4638      	mov	r0, r7
 8009b48:	f7ff ffc2 	bl	8009ad0 <sbrk_aligned>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	4604      	mov	r4, r0
 8009b50:	d14d      	bne.n	8009bee <_malloc_r+0xde>
 8009b52:	6834      	ldr	r4, [r6, #0]
 8009b54:	4626      	mov	r6, r4
 8009b56:	2e00      	cmp	r6, #0
 8009b58:	d140      	bne.n	8009bdc <_malloc_r+0xcc>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4638      	mov	r0, r7
 8009b60:	eb04 0803 	add.w	r8, r4, r3
 8009b64:	f000 f9aa 	bl	8009ebc <_sbrk_r>
 8009b68:	4580      	cmp	r8, r0
 8009b6a:	d13a      	bne.n	8009be2 <_malloc_r+0xd2>
 8009b6c:	6821      	ldr	r1, [r4, #0]
 8009b6e:	3503      	adds	r5, #3
 8009b70:	1a6d      	subs	r5, r5, r1
 8009b72:	f025 0503 	bic.w	r5, r5, #3
 8009b76:	3508      	adds	r5, #8
 8009b78:	2d0c      	cmp	r5, #12
 8009b7a:	bf38      	it	cc
 8009b7c:	250c      	movcc	r5, #12
 8009b7e:	4638      	mov	r0, r7
 8009b80:	4629      	mov	r1, r5
 8009b82:	f7ff ffa5 	bl	8009ad0 <sbrk_aligned>
 8009b86:	3001      	adds	r0, #1
 8009b88:	d02b      	beq.n	8009be2 <_malloc_r+0xd2>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	442b      	add	r3, r5
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	e00e      	b.n	8009bb0 <_malloc_r+0xa0>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	1b52      	subs	r2, r2, r5
 8009b96:	d41e      	bmi.n	8009bd6 <_malloc_r+0xc6>
 8009b98:	2a0b      	cmp	r2, #11
 8009b9a:	d916      	bls.n	8009bca <_malloc_r+0xba>
 8009b9c:	1961      	adds	r1, r4, r5
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	6025      	str	r5, [r4, #0]
 8009ba2:	bf18      	it	ne
 8009ba4:	6059      	strne	r1, [r3, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	bf08      	it	eq
 8009baa:	6031      	streq	r1, [r6, #0]
 8009bac:	5162      	str	r2, [r4, r5]
 8009bae:	604b      	str	r3, [r1, #4]
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	f104 060b 	add.w	r6, r4, #11
 8009bb6:	f000 fa03 	bl	8009fc0 <__malloc_unlock>
 8009bba:	f026 0607 	bic.w	r6, r6, #7
 8009bbe:	1d23      	adds	r3, r4, #4
 8009bc0:	1af2      	subs	r2, r6, r3
 8009bc2:	d0b6      	beq.n	8009b32 <_malloc_r+0x22>
 8009bc4:	1b9b      	subs	r3, r3, r6
 8009bc6:	50a3      	str	r3, [r4, r2]
 8009bc8:	e7b3      	b.n	8009b32 <_malloc_r+0x22>
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	bf0c      	ite	eq
 8009bd0:	6032      	streq	r2, [r6, #0]
 8009bd2:	605a      	strne	r2, [r3, #4]
 8009bd4:	e7ec      	b.n	8009bb0 <_malloc_r+0xa0>
 8009bd6:	4623      	mov	r3, r4
 8009bd8:	6864      	ldr	r4, [r4, #4]
 8009bda:	e7b2      	b.n	8009b42 <_malloc_r+0x32>
 8009bdc:	4634      	mov	r4, r6
 8009bde:	6876      	ldr	r6, [r6, #4]
 8009be0:	e7b9      	b.n	8009b56 <_malloc_r+0x46>
 8009be2:	230c      	movs	r3, #12
 8009be4:	4638      	mov	r0, r7
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	f000 f9ea 	bl	8009fc0 <__malloc_unlock>
 8009bec:	e7a1      	b.n	8009b32 <_malloc_r+0x22>
 8009bee:	6025      	str	r5, [r4, #0]
 8009bf0:	e7de      	b.n	8009bb0 <_malloc_r+0xa0>
 8009bf2:	bf00      	nop
 8009bf4:	200004f8 	.word	0x200004f8

08009bf8 <__ssputs_r>:
 8009bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	688e      	ldr	r6, [r1, #8]
 8009bfe:	4682      	mov	sl, r0
 8009c00:	429e      	cmp	r6, r3
 8009c02:	460c      	mov	r4, r1
 8009c04:	4690      	mov	r8, r2
 8009c06:	461f      	mov	r7, r3
 8009c08:	d838      	bhi.n	8009c7c <__ssputs_r+0x84>
 8009c0a:	898a      	ldrh	r2, [r1, #12]
 8009c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c10:	d032      	beq.n	8009c78 <__ssputs_r+0x80>
 8009c12:	6825      	ldr	r5, [r4, #0]
 8009c14:	6909      	ldr	r1, [r1, #16]
 8009c16:	3301      	adds	r3, #1
 8009c18:	eba5 0901 	sub.w	r9, r5, r1
 8009c1c:	6965      	ldr	r5, [r4, #20]
 8009c1e:	444b      	add	r3, r9
 8009c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c28:	106d      	asrs	r5, r5, #1
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	bf38      	it	cc
 8009c2e:	461d      	movcc	r5, r3
 8009c30:	0553      	lsls	r3, r2, #21
 8009c32:	d531      	bpl.n	8009c98 <__ssputs_r+0xa0>
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7ff ff6b 	bl	8009b10 <_malloc_r>
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	b950      	cbnz	r0, 8009c54 <__ssputs_r+0x5c>
 8009c3e:	230c      	movs	r3, #12
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	f8ca 3000 	str.w	r3, [sl]
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c54:	464a      	mov	r2, r9
 8009c56:	6921      	ldr	r1, [r4, #16]
 8009c58:	f7fc fae2 	bl	8006220 <memcpy>
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	6126      	str	r6, [r4, #16]
 8009c6a:	444e      	add	r6, r9
 8009c6c:	6026      	str	r6, [r4, #0]
 8009c6e:	463e      	mov	r6, r7
 8009c70:	6165      	str	r5, [r4, #20]
 8009c72:	eba5 0509 	sub.w	r5, r5, r9
 8009c76:	60a5      	str	r5, [r4, #8]
 8009c78:	42be      	cmp	r6, r7
 8009c7a:	d900      	bls.n	8009c7e <__ssputs_r+0x86>
 8009c7c:	463e      	mov	r6, r7
 8009c7e:	4632      	mov	r2, r6
 8009c80:	4641      	mov	r1, r8
 8009c82:	6820      	ldr	r0, [r4, #0]
 8009c84:	f000 f97c 	bl	8009f80 <memmove>
 8009c88:	68a3      	ldr	r3, [r4, #8]
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	1b9b      	subs	r3, r3, r6
 8009c8e:	60a3      	str	r3, [r4, #8]
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	4433      	add	r3, r6
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	e7db      	b.n	8009c50 <__ssputs_r+0x58>
 8009c98:	462a      	mov	r2, r5
 8009c9a:	f000 f997 	bl	8009fcc <_realloc_r>
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d1e1      	bne.n	8009c68 <__ssputs_r+0x70>
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	6921      	ldr	r1, [r4, #16]
 8009ca8:	f7ff feca 	bl	8009a40 <_free_r>
 8009cac:	e7c7      	b.n	8009c3e <__ssputs_r+0x46>
	...

08009cb0 <_svfiprintf_r>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	4698      	mov	r8, r3
 8009cb6:	898b      	ldrh	r3, [r1, #12]
 8009cb8:	4607      	mov	r7, r0
 8009cba:	061b      	lsls	r3, r3, #24
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	4614      	mov	r4, r2
 8009cc0:	b09d      	sub	sp, #116	; 0x74
 8009cc2:	d50e      	bpl.n	8009ce2 <_svfiprintf_r+0x32>
 8009cc4:	690b      	ldr	r3, [r1, #16]
 8009cc6:	b963      	cbnz	r3, 8009ce2 <_svfiprintf_r+0x32>
 8009cc8:	2140      	movs	r1, #64	; 0x40
 8009cca:	f7ff ff21 	bl	8009b10 <_malloc_r>
 8009cce:	6028      	str	r0, [r5, #0]
 8009cd0:	6128      	str	r0, [r5, #16]
 8009cd2:	b920      	cbnz	r0, 8009cde <_svfiprintf_r+0x2e>
 8009cd4:	230c      	movs	r3, #12
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	e0d1      	b.n	8009e82 <_svfiprintf_r+0x1d2>
 8009cde:	2340      	movs	r3, #64	; 0x40
 8009ce0:	616b      	str	r3, [r5, #20]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce6:	2320      	movs	r3, #32
 8009ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cec:	2330      	movs	r3, #48	; 0x30
 8009cee:	f04f 0901 	mov.w	r9, #1
 8009cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e9c <_svfiprintf_r+0x1ec>
 8009cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cfe:	4623      	mov	r3, r4
 8009d00:	469a      	mov	sl, r3
 8009d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d06:	b10a      	cbz	r2, 8009d0c <_svfiprintf_r+0x5c>
 8009d08:	2a25      	cmp	r2, #37	; 0x25
 8009d0a:	d1f9      	bne.n	8009d00 <_svfiprintf_r+0x50>
 8009d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d10:	d00b      	beq.n	8009d2a <_svfiprintf_r+0x7a>
 8009d12:	465b      	mov	r3, fp
 8009d14:	4622      	mov	r2, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7ff ff6d 	bl	8009bf8 <__ssputs_r>
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f000 80aa 	beq.w	8009e78 <_svfiprintf_r+0x1c8>
 8009d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d26:	445a      	add	r2, fp
 8009d28:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 80a2 	beq.w	8009e78 <_svfiprintf_r+0x1c8>
 8009d34:	2300      	movs	r3, #0
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d3e:	f10a 0a01 	add.w	sl, sl, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	9307      	str	r3, [sp, #28]
 8009d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d4c:	4654      	mov	r4, sl
 8009d4e:	2205      	movs	r2, #5
 8009d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d54:	4851      	ldr	r0, [pc, #324]	; (8009e9c <_svfiprintf_r+0x1ec>)
 8009d56:	f7ff f999 	bl	800908c <memchr>
 8009d5a:	9a04      	ldr	r2, [sp, #16]
 8009d5c:	b9d8      	cbnz	r0, 8009d96 <_svfiprintf_r+0xe6>
 8009d5e:	06d0      	lsls	r0, r2, #27
 8009d60:	bf44      	itt	mi
 8009d62:	2320      	movmi	r3, #32
 8009d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d68:	0711      	lsls	r1, r2, #28
 8009d6a:	bf44      	itt	mi
 8009d6c:	232b      	movmi	r3, #43	; 0x2b
 8009d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d72:	f89a 3000 	ldrb.w	r3, [sl]
 8009d76:	2b2a      	cmp	r3, #42	; 0x2a
 8009d78:	d015      	beq.n	8009da6 <_svfiprintf_r+0xf6>
 8009d7a:	4654      	mov	r4, sl
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	f04f 0c0a 	mov.w	ip, #10
 8009d82:	9a07      	ldr	r2, [sp, #28]
 8009d84:	4621      	mov	r1, r4
 8009d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8a:	3b30      	subs	r3, #48	; 0x30
 8009d8c:	2b09      	cmp	r3, #9
 8009d8e:	d94e      	bls.n	8009e2e <_svfiprintf_r+0x17e>
 8009d90:	b1b0      	cbz	r0, 8009dc0 <_svfiprintf_r+0x110>
 8009d92:	9207      	str	r2, [sp, #28]
 8009d94:	e014      	b.n	8009dc0 <_svfiprintf_r+0x110>
 8009d96:	eba0 0308 	sub.w	r3, r0, r8
 8009d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	46a2      	mov	sl, r4
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	e7d2      	b.n	8009d4c <_svfiprintf_r+0x9c>
 8009da6:	9b03      	ldr	r3, [sp, #12]
 8009da8:	1d19      	adds	r1, r3, #4
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	9103      	str	r1, [sp, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bfbb      	ittet	lt
 8009db2:	425b      	neglt	r3, r3
 8009db4:	f042 0202 	orrlt.w	r2, r2, #2
 8009db8:	9307      	strge	r3, [sp, #28]
 8009dba:	9307      	strlt	r3, [sp, #28]
 8009dbc:	bfb8      	it	lt
 8009dbe:	9204      	strlt	r2, [sp, #16]
 8009dc0:	7823      	ldrb	r3, [r4, #0]
 8009dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc4:	d10c      	bne.n	8009de0 <_svfiprintf_r+0x130>
 8009dc6:	7863      	ldrb	r3, [r4, #1]
 8009dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dca:	d135      	bne.n	8009e38 <_svfiprintf_r+0x188>
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	3402      	adds	r4, #2
 8009dd0:	1d1a      	adds	r2, r3, #4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	9203      	str	r2, [sp, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bfb8      	it	lt
 8009dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dde:	9305      	str	r3, [sp, #20]
 8009de0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009ea0 <_svfiprintf_r+0x1f0>
 8009de4:	2203      	movs	r2, #3
 8009de6:	4650      	mov	r0, sl
 8009de8:	7821      	ldrb	r1, [r4, #0]
 8009dea:	f7ff f94f 	bl	800908c <memchr>
 8009dee:	b140      	cbz	r0, 8009e02 <_svfiprintf_r+0x152>
 8009df0:	2340      	movs	r3, #64	; 0x40
 8009df2:	eba0 000a 	sub.w	r0, r0, sl
 8009df6:	fa03 f000 	lsl.w	r0, r3, r0
 8009dfa:	9b04      	ldr	r3, [sp, #16]
 8009dfc:	3401      	adds	r4, #1
 8009dfe:	4303      	orrs	r3, r0
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e06:	2206      	movs	r2, #6
 8009e08:	4826      	ldr	r0, [pc, #152]	; (8009ea4 <_svfiprintf_r+0x1f4>)
 8009e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e0e:	f7ff f93d 	bl	800908c <memchr>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d038      	beq.n	8009e88 <_svfiprintf_r+0x1d8>
 8009e16:	4b24      	ldr	r3, [pc, #144]	; (8009ea8 <_svfiprintf_r+0x1f8>)
 8009e18:	bb1b      	cbnz	r3, 8009e62 <_svfiprintf_r+0x1b2>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	3307      	adds	r3, #7
 8009e1e:	f023 0307 	bic.w	r3, r3, #7
 8009e22:	3308      	adds	r3, #8
 8009e24:	9303      	str	r3, [sp, #12]
 8009e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e28:	4433      	add	r3, r6
 8009e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2c:	e767      	b.n	8009cfe <_svfiprintf_r+0x4e>
 8009e2e:	460c      	mov	r4, r1
 8009e30:	2001      	movs	r0, #1
 8009e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e36:	e7a5      	b.n	8009d84 <_svfiprintf_r+0xd4>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4619      	mov	r1, r3
 8009e40:	3401      	adds	r4, #1
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	4620      	mov	r0, r4
 8009e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4a:	3a30      	subs	r2, #48	; 0x30
 8009e4c:	2a09      	cmp	r2, #9
 8009e4e:	d903      	bls.n	8009e58 <_svfiprintf_r+0x1a8>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0c5      	beq.n	8009de0 <_svfiprintf_r+0x130>
 8009e54:	9105      	str	r1, [sp, #20]
 8009e56:	e7c3      	b.n	8009de0 <_svfiprintf_r+0x130>
 8009e58:	4604      	mov	r4, r0
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e60:	e7f0      	b.n	8009e44 <_svfiprintf_r+0x194>
 8009e62:	ab03      	add	r3, sp, #12
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	462a      	mov	r2, r5
 8009e68:	4638      	mov	r0, r7
 8009e6a:	4b10      	ldr	r3, [pc, #64]	; (8009eac <_svfiprintf_r+0x1fc>)
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	f7fc fa8b 	bl	8006388 <_printf_float>
 8009e72:	1c42      	adds	r2, r0, #1
 8009e74:	4606      	mov	r6, r0
 8009e76:	d1d6      	bne.n	8009e26 <_svfiprintf_r+0x176>
 8009e78:	89ab      	ldrh	r3, [r5, #12]
 8009e7a:	065b      	lsls	r3, r3, #25
 8009e7c:	f53f af2c 	bmi.w	8009cd8 <_svfiprintf_r+0x28>
 8009e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e82:	b01d      	add	sp, #116	; 0x74
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	ab03      	add	r3, sp, #12
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4638      	mov	r0, r7
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <_svfiprintf_r+0x1fc>)
 8009e92:	a904      	add	r1, sp, #16
 8009e94:	f7fc fd14 	bl	80068c0 <_printf_i>
 8009e98:	e7eb      	b.n	8009e72 <_svfiprintf_r+0x1c2>
 8009e9a:	bf00      	nop
 8009e9c:	0800b324 	.word	0x0800b324
 8009ea0:	0800b32a 	.word	0x0800b32a
 8009ea4:	0800b32e 	.word	0x0800b32e
 8009ea8:	08006389 	.word	0x08006389
 8009eac:	08009bf9 	.word	0x08009bf9

08009eb0 <nan>:
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	4901      	ldr	r1, [pc, #4]	; (8009eb8 <nan+0x8>)
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	7ff80000 	.word	0x7ff80000

08009ebc <_sbrk_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4d05      	ldr	r5, [pc, #20]	; (8009ed8 <_sbrk_r+0x1c>)
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	602b      	str	r3, [r5, #0]
 8009ec8:	f7f7 ff3e 	bl	8001d48 <_sbrk>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_sbrk_r+0x1a>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_sbrk_r+0x1a>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	20000500 	.word	0x20000500

08009edc <strncmp>:
 8009edc:	4603      	mov	r3, r0
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	b172      	cbz	r2, 8009f00 <strncmp+0x24>
 8009ee2:	3901      	subs	r1, #1
 8009ee4:	1884      	adds	r4, r0, r2
 8009ee6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009eea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009eee:	4290      	cmp	r0, r2
 8009ef0:	d101      	bne.n	8009ef6 <strncmp+0x1a>
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	d101      	bne.n	8009efa <strncmp+0x1e>
 8009ef6:	1a80      	subs	r0, r0, r2
 8009ef8:	bd10      	pop	{r4, pc}
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d1f3      	bne.n	8009ee6 <strncmp+0xa>
 8009efe:	e7fa      	b.n	8009ef6 <strncmp+0x1a>
 8009f00:	4610      	mov	r0, r2
 8009f02:	e7f9      	b.n	8009ef8 <strncmp+0x1c>

08009f04 <__ascii_wctomb>:
 8009f04:	4603      	mov	r3, r0
 8009f06:	4608      	mov	r0, r1
 8009f08:	b141      	cbz	r1, 8009f1c <__ascii_wctomb+0x18>
 8009f0a:	2aff      	cmp	r2, #255	; 0xff
 8009f0c:	d904      	bls.n	8009f18 <__ascii_wctomb+0x14>
 8009f0e:	228a      	movs	r2, #138	; 0x8a
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	4770      	bx	lr
 8009f18:	2001      	movs	r0, #1
 8009f1a:	700a      	strb	r2, [r1, #0]
 8009f1c:	4770      	bx	lr
	...

08009f20 <__assert_func>:
 8009f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f22:	4614      	mov	r4, r2
 8009f24:	461a      	mov	r2, r3
 8009f26:	4b09      	ldr	r3, [pc, #36]	; (8009f4c <__assert_func+0x2c>)
 8009f28:	4605      	mov	r5, r0
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68d8      	ldr	r0, [r3, #12]
 8009f2e:	b14c      	cbz	r4, 8009f44 <__assert_func+0x24>
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <__assert_func+0x30>)
 8009f32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f36:	9100      	str	r1, [sp, #0]
 8009f38:	462b      	mov	r3, r5
 8009f3a:	4906      	ldr	r1, [pc, #24]	; (8009f54 <__assert_func+0x34>)
 8009f3c:	f000 f80e 	bl	8009f5c <fiprintf>
 8009f40:	f000 fa8a 	bl	800a458 <abort>
 8009f44:	4b04      	ldr	r3, [pc, #16]	; (8009f58 <__assert_func+0x38>)
 8009f46:	461c      	mov	r4, r3
 8009f48:	e7f3      	b.n	8009f32 <__assert_func+0x12>
 8009f4a:	bf00      	nop
 8009f4c:	20000090 	.word	0x20000090
 8009f50:	0800b335 	.word	0x0800b335
 8009f54:	0800b342 	.word	0x0800b342
 8009f58:	0800b370 	.word	0x0800b370

08009f5c <fiprintf>:
 8009f5c:	b40e      	push	{r1, r2, r3}
 8009f5e:	b503      	push	{r0, r1, lr}
 8009f60:	4601      	mov	r1, r0
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	4805      	ldr	r0, [pc, #20]	; (8009f7c <fiprintf+0x20>)
 8009f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	f000 f883 	bl	800a078 <_vfiprintf_r>
 8009f72:	b002      	add	sp, #8
 8009f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f78:	b003      	add	sp, #12
 8009f7a:	4770      	bx	lr
 8009f7c:	20000090 	.word	0x20000090

08009f80 <memmove>:
 8009f80:	4288      	cmp	r0, r1
 8009f82:	b510      	push	{r4, lr}
 8009f84:	eb01 0402 	add.w	r4, r1, r2
 8009f88:	d902      	bls.n	8009f90 <memmove+0x10>
 8009f8a:	4284      	cmp	r4, r0
 8009f8c:	4623      	mov	r3, r4
 8009f8e:	d807      	bhi.n	8009fa0 <memmove+0x20>
 8009f90:	1e43      	subs	r3, r0, #1
 8009f92:	42a1      	cmp	r1, r4
 8009f94:	d008      	beq.n	8009fa8 <memmove+0x28>
 8009f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f9e:	e7f8      	b.n	8009f92 <memmove+0x12>
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4402      	add	r2, r0
 8009fa4:	428a      	cmp	r2, r1
 8009fa6:	d100      	bne.n	8009faa <memmove+0x2a>
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fb2:	e7f7      	b.n	8009fa4 <memmove+0x24>

08009fb4 <__malloc_lock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_lock+0x8>)
 8009fb6:	f000 bc0b 	b.w	800a7d0 <__retarget_lock_acquire_recursive>
 8009fba:	bf00      	nop
 8009fbc:	20000504 	.word	0x20000504

08009fc0 <__malloc_unlock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__malloc_unlock+0x8>)
 8009fc2:	f000 bc06 	b.w	800a7d2 <__retarget_lock_release_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20000504 	.word	0x20000504

08009fcc <_realloc_r>:
 8009fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4614      	mov	r4, r2
 8009fd4:	460e      	mov	r6, r1
 8009fd6:	b921      	cbnz	r1, 8009fe2 <_realloc_r+0x16>
 8009fd8:	4611      	mov	r1, r2
 8009fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fde:	f7ff bd97 	b.w	8009b10 <_malloc_r>
 8009fe2:	b92a      	cbnz	r2, 8009ff0 <_realloc_r+0x24>
 8009fe4:	f7ff fd2c 	bl	8009a40 <_free_r>
 8009fe8:	4625      	mov	r5, r4
 8009fea:	4628      	mov	r0, r5
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	f000 fc56 	bl	800a8a0 <_malloc_usable_size_r>
 8009ff4:	4284      	cmp	r4, r0
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	d802      	bhi.n	800a000 <_realloc_r+0x34>
 8009ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ffe:	d812      	bhi.n	800a026 <_realloc_r+0x5a>
 800a000:	4621      	mov	r1, r4
 800a002:	4640      	mov	r0, r8
 800a004:	f7ff fd84 	bl	8009b10 <_malloc_r>
 800a008:	4605      	mov	r5, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d0ed      	beq.n	8009fea <_realloc_r+0x1e>
 800a00e:	42bc      	cmp	r4, r7
 800a010:	4622      	mov	r2, r4
 800a012:	4631      	mov	r1, r6
 800a014:	bf28      	it	cs
 800a016:	463a      	movcs	r2, r7
 800a018:	f7fc f902 	bl	8006220 <memcpy>
 800a01c:	4631      	mov	r1, r6
 800a01e:	4640      	mov	r0, r8
 800a020:	f7ff fd0e 	bl	8009a40 <_free_r>
 800a024:	e7e1      	b.n	8009fea <_realloc_r+0x1e>
 800a026:	4635      	mov	r5, r6
 800a028:	e7df      	b.n	8009fea <_realloc_r+0x1e>

0800a02a <__sfputc_r>:
 800a02a:	6893      	ldr	r3, [r2, #8]
 800a02c:	b410      	push	{r4}
 800a02e:	3b01      	subs	r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	6093      	str	r3, [r2, #8]
 800a034:	da07      	bge.n	800a046 <__sfputc_r+0x1c>
 800a036:	6994      	ldr	r4, [r2, #24]
 800a038:	42a3      	cmp	r3, r4
 800a03a:	db01      	blt.n	800a040 <__sfputc_r+0x16>
 800a03c:	290a      	cmp	r1, #10
 800a03e:	d102      	bne.n	800a046 <__sfputc_r+0x1c>
 800a040:	bc10      	pop	{r4}
 800a042:	f000 b949 	b.w	800a2d8 <__swbuf_r>
 800a046:	6813      	ldr	r3, [r2, #0]
 800a048:	1c58      	adds	r0, r3, #1
 800a04a:	6010      	str	r0, [r2, #0]
 800a04c:	7019      	strb	r1, [r3, #0]
 800a04e:	4608      	mov	r0, r1
 800a050:	bc10      	pop	{r4}
 800a052:	4770      	bx	lr

0800a054 <__sfputs_r>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	4614      	mov	r4, r2
 800a05c:	18d5      	adds	r5, r2, r3
 800a05e:	42ac      	cmp	r4, r5
 800a060:	d101      	bne.n	800a066 <__sfputs_r+0x12>
 800a062:	2000      	movs	r0, #0
 800a064:	e007      	b.n	800a076 <__sfputs_r+0x22>
 800a066:	463a      	mov	r2, r7
 800a068:	4630      	mov	r0, r6
 800a06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06e:	f7ff ffdc 	bl	800a02a <__sfputc_r>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	d1f3      	bne.n	800a05e <__sfputs_r+0xa>
 800a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a078 <_vfiprintf_r>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	460d      	mov	r5, r1
 800a07e:	4614      	mov	r4, r2
 800a080:	4698      	mov	r8, r3
 800a082:	4606      	mov	r6, r0
 800a084:	b09d      	sub	sp, #116	; 0x74
 800a086:	b118      	cbz	r0, 800a090 <_vfiprintf_r+0x18>
 800a088:	6983      	ldr	r3, [r0, #24]
 800a08a:	b90b      	cbnz	r3, 800a090 <_vfiprintf_r+0x18>
 800a08c:	f000 fb02 	bl	800a694 <__sinit>
 800a090:	4b89      	ldr	r3, [pc, #548]	; (800a2b8 <_vfiprintf_r+0x240>)
 800a092:	429d      	cmp	r5, r3
 800a094:	d11b      	bne.n	800a0ce <_vfiprintf_r+0x56>
 800a096:	6875      	ldr	r5, [r6, #4]
 800a098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a09a:	07d9      	lsls	r1, r3, #31
 800a09c:	d405      	bmi.n	800a0aa <_vfiprintf_r+0x32>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	059a      	lsls	r2, r3, #22
 800a0a2:	d402      	bmi.n	800a0aa <_vfiprintf_r+0x32>
 800a0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0a6:	f000 fb93 	bl	800a7d0 <__retarget_lock_acquire_recursive>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	071b      	lsls	r3, r3, #28
 800a0ae:	d501      	bpl.n	800a0b4 <_vfiprintf_r+0x3c>
 800a0b0:	692b      	ldr	r3, [r5, #16]
 800a0b2:	b9eb      	cbnz	r3, 800a0f0 <_vfiprintf_r+0x78>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f000 f960 	bl	800a37c <__swsetup_r>
 800a0bc:	b1c0      	cbz	r0, 800a0f0 <_vfiprintf_r+0x78>
 800a0be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c0:	07dc      	lsls	r4, r3, #31
 800a0c2:	d50e      	bpl.n	800a0e2 <_vfiprintf_r+0x6a>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	b01d      	add	sp, #116	; 0x74
 800a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	4b7b      	ldr	r3, [pc, #492]	; (800a2bc <_vfiprintf_r+0x244>)
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	d101      	bne.n	800a0d8 <_vfiprintf_r+0x60>
 800a0d4:	68b5      	ldr	r5, [r6, #8]
 800a0d6:	e7df      	b.n	800a098 <_vfiprintf_r+0x20>
 800a0d8:	4b79      	ldr	r3, [pc, #484]	; (800a2c0 <_vfiprintf_r+0x248>)
 800a0da:	429d      	cmp	r5, r3
 800a0dc:	bf08      	it	eq
 800a0de:	68f5      	ldreq	r5, [r6, #12]
 800a0e0:	e7da      	b.n	800a098 <_vfiprintf_r+0x20>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	0598      	lsls	r0, r3, #22
 800a0e6:	d4ed      	bmi.n	800a0c4 <_vfiprintf_r+0x4c>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ea:	f000 fb72 	bl	800a7d2 <__retarget_lock_release_recursive>
 800a0ee:	e7e9      	b.n	800a0c4 <_vfiprintf_r+0x4c>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f4:	2320      	movs	r3, #32
 800a0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0fa:	2330      	movs	r3, #48	; 0x30
 800a0fc:	f04f 0901 	mov.w	r9, #1
 800a100:	f8cd 800c 	str.w	r8, [sp, #12]
 800a104:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a2c4 <_vfiprintf_r+0x24c>
 800a108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a10c:	4623      	mov	r3, r4
 800a10e:	469a      	mov	sl, r3
 800a110:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a114:	b10a      	cbz	r2, 800a11a <_vfiprintf_r+0xa2>
 800a116:	2a25      	cmp	r2, #37	; 0x25
 800a118:	d1f9      	bne.n	800a10e <_vfiprintf_r+0x96>
 800a11a:	ebba 0b04 	subs.w	fp, sl, r4
 800a11e:	d00b      	beq.n	800a138 <_vfiprintf_r+0xc0>
 800a120:	465b      	mov	r3, fp
 800a122:	4622      	mov	r2, r4
 800a124:	4629      	mov	r1, r5
 800a126:	4630      	mov	r0, r6
 800a128:	f7ff ff94 	bl	800a054 <__sfputs_r>
 800a12c:	3001      	adds	r0, #1
 800a12e:	f000 80aa 	beq.w	800a286 <_vfiprintf_r+0x20e>
 800a132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a134:	445a      	add	r2, fp
 800a136:	9209      	str	r2, [sp, #36]	; 0x24
 800a138:	f89a 3000 	ldrb.w	r3, [sl]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 80a2 	beq.w	800a286 <_vfiprintf_r+0x20e>
 800a142:	2300      	movs	r3, #0
 800a144:	f04f 32ff 	mov.w	r2, #4294967295
 800a148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a14c:	f10a 0a01 	add.w	sl, sl, #1
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	9307      	str	r3, [sp, #28]
 800a154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a158:	931a      	str	r3, [sp, #104]	; 0x68
 800a15a:	4654      	mov	r4, sl
 800a15c:	2205      	movs	r2, #5
 800a15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a162:	4858      	ldr	r0, [pc, #352]	; (800a2c4 <_vfiprintf_r+0x24c>)
 800a164:	f7fe ff92 	bl	800908c <memchr>
 800a168:	9a04      	ldr	r2, [sp, #16]
 800a16a:	b9d8      	cbnz	r0, 800a1a4 <_vfiprintf_r+0x12c>
 800a16c:	06d1      	lsls	r1, r2, #27
 800a16e:	bf44      	itt	mi
 800a170:	2320      	movmi	r3, #32
 800a172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a176:	0713      	lsls	r3, r2, #28
 800a178:	bf44      	itt	mi
 800a17a:	232b      	movmi	r3, #43	; 0x2b
 800a17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a180:	f89a 3000 	ldrb.w	r3, [sl]
 800a184:	2b2a      	cmp	r3, #42	; 0x2a
 800a186:	d015      	beq.n	800a1b4 <_vfiprintf_r+0x13c>
 800a188:	4654      	mov	r4, sl
 800a18a:	2000      	movs	r0, #0
 800a18c:	f04f 0c0a 	mov.w	ip, #10
 800a190:	9a07      	ldr	r2, [sp, #28]
 800a192:	4621      	mov	r1, r4
 800a194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a198:	3b30      	subs	r3, #48	; 0x30
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	d94e      	bls.n	800a23c <_vfiprintf_r+0x1c4>
 800a19e:	b1b0      	cbz	r0, 800a1ce <_vfiprintf_r+0x156>
 800a1a0:	9207      	str	r2, [sp, #28]
 800a1a2:	e014      	b.n	800a1ce <_vfiprintf_r+0x156>
 800a1a4:	eba0 0308 	sub.w	r3, r0, r8
 800a1a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	46a2      	mov	sl, r4
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	e7d2      	b.n	800a15a <_vfiprintf_r+0xe2>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	1d19      	adds	r1, r3, #4
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	9103      	str	r1, [sp, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	bfbb      	ittet	lt
 800a1c0:	425b      	neglt	r3, r3
 800a1c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c6:	9307      	strge	r3, [sp, #28]
 800a1c8:	9307      	strlt	r3, [sp, #28]
 800a1ca:	bfb8      	it	lt
 800a1cc:	9204      	strlt	r2, [sp, #16]
 800a1ce:	7823      	ldrb	r3, [r4, #0]
 800a1d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a1d2:	d10c      	bne.n	800a1ee <_vfiprintf_r+0x176>
 800a1d4:	7863      	ldrb	r3, [r4, #1]
 800a1d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d8:	d135      	bne.n	800a246 <_vfiprintf_r+0x1ce>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	3402      	adds	r4, #2
 800a1de:	1d1a      	adds	r2, r3, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	9203      	str	r2, [sp, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bfb8      	it	lt
 800a1e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ec:	9305      	str	r3, [sp, #20]
 800a1ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a2c8 <_vfiprintf_r+0x250>
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	7821      	ldrb	r1, [r4, #0]
 800a1f8:	f7fe ff48 	bl	800908c <memchr>
 800a1fc:	b140      	cbz	r0, 800a210 <_vfiprintf_r+0x198>
 800a1fe:	2340      	movs	r3, #64	; 0x40
 800a200:	eba0 000a 	sub.w	r0, r0, sl
 800a204:	fa03 f000 	lsl.w	r0, r3, r0
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	3401      	adds	r4, #1
 800a20c:	4303      	orrs	r3, r0
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a214:	2206      	movs	r2, #6
 800a216:	482d      	ldr	r0, [pc, #180]	; (800a2cc <_vfiprintf_r+0x254>)
 800a218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a21c:	f7fe ff36 	bl	800908c <memchr>
 800a220:	2800      	cmp	r0, #0
 800a222:	d03f      	beq.n	800a2a4 <_vfiprintf_r+0x22c>
 800a224:	4b2a      	ldr	r3, [pc, #168]	; (800a2d0 <_vfiprintf_r+0x258>)
 800a226:	bb1b      	cbnz	r3, 800a270 <_vfiprintf_r+0x1f8>
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	3307      	adds	r3, #7
 800a22c:	f023 0307 	bic.w	r3, r3, #7
 800a230:	3308      	adds	r3, #8
 800a232:	9303      	str	r3, [sp, #12]
 800a234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a236:	443b      	add	r3, r7
 800a238:	9309      	str	r3, [sp, #36]	; 0x24
 800a23a:	e767      	b.n	800a10c <_vfiprintf_r+0x94>
 800a23c:	460c      	mov	r4, r1
 800a23e:	2001      	movs	r0, #1
 800a240:	fb0c 3202 	mla	r2, ip, r2, r3
 800a244:	e7a5      	b.n	800a192 <_vfiprintf_r+0x11a>
 800a246:	2300      	movs	r3, #0
 800a248:	f04f 0c0a 	mov.w	ip, #10
 800a24c:	4619      	mov	r1, r3
 800a24e:	3401      	adds	r4, #1
 800a250:	9305      	str	r3, [sp, #20]
 800a252:	4620      	mov	r0, r4
 800a254:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a258:	3a30      	subs	r2, #48	; 0x30
 800a25a:	2a09      	cmp	r2, #9
 800a25c:	d903      	bls.n	800a266 <_vfiprintf_r+0x1ee>
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0c5      	beq.n	800a1ee <_vfiprintf_r+0x176>
 800a262:	9105      	str	r1, [sp, #20]
 800a264:	e7c3      	b.n	800a1ee <_vfiprintf_r+0x176>
 800a266:	4604      	mov	r4, r0
 800a268:	2301      	movs	r3, #1
 800a26a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a26e:	e7f0      	b.n	800a252 <_vfiprintf_r+0x1da>
 800a270:	ab03      	add	r3, sp, #12
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	462a      	mov	r2, r5
 800a276:	4630      	mov	r0, r6
 800a278:	4b16      	ldr	r3, [pc, #88]	; (800a2d4 <_vfiprintf_r+0x25c>)
 800a27a:	a904      	add	r1, sp, #16
 800a27c:	f7fc f884 	bl	8006388 <_printf_float>
 800a280:	4607      	mov	r7, r0
 800a282:	1c78      	adds	r0, r7, #1
 800a284:	d1d6      	bne.n	800a234 <_vfiprintf_r+0x1bc>
 800a286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a288:	07d9      	lsls	r1, r3, #31
 800a28a:	d405      	bmi.n	800a298 <_vfiprintf_r+0x220>
 800a28c:	89ab      	ldrh	r3, [r5, #12]
 800a28e:	059a      	lsls	r2, r3, #22
 800a290:	d402      	bmi.n	800a298 <_vfiprintf_r+0x220>
 800a292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a294:	f000 fa9d 	bl	800a7d2 <__retarget_lock_release_recursive>
 800a298:	89ab      	ldrh	r3, [r5, #12]
 800a29a:	065b      	lsls	r3, r3, #25
 800a29c:	f53f af12 	bmi.w	800a0c4 <_vfiprintf_r+0x4c>
 800a2a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2a2:	e711      	b.n	800a0c8 <_vfiprintf_r+0x50>
 800a2a4:	ab03      	add	r3, sp, #12
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	462a      	mov	r2, r5
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <_vfiprintf_r+0x25c>)
 800a2ae:	a904      	add	r1, sp, #16
 800a2b0:	f7fc fb06 	bl	80068c0 <_printf_i>
 800a2b4:	e7e4      	b.n	800a280 <_vfiprintf_r+0x208>
 800a2b6:	bf00      	nop
 800a2b8:	0800b394 	.word	0x0800b394
 800a2bc:	0800b3b4 	.word	0x0800b3b4
 800a2c0:	0800b374 	.word	0x0800b374
 800a2c4:	0800b324 	.word	0x0800b324
 800a2c8:	0800b32a 	.word	0x0800b32a
 800a2cc:	0800b32e 	.word	0x0800b32e
 800a2d0:	08006389 	.word	0x08006389
 800a2d4:	0800a055 	.word	0x0800a055

0800a2d8 <__swbuf_r>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	460e      	mov	r6, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	4605      	mov	r5, r0
 800a2e0:	b118      	cbz	r0, 800a2ea <__swbuf_r+0x12>
 800a2e2:	6983      	ldr	r3, [r0, #24]
 800a2e4:	b90b      	cbnz	r3, 800a2ea <__swbuf_r+0x12>
 800a2e6:	f000 f9d5 	bl	800a694 <__sinit>
 800a2ea:	4b21      	ldr	r3, [pc, #132]	; (800a370 <__swbuf_r+0x98>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	d12b      	bne.n	800a348 <__swbuf_r+0x70>
 800a2f0:	686c      	ldr	r4, [r5, #4]
 800a2f2:	69a3      	ldr	r3, [r4, #24]
 800a2f4:	60a3      	str	r3, [r4, #8]
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	071a      	lsls	r2, r3, #28
 800a2fa:	d52f      	bpl.n	800a35c <__swbuf_r+0x84>
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	b36b      	cbz	r3, 800a35c <__swbuf_r+0x84>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6820      	ldr	r0, [r4, #0]
 800a304:	b2f6      	uxtb	r6, r6
 800a306:	1ac0      	subs	r0, r0, r3
 800a308:	6963      	ldr	r3, [r4, #20]
 800a30a:	4637      	mov	r7, r6
 800a30c:	4283      	cmp	r3, r0
 800a30e:	dc04      	bgt.n	800a31a <__swbuf_r+0x42>
 800a310:	4621      	mov	r1, r4
 800a312:	4628      	mov	r0, r5
 800a314:	f000 f92a 	bl	800a56c <_fflush_r>
 800a318:	bb30      	cbnz	r0, 800a368 <__swbuf_r+0x90>
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	3001      	adds	r0, #1
 800a31e:	3b01      	subs	r3, #1
 800a320:	60a3      	str	r3, [r4, #8]
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	6022      	str	r2, [r4, #0]
 800a328:	701e      	strb	r6, [r3, #0]
 800a32a:	6963      	ldr	r3, [r4, #20]
 800a32c:	4283      	cmp	r3, r0
 800a32e:	d004      	beq.n	800a33a <__swbuf_r+0x62>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	07db      	lsls	r3, r3, #31
 800a334:	d506      	bpl.n	800a344 <__swbuf_r+0x6c>
 800a336:	2e0a      	cmp	r6, #10
 800a338:	d104      	bne.n	800a344 <__swbuf_r+0x6c>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4628      	mov	r0, r5
 800a33e:	f000 f915 	bl	800a56c <_fflush_r>
 800a342:	b988      	cbnz	r0, 800a368 <__swbuf_r+0x90>
 800a344:	4638      	mov	r0, r7
 800a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <__swbuf_r+0x9c>)
 800a34a:	429c      	cmp	r4, r3
 800a34c:	d101      	bne.n	800a352 <__swbuf_r+0x7a>
 800a34e:	68ac      	ldr	r4, [r5, #8]
 800a350:	e7cf      	b.n	800a2f2 <__swbuf_r+0x1a>
 800a352:	4b09      	ldr	r3, [pc, #36]	; (800a378 <__swbuf_r+0xa0>)
 800a354:	429c      	cmp	r4, r3
 800a356:	bf08      	it	eq
 800a358:	68ec      	ldreq	r4, [r5, #12]
 800a35a:	e7ca      	b.n	800a2f2 <__swbuf_r+0x1a>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 f80c 	bl	800a37c <__swsetup_r>
 800a364:	2800      	cmp	r0, #0
 800a366:	d0cb      	beq.n	800a300 <__swbuf_r+0x28>
 800a368:	f04f 37ff 	mov.w	r7, #4294967295
 800a36c:	e7ea      	b.n	800a344 <__swbuf_r+0x6c>
 800a36e:	bf00      	nop
 800a370:	0800b394 	.word	0x0800b394
 800a374:	0800b3b4 	.word	0x0800b3b4
 800a378:	0800b374 	.word	0x0800b374

0800a37c <__swsetup_r>:
 800a37c:	4b32      	ldr	r3, [pc, #200]	; (800a448 <__swsetup_r+0xcc>)
 800a37e:	b570      	push	{r4, r5, r6, lr}
 800a380:	681d      	ldr	r5, [r3, #0]
 800a382:	4606      	mov	r6, r0
 800a384:	460c      	mov	r4, r1
 800a386:	b125      	cbz	r5, 800a392 <__swsetup_r+0x16>
 800a388:	69ab      	ldr	r3, [r5, #24]
 800a38a:	b913      	cbnz	r3, 800a392 <__swsetup_r+0x16>
 800a38c:	4628      	mov	r0, r5
 800a38e:	f000 f981 	bl	800a694 <__sinit>
 800a392:	4b2e      	ldr	r3, [pc, #184]	; (800a44c <__swsetup_r+0xd0>)
 800a394:	429c      	cmp	r4, r3
 800a396:	d10f      	bne.n	800a3b8 <__swsetup_r+0x3c>
 800a398:	686c      	ldr	r4, [r5, #4]
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3a0:	0719      	lsls	r1, r3, #28
 800a3a2:	d42c      	bmi.n	800a3fe <__swsetup_r+0x82>
 800a3a4:	06dd      	lsls	r5, r3, #27
 800a3a6:	d411      	bmi.n	800a3cc <__swsetup_r+0x50>
 800a3a8:	2309      	movs	r3, #9
 800a3aa:	6033      	str	r3, [r6, #0]
 800a3ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	e03e      	b.n	800a436 <__swsetup_r+0xba>
 800a3b8:	4b25      	ldr	r3, [pc, #148]	; (800a450 <__swsetup_r+0xd4>)
 800a3ba:	429c      	cmp	r4, r3
 800a3bc:	d101      	bne.n	800a3c2 <__swsetup_r+0x46>
 800a3be:	68ac      	ldr	r4, [r5, #8]
 800a3c0:	e7eb      	b.n	800a39a <__swsetup_r+0x1e>
 800a3c2:	4b24      	ldr	r3, [pc, #144]	; (800a454 <__swsetup_r+0xd8>)
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	bf08      	it	eq
 800a3c8:	68ec      	ldreq	r4, [r5, #12]
 800a3ca:	e7e6      	b.n	800a39a <__swsetup_r+0x1e>
 800a3cc:	0758      	lsls	r0, r3, #29
 800a3ce:	d512      	bpl.n	800a3f6 <__swsetup_r+0x7a>
 800a3d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d2:	b141      	cbz	r1, 800a3e6 <__swsetup_r+0x6a>
 800a3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	d002      	beq.n	800a3e2 <__swsetup_r+0x66>
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f7ff fb2f 	bl	8009a40 <_free_r>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6063      	str	r3, [r4, #4]
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	f043 0308 	orr.w	r3, r3, #8
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	b94b      	cbnz	r3, 800a416 <__swsetup_r+0x9a>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40c:	d003      	beq.n	800a416 <__swsetup_r+0x9a>
 800a40e:	4621      	mov	r1, r4
 800a410:	4630      	mov	r0, r6
 800a412:	f000 fa05 	bl	800a820 <__smakebuf_r>
 800a416:	89a0      	ldrh	r0, [r4, #12]
 800a418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a41c:	f010 0301 	ands.w	r3, r0, #1
 800a420:	d00a      	beq.n	800a438 <__swsetup_r+0xbc>
 800a422:	2300      	movs	r3, #0
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	6963      	ldr	r3, [r4, #20]
 800a428:	425b      	negs	r3, r3
 800a42a:	61a3      	str	r3, [r4, #24]
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	b943      	cbnz	r3, 800a442 <__swsetup_r+0xc6>
 800a430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a434:	d1ba      	bne.n	800a3ac <__swsetup_r+0x30>
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	0781      	lsls	r1, r0, #30
 800a43a:	bf58      	it	pl
 800a43c:	6963      	ldrpl	r3, [r4, #20]
 800a43e:	60a3      	str	r3, [r4, #8]
 800a440:	e7f4      	b.n	800a42c <__swsetup_r+0xb0>
 800a442:	2000      	movs	r0, #0
 800a444:	e7f7      	b.n	800a436 <__swsetup_r+0xba>
 800a446:	bf00      	nop
 800a448:	20000090 	.word	0x20000090
 800a44c:	0800b394 	.word	0x0800b394
 800a450:	0800b3b4 	.word	0x0800b3b4
 800a454:	0800b374 	.word	0x0800b374

0800a458 <abort>:
 800a458:	2006      	movs	r0, #6
 800a45a:	b508      	push	{r3, lr}
 800a45c:	f000 fa50 	bl	800a900 <raise>
 800a460:	2001      	movs	r0, #1
 800a462:	f7f7 fc19 	bl	8001c98 <_exit>
	...

0800a468 <__sflush_r>:
 800a468:	898a      	ldrh	r2, [r1, #12]
 800a46a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46c:	4605      	mov	r5, r0
 800a46e:	0710      	lsls	r0, r2, #28
 800a470:	460c      	mov	r4, r1
 800a472:	d457      	bmi.n	800a524 <__sflush_r+0xbc>
 800a474:	684b      	ldr	r3, [r1, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	dc04      	bgt.n	800a484 <__sflush_r+0x1c>
 800a47a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dc01      	bgt.n	800a484 <__sflush_r+0x1c>
 800a480:	2000      	movs	r0, #0
 800a482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a486:	2e00      	cmp	r6, #0
 800a488:	d0fa      	beq.n	800a480 <__sflush_r+0x18>
 800a48a:	2300      	movs	r3, #0
 800a48c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a490:	682f      	ldr	r7, [r5, #0]
 800a492:	602b      	str	r3, [r5, #0]
 800a494:	d032      	beq.n	800a4fc <__sflush_r+0x94>
 800a496:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	075a      	lsls	r2, r3, #29
 800a49c:	d505      	bpl.n	800a4aa <__sflush_r+0x42>
 800a49e:	6863      	ldr	r3, [r4, #4]
 800a4a0:	1ac0      	subs	r0, r0, r3
 800a4a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4a4:	b10b      	cbz	r3, 800a4aa <__sflush_r+0x42>
 800a4a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4a8:	1ac0      	subs	r0, r0, r3
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	6a21      	ldr	r1, [r4, #32]
 800a4b4:	47b0      	blx	r6
 800a4b6:	1c43      	adds	r3, r0, #1
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	d106      	bne.n	800a4ca <__sflush_r+0x62>
 800a4bc:	6829      	ldr	r1, [r5, #0]
 800a4be:	291d      	cmp	r1, #29
 800a4c0:	d82c      	bhi.n	800a51c <__sflush_r+0xb4>
 800a4c2:	4a29      	ldr	r2, [pc, #164]	; (800a568 <__sflush_r+0x100>)
 800a4c4:	40ca      	lsrs	r2, r1
 800a4c6:	07d6      	lsls	r6, r2, #31
 800a4c8:	d528      	bpl.n	800a51c <__sflush_r+0xb4>
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	6062      	str	r2, [r4, #4]
 800a4ce:	6922      	ldr	r2, [r4, #16]
 800a4d0:	04d9      	lsls	r1, r3, #19
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	d504      	bpl.n	800a4e0 <__sflush_r+0x78>
 800a4d6:	1c42      	adds	r2, r0, #1
 800a4d8:	d101      	bne.n	800a4de <__sflush_r+0x76>
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	b903      	cbnz	r3, 800a4e0 <__sflush_r+0x78>
 800a4de:	6560      	str	r0, [r4, #84]	; 0x54
 800a4e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4e2:	602f      	str	r7, [r5, #0]
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	d0cb      	beq.n	800a480 <__sflush_r+0x18>
 800a4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ec:	4299      	cmp	r1, r3
 800a4ee:	d002      	beq.n	800a4f6 <__sflush_r+0x8e>
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f7ff faa5 	bl	8009a40 <_free_r>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a4fa:	e7c2      	b.n	800a482 <__sflush_r+0x1a>
 800a4fc:	6a21      	ldr	r1, [r4, #32]
 800a4fe:	2301      	movs	r3, #1
 800a500:	4628      	mov	r0, r5
 800a502:	47b0      	blx	r6
 800a504:	1c41      	adds	r1, r0, #1
 800a506:	d1c7      	bne.n	800a498 <__sflush_r+0x30>
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0c4      	beq.n	800a498 <__sflush_r+0x30>
 800a50e:	2b1d      	cmp	r3, #29
 800a510:	d001      	beq.n	800a516 <__sflush_r+0xae>
 800a512:	2b16      	cmp	r3, #22
 800a514:	d101      	bne.n	800a51a <__sflush_r+0xb2>
 800a516:	602f      	str	r7, [r5, #0]
 800a518:	e7b2      	b.n	800a480 <__sflush_r+0x18>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	e7ae      	b.n	800a482 <__sflush_r+0x1a>
 800a524:	690f      	ldr	r7, [r1, #16]
 800a526:	2f00      	cmp	r7, #0
 800a528:	d0aa      	beq.n	800a480 <__sflush_r+0x18>
 800a52a:	0793      	lsls	r3, r2, #30
 800a52c:	bf18      	it	ne
 800a52e:	2300      	movne	r3, #0
 800a530:	680e      	ldr	r6, [r1, #0]
 800a532:	bf08      	it	eq
 800a534:	694b      	ldreq	r3, [r1, #20]
 800a536:	1bf6      	subs	r6, r6, r7
 800a538:	600f      	str	r7, [r1, #0]
 800a53a:	608b      	str	r3, [r1, #8]
 800a53c:	2e00      	cmp	r6, #0
 800a53e:	dd9f      	ble.n	800a480 <__sflush_r+0x18>
 800a540:	4633      	mov	r3, r6
 800a542:	463a      	mov	r2, r7
 800a544:	4628      	mov	r0, r5
 800a546:	6a21      	ldr	r1, [r4, #32]
 800a548:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a54c:	47e0      	blx	ip
 800a54e:	2800      	cmp	r0, #0
 800a550:	dc06      	bgt.n	800a560 <__sflush_r+0xf8>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f04f 30ff 	mov.w	r0, #4294967295
 800a558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	e790      	b.n	800a482 <__sflush_r+0x1a>
 800a560:	4407      	add	r7, r0
 800a562:	1a36      	subs	r6, r6, r0
 800a564:	e7ea      	b.n	800a53c <__sflush_r+0xd4>
 800a566:	bf00      	nop
 800a568:	20400001 	.word	0x20400001

0800a56c <_fflush_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	690b      	ldr	r3, [r1, #16]
 800a570:	4605      	mov	r5, r0
 800a572:	460c      	mov	r4, r1
 800a574:	b913      	cbnz	r3, 800a57c <_fflush_r+0x10>
 800a576:	2500      	movs	r5, #0
 800a578:	4628      	mov	r0, r5
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	b118      	cbz	r0, 800a586 <_fflush_r+0x1a>
 800a57e:	6983      	ldr	r3, [r0, #24]
 800a580:	b90b      	cbnz	r3, 800a586 <_fflush_r+0x1a>
 800a582:	f000 f887 	bl	800a694 <__sinit>
 800a586:	4b14      	ldr	r3, [pc, #80]	; (800a5d8 <_fflush_r+0x6c>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	d11b      	bne.n	800a5c4 <_fflush_r+0x58>
 800a58c:	686c      	ldr	r4, [r5, #4]
 800a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0ef      	beq.n	800a576 <_fflush_r+0xa>
 800a596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a598:	07d0      	lsls	r0, r2, #31
 800a59a:	d404      	bmi.n	800a5a6 <_fflush_r+0x3a>
 800a59c:	0599      	lsls	r1, r3, #22
 800a59e:	d402      	bmi.n	800a5a6 <_fflush_r+0x3a>
 800a5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a2:	f000 f915 	bl	800a7d0 <__retarget_lock_acquire_recursive>
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	f7ff ff5d 	bl	800a468 <__sflush_r>
 800a5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	07da      	lsls	r2, r3, #31
 800a5b4:	d4e0      	bmi.n	800a578 <_fflush_r+0xc>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	059b      	lsls	r3, r3, #22
 800a5ba:	d4dd      	bmi.n	800a578 <_fflush_r+0xc>
 800a5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5be:	f000 f908 	bl	800a7d2 <__retarget_lock_release_recursive>
 800a5c2:	e7d9      	b.n	800a578 <_fflush_r+0xc>
 800a5c4:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <_fflush_r+0x70>)
 800a5c6:	429c      	cmp	r4, r3
 800a5c8:	d101      	bne.n	800a5ce <_fflush_r+0x62>
 800a5ca:	68ac      	ldr	r4, [r5, #8]
 800a5cc:	e7df      	b.n	800a58e <_fflush_r+0x22>
 800a5ce:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <_fflush_r+0x74>)
 800a5d0:	429c      	cmp	r4, r3
 800a5d2:	bf08      	it	eq
 800a5d4:	68ec      	ldreq	r4, [r5, #12]
 800a5d6:	e7da      	b.n	800a58e <_fflush_r+0x22>
 800a5d8:	0800b394 	.word	0x0800b394
 800a5dc:	0800b3b4 	.word	0x0800b3b4
 800a5e0:	0800b374 	.word	0x0800b374

0800a5e4 <std>:
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	b510      	push	{r4, lr}
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5f2:	6083      	str	r3, [r0, #8]
 800a5f4:	8181      	strh	r1, [r0, #12]
 800a5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5f8:	81c2      	strh	r2, [r0, #14]
 800a5fa:	6183      	str	r3, [r0, #24]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	2208      	movs	r2, #8
 800a600:	305c      	adds	r0, #92	; 0x5c
 800a602:	f7fb fe1b 	bl	800623c <memset>
 800a606:	4b05      	ldr	r3, [pc, #20]	; (800a61c <std+0x38>)
 800a608:	6224      	str	r4, [r4, #32]
 800a60a:	6263      	str	r3, [r4, #36]	; 0x24
 800a60c:	4b04      	ldr	r3, [pc, #16]	; (800a620 <std+0x3c>)
 800a60e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a610:	4b04      	ldr	r3, [pc, #16]	; (800a624 <std+0x40>)
 800a612:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a614:	4b04      	ldr	r3, [pc, #16]	; (800a628 <std+0x44>)
 800a616:	6323      	str	r3, [r4, #48]	; 0x30
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	bf00      	nop
 800a61c:	0800a939 	.word	0x0800a939
 800a620:	0800a95b 	.word	0x0800a95b
 800a624:	0800a993 	.word	0x0800a993
 800a628:	0800a9b7 	.word	0x0800a9b7

0800a62c <_cleanup_r>:
 800a62c:	4901      	ldr	r1, [pc, #4]	; (800a634 <_cleanup_r+0x8>)
 800a62e:	f000 b8af 	b.w	800a790 <_fwalk_reent>
 800a632:	bf00      	nop
 800a634:	0800a56d 	.word	0x0800a56d

0800a638 <__sfmoreglue>:
 800a638:	2268      	movs	r2, #104	; 0x68
 800a63a:	b570      	push	{r4, r5, r6, lr}
 800a63c:	1e4d      	subs	r5, r1, #1
 800a63e:	4355      	muls	r5, r2
 800a640:	460e      	mov	r6, r1
 800a642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a646:	f7ff fa63 	bl	8009b10 <_malloc_r>
 800a64a:	4604      	mov	r4, r0
 800a64c:	b140      	cbz	r0, 800a660 <__sfmoreglue+0x28>
 800a64e:	2100      	movs	r1, #0
 800a650:	e9c0 1600 	strd	r1, r6, [r0]
 800a654:	300c      	adds	r0, #12
 800a656:	60a0      	str	r0, [r4, #8]
 800a658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a65c:	f7fb fdee 	bl	800623c <memset>
 800a660:	4620      	mov	r0, r4
 800a662:	bd70      	pop	{r4, r5, r6, pc}

0800a664 <__sfp_lock_acquire>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__sfp_lock_acquire+0x8>)
 800a666:	f000 b8b3 	b.w	800a7d0 <__retarget_lock_acquire_recursive>
 800a66a:	bf00      	nop
 800a66c:	20000505 	.word	0x20000505

0800a670 <__sfp_lock_release>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__sfp_lock_release+0x8>)
 800a672:	f000 b8ae 	b.w	800a7d2 <__retarget_lock_release_recursive>
 800a676:	bf00      	nop
 800a678:	20000505 	.word	0x20000505

0800a67c <__sinit_lock_acquire>:
 800a67c:	4801      	ldr	r0, [pc, #4]	; (800a684 <__sinit_lock_acquire+0x8>)
 800a67e:	f000 b8a7 	b.w	800a7d0 <__retarget_lock_acquire_recursive>
 800a682:	bf00      	nop
 800a684:	20000506 	.word	0x20000506

0800a688 <__sinit_lock_release>:
 800a688:	4801      	ldr	r0, [pc, #4]	; (800a690 <__sinit_lock_release+0x8>)
 800a68a:	f000 b8a2 	b.w	800a7d2 <__retarget_lock_release_recursive>
 800a68e:	bf00      	nop
 800a690:	20000506 	.word	0x20000506

0800a694 <__sinit>:
 800a694:	b510      	push	{r4, lr}
 800a696:	4604      	mov	r4, r0
 800a698:	f7ff fff0 	bl	800a67c <__sinit_lock_acquire>
 800a69c:	69a3      	ldr	r3, [r4, #24]
 800a69e:	b11b      	cbz	r3, 800a6a8 <__sinit+0x14>
 800a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a4:	f7ff bff0 	b.w	800a688 <__sinit_lock_release>
 800a6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6ac:	6523      	str	r3, [r4, #80]	; 0x50
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <__sinit+0x68>)
 800a6b0:	4a13      	ldr	r2, [pc, #76]	; (800a700 <__sinit+0x6c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6b6:	42a3      	cmp	r3, r4
 800a6b8:	bf08      	it	eq
 800a6ba:	2301      	moveq	r3, #1
 800a6bc:	4620      	mov	r0, r4
 800a6be:	bf08      	it	eq
 800a6c0:	61a3      	streq	r3, [r4, #24]
 800a6c2:	f000 f81f 	bl	800a704 <__sfp>
 800a6c6:	6060      	str	r0, [r4, #4]
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 f81b 	bl	800a704 <__sfp>
 800a6ce:	60a0      	str	r0, [r4, #8]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 f817 	bl	800a704 <__sfp>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2104      	movs	r1, #4
 800a6da:	60e0      	str	r0, [r4, #12]
 800a6dc:	6860      	ldr	r0, [r4, #4]
 800a6de:	f7ff ff81 	bl	800a5e4 <std>
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	2109      	movs	r1, #9
 800a6e6:	68a0      	ldr	r0, [r4, #8]
 800a6e8:	f7ff ff7c 	bl	800a5e4 <std>
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	2112      	movs	r1, #18
 800a6f0:	68e0      	ldr	r0, [r4, #12]
 800a6f2:	f7ff ff77 	bl	800a5e4 <std>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	61a3      	str	r3, [r4, #24]
 800a6fa:	e7d1      	b.n	800a6a0 <__sinit+0xc>
 800a6fc:	0800af2c 	.word	0x0800af2c
 800a700:	0800a62d 	.word	0x0800a62d

0800a704 <__sfp>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	4607      	mov	r7, r0
 800a708:	f7ff ffac 	bl	800a664 <__sfp_lock_acquire>
 800a70c:	4b1e      	ldr	r3, [pc, #120]	; (800a788 <__sfp+0x84>)
 800a70e:	681e      	ldr	r6, [r3, #0]
 800a710:	69b3      	ldr	r3, [r6, #24]
 800a712:	b913      	cbnz	r3, 800a71a <__sfp+0x16>
 800a714:	4630      	mov	r0, r6
 800a716:	f7ff ffbd 	bl	800a694 <__sinit>
 800a71a:	3648      	adds	r6, #72	; 0x48
 800a71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a720:	3b01      	subs	r3, #1
 800a722:	d503      	bpl.n	800a72c <__sfp+0x28>
 800a724:	6833      	ldr	r3, [r6, #0]
 800a726:	b30b      	cbz	r3, 800a76c <__sfp+0x68>
 800a728:	6836      	ldr	r6, [r6, #0]
 800a72a:	e7f7      	b.n	800a71c <__sfp+0x18>
 800a72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a730:	b9d5      	cbnz	r5, 800a768 <__sfp+0x64>
 800a732:	4b16      	ldr	r3, [pc, #88]	; (800a78c <__sfp+0x88>)
 800a734:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a738:	60e3      	str	r3, [r4, #12]
 800a73a:	6665      	str	r5, [r4, #100]	; 0x64
 800a73c:	f000 f847 	bl	800a7ce <__retarget_lock_init_recursive>
 800a740:	f7ff ff96 	bl	800a670 <__sfp_lock_release>
 800a744:	2208      	movs	r2, #8
 800a746:	4629      	mov	r1, r5
 800a748:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a74c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a750:	6025      	str	r5, [r4, #0]
 800a752:	61a5      	str	r5, [r4, #24]
 800a754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a758:	f7fb fd70 	bl	800623c <memset>
 800a75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a764:	4620      	mov	r0, r4
 800a766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a768:	3468      	adds	r4, #104	; 0x68
 800a76a:	e7d9      	b.n	800a720 <__sfp+0x1c>
 800a76c:	2104      	movs	r1, #4
 800a76e:	4638      	mov	r0, r7
 800a770:	f7ff ff62 	bl	800a638 <__sfmoreglue>
 800a774:	4604      	mov	r4, r0
 800a776:	6030      	str	r0, [r6, #0]
 800a778:	2800      	cmp	r0, #0
 800a77a:	d1d5      	bne.n	800a728 <__sfp+0x24>
 800a77c:	f7ff ff78 	bl	800a670 <__sfp_lock_release>
 800a780:	230c      	movs	r3, #12
 800a782:	603b      	str	r3, [r7, #0]
 800a784:	e7ee      	b.n	800a764 <__sfp+0x60>
 800a786:	bf00      	nop
 800a788:	0800af2c 	.word	0x0800af2c
 800a78c:	ffff0001 	.word	0xffff0001

0800a790 <_fwalk_reent>:
 800a790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a794:	4606      	mov	r6, r0
 800a796:	4688      	mov	r8, r1
 800a798:	2700      	movs	r7, #0
 800a79a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7a2:	f1b9 0901 	subs.w	r9, r9, #1
 800a7a6:	d505      	bpl.n	800a7b4 <_fwalk_reent+0x24>
 800a7a8:	6824      	ldr	r4, [r4, #0]
 800a7aa:	2c00      	cmp	r4, #0
 800a7ac:	d1f7      	bne.n	800a79e <_fwalk_reent+0xe>
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b4:	89ab      	ldrh	r3, [r5, #12]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d907      	bls.n	800a7ca <_fwalk_reent+0x3a>
 800a7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	d003      	beq.n	800a7ca <_fwalk_reent+0x3a>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	47c0      	blx	r8
 800a7c8:	4307      	orrs	r7, r0
 800a7ca:	3568      	adds	r5, #104	; 0x68
 800a7cc:	e7e9      	b.n	800a7a2 <_fwalk_reent+0x12>

0800a7ce <__retarget_lock_init_recursive>:
 800a7ce:	4770      	bx	lr

0800a7d0 <__retarget_lock_acquire_recursive>:
 800a7d0:	4770      	bx	lr

0800a7d2 <__retarget_lock_release_recursive>:
 800a7d2:	4770      	bx	lr

0800a7d4 <__swhatbuf_r>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	460e      	mov	r6, r1
 800a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7dc:	4614      	mov	r4, r2
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	461d      	mov	r5, r3
 800a7e2:	b096      	sub	sp, #88	; 0x58
 800a7e4:	da08      	bge.n	800a7f8 <__swhatbuf_r+0x24>
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	061a      	lsls	r2, r3, #24
 800a7f0:	d410      	bmi.n	800a814 <__swhatbuf_r+0x40>
 800a7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f6:	e00e      	b.n	800a816 <__swhatbuf_r+0x42>
 800a7f8:	466a      	mov	r2, sp
 800a7fa:	f000 f903 	bl	800aa04 <_fstat_r>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	dbf1      	blt.n	800a7e6 <__swhatbuf_r+0x12>
 800a802:	9a01      	ldr	r2, [sp, #4]
 800a804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a80c:	425a      	negs	r2, r3
 800a80e:	415a      	adcs	r2, r3
 800a810:	602a      	str	r2, [r5, #0]
 800a812:	e7ee      	b.n	800a7f2 <__swhatbuf_r+0x1e>
 800a814:	2340      	movs	r3, #64	; 0x40
 800a816:	2000      	movs	r0, #0
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	b016      	add	sp, #88	; 0x58
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a820 <__smakebuf_r>:
 800a820:	898b      	ldrh	r3, [r1, #12]
 800a822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a824:	079d      	lsls	r5, r3, #30
 800a826:	4606      	mov	r6, r0
 800a828:	460c      	mov	r4, r1
 800a82a:	d507      	bpl.n	800a83c <__smakebuf_r+0x1c>
 800a82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	2301      	movs	r3, #1
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	b002      	add	sp, #8
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	466a      	mov	r2, sp
 800a83e:	ab01      	add	r3, sp, #4
 800a840:	f7ff ffc8 	bl	800a7d4 <__swhatbuf_r>
 800a844:	9900      	ldr	r1, [sp, #0]
 800a846:	4605      	mov	r5, r0
 800a848:	4630      	mov	r0, r6
 800a84a:	f7ff f961 	bl	8009b10 <_malloc_r>
 800a84e:	b948      	cbnz	r0, 800a864 <__smakebuf_r+0x44>
 800a850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a854:	059a      	lsls	r2, r3, #22
 800a856:	d4ef      	bmi.n	800a838 <__smakebuf_r+0x18>
 800a858:	f023 0303 	bic.w	r3, r3, #3
 800a85c:	f043 0302 	orr.w	r3, r3, #2
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	e7e3      	b.n	800a82c <__smakebuf_r+0xc>
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <__smakebuf_r+0x7c>)
 800a866:	62b3      	str	r3, [r6, #40]	; 0x28
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	6120      	str	r0, [r4, #16]
 800a876:	6163      	str	r3, [r4, #20]
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	b15b      	cbz	r3, 800a894 <__smakebuf_r+0x74>
 800a87c:	4630      	mov	r0, r6
 800a87e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a882:	f000 f8d1 	bl	800aa28 <_isatty_r>
 800a886:	b128      	cbz	r0, 800a894 <__smakebuf_r+0x74>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f023 0303 	bic.w	r3, r3, #3
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	89a0      	ldrh	r0, [r4, #12]
 800a896:	4305      	orrs	r5, r0
 800a898:	81a5      	strh	r5, [r4, #12]
 800a89a:	e7cd      	b.n	800a838 <__smakebuf_r+0x18>
 800a89c:	0800a62d 	.word	0x0800a62d

0800a8a0 <_malloc_usable_size_r>:
 800a8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8a4:	1f18      	subs	r0, r3, #4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	bfbc      	itt	lt
 800a8aa:	580b      	ldrlt	r3, [r1, r0]
 800a8ac:	18c0      	addlt	r0, r0, r3
 800a8ae:	4770      	bx	lr

0800a8b0 <_raise_r>:
 800a8b0:	291f      	cmp	r1, #31
 800a8b2:	b538      	push	{r3, r4, r5, lr}
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	460d      	mov	r5, r1
 800a8b8:	d904      	bls.n	800a8c4 <_raise_r+0x14>
 800a8ba:	2316      	movs	r3, #22
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8c6:	b112      	cbz	r2, 800a8ce <_raise_r+0x1e>
 800a8c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8cc:	b94b      	cbnz	r3, 800a8e2 <_raise_r+0x32>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 f830 	bl	800a934 <_getpid_r>
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	4620      	mov	r0, r4
 800a8da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8de:	f000 b817 	b.w	800a910 <_kill_r>
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d00a      	beq.n	800a8fc <_raise_r+0x4c>
 800a8e6:	1c59      	adds	r1, r3, #1
 800a8e8:	d103      	bne.n	800a8f2 <_raise_r+0x42>
 800a8ea:	2316      	movs	r3, #22
 800a8ec:	6003      	str	r3, [r0, #0]
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	e7e7      	b.n	800a8c2 <_raise_r+0x12>
 800a8f2:	2400      	movs	r4, #0
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8fa:	4798      	blx	r3
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e7e0      	b.n	800a8c2 <_raise_r+0x12>

0800a900 <raise>:
 800a900:	4b02      	ldr	r3, [pc, #8]	; (800a90c <raise+0xc>)
 800a902:	4601      	mov	r1, r0
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	f7ff bfd3 	b.w	800a8b0 <_raise_r>
 800a90a:	bf00      	nop
 800a90c:	20000090 	.word	0x20000090

0800a910 <_kill_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	2300      	movs	r3, #0
 800a914:	4d06      	ldr	r5, [pc, #24]	; (800a930 <_kill_r+0x20>)
 800a916:	4604      	mov	r4, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	f7f7 f9ab 	bl	8001c78 <_kill>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	d102      	bne.n	800a92c <_kill_r+0x1c>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	b103      	cbz	r3, 800a92c <_kill_r+0x1c>
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
 800a92e:	bf00      	nop
 800a930:	20000500 	.word	0x20000500

0800a934 <_getpid_r>:
 800a934:	f7f7 b999 	b.w	8001c6a <_getpid>

0800a938 <__sread>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	f000 f894 	bl	800aa6c <_read_r>
 800a944:	2800      	cmp	r0, #0
 800a946:	bfab      	itete	ge
 800a948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a94a:	89a3      	ldrhlt	r3, [r4, #12]
 800a94c:	181b      	addge	r3, r3, r0
 800a94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a952:	bfac      	ite	ge
 800a954:	6563      	strge	r3, [r4, #84]	; 0x54
 800a956:	81a3      	strhlt	r3, [r4, #12]
 800a958:	bd10      	pop	{r4, pc}

0800a95a <__swrite>:
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	461f      	mov	r7, r3
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	4605      	mov	r5, r0
 800a964:	05db      	lsls	r3, r3, #23
 800a966:	460c      	mov	r4, r1
 800a968:	4616      	mov	r6, r2
 800a96a:	d505      	bpl.n	800a978 <__swrite+0x1e>
 800a96c:	2302      	movs	r3, #2
 800a96e:	2200      	movs	r2, #0
 800a970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a974:	f000 f868 	bl	800aa48 <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	4632      	mov	r2, r6
 800a97c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	4628      	mov	r0, r5
 800a984:	463b      	mov	r3, r7
 800a986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f000 b817 	b.w	800a9c0 <_write_r>

0800a992 <__sseek>:
 800a992:	b510      	push	{r4, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 f855 	bl	800aa48 <_lseek_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	bf15      	itete	ne
 800a9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ae:	81a3      	strheq	r3, [r4, #12]
 800a9b0:	bf18      	it	ne
 800a9b2:	81a3      	strhne	r3, [r4, #12]
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <__sclose>:
 800a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ba:	f000 b813 	b.w	800a9e4 <_close_r>
	...

0800a9c0 <_write_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4d05      	ldr	r5, [pc, #20]	; (800a9e0 <_write_r+0x20>)
 800a9cc:	602a      	str	r2, [r5, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f7f6 fd0a 	bl	80013e8 <_write>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_write_r+0x1e>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_write_r+0x1e>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20000500 	.word	0x20000500

0800a9e4 <_close_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4d05      	ldr	r5, [pc, #20]	; (800aa00 <_close_r+0x1c>)
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	602b      	str	r3, [r5, #0]
 800a9f0:	f7f7 f979 	bl	8001ce6 <_close>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_close_r+0x1a>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_close_r+0x1a>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	20000500 	.word	0x20000500

0800aa04 <_fstat_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	2300      	movs	r3, #0
 800aa08:	4d06      	ldr	r5, [pc, #24]	; (800aa24 <_fstat_r+0x20>)
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	f7f7 f973 	bl	8001cfc <_fstat>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	d102      	bne.n	800aa20 <_fstat_r+0x1c>
 800aa1a:	682b      	ldr	r3, [r5, #0]
 800aa1c:	b103      	cbz	r3, 800aa20 <_fstat_r+0x1c>
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	bf00      	nop
 800aa24:	20000500 	.word	0x20000500

0800aa28 <_isatty_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4d05      	ldr	r5, [pc, #20]	; (800aa44 <_isatty_r+0x1c>)
 800aa2e:	4604      	mov	r4, r0
 800aa30:	4608      	mov	r0, r1
 800aa32:	602b      	str	r3, [r5, #0]
 800aa34:	f7f7 f971 	bl	8001d1a <_isatty>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d102      	bne.n	800aa42 <_isatty_r+0x1a>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b103      	cbz	r3, 800aa42 <_isatty_r+0x1a>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	20000500 	.word	0x20000500

0800aa48 <_lseek_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	4611      	mov	r1, r2
 800aa50:	2200      	movs	r2, #0
 800aa52:	4d05      	ldr	r5, [pc, #20]	; (800aa68 <_lseek_r+0x20>)
 800aa54:	602a      	str	r2, [r5, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	f7f7 f969 	bl	8001d2e <_lseek>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_lseek_r+0x1e>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_lseek_r+0x1e>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	20000500 	.word	0x20000500

0800aa6c <_read_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4604      	mov	r4, r0
 800aa70:	4608      	mov	r0, r1
 800aa72:	4611      	mov	r1, r2
 800aa74:	2200      	movs	r2, #0
 800aa76:	4d05      	ldr	r5, [pc, #20]	; (800aa8c <_read_r+0x20>)
 800aa78:	602a      	str	r2, [r5, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f7f7 f916 	bl	8001cac <_read>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_read_r+0x1e>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_read_r+0x1e>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	20000500 	.word	0x20000500

0800aa90 <log10f>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4604      	mov	r4, r0
 800aa94:	f000 f824 	bl	800aae0 <__ieee754_log10f>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f7f6 fb37 	bl	8001110 <__aeabi_fcmpun>
 800aaa2:	b970      	cbnz	r0, 800aac2 <log10f+0x32>
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f7f6 fb14 	bl	80010d4 <__aeabi_fcmple>
 800aaac:	b148      	cbz	r0, 800aac2 <log10f+0x32>
 800aaae:	2100      	movs	r1, #0
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7f6 fafb 	bl	80010ac <__aeabi_fcmpeq>
 800aab6:	b130      	cbz	r0, 800aac6 <log10f+0x36>
 800aab8:	f7fb fb78 	bl	80061ac <__errno>
 800aabc:	2322      	movs	r3, #34	; 0x22
 800aabe:	4d06      	ldr	r5, [pc, #24]	; (800aad8 <log10f+0x48>)
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	4628      	mov	r0, r5
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
 800aac6:	f7fb fb71 	bl	80061ac <__errno>
 800aaca:	2321      	movs	r3, #33	; 0x21
 800aacc:	6003      	str	r3, [r0, #0]
 800aace:	4803      	ldr	r0, [pc, #12]	; (800aadc <log10f+0x4c>)
 800aad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aad4:	f7fc ba28 	b.w	8006f28 <nanf>
 800aad8:	ff800000 	.word	0xff800000
 800aadc:	0800b370 	.word	0x0800b370

0800aae0 <__ieee754_log10f>:
 800aae0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800aae4:	4601      	mov	r1, r0
 800aae6:	4603      	mov	r3, r0
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	d105      	bne.n	800aaf8 <__ieee754_log10f+0x18>
 800aaec:	2100      	movs	r1, #0
 800aaee:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800aaf2:	f7f6 f9fb 	bl	8000eec <__aeabi_fdiv>
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	da03      	bge.n	800ab04 <__ieee754_log10f+0x24>
 800aafc:	f7f6 f838 	bl	8000b70 <__aeabi_fsub>
 800ab00:	2100      	movs	r1, #0
 800ab02:	e7f6      	b.n	800aaf2 <__ieee754_log10f+0x12>
 800ab04:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ab08:	db02      	blt.n	800ab10 <__ieee754_log10f+0x30>
 800ab0a:	f7f6 f833 	bl	8000b74 <__addsf3>
 800ab0e:	e7f2      	b.n	800aaf6 <__ieee754_log10f+0x16>
 800ab10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800ab14:	da2d      	bge.n	800ab72 <__ieee754_log10f+0x92>
 800ab16:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800ab1a:	f7f6 f933 	bl	8000d84 <__aeabi_fmul>
 800ab1e:	f06f 0218 	mvn.w	r2, #24
 800ab22:	4603      	mov	r3, r0
 800ab24:	15d8      	asrs	r0, r3, #23
 800ab26:	387f      	subs	r0, #127	; 0x7f
 800ab28:	4410      	add	r0, r2
 800ab2a:	0fc6      	lsrs	r6, r0, #31
 800ab2c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800ab30:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800ab34:	f7f6 f8d2 	bl	8000cdc <__aeabi_i2f>
 800ab38:	4605      	mov	r5, r0
 800ab3a:	f1c6 007f 	rsb	r0, r6, #127	; 0x7f
 800ab3e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800ab42:	f000 f81f 	bl	800ab84 <__ieee754_logf>
 800ab46:	490c      	ldr	r1, [pc, #48]	; (800ab78 <__ieee754_log10f+0x98>)
 800ab48:	4606      	mov	r6, r0
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f7f6 f91a 	bl	8000d84 <__aeabi_fmul>
 800ab50:	490a      	ldr	r1, [pc, #40]	; (800ab7c <__ieee754_log10f+0x9c>)
 800ab52:	4604      	mov	r4, r0
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7f6 f915 	bl	8000d84 <__aeabi_fmul>
 800ab5a:	4601      	mov	r1, r0
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f7f6 f809 	bl	8000b74 <__addsf3>
 800ab62:	4907      	ldr	r1, [pc, #28]	; (800ab80 <__ieee754_log10f+0xa0>)
 800ab64:	4604      	mov	r4, r0
 800ab66:	4628      	mov	r0, r5
 800ab68:	f7f6 f90c 	bl	8000d84 <__aeabi_fmul>
 800ab6c:	4601      	mov	r1, r0
 800ab6e:	4620      	mov	r0, r4
 800ab70:	e7cb      	b.n	800ab0a <__ieee754_log10f+0x2a>
 800ab72:	2200      	movs	r2, #0
 800ab74:	e7d6      	b.n	800ab24 <__ieee754_log10f+0x44>
 800ab76:	bf00      	nop
 800ab78:	355427db 	.word	0x355427db
 800ab7c:	3ede5bd9 	.word	0x3ede5bd9
 800ab80:	3e9a2080 	.word	0x3e9a2080

0800ab84 <__ieee754_logf>:
 800ab84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800ab88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	4601      	mov	r1, r0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	d106      	bne.n	800aba0 <__ieee754_logf+0x1c>
 800ab92:	2100      	movs	r1, #0
 800ab94:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800ab98:	f7f6 f9a8 	bl	8000eec <__aeabi_fdiv>
 800ab9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba0:	2800      	cmp	r0, #0
 800aba2:	da03      	bge.n	800abac <__ieee754_logf+0x28>
 800aba4:	f7f5 ffe4 	bl	8000b70 <__aeabi_fsub>
 800aba8:	2100      	movs	r1, #0
 800abaa:	e7f5      	b.n	800ab98 <__ieee754_logf+0x14>
 800abac:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800abb0:	db02      	blt.n	800abb8 <__ieee754_logf+0x34>
 800abb2:	f7f5 ffdf 	bl	8000b74 <__addsf3>
 800abb6:	e7f1      	b.n	800ab9c <__ieee754_logf+0x18>
 800abb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800abbc:	da35      	bge.n	800ac2a <__ieee754_logf+0xa6>
 800abbe:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800abc2:	f7f6 f8df 	bl	8000d84 <__aeabi_fmul>
 800abc6:	f06f 0218 	mvn.w	r2, #24
 800abca:	4603      	mov	r3, r0
 800abcc:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800abd0:	15de      	asrs	r6, r3, #23
 800abd2:	4b71      	ldr	r3, [pc, #452]	; (800ad98 <__ieee754_logf+0x214>)
 800abd4:	3e7f      	subs	r6, #127	; 0x7f
 800abd6:	4423      	add	r3, r4
 800abd8:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 800abdc:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 800abe0:	4416      	add	r6, r2
 800abe2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800abe6:	4320      	orrs	r0, r4
 800abe8:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 800abec:	f7f5 ffc0 	bl	8000b70 <__aeabi_fsub>
 800abf0:	4b6a      	ldr	r3, [pc, #424]	; (800ad9c <__ieee754_logf+0x218>)
 800abf2:	f104 020f 	add.w	r2, r4, #15
 800abf6:	4013      	ands	r3, r2
 800abf8:	4605      	mov	r5, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d13a      	bne.n	800ac74 <__ieee754_logf+0xf0>
 800abfe:	2100      	movs	r1, #0
 800ac00:	f7f6 fa54 	bl	80010ac <__aeabi_fcmpeq>
 800ac04:	b198      	cbz	r0, 800ac2e <__ieee754_logf+0xaa>
 800ac06:	2e00      	cmp	r6, #0
 800ac08:	f000 80c4 	beq.w	800ad94 <__ieee754_logf+0x210>
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f7f6 f865 	bl	8000cdc <__aeabi_i2f>
 800ac12:	4963      	ldr	r1, [pc, #396]	; (800ada0 <__ieee754_logf+0x21c>)
 800ac14:	4605      	mov	r5, r0
 800ac16:	f7f6 f8b5 	bl	8000d84 <__aeabi_fmul>
 800ac1a:	4962      	ldr	r1, [pc, #392]	; (800ada4 <__ieee754_logf+0x220>)
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f7f6 f8b0 	bl	8000d84 <__aeabi_fmul>
 800ac24:	4601      	mov	r1, r0
 800ac26:	4620      	mov	r0, r4
 800ac28:	e7c3      	b.n	800abb2 <__ieee754_logf+0x2e>
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	e7ce      	b.n	800abcc <__ieee754_logf+0x48>
 800ac2e:	495e      	ldr	r1, [pc, #376]	; (800ada8 <__ieee754_logf+0x224>)
 800ac30:	4628      	mov	r0, r5
 800ac32:	f7f6 f8a7 	bl	8000d84 <__aeabi_fmul>
 800ac36:	4601      	mov	r1, r0
 800ac38:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800ac3c:	f7f5 ff98 	bl	8000b70 <__aeabi_fsub>
 800ac40:	4629      	mov	r1, r5
 800ac42:	4604      	mov	r4, r0
 800ac44:	4628      	mov	r0, r5
 800ac46:	f7f6 f89d 	bl	8000d84 <__aeabi_fmul>
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f7f6 f899 	bl	8000d84 <__aeabi_fmul>
 800ac52:	4604      	mov	r4, r0
 800ac54:	b90e      	cbnz	r6, 800ac5a <__ieee754_logf+0xd6>
 800ac56:	4621      	mov	r1, r4
 800ac58:	e06f      	b.n	800ad3a <__ieee754_logf+0x1b6>
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7f6 f83e 	bl	8000cdc <__aeabi_i2f>
 800ac60:	494f      	ldr	r1, [pc, #316]	; (800ada0 <__ieee754_logf+0x21c>)
 800ac62:	4607      	mov	r7, r0
 800ac64:	f7f6 f88e 	bl	8000d84 <__aeabi_fmul>
 800ac68:	4606      	mov	r6, r0
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	494d      	ldr	r1, [pc, #308]	; (800ada4 <__ieee754_logf+0x220>)
 800ac6e:	f7f6 f889 	bl	8000d84 <__aeabi_fmul>
 800ac72:	e072      	b.n	800ad5a <__ieee754_logf+0x1d6>
 800ac74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ac78:	f7f5 ff7c 	bl	8000b74 <__addsf3>
 800ac7c:	4601      	mov	r1, r0
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f7f6 f934 	bl	8000eec <__aeabi_fdiv>
 800ac84:	4681      	mov	r9, r0
 800ac86:	4630      	mov	r0, r6
 800ac88:	f7f6 f828 	bl	8000cdc <__aeabi_i2f>
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	4680      	mov	r8, r0
 800ac90:	4648      	mov	r0, r9
 800ac92:	f7f6 f877 	bl	8000d84 <__aeabi_fmul>
 800ac96:	4601      	mov	r1, r0
 800ac98:	4683      	mov	fp, r0
 800ac9a:	f7f6 f873 	bl	8000d84 <__aeabi_fmul>
 800ac9e:	4607      	mov	r7, r0
 800aca0:	4942      	ldr	r1, [pc, #264]	; (800adac <__ieee754_logf+0x228>)
 800aca2:	f7f6 f86f 	bl	8000d84 <__aeabi_fmul>
 800aca6:	4942      	ldr	r1, [pc, #264]	; (800adb0 <__ieee754_logf+0x22c>)
 800aca8:	f7f5 ff64 	bl	8000b74 <__addsf3>
 800acac:	4639      	mov	r1, r7
 800acae:	f7f6 f869 	bl	8000d84 <__aeabi_fmul>
 800acb2:	4940      	ldr	r1, [pc, #256]	; (800adb4 <__ieee754_logf+0x230>)
 800acb4:	f7f5 ff5e 	bl	8000b74 <__addsf3>
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f6 f863 	bl	8000d84 <__aeabi_fmul>
 800acbe:	493e      	ldr	r1, [pc, #248]	; (800adb8 <__ieee754_logf+0x234>)
 800acc0:	f7f5 ff58 	bl	8000b74 <__addsf3>
 800acc4:	4659      	mov	r1, fp
 800acc6:	f7f6 f85d 	bl	8000d84 <__aeabi_fmul>
 800acca:	493c      	ldr	r1, [pc, #240]	; (800adbc <__ieee754_logf+0x238>)
 800accc:	4683      	mov	fp, r0
 800acce:	4638      	mov	r0, r7
 800acd0:	f7f6 f858 	bl	8000d84 <__aeabi_fmul>
 800acd4:	493a      	ldr	r1, [pc, #232]	; (800adc0 <__ieee754_logf+0x23c>)
 800acd6:	f7f5 ff4d 	bl	8000b74 <__addsf3>
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f6 f852 	bl	8000d84 <__aeabi_fmul>
 800ace0:	4938      	ldr	r1, [pc, #224]	; (800adc4 <__ieee754_logf+0x240>)
 800ace2:	f7f5 ff47 	bl	8000b74 <__addsf3>
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f6 f84c 	bl	8000d84 <__aeabi_fmul>
 800acec:	4601      	mov	r1, r0
 800acee:	4658      	mov	r0, fp
 800acf0:	f7f5 ff40 	bl	8000b74 <__addsf3>
 800acf4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800adc8 <__ieee754_logf+0x244>
 800acf8:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 800acfc:	44a2      	add	sl, r4
 800acfe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ad02:	ea43 030a 	orr.w	r3, r3, sl
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	4607      	mov	r7, r0
 800ad0a:	dd30      	ble.n	800ad6e <__ieee754_logf+0x1ea>
 800ad0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ad10:	4628      	mov	r0, r5
 800ad12:	f7f6 f837 	bl	8000d84 <__aeabi_fmul>
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f6 f834 	bl	8000d84 <__aeabi_fmul>
 800ad1c:	4601      	mov	r1, r0
 800ad1e:	4604      	mov	r4, r0
 800ad20:	4638      	mov	r0, r7
 800ad22:	f7f5 ff27 	bl	8000b74 <__addsf3>
 800ad26:	4649      	mov	r1, r9
 800ad28:	f7f6 f82c 	bl	8000d84 <__aeabi_fmul>
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	b946      	cbnz	r6, 800ad42 <__ieee754_logf+0x1be>
 800ad30:	4601      	mov	r1, r0
 800ad32:	4620      	mov	r0, r4
 800ad34:	f7f5 ff1c 	bl	8000b70 <__aeabi_fsub>
 800ad38:	4601      	mov	r1, r0
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f7f5 ff18 	bl	8000b70 <__aeabi_fsub>
 800ad40:	e72c      	b.n	800ab9c <__ieee754_logf+0x18>
 800ad42:	4917      	ldr	r1, [pc, #92]	; (800ada0 <__ieee754_logf+0x21c>)
 800ad44:	4640      	mov	r0, r8
 800ad46:	f7f6 f81d 	bl	8000d84 <__aeabi_fmul>
 800ad4a:	4916      	ldr	r1, [pc, #88]	; (800ada4 <__ieee754_logf+0x220>)
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	4640      	mov	r0, r8
 800ad50:	f7f6 f818 	bl	8000d84 <__aeabi_fmul>
 800ad54:	4639      	mov	r1, r7
 800ad56:	f7f5 ff0d 	bl	8000b74 <__addsf3>
 800ad5a:	4601      	mov	r1, r0
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f7f5 ff07 	bl	8000b70 <__aeabi_fsub>
 800ad62:	4629      	mov	r1, r5
 800ad64:	f7f5 ff04 	bl	8000b70 <__aeabi_fsub>
 800ad68:	4601      	mov	r1, r0
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	e7e6      	b.n	800ad3c <__ieee754_logf+0x1b8>
 800ad6e:	4601      	mov	r1, r0
 800ad70:	4628      	mov	r0, r5
 800ad72:	f7f5 fefd 	bl	8000b70 <__aeabi_fsub>
 800ad76:	4649      	mov	r1, r9
 800ad78:	f7f6 f804 	bl	8000d84 <__aeabi_fmul>
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	f43f af69 	beq.w	800ac56 <__ieee754_logf+0xd2>
 800ad84:	4906      	ldr	r1, [pc, #24]	; (800ada0 <__ieee754_logf+0x21c>)
 800ad86:	4640      	mov	r0, r8
 800ad88:	f7f5 fffc 	bl	8000d84 <__aeabi_fmul>
 800ad8c:	4905      	ldr	r1, [pc, #20]	; (800ada4 <__ieee754_logf+0x220>)
 800ad8e:	4606      	mov	r6, r0
 800ad90:	4640      	mov	r0, r8
 800ad92:	e76c      	b.n	800ac6e <__ieee754_logf+0xea>
 800ad94:	2000      	movs	r0, #0
 800ad96:	e701      	b.n	800ab9c <__ieee754_logf+0x18>
 800ad98:	004afb20 	.word	0x004afb20
 800ad9c:	007ffff0 	.word	0x007ffff0
 800ada0:	3f317180 	.word	0x3f317180
 800ada4:	3717f7d1 	.word	0x3717f7d1
 800ada8:	3eaaaaab 	.word	0x3eaaaaab
 800adac:	3e178897 	.word	0x3e178897
 800adb0:	3e3a3325 	.word	0x3e3a3325
 800adb4:	3e924925 	.word	0x3e924925
 800adb8:	3f2aaaab 	.word	0x3f2aaaab
 800adbc:	3e1cd04f 	.word	0x3e1cd04f
 800adc0:	3e638e29 	.word	0x3e638e29
 800adc4:	3ecccccd 	.word	0x3ecccccd
 800adc8:	ffcf5c30 	.word	0xffcf5c30

0800adcc <_init>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	bf00      	nop
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr

0800add8 <_fini>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr
